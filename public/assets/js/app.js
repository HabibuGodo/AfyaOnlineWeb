/*! For license information please see app.js.LICENSE.txt */ ! function(t) {
    var e = {};

    function n(r) { if (e[r]) return e[r].exports; var i = e[r] = { i: r, l: !1, exports: {} }; return t[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports }
    n.m = t, n.c = e, n.d = function(t, e, r) { n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: r }) }, n.r = function(t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, n.t = function(t, e) {
        if (1 & e && (t = n(t)), 8 & e) return t;
        if (4 & e && "object" == typeof t && t && t.__esModule) return t;
        var r = Object.create(null);
        if (n.r(r), Object.defineProperty(r, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t)
            for (var i in t) n.d(r, i, function(e) { return t[e] }.bind(null, i));
        return r
    }, n.n = function(t) { var e = t && t.__esModule ? function() { return t.default } : function() { return t }; return n.d(e, "a", e), e }, n.o = function(t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, n.p = "/", n(n.s = 0)
}({
    0: function(t, e, n) { n("JO1w"), n("ulXM"), t.exports = n("ByQF") },
    "2SVd": function(t, e, n) {
        "use strict";
        t.exports = function(t) { return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t) }
    },
    "5oMp": function(t, e, n) {
        "use strict";
        t.exports = function(t, e) { return e ? t.replace(/\/+$/, "") + "/" + e.replace(/^\/+/, "") : t }
    },
    "8Iik": function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn"), n("Qwlt")], void 0 === (o = "function" == typeof(r = function(t) {
                return t.fn.scrollParent = function(e) {
                    var n = this.css("position"),
                        r = "absolute" === n,
                        i = e ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                        o = this.parents().filter((function() { var e = t(this); return (!r || "static" !== e.css("position")) && i.test(e.css("overflow") + e.css("overflow-y") + e.css("overflow-x")) })).eq(0);
                    return "fixed" !== n && o.length ? o : t(this[0].ownerDocument || document)
                }
            }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    "8L3F": function(t, e, n) {
        "use strict";
        n.r(e),
            function(t) {
                var n = "undefined" != typeof window && "undefined" != typeof document && "undefined" != typeof navigator,
                    r = function() {
                        for (var t = ["Edge", "Trident", "Firefox"], e = 0; e < t.length; e += 1)
                            if (n && navigator.userAgent.indexOf(t[e]) >= 0) return 1;
                        return 0
                    }();
                var i = n && window.Promise ? function(t) { var e = !1; return function() { e || (e = !0, window.Promise.resolve().then((function() { e = !1, t() }))) } } : function(t) { var e = !1; return function() { e || (e = !0, setTimeout((function() { e = !1, t() }), r)) } };

                function o(t) { return t && "[object Function]" === {}.toString.call(t) }

                function a(t, e) { if (1 !== t.nodeType) return []; var n = t.ownerDocument.defaultView.getComputedStyle(t, null); return e ? n[e] : n }

                function s(t) { return "HTML" === t.nodeName ? t : t.parentNode || t.host }

                function u(t) {
                    if (!t) return document.body;
                    switch (t.nodeName) {
                        case "HTML":
                        case "BODY":
                            return t.ownerDocument.body;
                        case "#document":
                            return t.body
                    }
                    var e = a(t),
                        n = e.overflow,
                        r = e.overflowX,
                        i = e.overflowY;
                    return /(auto|scroll|overlay)/.test(n + i + r) ? t : u(s(t))
                }

                function l(t) { return t && t.referenceNode ? t.referenceNode : t }
                var c = n && !(!window.MSInputMethodContext || !document.documentMode),
                    f = n && /MSIE 10/.test(navigator.userAgent);

                function h(t) { return 11 === t ? c : 10 === t ? f : c || f }

                function d(t) { if (!t) return document.documentElement; for (var e = h(10) ? document.body : null, n = t.offsetParent || null; n === e && t.nextElementSibling;) n = (t = t.nextElementSibling).offsetParent; var r = n && n.nodeName; return r && "BODY" !== r && "HTML" !== r ? -1 !== ["TH", "TD", "TABLE"].indexOf(n.nodeName) && "static" === a(n, "position") ? d(n) : n : t ? t.ownerDocument.documentElement : document.documentElement }

                function p(t) { return null !== t.parentNode ? p(t.parentNode) : t }

                function v(t, e) {
                    if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;
                    var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,
                        r = n ? t : e,
                        i = n ? e : t,
                        o = document.createRange();
                    o.setStart(r, 0), o.setEnd(i, 0);
                    var a, s, u = o.commonAncestorContainer;
                    if (t !== u && e !== u || r.contains(i)) return "BODY" === (s = (a = u).nodeName) || "HTML" !== s && d(a.firstElementChild) !== a ? d(u) : u;
                    var l = p(t);
                    return l.host ? v(l.host, e) : v(t, p(e).host)
                }

                function g(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "top",
                        n = "top" === e ? "scrollTop" : "scrollLeft",
                        r = t.nodeName;
                    if ("BODY" === r || "HTML" === r) {
                        var i = t.ownerDocument.documentElement,
                            o = t.ownerDocument.scrollingElement || i;
                        return o[n]
                    }
                    return t[n]
                }

                function m(t, e) {
                    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        r = g(e, "top"),
                        i = g(e, "left"),
                        o = n ? -1 : 1;
                    return t.top += r * o, t.bottom += r * o, t.left += i * o, t.right += i * o, t
                }

                function y(t, e) {
                    var n = "x" === e ? "Left" : "Top",
                        r = "Left" === n ? "Right" : "Bottom";
                    return parseFloat(t["border" + n + "Width"]) + parseFloat(t["border" + r + "Width"])
                }

                function b(t, e, n, r) { return Math.max(e["offset" + t], e["scroll" + t], n["client" + t], n["offset" + t], n["scroll" + t], h(10) ? parseInt(n["offset" + t]) + parseInt(r["margin" + ("Height" === t ? "Top" : "Left")]) + parseInt(r["margin" + ("Height" === t ? "Bottom" : "Right")]) : 0) }

                function _(t) {
                    var e = t.body,
                        n = t.documentElement,
                        r = h(10) && getComputedStyle(n);
                    return { height: b("Height", e, n, r), width: b("Width", e, n, r) }
                }
                var w = function(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") },
                    x = function() {
                        function t(t, e) {
                            for (var n = 0; n < e.length; n++) {
                                var r = e[n];
                                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
                            }
                        }
                        return function(e, n, r) { return n && t(e.prototype, n), r && t(e, r), e }
                    }(),
                    E = function(t, e, n) { return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t },
                    T = Object.assign || function(t) { for (var e = 1; e < arguments.length; e++) { var n = arguments[e]; for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]) } return t };

                function C(t) { return T({}, t, { right: t.left + t.width, bottom: t.top + t.height }) }

                function S(t) {
                    var e = {};
                    try {
                        if (h(10)) {
                            e = t.getBoundingClientRect();
                            var n = g(t, "top"),
                                r = g(t, "left");
                            e.top += n, e.left += r, e.bottom += n, e.right += r
                        } else e = t.getBoundingClientRect()
                    } catch (t) {}
                    var i = { left: e.left, top: e.top, width: e.right - e.left, height: e.bottom - e.top },
                        o = "HTML" === t.nodeName ? _(t.ownerDocument) : {},
                        s = o.width || t.clientWidth || i.width,
                        u = o.height || t.clientHeight || i.height,
                        l = t.offsetWidth - s,
                        c = t.offsetHeight - u;
                    if (l || c) {
                        var f = a(t);
                        l -= y(f, "x"), c -= y(f, "y"), i.width -= l, i.height -= c
                    }
                    return C(i)
                }

                function k(t, e) {
                    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        r = h(10),
                        i = "HTML" === e.nodeName,
                        o = S(t),
                        s = S(e),
                        l = u(t),
                        c = a(e),
                        f = parseFloat(c.borderTopWidth),
                        d = parseFloat(c.borderLeftWidth);
                    n && i && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));
                    var p = C({ top: o.top - s.top - f, left: o.left - s.left - d, width: o.width, height: o.height });
                    if (p.marginTop = 0, p.marginLeft = 0, !r && i) {
                        var v = parseFloat(c.marginTop),
                            g = parseFloat(c.marginLeft);
                        p.top -= f - v, p.bottom -= f - v, p.left -= d - g, p.right -= d - g, p.marginTop = v, p.marginLeft = g
                    }
                    return (r && !n ? e.contains(l) : e === l && "BODY" !== l.nodeName) && (p = m(p, e)), p
                }

                function A(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = t.ownerDocument.documentElement,
                        r = k(t, n),
                        i = Math.max(n.clientWidth, window.innerWidth || 0),
                        o = Math.max(n.clientHeight, window.innerHeight || 0),
                        a = e ? 0 : g(n),
                        s = e ? 0 : g(n, "left"),
                        u = { top: a - r.top + r.marginTop, left: s - r.left + r.marginLeft, width: i, height: o };
                    return C(u)
                }

                function I(t) { var e = t.nodeName; if ("BODY" === e || "HTML" === e) return !1; if ("fixed" === a(t, "position")) return !0; var n = s(t); return !!n && I(n) }

                function O(t) { if (!t || !t.parentElement || h()) return document.documentElement; for (var e = t.parentElement; e && "none" === a(e, "transform");) e = e.parentElement; return e || document.documentElement }

                function N(t, e, n, r) {
                    var i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
                        o = { top: 0, left: 0 },
                        a = i ? O(t) : v(t, l(e));
                    if ("viewport" === r) o = A(a, i);
                    else {
                        var c = void 0;
                        "scrollParent" === r ? "BODY" === (c = u(s(e))).nodeName && (c = t.ownerDocument.documentElement) : c = "window" === r ? t.ownerDocument.documentElement : r;
                        var f = k(c, a, i);
                        if ("HTML" !== c.nodeName || I(a)) o = f;
                        else {
                            var h = _(t.ownerDocument),
                                d = h.height,
                                p = h.width;
                            o.top += f.top - f.marginTop, o.bottom = d + f.top, o.left += f.left - f.marginLeft, o.right = p + f.left
                        }
                    }
                    var g = "number" == typeof(n = n || 0);
                    return o.left += g ? n : n.left || 0, o.top += g ? n : n.top || 0, o.right -= g ? n : n.right || 0, o.bottom -= g ? n : n.bottom || 0, o
                }

                function D(t) { return t.width * t.height }

                function L(t, e, n, r, i) {
                    var o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
                    if (-1 === t.indexOf("auto")) return t;
                    var a = N(n, r, o, i),
                        s = { top: { width: a.width, height: e.top - a.top }, right: { width: a.right - e.right, height: a.height }, bottom: { width: a.width, height: a.bottom - e.bottom }, left: { width: e.left - a.left, height: a.height } },
                        u = Object.keys(s).map((function(t) { return T({ key: t }, s[t], { area: D(s[t]) }) })).sort((function(t, e) { return e.area - t.area })),
                        l = u.filter((function(t) {
                            var e = t.width,
                                r = t.height;
                            return e >= n.clientWidth && r >= n.clientHeight
                        })),
                        c = l.length > 0 ? l[0].key : u[0].key,
                        f = t.split("-")[1];
                    return c + (f ? "-" + f : "")
                }

                function j(t, e, n) {
                    var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                        i = r ? O(e) : v(e, l(n));
                    return k(n, i, r)
                }

                function P(t) {
                    var e = t.ownerDocument.defaultView.getComputedStyle(t),
                        n = parseFloat(e.marginTop || 0) + parseFloat(e.marginBottom || 0),
                        r = parseFloat(e.marginLeft || 0) + parseFloat(e.marginRight || 0);
                    return { width: t.offsetWidth + r, height: t.offsetHeight + n }
                }

                function R(t) { var e = { left: "right", right: "left", bottom: "top", top: "bottom" }; return t.replace(/left|right|bottom|top/g, (function(t) { return e[t] })) }

                function F(t, e, n) {
                    n = n.split("-")[0];
                    var r = P(t),
                        i = { width: r.width, height: r.height },
                        o = -1 !== ["right", "left"].indexOf(n),
                        a = o ? "top" : "left",
                        s = o ? "left" : "top",
                        u = o ? "height" : "width",
                        l = o ? "width" : "height";
                    return i[a] = e[a] + e[u] / 2 - r[u] / 2, i[s] = n === s ? e[s] - r[l] : e[R(s)], i
                }

                function M(t, e) { return Array.prototype.find ? t.find(e) : t.filter(e)[0] }

                function U(t, e, n) {
                    return (void 0 === n ? t : t.slice(0, function(t, e, n) { if (Array.prototype.findIndex) return t.findIndex((function(t) { return t[e] === n })); var r = M(t, (function(t) { return t[e] === n })); return t.indexOf(r) }(t, "name", n))).forEach((function(t) {
                        t.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
                        var n = t.function || t.fn;
                        t.enabled && o(n) && (e.offsets.popper = C(e.offsets.popper), e.offsets.reference = C(e.offsets.reference), e = n(e, t))
                    })), e
                }

                function q() {
                    if (!this.state.isDestroyed) {
                        var t = { instance: this, styles: {}, arrowStyles: {}, attributes: {}, flipped: !1, offsets: {} };
                        t.offsets.reference = j(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = L(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = F(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", t = U(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t))
                    }
                }

                function B(t, e) { return t.some((function(t) { var n = t.name; return t.enabled && n === e })) }

                function H(t) {
                    for (var e = [!1, "ms", "Webkit", "Moz", "O"], n = t.charAt(0).toUpperCase() + t.slice(1), r = 0; r < e.length; r++) {
                        var i = e[r],
                            o = i ? "" + i + n : t;
                        if (void 0 !== document.body.style[o]) return o
                    }
                    return null
                }

                function z() { return this.state.isDestroyed = !0, B(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[H("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this }

                function W(t) { var e = t.ownerDocument; return e ? e.defaultView : window }

                function Q(t, e, n, r) {
                    n.updateBound = r, W(t).addEventListener("resize", n.updateBound, { passive: !0 });
                    var i = u(t);
                    return function t(e, n, r, i) {
                        var o = "BODY" === e.nodeName,
                            a = o ? e.ownerDocument.defaultView : e;
                        a.addEventListener(n, r, { passive: !0 }), o || t(u(a.parentNode), n, r, i), i.push(a)
                    }(i, "scroll", n.updateBound, n.scrollParents), n.scrollElement = i, n.eventsEnabled = !0, n
                }

                function $() { this.state.eventsEnabled || (this.state = Q(this.reference, this.options, this.state, this.scheduleUpdate)) }

                function V() {
                    var t, e;
                    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, W(t).removeEventListener("resize", e.updateBound), e.scrollParents.forEach((function(t) { t.removeEventListener("scroll", e.updateBound) })), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e))
                }

                function Y(t) { return "" !== t && !isNaN(parseFloat(t)) && isFinite(t) }

                function X(t, e) { Object.keys(e).forEach((function(n) { var r = ""; - 1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(n) && Y(e[n]) && (r = "px"), t.style[n] = e[n] + r })) }
                var G = n && /Firefox/i.test(navigator.userAgent);

                function K(t, e, n) {
                    var r = M(t, (function(t) { return t.name === e })),
                        i = !!r && t.some((function(t) { return t.name === n && t.enabled && t.order < r.order }));
                    if (!i) {
                        var o = "`" + e + "`",
                            a = "`" + n + "`";
                        console.warn(a + " modifier is required by " + o + " modifier in order to work, be sure to include it before " + o + "!")
                    }
                    return i
                }
                var J = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
                    Z = J.slice(3);

                function tt(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = Z.indexOf(t),
                        r = Z.slice(n + 1).concat(Z.slice(0, n));
                    return e ? r.reverse() : r
                }
                var et = "flip",
                    nt = "clockwise",
                    rt = "counterclockwise";

                function it(t, e, n, r) {
                    var i = [0, 0],
                        o = -1 !== ["right", "left"].indexOf(r),
                        a = t.split(/(\+|\-)/).map((function(t) { return t.trim() })),
                        s = a.indexOf(M(a, (function(t) { return -1 !== t.search(/,|\s/) })));
                    a[s] && -1 === a[s].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
                    var u = /\s*,\s*|\s+/,
                        l = -1 !== s ? [a.slice(0, s).concat([a[s].split(u)[0]]), [a[s].split(u)[1]].concat(a.slice(s + 1))] : [a];
                    return (l = l.map((function(t, r) {
                        var i = (1 === r ? !o : o) ? "height" : "width",
                            a = !1;
                        return t.reduce((function(t, e) { return "" === t[t.length - 1] && -1 !== ["+", "-"].indexOf(e) ? (t[t.length - 1] = e, a = !0, t) : a ? (t[t.length - 1] += e, a = !1, t) : t.concat(e) }), []).map((function(t) {
                            return function(t, e, n, r) {
                                var i = t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
                                    o = +i[1],
                                    a = i[2];
                                if (!o) return t;
                                if (0 === a.indexOf("%")) {
                                    var s = void 0;
                                    switch (a) {
                                        case "%p":
                                            s = n;
                                            break;
                                        case "%":
                                        case "%r":
                                        default:
                                            s = r
                                    }
                                    return C(s)[e] / 100 * o
                                }
                                if ("vh" === a || "vw" === a) { return ("vh" === a ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o }
                                return o
                            }(t, i, e, n)
                        }))
                    }))).forEach((function(t, e) { t.forEach((function(n, r) { Y(n) && (i[e] += n * ("-" === t[r - 1] ? -1 : 1)) })) })), i
                }
                var ot = {
                        placement: "bottom",
                        positionFixed: !1,
                        eventsEnabled: !0,
                        removeOnDestroy: !1,
                        onCreate: function() {},
                        onUpdate: function() {},
                        modifiers: {
                            shift: {
                                order: 100,
                                enabled: !0,
                                fn: function(t) {
                                    var e = t.placement,
                                        n = e.split("-")[0],
                                        r = e.split("-")[1];
                                    if (r) {
                                        var i = t.offsets,
                                            o = i.reference,
                                            a = i.popper,
                                            s = -1 !== ["bottom", "top"].indexOf(n),
                                            u = s ? "left" : "top",
                                            l = s ? "width" : "height",
                                            c = { start: E({}, u, o[u]), end: E({}, u, o[u] + o[l] - a[l]) };
                                        t.offsets.popper = T({}, a, c[r])
                                    }
                                    return t
                                }
                            },
                            offset: {
                                order: 200,
                                enabled: !0,
                                fn: function(t, e) {
                                    var n = e.offset,
                                        r = t.placement,
                                        i = t.offsets,
                                        o = i.popper,
                                        a = i.reference,
                                        s = r.split("-")[0],
                                        u = void 0;
                                    return u = Y(+n) ? [+n, 0] : it(n, o, a, s), "left" === s ? (o.top += u[0], o.left -= u[1]) : "right" === s ? (o.top += u[0], o.left += u[1]) : "top" === s ? (o.left += u[0], o.top -= u[1]) : "bottom" === s && (o.left += u[0], o.top += u[1]), t.popper = o, t
                                },
                                offset: 0
                            },
                            preventOverflow: {
                                order: 300,
                                enabled: !0,
                                fn: function(t, e) {
                                    var n = e.boundariesElement || d(t.instance.popper);
                                    t.instance.reference === n && (n = d(n));
                                    var r = H("transform"),
                                        i = t.instance.popper.style,
                                        o = i.top,
                                        a = i.left,
                                        s = i[r];
                                    i.top = "", i.left = "", i[r] = "";
                                    var u = N(t.instance.popper, t.instance.reference, e.padding, n, t.positionFixed);
                                    i.top = o, i.left = a, i[r] = s, e.boundaries = u;
                                    var l = e.priority,
                                        c = t.offsets.popper,
                                        f = {
                                            primary: function(t) { var n = c[t]; return c[t] < u[t] && !e.escapeWithReference && (n = Math.max(c[t], u[t])), E({}, t, n) },
                                            secondary: function(t) {
                                                var n = "right" === t ? "left" : "top",
                                                    r = c[n];
                                                return c[t] > u[t] && !e.escapeWithReference && (r = Math.min(c[n], u[t] - ("right" === t ? c.width : c.height))), E({}, n, r)
                                            }
                                        };
                                    return l.forEach((function(t) {
                                        var e = -1 !== ["left", "top"].indexOf(t) ? "primary" : "secondary";
                                        c = T({}, c, f[e](t))
                                    })), t.offsets.popper = c, t
                                },
                                priority: ["left", "right", "top", "bottom"],
                                padding: 5,
                                boundariesElement: "scrollParent"
                            },
                            keepTogether: {
                                order: 400,
                                enabled: !0,
                                fn: function(t) {
                                    var e = t.offsets,
                                        n = e.popper,
                                        r = e.reference,
                                        i = t.placement.split("-")[0],
                                        o = Math.floor,
                                        a = -1 !== ["top", "bottom"].indexOf(i),
                                        s = a ? "right" : "bottom",
                                        u = a ? "left" : "top",
                                        l = a ? "width" : "height";
                                    return n[s] < o(r[u]) && (t.offsets.popper[u] = o(r[u]) - n[l]), n[u] > o(r[s]) && (t.offsets.popper[u] = o(r[s])), t
                                }
                            },
                            arrow: {
                                order: 500,
                                enabled: !0,
                                fn: function(t, e) {
                                    var n;
                                    if (!K(t.instance.modifiers, "arrow", "keepTogether")) return t;
                                    var r = e.element;
                                    if ("string" == typeof r) { if (!(r = t.instance.popper.querySelector(r))) return t } else if (!t.instance.popper.contains(r)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), t;
                                    var i = t.placement.split("-")[0],
                                        o = t.offsets,
                                        s = o.popper,
                                        u = o.reference,
                                        l = -1 !== ["left", "right"].indexOf(i),
                                        c = l ? "height" : "width",
                                        f = l ? "Top" : "Left",
                                        h = f.toLowerCase(),
                                        d = l ? "left" : "top",
                                        p = l ? "bottom" : "right",
                                        v = P(r)[c];
                                    u[p] - v < s[h] && (t.offsets.popper[h] -= s[h] - (u[p] - v)), u[h] + v > s[p] && (t.offsets.popper[h] += u[h] + v - s[p]), t.offsets.popper = C(t.offsets.popper);
                                    var g = u[h] + u[c] / 2 - v / 2,
                                        m = a(t.instance.popper),
                                        y = parseFloat(m["margin" + f]),
                                        b = parseFloat(m["border" + f + "Width"]),
                                        _ = g - t.offsets.popper[h] - y - b;
                                    return _ = Math.max(Math.min(s[c] - v, _), 0), t.arrowElement = r, t.offsets.arrow = (E(n = {}, h, Math.round(_)), E(n, d, ""), n), t
                                },
                                element: "[x-arrow]"
                            },
                            flip: {
                                order: 600,
                                enabled: !0,
                                fn: function(t, e) {
                                    if (B(t.instance.modifiers, "inner")) return t;
                                    if (t.flipped && t.placement === t.originalPlacement) return t;
                                    var n = N(t.instance.popper, t.instance.reference, e.padding, e.boundariesElement, t.positionFixed),
                                        r = t.placement.split("-")[0],
                                        i = R(r),
                                        o = t.placement.split("-")[1] || "",
                                        a = [];
                                    switch (e.behavior) {
                                        case et:
                                            a = [r, i];
                                            break;
                                        case nt:
                                            a = tt(r);
                                            break;
                                        case rt:
                                            a = tt(r, !0);
                                            break;
                                        default:
                                            a = e.behavior
                                    }
                                    return a.forEach((function(s, u) {
                                        if (r !== s || a.length === u + 1) return t;
                                        r = t.placement.split("-")[0], i = R(r);
                                        var l = t.offsets.popper,
                                            c = t.offsets.reference,
                                            f = Math.floor,
                                            h = "left" === r && f(l.right) > f(c.left) || "right" === r && f(l.left) < f(c.right) || "top" === r && f(l.bottom) > f(c.top) || "bottom" === r && f(l.top) < f(c.bottom),
                                            d = f(l.left) < f(n.left),
                                            p = f(l.right) > f(n.right),
                                            v = f(l.top) < f(n.top),
                                            g = f(l.bottom) > f(n.bottom),
                                            m = "left" === r && d || "right" === r && p || "top" === r && v || "bottom" === r && g,
                                            y = -1 !== ["top", "bottom"].indexOf(r),
                                            b = !!e.flipVariations && (y && "start" === o && d || y && "end" === o && p || !y && "start" === o && v || !y && "end" === o && g),
                                            _ = !!e.flipVariationsByContent && (y && "start" === o && p || y && "end" === o && d || !y && "start" === o && g || !y && "end" === o && v),
                                            w = b || _;
                                        (h || m || w) && (t.flipped = !0, (h || m) && (r = a[u + 1]), w && (o = function(t) { return "end" === t ? "start" : "start" === t ? "end" : t }(o)), t.placement = r + (o ? "-" + o : ""), t.offsets.popper = T({}, t.offsets.popper, F(t.instance.popper, t.offsets.reference, t.placement)), t = U(t.instance.modifiers, t, "flip"))
                                    })), t
                                },
                                behavior: "flip",
                                padding: 5,
                                boundariesElement: "viewport",
                                flipVariations: !1,
                                flipVariationsByContent: !1
                            },
                            inner: {
                                order: 700,
                                enabled: !1,
                                fn: function(t) {
                                    var e = t.placement,
                                        n = e.split("-")[0],
                                        r = t.offsets,
                                        i = r.popper,
                                        o = r.reference,
                                        a = -1 !== ["left", "right"].indexOf(n),
                                        s = -1 === ["top", "left"].indexOf(n);
                                    return i[a ? "left" : "top"] = o[n] - (s ? i[a ? "width" : "height"] : 0), t.placement = R(e), t.offsets.popper = C(i), t
                                }
                            },
                            hide: {
                                order: 800,
                                enabled: !0,
                                fn: function(t) {
                                    if (!K(t.instance.modifiers, "hide", "preventOverflow")) return t;
                                    var e = t.offsets.reference,
                                        n = M(t.instance.modifiers, (function(t) { return "preventOverflow" === t.name })).boundaries;
                                    if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {
                                        if (!0 === t.hide) return t;
                                        t.hide = !0, t.attributes["x-out-of-boundaries"] = ""
                                    } else {
                                        if (!1 === t.hide) return t;
                                        t.hide = !1, t.attributes["x-out-of-boundaries"] = !1
                                    }
                                    return t
                                }
                            },
                            computeStyle: {
                                order: 850,
                                enabled: !0,
                                fn: function(t, e) {
                                    var n = e.x,
                                        r = e.y,
                                        i = t.offsets.popper,
                                        o = M(t.instance.modifiers, (function(t) { return "applyStyle" === t.name })).gpuAcceleration;
                                    void 0 !== o && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
                                    var a = void 0 !== o ? o : e.gpuAcceleration,
                                        s = d(t.instance.popper),
                                        u = S(s),
                                        l = { position: i.position },
                                        c = function(t, e) {
                                            var n = t.offsets,
                                                r = n.popper,
                                                i = n.reference,
                                                o = Math.round,
                                                a = Math.floor,
                                                s = function(t) { return t },
                                                u = o(i.width),
                                                l = o(r.width),
                                                c = -1 !== ["left", "right"].indexOf(t.placement),
                                                f = -1 !== t.placement.indexOf("-"),
                                                h = e ? c || f || u % 2 == l % 2 ? o : a : s,
                                                d = e ? o : s;
                                            return { left: h(u % 2 == 1 && l % 2 == 1 && !f && e ? r.left - 1 : r.left), top: d(r.top), bottom: d(r.bottom), right: h(r.right) }
                                        }(t, window.devicePixelRatio < 2 || !G),
                                        f = "bottom" === n ? "top" : "bottom",
                                        h = "right" === r ? "left" : "right",
                                        p = H("transform"),
                                        v = void 0,
                                        g = void 0;
                                    if (g = "bottom" === f ? "HTML" === s.nodeName ? -s.clientHeight + c.bottom : -u.height + c.bottom : c.top, v = "right" === h ? "HTML" === s.nodeName ? -s.clientWidth + c.right : -u.width + c.right : c.left, a && p) l[p] = "translate3d(" + v + "px, " + g + "px, 0)", l[f] = 0, l[h] = 0, l.willChange = "transform";
                                    else {
                                        var m = "bottom" === f ? -1 : 1,
                                            y = "right" === h ? -1 : 1;
                                        l[f] = g * m, l[h] = v * y, l.willChange = f + ", " + h
                                    }
                                    var b = { "x-placement": t.placement };
                                    return t.attributes = T({}, b, t.attributes), t.styles = T({}, l, t.styles), t.arrowStyles = T({}, t.offsets.arrow, t.arrowStyles), t
                                },
                                gpuAcceleration: !0,
                                x: "bottom",
                                y: "right"
                            },
                            applyStyle: {
                                order: 900,
                                enabled: !0,
                                fn: function(t) { var e, n; return X(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, Object.keys(n).forEach((function(t) {!1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t) })), t.arrowElement && Object.keys(t.arrowStyles).length && X(t.arrowElement, t.arrowStyles), t },
                                onLoad: function(t, e, n, r, i) {
                                    var o = j(i, e, t, n.positionFixed),
                                        a = L(n.placement, o, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
                                    return e.setAttribute("x-placement", a), X(e, { position: n.positionFixed ? "fixed" : "absolute" }), n
                                },
                                gpuAcceleration: void 0
                            }
                        }
                    },
                    at = function() {
                        function t(e, n) {
                            var r = this,
                                a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                            w(this, t), this.scheduleUpdate = function() { return requestAnimationFrame(r.update) }, this.update = i(this.update.bind(this)), this.options = T({}, t.Defaults, a), this.state = { isDestroyed: !1, isCreated: !1, scrollParents: [] }, this.reference = e && e.jquery ? e[0] : e, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(T({}, t.Defaults.modifiers, a.modifiers)).forEach((function(e) { r.options.modifiers[e] = T({}, t.Defaults.modifiers[e] || {}, a.modifiers ? a.modifiers[e] : {}) })), this.modifiers = Object.keys(this.options.modifiers).map((function(t) { return T({ name: t }, r.options.modifiers[t]) })).sort((function(t, e) { return t.order - e.order })), this.modifiers.forEach((function(t) { t.enabled && o(t.onLoad) && t.onLoad(r.reference, r.popper, r.options, t, r.state) })), this.update();
                            var s = this.options.eventsEnabled;
                            s && this.enableEventListeners(), this.state.eventsEnabled = s
                        }
                        return x(t, [{ key: "update", value: function() { return q.call(this) } }, { key: "destroy", value: function() { return z.call(this) } }, { key: "enableEventListeners", value: function() { return $.call(this) } }, { key: "disableEventListeners", value: function() { return V.call(this) } }]), t
                    }();
                at.Utils = ("undefined" != typeof window ? window : t).PopperUtils, at.placements = J, at.Defaults = ot, e.default = at
            }.call(this, n("yLpj"))
    },
    "8oxB": function(t, e) {
        var n, r, i = t.exports = {};

        function o() { throw new Error("setTimeout has not been defined") }

        function a() { throw new Error("clearTimeout has not been defined") }

        function s(t) { if (n === setTimeout) return setTimeout(t, 0); if ((n === o || !n) && setTimeout) return n = setTimeout, setTimeout(t, 0); try { return n(t, 0) } catch (e) { try { return n.call(null, t, 0) } catch (e) { return n.call(this, t, 0) } } }! function() { try { n = "function" == typeof setTimeout ? setTimeout : o } catch (t) { n = o } try { r = "function" == typeof clearTimeout ? clearTimeout : a } catch (t) { r = a } }();
        var u, l = [],
            c = !1,
            f = -1;

        function h() { c && u && (c = !1, u.length ? l = u.concat(l) : f = -1, l.length && d()) }

        function d() {
            if (!c) {
                var t = s(h);
                c = !0;
                for (var e = l.length; e;) {
                    for (u = l, l = []; ++f < e;) u && u[f].run();
                    f = -1, e = l.length
                }
                u = null, c = !1,
                    function(t) { if (r === clearTimeout) return clearTimeout(t); if ((r === a || !r) && clearTimeout) return r = clearTimeout, clearTimeout(t); try { r(t) } catch (e) { try { return r.call(null, t) } catch (e) { return r.call(this, t) } } }(t)
            }
        }

        function p(t, e) { this.fun = t, this.array = e }

        function v() {}
        i.nextTick = function(t) {
            var e = new Array(arguments.length - 1);
            if (arguments.length > 1)
                for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
            l.push(new p(t, e)), 1 !== l.length || c || s(d)
        }, p.prototype.run = function() { this.fun.apply(null, this.array) }, i.title = "browser", i.browser = !0, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = v, i.addListener = v, i.once = v, i.off = v, i.removeListener = v, i.removeAllListeners = v, i.emit = v, i.prependListener = v, i.prependOnceListener = v, i.listeners = function(t) { return [] }, i.binding = function(t) { throw new Error("process.binding is not supported") }, i.cwd = function() { return "/" }, i.chdir = function(t) { throw new Error("process.chdir is not supported") }, i.umask = function() { return 0 }
    },
    "9rSQ": function(t, e, n) {
        "use strict";
        var r = n("xTJ+");

        function i() { this.handlers = [] }
        i.prototype.use = function(t, e, n) { return this.handlers.push({ fulfilled: t, rejected: e, synchronous: !!n && n.synchronous, runWhen: n ? n.runWhen : null }), this.handlers.length - 1 }, i.prototype.eject = function(t) { this.handlers[t] && (this.handlers[t] = null) }, i.prototype.forEach = function(t) { r.forEach(this.handlers, (function(e) { null !== e && t(e) })) }, t.exports = i
    },
    ByQF: function(t, e) {},
    CgaS: function(t, e, n) {
        "use strict";
        var r = n("xTJ+"),
            i = n("MLWZ"),
            o = n("9rSQ"),
            a = n("UnBK"),
            s = n("SntB"),
            u = n("hIuj"),
            l = u.validators;

        function c(t) { this.defaults = t, this.interceptors = { request: new o, response: new o } }
        c.prototype.request = function(t) {
            "string" == typeof t ? (t = arguments[1] || {}).url = arguments[0] : t = t || {}, (t = s(this.defaults, t)).method ? t.method = t.method.toLowerCase() : this.defaults.method ? t.method = this.defaults.method.toLowerCase() : t.method = "get";
            var e = t.transitional;
            void 0 !== e && u.assertOptions(e, { silentJSONParsing: l.transitional(l.boolean, "1.0.0"), forcedJSONParsing: l.transitional(l.boolean, "1.0.0"), clarifyTimeoutError: l.transitional(l.boolean, "1.0.0") }, !1);
            var n = [],
                r = !0;
            this.interceptors.request.forEach((function(e) { "function" == typeof e.runWhen && !1 === e.runWhen(t) || (r = r && e.synchronous, n.unshift(e.fulfilled, e.rejected)) }));
            var i, o = [];
            if (this.interceptors.response.forEach((function(t) { o.push(t.fulfilled, t.rejected) })), !r) { var c = [a, void 0]; for (Array.prototype.unshift.apply(c, n), c = c.concat(o), i = Promise.resolve(t); c.length;) i = i.then(c.shift(), c.shift()); return i }
            for (var f = t; n.length;) {
                var h = n.shift(),
                    d = n.shift();
                try { f = h(f) } catch (t) { d(t); break }
            }
            try { i = a(f) } catch (t) { return Promise.reject(t) }
            for (; o.length;) i = i.then(o.shift(), o.shift());
            return i
        }, c.prototype.getUri = function(t) { return t = s(this.defaults, t), i(t.url, t.params, t.paramsSerializer).replace(/^\?/, "") }, r.forEach(["delete", "get", "head", "options"], (function(t) { c.prototype[t] = function(e, n) { return this.request(s(n || {}, { method: t, url: e, data: (n || {}).data })) } })), r.forEach(["post", "put", "patch"], (function(t) { c.prototype[t] = function(e, n, r) { return this.request(s(r || {}, { method: t, url: e, data: n })) } })), t.exports = c
    },
    CumE: function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn"), n("Qwlt")], void 0 === (o = "function" == typeof(r = function(t) { return t.extend(t.expr.pseudos, { data: t.expr.createPseudo ? t.expr.createPseudo((function(e) { return function(n) { return !!t.data(n, e) } })) : function(e, n, r) { return !!t.data(e, r[3]) } }) }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    DfZB: function(t, e, n) {
        "use strict";
        t.exports = function(t) { return function(e) { return t.apply(null, e) } }
    },
    EVdn: function(t, e, n) {
        var r;
        ! function(e, n) { "use strict"; "object" == typeof t.exports ? t.exports = e.document ? n(e, !0) : function(t) { if (!t.document) throw new Error("jQuery requires a window with a document"); return n(t) } : n(e) }("undefined" != typeof window ? window : this, (function(n, i) {
            "use strict";
            var o = [],
                a = Object.getPrototypeOf,
                s = o.slice,
                u = o.flat ? function(t) { return o.flat.call(t) } : function(t) { return o.concat.apply([], t) },
                l = o.push,
                c = o.indexOf,
                f = {},
                h = f.toString,
                d = f.hasOwnProperty,
                p = d.toString,
                v = p.call(Object),
                g = {},
                m = function(t) { return "function" == typeof t && "number" != typeof t.nodeType && "function" != typeof t.item },
                y = function(t) { return null != t && t === t.window },
                b = n.document,
                _ = { type: !0, src: !0, nonce: !0, noModule: !0 };

            function w(t, e, n) {
                var r, i, o = (n = n || b).createElement("script");
                if (o.text = t, e)
                    for (r in _)(i = e[r] || e.getAttribute && e.getAttribute(r)) && o.setAttribute(r, i);
                n.head.appendChild(o).parentNode.removeChild(o)
            }

            function x(t) { return null == t ? t + "" : "object" == typeof t || "function" == typeof t ? f[h.call(t)] || "object" : typeof t }
            var E = function(t, e) { return new E.fn.init(t, e) };

            function T(t) {
                var e = !!t && "length" in t && t.length,
                    n = x(t);
                return !m(t) && !y(t) && ("array" === n || 0 === e || "number" == typeof e && e > 0 && e - 1 in t)
            }
            E.fn = E.prototype = {
                jquery: "3.6.0",
                constructor: E,
                length: 0,
                toArray: function() { return s.call(this) },
                get: function(t) { return null == t ? s.call(this) : t < 0 ? this[t + this.length] : this[t] },
                pushStack: function(t) { var e = E.merge(this.constructor(), t); return e.prevObject = this, e },
                each: function(t) { return E.each(this, t) },
                map: function(t) { return this.pushStack(E.map(this, (function(e, n) { return t.call(e, n, e) }))) },
                slice: function() { return this.pushStack(s.apply(this, arguments)) },
                first: function() { return this.eq(0) },
                last: function() { return this.eq(-1) },
                even: function() { return this.pushStack(E.grep(this, (function(t, e) { return (e + 1) % 2 }))) },
                odd: function() { return this.pushStack(E.grep(this, (function(t, e) { return e % 2 }))) },
                eq: function(t) {
                    var e = this.length,
                        n = +t + (t < 0 ? e : 0);
                    return this.pushStack(n >= 0 && n < e ? [this[n]] : [])
                },
                end: function() { return this.prevObject || this.constructor() },
                push: l,
                sort: o.sort,
                splice: o.splice
            }, E.extend = E.fn.extend = function() {
                var t, e, n, r, i, o, a = arguments[0] || {},
                    s = 1,
                    u = arguments.length,
                    l = !1;
                for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || m(a) || (a = {}), s === u && (a = this, s--); s < u; s++)
                    if (null != (t = arguments[s]))
                        for (e in t) r = t[e], "__proto__" !== e && a !== r && (l && r && (E.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[e], o = i && !Array.isArray(n) ? [] : i || E.isPlainObject(n) ? n : {}, i = !1, a[e] = E.extend(l, o, r)) : void 0 !== r && (a[e] = r));
                return a
            }, E.extend({
                expando: "jQuery" + ("3.6.0" + Math.random()).replace(/\D/g, ""),
                isReady: !0,
                error: function(t) { throw new Error(t) },
                noop: function() {},
                isPlainObject: function(t) { var e, n; return !(!t || "[object Object]" !== h.call(t)) && (!(e = a(t)) || "function" == typeof(n = d.call(e, "constructor") && e.constructor) && p.call(n) === v) },
                isEmptyObject: function(t) { var e; for (e in t) return !1; return !0 },
                globalEval: function(t, e, n) { w(t, { nonce: e && e.nonce }, n) },
                each: function(t, e) {
                    var n, r = 0;
                    if (T(t))
                        for (n = t.length; r < n && !1 !== e.call(t[r], r, t[r]); r++);
                    else
                        for (r in t)
                            if (!1 === e.call(t[r], r, t[r])) break; return t
                },
                makeArray: function(t, e) { var n = e || []; return null != t && (T(Object(t)) ? E.merge(n, "string" == typeof t ? [t] : t) : l.call(n, t)), n },
                inArray: function(t, e, n) { return null == e ? -1 : c.call(e, t, n) },
                merge: function(t, e) { for (var n = +e.length, r = 0, i = t.length; r < n; r++) t[i++] = e[r]; return t.length = i, t },
                grep: function(t, e, n) { for (var r = [], i = 0, o = t.length, a = !n; i < o; i++) !e(t[i], i) !== a && r.push(t[i]); return r },
                map: function(t, e, n) {
                    var r, i, o = 0,
                        a = [];
                    if (T(t))
                        for (r = t.length; o < r; o++) null != (i = e(t[o], o, n)) && a.push(i);
                    else
                        for (o in t) null != (i = e(t[o], o, n)) && a.push(i);
                    return u(a)
                },
                guid: 1,
                support: g
            }), "function" == typeof Symbol && (E.fn[Symbol.iterator] = o[Symbol.iterator]), E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), (function(t, e) { f["[object " + e + "]"] = e.toLowerCase() }));
            var C = function(t) {
                var e, n, r, i, o, a, s, u, l, c, f, h, d, p, v, g, m, y, b, _ = "sizzle" + 1 * new Date,
                    w = t.document,
                    x = 0,
                    E = 0,
                    T = ut(),
                    C = ut(),
                    S = ut(),
                    k = ut(),
                    A = function(t, e) { return t === e && (f = !0), 0 },
                    I = {}.hasOwnProperty,
                    O = [],
                    N = O.pop,
                    D = O.push,
                    L = O.push,
                    j = O.slice,
                    P = function(t, e) {
                        for (var n = 0, r = t.length; n < r; n++)
                            if (t[n] === e) return n;
                        return -1
                    },
                    R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                    F = "[\\x20\\t\\r\\n\\f]",
                    M = "(?:\\\\[\\da-fA-F]{1,6}" + F + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
                    U = "\\[" + F + "*(" + M + ")(?:" + F + "*([*^$|!~]?=)" + F + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + M + "))|)" + F + "*\\]",
                    q = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + U + ")*)|.*)\\)|)",
                    B = new RegExp(F + "+", "g"),
                    H = new RegExp("^" + F + "+|((?:^|[^\\\\])(?:\\\\.)*)" + F + "+$", "g"),
                    z = new RegExp("^" + F + "*," + F + "*"),
                    W = new RegExp("^" + F + "*([>+~]|" + F + ")" + F + "*"),
                    Q = new RegExp(F + "|>"),
                    $ = new RegExp(q),
                    V = new RegExp("^" + M + "$"),
                    Y = { ID: new RegExp("^#(" + M + ")"), CLASS: new RegExp("^\\.(" + M + ")"), TAG: new RegExp("^(" + M + "|[*])"), ATTR: new RegExp("^" + U), PSEUDO: new RegExp("^" + q), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + F + "*(even|odd|(([+-]|)(\\d*)n|)" + F + "*(?:([+-]|)" + F + "*(\\d+)|))" + F + "*\\)|)", "i"), bool: new RegExp("^(?:" + R + ")$", "i"), needsContext: new RegExp("^" + F + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + F + "*((?:-\\d)?\\d*)" + F + "*\\)|)(?=[^-]|$)", "i") },
                    X = /HTML$/i,
                    G = /^(?:input|select|textarea|button)$/i,
                    K = /^h\d$/i,
                    J = /^[^{]+\{\s*\[native \w/,
                    Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                    tt = /[+~]/,
                    et = new RegExp("\\\\[\\da-fA-F]{1,6}" + F + "?|\\\\([^\\r\\n\\f])", "g"),
                    nt = function(t, e) { var n = "0x" + t.slice(1) - 65536; return e || (n < 0 ? String.fromCharCode(n + 65536) : String.fromCharCode(n >> 10 | 55296, 1023 & n | 56320)) },
                    rt = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                    it = function(t, e) { return e ? "\0" === t ? "�" : t.slice(0, -1) + "\\" + t.charCodeAt(t.length - 1).toString(16) + " " : "\\" + t },
                    ot = function() { h() },
                    at = _t((function(t) { return !0 === t.disabled && "fieldset" === t.nodeName.toLowerCase() }), { dir: "parentNode", next: "legend" });
                try { L.apply(O = j.call(w.childNodes), w.childNodes), O[w.childNodes.length].nodeType } catch (t) {
                    L = {
                        apply: O.length ? function(t, e) { D.apply(t, j.call(e)) } : function(t, e) {
                            for (var n = t.length, r = 0; t[n++] = e[r++];);
                            t.length = n - 1
                        }
                    }
                }

                function st(t, e, r, i) {
                    var o, s, l, c, f, p, m, y = e && e.ownerDocument,
                        w = e ? e.nodeType : 9;
                    if (r = r || [], "string" != typeof t || !t || 1 !== w && 9 !== w && 11 !== w) return r;
                    if (!i && (h(e), e = e || d, v)) {
                        if (11 !== w && (f = Z.exec(t)))
                            if (o = f[1]) { if (9 === w) { if (!(l = e.getElementById(o))) return r; if (l.id === o) return r.push(l), r } else if (y && (l = y.getElementById(o)) && b(e, l) && l.id === o) return r.push(l), r } else { if (f[2]) return L.apply(r, e.getElementsByTagName(t)), r; if ((o = f[3]) && n.getElementsByClassName && e.getElementsByClassName) return L.apply(r, e.getElementsByClassName(o)), r }
                        if (n.qsa && !k[t + " "] && (!g || !g.test(t)) && (1 !== w || "object" !== e.nodeName.toLowerCase())) {
                            if (m = t, y = e, 1 === w && (Q.test(t) || W.test(t))) {
                                for ((y = tt.test(t) && mt(e.parentNode) || e) === e && n.scope || ((c = e.getAttribute("id")) ? c = c.replace(rt, it) : e.setAttribute("id", c = _)), s = (p = a(t)).length; s--;) p[s] = (c ? "#" + c : ":scope") + " " + bt(p[s]);
                                m = p.join(",")
                            }
                            try { return L.apply(r, y.querySelectorAll(m)), r } catch (e) { k(t, !0) } finally { c === _ && e.removeAttribute("id") }
                        }
                    }
                    return u(t.replace(H, "$1"), e, r, i)
                }

                function ut() { var t = []; return function e(n, i) { return t.push(n + " ") > r.cacheLength && delete e[t.shift()], e[n + " "] = i } }

                function lt(t) { return t[_] = !0, t }

                function ct(t) { var e = d.createElement("fieldset"); try { return !!t(e) } catch (t) { return !1 } finally { e.parentNode && e.parentNode.removeChild(e), e = null } }

                function ft(t, e) { for (var n = t.split("|"), i = n.length; i--;) r.attrHandle[n[i]] = e }

                function ht(t, e) {
                    var n = e && t,
                        r = n && 1 === t.nodeType && 1 === e.nodeType && t.sourceIndex - e.sourceIndex;
                    if (r) return r;
                    if (n)
                        for (; n = n.nextSibling;)
                            if (n === e) return -1;
                    return t ? 1 : -1
                }

                function dt(t) { return function(e) { return "input" === e.nodeName.toLowerCase() && e.type === t } }

                function pt(t) { return function(e) { var n = e.nodeName.toLowerCase(); return ("input" === n || "button" === n) && e.type === t } }

                function vt(t) { return function(e) { return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && at(e) === t : e.disabled === t : "label" in e && e.disabled === t } }

                function gt(t) { return lt((function(e) { return e = +e, lt((function(n, r) { for (var i, o = t([], n.length, e), a = o.length; a--;) n[i = o[a]] && (n[i] = !(r[i] = n[i])) })) })) }

                function mt(t) { return t && void 0 !== t.getElementsByTagName && t }
                for (e in n = st.support = {}, o = st.isXML = function(t) {
                        var e = t && t.namespaceURI,
                            n = t && (t.ownerDocument || t).documentElement;
                        return !X.test(e || n && n.nodeName || "HTML")
                    }, h = st.setDocument = function(t) {
                        var e, i, a = t ? t.ownerDocument || t : w;
                        return a != d && 9 === a.nodeType && a.documentElement ? (p = (d = a).documentElement, v = !o(d), w != d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", ot, !1) : i.attachEvent && i.attachEvent("onunload", ot)), n.scope = ct((function(t) { return p.appendChild(t).appendChild(d.createElement("div")), void 0 !== t.querySelectorAll && !t.querySelectorAll(":scope fieldset div").length })), n.attributes = ct((function(t) { return t.className = "i", !t.getAttribute("className") })), n.getElementsByTagName = ct((function(t) { return t.appendChild(d.createComment("")), !t.getElementsByTagName("*").length })), n.getElementsByClassName = J.test(d.getElementsByClassName), n.getById = ct((function(t) { return p.appendChild(t).id = _, !d.getElementsByName || !d.getElementsByName(_).length })), n.getById ? (r.filter.ID = function(t) { var e = t.replace(et, nt); return function(t) { return t.getAttribute("id") === e } }, r.find.ID = function(t, e) { if (void 0 !== e.getElementById && v) { var n = e.getElementById(t); return n ? [n] : [] } }) : (r.filter.ID = function(t) { var e = t.replace(et, nt); return function(t) { var n = void 0 !== t.getAttributeNode && t.getAttributeNode("id"); return n && n.value === e } }, r.find.ID = function(t, e) {
                            if (void 0 !== e.getElementById && v) {
                                var n, r, i, o = e.getElementById(t);
                                if (o) {
                                    if ((n = o.getAttributeNode("id")) && n.value === t) return [o];
                                    for (i = e.getElementsByName(t), r = 0; o = i[r++];)
                                        if ((n = o.getAttributeNode("id")) && n.value === t) return [o]
                                }
                                return []
                            }
                        }), r.find.TAG = n.getElementsByTagName ? function(t, e) { return void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t) : n.qsa ? e.querySelectorAll(t) : void 0 } : function(t, e) {
                            var n, r = [],
                                i = 0,
                                o = e.getElementsByTagName(t);
                            if ("*" === t) { for (; n = o[i++];) 1 === n.nodeType && r.push(n); return r }
                            return o
                        }, r.find.CLASS = n.getElementsByClassName && function(t, e) { if (void 0 !== e.getElementsByClassName && v) return e.getElementsByClassName(t) }, m = [], g = [], (n.qsa = J.test(d.querySelectorAll)) && (ct((function(t) {
                            var e;
                            p.appendChild(t).innerHTML = "<a id='" + _ + "'></a><select id='" + _ + "-\r\\' msallowcapture=''><option selected=''></option></select>", t.querySelectorAll("[msallowcapture^='']").length && g.push("[*^$]=" + F + "*(?:''|\"\")"), t.querySelectorAll("[selected]").length || g.push("\\[" + F + "*(?:value|" + R + ")"), t.querySelectorAll("[id~=" + _ + "-]").length || g.push("~="), (e = d.createElement("input")).setAttribute("name", ""), t.appendChild(e), t.querySelectorAll("[name='']").length || g.push("\\[" + F + "*name" + F + "*=" + F + "*(?:''|\"\")"), t.querySelectorAll(":checked").length || g.push(":checked"), t.querySelectorAll("a#" + _ + "+*").length || g.push(".#.+[+~]"), t.querySelectorAll("\\\f"), g.push("[\\r\\n\\f]")
                        })), ct((function(t) {
                            t.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                            var e = d.createElement("input");
                            e.setAttribute("type", "hidden"), t.appendChild(e).setAttribute("name", "D"), t.querySelectorAll("[name=d]").length && g.push("name" + F + "*[*^$|!~]?="), 2 !== t.querySelectorAll(":enabled").length && g.push(":enabled", ":disabled"), p.appendChild(t).disabled = !0, 2 !== t.querySelectorAll(":disabled").length && g.push(":enabled", ":disabled"), t.querySelectorAll("*,:x"), g.push(",.*:")
                        }))), (n.matchesSelector = J.test(y = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.oMatchesSelector || p.msMatchesSelector)) && ct((function(t) { n.disconnectedMatch = y.call(t, "*"), y.call(t, "[s!='']:x"), m.push("!=", q) })), g = g.length && new RegExp(g.join("|")), m = m.length && new RegExp(m.join("|")), e = J.test(p.compareDocumentPosition), b = e || J.test(p.contains) ? function(t, e) {
                            var n = 9 === t.nodeType ? t.documentElement : t,
                                r = e && e.parentNode;
                            return t === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : t.compareDocumentPosition && 16 & t.compareDocumentPosition(r)))
                        } : function(t, e) {
                            if (e)
                                for (; e = e.parentNode;)
                                    if (e === t) return !0;
                            return !1
                        }, A = e ? function(t, e) { if (t === e) return f = !0, 0; var r = !t.compareDocumentPosition - !e.compareDocumentPosition; return r || (1 & (r = (t.ownerDocument || t) == (e.ownerDocument || e) ? t.compareDocumentPosition(e) : 1) || !n.sortDetached && e.compareDocumentPosition(t) === r ? t == d || t.ownerDocument == w && b(w, t) ? -1 : e == d || e.ownerDocument == w && b(w, e) ? 1 : c ? P(c, t) - P(c, e) : 0 : 4 & r ? -1 : 1) } : function(t, e) {
                            if (t === e) return f = !0, 0;
                            var n, r = 0,
                                i = t.parentNode,
                                o = e.parentNode,
                                a = [t],
                                s = [e];
                            if (!i || !o) return t == d ? -1 : e == d ? 1 : i ? -1 : o ? 1 : c ? P(c, t) - P(c, e) : 0;
                            if (i === o) return ht(t, e);
                            for (n = t; n = n.parentNode;) a.unshift(n);
                            for (n = e; n = n.parentNode;) s.unshift(n);
                            for (; a[r] === s[r];) r++;
                            return r ? ht(a[r], s[r]) : a[r] == w ? -1 : s[r] == w ? 1 : 0
                        }, d) : d
                    }, st.matches = function(t, e) { return st(t, null, null, e) }, st.matchesSelector = function(t, e) {
                        if (h(t), n.matchesSelector && v && !k[e + " "] && (!m || !m.test(e)) && (!g || !g.test(e))) try { var r = y.call(t, e); if (r || n.disconnectedMatch || t.document && 11 !== t.document.nodeType) return r } catch (t) { k(e, !0) }
                        return st(e, d, null, [t]).length > 0
                    }, st.contains = function(t, e) { return (t.ownerDocument || t) != d && h(t), b(t, e) }, st.attr = function(t, e) {
                        (t.ownerDocument || t) != d && h(t);
                        var i = r.attrHandle[e.toLowerCase()],
                            o = i && I.call(r.attrHandle, e.toLowerCase()) ? i(t, e, !v) : void 0;
                        return void 0 !== o ? o : n.attributes || !v ? t.getAttribute(e) : (o = t.getAttributeNode(e)) && o.specified ? o.value : null
                    }, st.escape = function(t) { return (t + "").replace(rt, it) }, st.error = function(t) { throw new Error("Syntax error, unrecognized expression: " + t) }, st.uniqueSort = function(t) {
                        var e, r = [],
                            i = 0,
                            o = 0;
                        if (f = !n.detectDuplicates, c = !n.sortStable && t.slice(0), t.sort(A), f) { for (; e = t[o++];) e === t[o] && (i = r.push(o)); for (; i--;) t.splice(r[i], 1) }
                        return c = null, t
                    }, i = st.getText = function(t) {
                        var e, n = "",
                            r = 0,
                            o = t.nodeType;
                        if (o) { if (1 === o || 9 === o || 11 === o) { if ("string" == typeof t.textContent) return t.textContent; for (t = t.firstChild; t; t = t.nextSibling) n += i(t) } else if (3 === o || 4 === o) return t.nodeValue } else
                            for (; e = t[r++];) n += i(e);
                        return n
                    }, (r = st.selectors = {
                        cacheLength: 50,
                        createPseudo: lt,
                        match: Y,
                        attrHandle: {},
                        find: {},
                        relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } },
                        preFilter: { ATTR: function(t) { return t[1] = t[1].replace(et, nt), t[3] = (t[3] || t[4] || t[5] || "").replace(et, nt), "~=" === t[2] && (t[3] = " " + t[3] + " "), t.slice(0, 4) }, CHILD: function(t) { return t[1] = t[1].toLowerCase(), "nth" === t[1].slice(0, 3) ? (t[3] || st.error(t[0]), t[4] = +(t[4] ? t[5] + (t[6] || 1) : 2 * ("even" === t[3] || "odd" === t[3])), t[5] = +(t[7] + t[8] || "odd" === t[3])) : t[3] && st.error(t[0]), t }, PSEUDO: function(t) { var e, n = !t[6] && t[2]; return Y.CHILD.test(t[0]) ? null : (t[3] ? t[2] = t[4] || t[5] || "" : n && $.test(n) && (e = a(n, !0)) && (e = n.indexOf(")", n.length - e) - n.length) && (t[0] = t[0].slice(0, e), t[2] = n.slice(0, e)), t.slice(0, 3)) } },
                        filter: {
                            TAG: function(t) { var e = t.replace(et, nt).toLowerCase(); return "*" === t ? function() { return !0 } : function(t) { return t.nodeName && t.nodeName.toLowerCase() === e } },
                            CLASS: function(t) { var e = T[t + " "]; return e || (e = new RegExp("(^|" + F + ")" + t + "(" + F + "|$)")) && T(t, (function(t) { return e.test("string" == typeof t.className && t.className || void 0 !== t.getAttribute && t.getAttribute("class") || "") })) },
                            ATTR: function(t, e, n) { return function(r) { var i = st.attr(r, t); return null == i ? "!=" === e : !e || (i += "", "=" === e ? i === n : "!=" === e ? i !== n : "^=" === e ? n && 0 === i.indexOf(n) : "*=" === e ? n && i.indexOf(n) > -1 : "$=" === e ? n && i.slice(-n.length) === n : "~=" === e ? (" " + i.replace(B, " ") + " ").indexOf(n) > -1 : "|=" === e && (i === n || i.slice(0, n.length + 1) === n + "-")) } },
                            CHILD: function(t, e, n, r, i) {
                                var o = "nth" !== t.slice(0, 3),
                                    a = "last" !== t.slice(-4),
                                    s = "of-type" === e;
                                return 1 === r && 0 === i ? function(t) { return !!t.parentNode } : function(e, n, u) {
                                    var l, c, f, h, d, p, v = o !== a ? "nextSibling" : "previousSibling",
                                        g = e.parentNode,
                                        m = s && e.nodeName.toLowerCase(),
                                        y = !u && !s,
                                        b = !1;
                                    if (g) {
                                        if (o) {
                                            for (; v;) {
                                                for (h = e; h = h[v];)
                                                    if (s ? h.nodeName.toLowerCase() === m : 1 === h.nodeType) return !1;
                                                p = v = "only" === t && !p && "nextSibling"
                                            }
                                            return !0
                                        }
                                        if (p = [a ? g.firstChild : g.lastChild], a && y) {
                                            for (b = (d = (l = (c = (f = (h = g)[_] || (h[_] = {}))[h.uniqueID] || (f[h.uniqueID] = {}))[t] || [])[0] === x && l[1]) && l[2], h = d && g.childNodes[d]; h = ++d && h && h[v] || (b = d = 0) || p.pop();)
                                                if (1 === h.nodeType && ++b && h === e) { c[t] = [x, d, b]; break }
                                        } else if (y && (b = d = (l = (c = (f = (h = e)[_] || (h[_] = {}))[h.uniqueID] || (f[h.uniqueID] = {}))[t] || [])[0] === x && l[1]), !1 === b)
                                            for (;
                                                (h = ++d && h && h[v] || (b = d = 0) || p.pop()) && ((s ? h.nodeName.toLowerCase() !== m : 1 !== h.nodeType) || !++b || (y && ((c = (f = h[_] || (h[_] = {}))[h.uniqueID] || (f[h.uniqueID] = {}))[t] = [x, b]), h !== e)););
                                        return (b -= i) === r || b % r == 0 && b / r >= 0
                                    }
                                }
                            },
                            PSEUDO: function(t, e) { var n, i = r.pseudos[t] || r.setFilters[t.toLowerCase()] || st.error("unsupported pseudo: " + t); return i[_] ? i(e) : i.length > 1 ? (n = [t, t, "", e], r.setFilters.hasOwnProperty(t.toLowerCase()) ? lt((function(t, n) { for (var r, o = i(t, e), a = o.length; a--;) t[r = P(t, o[a])] = !(n[r] = o[a]) })) : function(t) { return i(t, 0, n) }) : i }
                        },
                        pseudos: {
                            not: lt((function(t) {
                                var e = [],
                                    n = [],
                                    r = s(t.replace(H, "$1"));
                                return r[_] ? lt((function(t, e, n, i) { for (var o, a = r(t, null, i, []), s = t.length; s--;)(o = a[s]) && (t[s] = !(e[s] = o)) })) : function(t, i, o) { return e[0] = t, r(e, null, o, n), e[0] = null, !n.pop() }
                            })),
                            has: lt((function(t) { return function(e) { return st(t, e).length > 0 } })),
                            contains: lt((function(t) {
                                return t = t.replace(et, nt),
                                    function(e) { return (e.textContent || i(e)).indexOf(t) > -1 }
                            })),
                            lang: lt((function(t) {
                                return V.test(t || "") || st.error("unsupported lang: " + t), t = t.replace(et, nt).toLowerCase(),
                                    function(e) {
                                        var n;
                                        do { if (n = v ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (n = n.toLowerCase()) === t || 0 === n.indexOf(t + "-") } while ((e = e.parentNode) && 1 === e.nodeType);
                                        return !1
                                    }
                            })),
                            target: function(e) { var n = t.location && t.location.hash; return n && n.slice(1) === e.id },
                            root: function(t) { return t === p },
                            focus: function(t) { return t === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(t.type || t.href || ~t.tabIndex) },
                            enabled: vt(!1),
                            disabled: vt(!0),
                            checked: function(t) { var e = t.nodeName.toLowerCase(); return "input" === e && !!t.checked || "option" === e && !!t.selected },
                            selected: function(t) { return t.parentNode && t.parentNode.selectedIndex, !0 === t.selected },
                            empty: function(t) {
                                for (t = t.firstChild; t; t = t.nextSibling)
                                    if (t.nodeType < 6) return !1;
                                return !0
                            },
                            parent: function(t) { return !r.pseudos.empty(t) },
                            header: function(t) { return K.test(t.nodeName) },
                            input: function(t) { return G.test(t.nodeName) },
                            button: function(t) { var e = t.nodeName.toLowerCase(); return "input" === e && "button" === t.type || "button" === e },
                            text: function(t) { var e; return "input" === t.nodeName.toLowerCase() && "text" === t.type && (null == (e = t.getAttribute("type")) || "text" === e.toLowerCase()) },
                            first: gt((function() { return [0] })),
                            last: gt((function(t, e) { return [e - 1] })),
                            eq: gt((function(t, e, n) { return [n < 0 ? n + e : n] })),
                            even: gt((function(t, e) { for (var n = 0; n < e; n += 2) t.push(n); return t })),
                            odd: gt((function(t, e) { for (var n = 1; n < e; n += 2) t.push(n); return t })),
                            lt: gt((function(t, e, n) { for (var r = n < 0 ? n + e : n > e ? e : n; --r >= 0;) t.push(r); return t })),
                            gt: gt((function(t, e, n) { for (var r = n < 0 ? n + e : n; ++r < e;) t.push(r); return t }))
                        }
                    }).pseudos.nth = r.pseudos.eq, { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) r.pseudos[e] = dt(e);
                for (e in { submit: !0, reset: !0 }) r.pseudos[e] = pt(e);

                function yt() {}

                function bt(t) { for (var e = 0, n = t.length, r = ""; e < n; e++) r += t[e].value; return r }

                function _t(t, e, n) {
                    var r = e.dir,
                        i = e.next,
                        o = i || r,
                        a = n && "parentNode" === o,
                        s = E++;
                    return e.first ? function(e, n, i) {
                        for (; e = e[r];)
                            if (1 === e.nodeType || a) return t(e, n, i);
                        return !1
                    } : function(e, n, u) {
                        var l, c, f, h = [x, s];
                        if (u) {
                            for (; e = e[r];)
                                if ((1 === e.nodeType || a) && t(e, n, u)) return !0
                        } else
                            for (; e = e[r];)
                                if (1 === e.nodeType || a)
                                    if (c = (f = e[_] || (e[_] = {}))[e.uniqueID] || (f[e.uniqueID] = {}), i && i === e.nodeName.toLowerCase()) e = e[r] || e;
                                    else { if ((l = c[o]) && l[0] === x && l[1] === s) return h[2] = l[2]; if (c[o] = h, h[2] = t(e, n, u)) return !0 } return !1
                    }
                }

                function wt(t) {
                    return t.length > 1 ? function(e, n, r) {
                        for (var i = t.length; i--;)
                            if (!t[i](e, n, r)) return !1;
                        return !0
                    } : t[0]
                }

                function xt(t, e, n, r, i) { for (var o, a = [], s = 0, u = t.length, l = null != e; s < u; s++)(o = t[s]) && (n && !n(o, r, i) || (a.push(o), l && e.push(s))); return a }

                function Et(t, e, n, r, i, o) {
                    return r && !r[_] && (r = Et(r)), i && !i[_] && (i = Et(i, o)), lt((function(o, a, s, u) {
                        var l, c, f, h = [],
                            d = [],
                            p = a.length,
                            v = o || function(t, e, n) { for (var r = 0, i = e.length; r < i; r++) st(t, e[r], n); return n }(e || "*", s.nodeType ? [s] : s, []),
                            g = !t || !o && e ? v : xt(v, h, t, s, u),
                            m = n ? i || (o ? t : p || r) ? [] : a : g;
                        if (n && n(g, m, s, u), r)
                            for (l = xt(m, d), r(l, [], s, u), c = l.length; c--;)(f = l[c]) && (m[d[c]] = !(g[d[c]] = f));
                        if (o) {
                            if (i || t) {
                                if (i) {
                                    for (l = [], c = m.length; c--;)(f = m[c]) && l.push(g[c] = f);
                                    i(null, m = [], l, u)
                                }
                                for (c = m.length; c--;)(f = m[c]) && (l = i ? P(o, f) : h[c]) > -1 && (o[l] = !(a[l] = f))
                            }
                        } else m = xt(m === a ? m.splice(p, m.length) : m), i ? i(null, a, m, u) : L.apply(a, m)
                    }))
                }

                function Tt(t) {
                    for (var e, n, i, o = t.length, a = r.relative[t[0].type], s = a || r.relative[" "], u = a ? 1 : 0, c = _t((function(t) { return t === e }), s, !0), f = _t((function(t) { return P(e, t) > -1 }), s, !0), h = [function(t, n, r) { var i = !a && (r || n !== l) || ((e = n).nodeType ? c(t, n, r) : f(t, n, r)); return e = null, i }]; u < o; u++)
                        if (n = r.relative[t[u].type]) h = [_t(wt(h), n)];
                        else {
                            if ((n = r.filter[t[u].type].apply(null, t[u].matches))[_]) { for (i = ++u; i < o && !r.relative[t[i].type]; i++); return Et(u > 1 && wt(h), u > 1 && bt(t.slice(0, u - 1).concat({ value: " " === t[u - 2].type ? "*" : "" })).replace(H, "$1"), n, u < i && Tt(t.slice(u, i)), i < o && Tt(t = t.slice(i)), i < o && bt(t)) }
                            h.push(n)
                        }
                    return wt(h)
                }
                return yt.prototype = r.filters = r.pseudos, r.setFilters = new yt, a = st.tokenize = function(t, e) { var n, i, o, a, s, u, l, c = C[t + " "]; if (c) return e ? 0 : c.slice(0); for (s = t, u = [], l = r.preFilter; s;) { for (a in n && !(i = z.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), n = !1, (i = W.exec(s)) && (n = i.shift(), o.push({ value: n, type: i[0].replace(H, " ") }), s = s.slice(n.length)), r.filter) !(i = Y[a].exec(s)) || l[a] && !(i = l[a](i)) || (n = i.shift(), o.push({ value: n, type: a, matches: i }), s = s.slice(n.length)); if (!n) break } return e ? s.length : s ? st.error(t) : C(t, u).slice(0) }, s = st.compile = function(t, e) {
                    var n, i = [],
                        o = [],
                        s = S[t + " "];
                    if (!s) {
                        for (e || (e = a(t)), n = e.length; n--;)(s = Tt(e[n]))[_] ? i.push(s) : o.push(s);
                        (s = S(t, function(t, e) {
                            var n = e.length > 0,
                                i = t.length > 0,
                                o = function(o, a, s, u, c) {
                                    var f, p, g, m = 0,
                                        y = "0",
                                        b = o && [],
                                        _ = [],
                                        w = l,
                                        E = o || i && r.find.TAG("*", c),
                                        T = x += null == w ? 1 : Math.random() || .1,
                                        C = E.length;
                                    for (c && (l = a == d || a || c); y !== C && null != (f = E[y]); y++) {
                                        if (i && f) {
                                            for (p = 0, a || f.ownerDocument == d || (h(f), s = !v); g = t[p++];)
                                                if (g(f, a || d, s)) { u.push(f); break }
                                            c && (x = T)
                                        }
                                        n && ((f = !g && f) && m--, o && b.push(f))
                                    }
                                    if (m += y, n && y !== m) {
                                        for (p = 0; g = e[p++];) g(b, _, a, s);
                                        if (o) {
                                            if (m > 0)
                                                for (; y--;) b[y] || _[y] || (_[y] = N.call(u));
                                            _ = xt(_)
                                        }
                                        L.apply(u, _), c && !o && _.length > 0 && m + e.length > 1 && st.uniqueSort(u)
                                    }
                                    return c && (x = T, l = w), b
                                };
                            return n ? lt(o) : o
                        }(o, i))).selector = t
                    }
                    return s
                }, u = st.select = function(t, e, n, i) {
                    var o, u, l, c, f, h = "function" == typeof t && t,
                        d = !i && a(t = h.selector || t);
                    if (n = n || [], 1 === d.length) {
                        if ((u = d[0] = d[0].slice(0)).length > 2 && "ID" === (l = u[0]).type && 9 === e.nodeType && v && r.relative[u[1].type]) {
                            if (!(e = (r.find.ID(l.matches[0].replace(et, nt), e) || [])[0])) return n;
                            h && (e = e.parentNode), t = t.slice(u.shift().value.length)
                        }
                        for (o = Y.needsContext.test(t) ? 0 : u.length; o-- && (l = u[o], !r.relative[c = l.type]);)
                            if ((f = r.find[c]) && (i = f(l.matches[0].replace(et, nt), tt.test(u[0].type) && mt(e.parentNode) || e))) { if (u.splice(o, 1), !(t = i.length && bt(u))) return L.apply(n, i), n; break }
                    }
                    return (h || s(t, d))(i, e, !v, n, !e || tt.test(t) && mt(e.parentNode) || e), n
                }, n.sortStable = _.split("").sort(A).join("") === _, n.detectDuplicates = !!f, h(), n.sortDetached = ct((function(t) { return 1 & t.compareDocumentPosition(d.createElement("fieldset")) })), ct((function(t) { return t.innerHTML = "<a href='#'></a>", "#" === t.firstChild.getAttribute("href") })) || ft("type|href|height|width", (function(t, e, n) { if (!n) return t.getAttribute(e, "type" === e.toLowerCase() ? 1 : 2) })), n.attributes && ct((function(t) { return t.innerHTML = "<input/>", t.firstChild.setAttribute("value", ""), "" === t.firstChild.getAttribute("value") })) || ft("value", (function(t, e, n) { if (!n && "input" === t.nodeName.toLowerCase()) return t.defaultValue })), ct((function(t) { return null == t.getAttribute("disabled") })) || ft(R, (function(t, e, n) { var r; if (!n) return !0 === t[e] ? e.toLowerCase() : (r = t.getAttributeNode(e)) && r.specified ? r.value : null })), st
            }(n);
            E.find = C, E.expr = C.selectors, E.expr[":"] = E.expr.pseudos, E.uniqueSort = E.unique = C.uniqueSort, E.text = C.getText, E.isXMLDoc = C.isXML, E.contains = C.contains, E.escapeSelector = C.escape;
            var S = function(t, e, n) {
                    for (var r = [], i = void 0 !== n;
                        (t = t[e]) && 9 !== t.nodeType;)
                        if (1 === t.nodeType) {
                            if (i && E(t).is(n)) break;
                            r.push(t)
                        }
                    return r
                },
                k = function(t, e) { for (var n = []; t; t = t.nextSibling) 1 === t.nodeType && t !== e && n.push(t); return n },
                A = E.expr.match.needsContext;

            function I(t, e) { return t.nodeName && t.nodeName.toLowerCase() === e.toLowerCase() }
            var O = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

            function N(t, e, n) { return m(e) ? E.grep(t, (function(t, r) { return !!e.call(t, r, t) !== n })) : e.nodeType ? E.grep(t, (function(t) { return t === e !== n })) : "string" != typeof e ? E.grep(t, (function(t) { return c.call(e, t) > -1 !== n })) : E.filter(e, t, n) }
            E.filter = function(t, e, n) { var r = e[0]; return n && (t = ":not(" + t + ")"), 1 === e.length && 1 === r.nodeType ? E.find.matchesSelector(r, t) ? [r] : [] : E.find.matches(t, E.grep(e, (function(t) { return 1 === t.nodeType }))) }, E.fn.extend({
                find: function(t) {
                    var e, n, r = this.length,
                        i = this;
                    if ("string" != typeof t) return this.pushStack(E(t).filter((function() {
                        for (e = 0; e < r; e++)
                            if (E.contains(i[e], this)) return !0
                    })));
                    for (n = this.pushStack([]), e = 0; e < r; e++) E.find(t, i[e], n);
                    return r > 1 ? E.uniqueSort(n) : n
                },
                filter: function(t) { return this.pushStack(N(this, t || [], !1)) },
                not: function(t) { return this.pushStack(N(this, t || [], !0)) },
                is: function(t) { return !!N(this, "string" == typeof t && A.test(t) ? E(t) : t || [], !1).length }
            });
            var D, L = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
            (E.fn.init = function(t, e, n) {
                var r, i;
                if (!t) return this;
                if (n = n || D, "string" == typeof t) {
                    if (!(r = "<" === t[0] && ">" === t[t.length - 1] && t.length >= 3 ? [null, t, null] : L.exec(t)) || !r[1] && e) return !e || e.jquery ? (e || n).find(t) : this.constructor(e).find(t);
                    if (r[1]) {
                        if (e = e instanceof E ? e[0] : e, E.merge(this, E.parseHTML(r[1], e && e.nodeType ? e.ownerDocument || e : b, !0)), O.test(r[1]) && E.isPlainObject(e))
                            for (r in e) m(this[r]) ? this[r](e[r]) : this.attr(r, e[r]);
                        return this
                    }
                    return (i = b.getElementById(r[2])) && (this[0] = i, this.length = 1), this
                }
                return t.nodeType ? (this[0] = t, this.length = 1, this) : m(t) ? void 0 !== n.ready ? n.ready(t) : t(E) : E.makeArray(t, this)
            }).prototype = E.fn, D = E(b);
            var j = /^(?:parents|prev(?:Until|All))/,
                P = { children: !0, contents: !0, next: !0, prev: !0 };

            function R(t, e) {
                for (;
                    (t = t[e]) && 1 !== t.nodeType;);
                return t
            }
            E.fn.extend({
                has: function(t) {
                    var e = E(t, this),
                        n = e.length;
                    return this.filter((function() {
                        for (var t = 0; t < n; t++)
                            if (E.contains(this, e[t])) return !0
                    }))
                },
                closest: function(t, e) {
                    var n, r = 0,
                        i = this.length,
                        o = [],
                        a = "string" != typeof t && E(t);
                    if (!A.test(t))
                        for (; r < i; r++)
                            for (n = this[r]; n && n !== e; n = n.parentNode)
                                if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && E.find.matchesSelector(n, t))) { o.push(n); break }
                    return this.pushStack(o.length > 1 ? E.uniqueSort(o) : o)
                },
                index: function(t) { return t ? "string" == typeof t ? c.call(E(t), this[0]) : c.call(this, t.jquery ? t[0] : t) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1 },
                add: function(t, e) { return this.pushStack(E.uniqueSort(E.merge(this.get(), E(t, e)))) },
                addBack: function(t) { return this.add(null == t ? this.prevObject : this.prevObject.filter(t)) }
            }), E.each({ parent: function(t) { var e = t.parentNode; return e && 11 !== e.nodeType ? e : null }, parents: function(t) { return S(t, "parentNode") }, parentsUntil: function(t, e, n) { return S(t, "parentNode", n) }, next: function(t) { return R(t, "nextSibling") }, prev: function(t) { return R(t, "previousSibling") }, nextAll: function(t) { return S(t, "nextSibling") }, prevAll: function(t) { return S(t, "previousSibling") }, nextUntil: function(t, e, n) { return S(t, "nextSibling", n) }, prevUntil: function(t, e, n) { return S(t, "previousSibling", n) }, siblings: function(t) { return k((t.parentNode || {}).firstChild, t) }, children: function(t) { return k(t.firstChild) }, contents: function(t) { return null != t.contentDocument && a(t.contentDocument) ? t.contentDocument : (I(t, "template") && (t = t.content || t), E.merge([], t.childNodes)) } }, (function(t, e) { E.fn[t] = function(n, r) { var i = E.map(this, e, n); return "Until" !== t.slice(-5) && (r = n), r && "string" == typeof r && (i = E.filter(r, i)), this.length > 1 && (P[t] || E.uniqueSort(i), j.test(t) && i.reverse()), this.pushStack(i) } }));
            var F = /[^\x20\t\r\n\f]+/g;

            function M(t) { return t }

            function U(t) { throw t }

            function q(t, e, n, r) { var i; try { t && m(i = t.promise) ? i.call(t).done(e).fail(n) : t && m(i = t.then) ? i.call(t, e, n) : e.apply(void 0, [t].slice(r)) } catch (t) { n.apply(void 0, [t]) } }
            E.Callbacks = function(t) {
                t = "string" == typeof t ? function(t) { var e = {}; return E.each(t.match(F) || [], (function(t, n) { e[n] = !0 })), e }(t) : E.extend({}, t);
                var e, n, r, i, o = [],
                    a = [],
                    s = -1,
                    u = function() {
                        for (i = i || t.once, r = e = !0; a.length; s = -1)
                            for (n = a.shift(); ++s < o.length;) !1 === o[s].apply(n[0], n[1]) && t.stopOnFalse && (s = o.length, n = !1);
                        t.memory || (n = !1), e = !1, i && (o = n ? [] : "")
                    },
                    l = {
                        add: function() { return o && (n && !e && (s = o.length - 1, a.push(n)), function e(n) { E.each(n, (function(n, r) { m(r) ? t.unique && l.has(r) || o.push(r) : r && r.length && "string" !== x(r) && e(r) })) }(arguments), n && !e && u()), this },
                        remove: function() {
                            return E.each(arguments, (function(t, e) {
                                for (var n;
                                    (n = E.inArray(e, o, n)) > -1;) o.splice(n, 1), n <= s && s--
                            })), this
                        },
                        has: function(t) { return t ? E.inArray(t, o) > -1 : o.length > 0 },
                        empty: function() { return o && (o = []), this },
                        disable: function() { return i = a = [], o = n = "", this },
                        disabled: function() { return !o },
                        lock: function() { return i = a = [], n || e || (o = n = ""), this },
                        locked: function() { return !!i },
                        fireWith: function(t, n) { return i || (n = [t, (n = n || []).slice ? n.slice() : n], a.push(n), e || u()), this },
                        fire: function() { return l.fireWith(this, arguments), this },
                        fired: function() { return !!r }
                    };
                return l
            }, E.extend({
                Deferred: function(t) {
                    var e = [
                            ["notify", "progress", E.Callbacks("memory"), E.Callbacks("memory"), 2],
                            ["resolve", "done", E.Callbacks("once memory"), E.Callbacks("once memory"), 0, "resolved"],
                            ["reject", "fail", E.Callbacks("once memory"), E.Callbacks("once memory"), 1, "rejected"]
                        ],
                        r = "pending",
                        i = {
                            state: function() { return r },
                            always: function() { return o.done(arguments).fail(arguments), this },
                            catch: function(t) { return i.then(null, t) },
                            pipe: function() {
                                var t = arguments;
                                return E.Deferred((function(n) {
                                    E.each(e, (function(e, r) {
                                        var i = m(t[r[4]]) && t[r[4]];
                                        o[r[1]]((function() {
                                            var t = i && i.apply(this, arguments);
                                            t && m(t.promise) ? t.promise().progress(n.notify).done(n.resolve).fail(n.reject) : n[r[0] + "With"](this, i ? [t] : arguments)
                                        }))
                                    })), t = null
                                })).promise()
                            },
                            then: function(t, r, i) {
                                var o = 0;

                                function a(t, e, r, i) {
                                    return function() {
                                        var s = this,
                                            u = arguments,
                                            l = function() {
                                                var n, l;
                                                if (!(t < o)) {
                                                    if ((n = r.apply(s, u)) === e.promise()) throw new TypeError("Thenable self-resolution");
                                                    l = n && ("object" == typeof n || "function" == typeof n) && n.then, m(l) ? i ? l.call(n, a(o, e, M, i), a(o, e, U, i)) : (o++, l.call(n, a(o, e, M, i), a(o, e, U, i), a(o, e, M, e.notifyWith))) : (r !== M && (s = void 0, u = [n]), (i || e.resolveWith)(s, u))
                                                }
                                            },
                                            c = i ? l : function() { try { l() } catch (n) { E.Deferred.exceptionHook && E.Deferred.exceptionHook(n, c.stackTrace), t + 1 >= o && (r !== U && (s = void 0, u = [n]), e.rejectWith(s, u)) } };
                                        t ? c() : (E.Deferred.getStackHook && (c.stackTrace = E.Deferred.getStackHook()), n.setTimeout(c))
                                    }
                                }
                                return E.Deferred((function(n) { e[0][3].add(a(0, n, m(i) ? i : M, n.notifyWith)), e[1][3].add(a(0, n, m(t) ? t : M)), e[2][3].add(a(0, n, m(r) ? r : U)) })).promise()
                            },
                            promise: function(t) { return null != t ? E.extend(t, i) : i }
                        },
                        o = {};
                    return E.each(e, (function(t, n) {
                        var a = n[2],
                            s = n[5];
                        i[n[1]] = a.add, s && a.add((function() { r = s }), e[3 - t][2].disable, e[3 - t][3].disable, e[0][2].lock, e[0][3].lock), a.add(n[3].fire), o[n[0]] = function() { return o[n[0] + "With"](this === o ? void 0 : this, arguments), this }, o[n[0] + "With"] = a.fireWith
                    })), i.promise(o), t && t.call(o, o), o
                },
                when: function(t) {
                    var e = arguments.length,
                        n = e,
                        r = Array(n),
                        i = s.call(arguments),
                        o = E.Deferred(),
                        a = function(t) { return function(n) { r[t] = this, i[t] = arguments.length > 1 ? s.call(arguments) : n, --e || o.resolveWith(r, i) } };
                    if (e <= 1 && (q(t, o.done(a(n)).resolve, o.reject, !e), "pending" === o.state() || m(i[n] && i[n].then))) return o.then();
                    for (; n--;) q(i[n], a(n), o.reject);
                    return o.promise()
                }
            });
            var B = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
            E.Deferred.exceptionHook = function(t, e) { n.console && n.console.warn && t && B.test(t.name) && n.console.warn("jQuery.Deferred exception: " + t.message, t.stack, e) }, E.readyException = function(t) { n.setTimeout((function() { throw t })) };
            var H = E.Deferred();

            function z() { b.removeEventListener("DOMContentLoaded", z), n.removeEventListener("load", z), E.ready() }
            E.fn.ready = function(t) { return H.then(t).catch((function(t) { E.readyException(t) })), this }, E.extend({
                isReady: !1,
                readyWait: 1,
                ready: function(t) {
                    (!0 === t ? --E.readyWait : E.isReady) || (E.isReady = !0, !0 !== t && --E.readyWait > 0 || H.resolveWith(b, [E]))
                }
            }), E.ready.then = H.then, "complete" === b.readyState || "loading" !== b.readyState && !b.documentElement.doScroll ? n.setTimeout(E.ready) : (b.addEventListener("DOMContentLoaded", z), n.addEventListener("load", z));
            var W = function(t, e, n, r, i, o, a) {
                    var s = 0,
                        u = t.length,
                        l = null == n;
                    if ("object" === x(n))
                        for (s in i = !0, n) W(t, e, s, n[s], !0, o, a);
                    else if (void 0 !== r && (i = !0, m(r) || (a = !0), l && (a ? (e.call(t, r), e = null) : (l = e, e = function(t, e, n) { return l.call(E(t), n) })), e))
                        for (; s < u; s++) e(t[s], n, a ? r : r.call(t[s], s, e(t[s], n)));
                    return i ? t : l ? e.call(t) : u ? e(t[0], n) : o
                },
                Q = /^-ms-/,
                $ = /-([a-z])/g;

            function V(t, e) { return e.toUpperCase() }

            function Y(t) { return t.replace(Q, "ms-").replace($, V) }
            var X = function(t) { return 1 === t.nodeType || 9 === t.nodeType || !+t.nodeType };

            function G() { this.expando = E.expando + G.uid++ }
            G.uid = 1, G.prototype = {
                cache: function(t) { var e = t[this.expando]; return e || (e = {}, X(t) && (t.nodeType ? t[this.expando] = e : Object.defineProperty(t, this.expando, { value: e, configurable: !0 }))), e },
                set: function(t, e, n) {
                    var r, i = this.cache(t);
                    if ("string" == typeof e) i[Y(e)] = n;
                    else
                        for (r in e) i[Y(r)] = e[r];
                    return i
                },
                get: function(t, e) { return void 0 === e ? this.cache(t) : t[this.expando] && t[this.expando][Y(e)] },
                access: function(t, e, n) { return void 0 === e || e && "string" == typeof e && void 0 === n ? this.get(t, e) : (this.set(t, e, n), void 0 !== n ? n : e) },
                remove: function(t, e) { var n, r = t[this.expando]; if (void 0 !== r) { if (void 0 !== e) { n = (e = Array.isArray(e) ? e.map(Y) : (e = Y(e)) in r ? [e] : e.match(F) || []).length; for (; n--;) delete r[e[n]] }(void 0 === e || E.isEmptyObject(r)) && (t.nodeType ? t[this.expando] = void 0 : delete t[this.expando]) } },
                hasData: function(t) { var e = t[this.expando]; return void 0 !== e && !E.isEmptyObject(e) }
            };
            var K = new G,
                J = new G,
                Z = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                tt = /[A-Z]/g;

            function et(t, e, n) {
                var r;
                if (void 0 === n && 1 === t.nodeType)
                    if (r = "data-" + e.replace(tt, "-$&").toLowerCase(), "string" == typeof(n = t.getAttribute(r))) {
                        try { n = function(t) { return "true" === t || "false" !== t && ("null" === t ? null : t === +t + "" ? +t : Z.test(t) ? JSON.parse(t) : t) }(n) } catch (t) {}
                        J.set(t, e, n)
                    } else n = void 0;
                return n
            }
            E.extend({ hasData: function(t) { return J.hasData(t) || K.hasData(t) }, data: function(t, e, n) { return J.access(t, e, n) }, removeData: function(t, e) { J.remove(t, e) }, _data: function(t, e, n) { return K.access(t, e, n) }, _removeData: function(t, e) { K.remove(t, e) } }), E.fn.extend({
                data: function(t, e) {
                    var n, r, i, o = this[0],
                        a = o && o.attributes;
                    if (void 0 === t) {
                        if (this.length && (i = J.get(o), 1 === o.nodeType && !K.get(o, "hasDataAttrs"))) {
                            for (n = a.length; n--;) a[n] && 0 === (r = a[n].name).indexOf("data-") && (r = Y(r.slice(5)), et(o, r, i[r]));
                            K.set(o, "hasDataAttrs", !0)
                        }
                        return i
                    }
                    return "object" == typeof t ? this.each((function() { J.set(this, t) })) : W(this, (function(e) {
                        var n;
                        if (o && void 0 === e) return void 0 !== (n = J.get(o, t)) || void 0 !== (n = et(o, t)) ? n : void 0;
                        this.each((function() { J.set(this, t, e) }))
                    }), null, e, arguments.length > 1, null, !0)
                },
                removeData: function(t) { return this.each((function() { J.remove(this, t) })) }
            }), E.extend({
                queue: function(t, e, n) { var r; if (t) return e = (e || "fx") + "queue", r = K.get(t, e), n && (!r || Array.isArray(n) ? r = K.access(t, e, E.makeArray(n)) : r.push(n)), r || [] },
                dequeue: function(t, e) {
                    e = e || "fx";
                    var n = E.queue(t, e),
                        r = n.length,
                        i = n.shift(),
                        o = E._queueHooks(t, e);
                    "inprogress" === i && (i = n.shift(), r--), i && ("fx" === e && n.unshift("inprogress"), delete o.stop, i.call(t, (function() { E.dequeue(t, e) }), o)), !r && o && o.empty.fire()
                },
                _queueHooks: function(t, e) { var n = e + "queueHooks"; return K.get(t, n) || K.access(t, n, { empty: E.Callbacks("once memory").add((function() { K.remove(t, [e + "queue", n]) })) }) }
            }), E.fn.extend({
                queue: function(t, e) {
                    var n = 2;
                    return "string" != typeof t && (e = t, t = "fx", n--), arguments.length < n ? E.queue(this[0], t) : void 0 === e ? this : this.each((function() {
                        var n = E.queue(this, t, e);
                        E._queueHooks(this, t), "fx" === t && "inprogress" !== n[0] && E.dequeue(this, t)
                    }))
                },
                dequeue: function(t) { return this.each((function() { E.dequeue(this, t) })) },
                clearQueue: function(t) { return this.queue(t || "fx", []) },
                promise: function(t, e) {
                    var n, r = 1,
                        i = E.Deferred(),
                        o = this,
                        a = this.length,
                        s = function() {--r || i.resolveWith(o, [o]) };
                    for ("string" != typeof t && (e = t, t = void 0), t = t || "fx"; a--;)(n = K.get(o[a], t + "queueHooks")) && n.empty && (r++, n.empty.add(s));
                    return s(), i.promise(e)
                }
            });
            var nt = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
                rt = new RegExp("^(?:([+-])=|)(" + nt + ")([a-z%]*)$", "i"),
                it = ["Top", "Right", "Bottom", "Left"],
                ot = b.documentElement,
                at = function(t) { return E.contains(t.ownerDocument, t) },
                st = { composed: !0 };
            ot.getRootNode && (at = function(t) { return E.contains(t.ownerDocument, t) || t.getRootNode(st) === t.ownerDocument });
            var ut = function(t, e) { return "none" === (t = e || t).style.display || "" === t.style.display && at(t) && "none" === E.css(t, "display") };

            function lt(t, e, n, r) {
                var i, o, a = 20,
                    s = r ? function() { return r.cur() } : function() { return E.css(t, e, "") },
                    u = s(),
                    l = n && n[3] || (E.cssNumber[e] ? "" : "px"),
                    c = t.nodeType && (E.cssNumber[e] || "px" !== l && +u) && rt.exec(E.css(t, e));
                if (c && c[3] !== l) {
                    for (u /= 2, l = l || c[3], c = +u || 1; a--;) E.style(t, e, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;
                    c *= 2, E.style(t, e, c + l), n = n || []
                }
                return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i
            }
            var ct = {};

            function ft(t) {
                var e, n = t.ownerDocument,
                    r = t.nodeName,
                    i = ct[r];
                return i || (e = n.body.appendChild(n.createElement(r)), i = E.css(e, "display"), e.parentNode.removeChild(e), "none" === i && (i = "block"), ct[r] = i, i)
            }

            function ht(t, e) { for (var n, r, i = [], o = 0, a = t.length; o < a; o++)(r = t[o]).style && (n = r.style.display, e ? ("none" === n && (i[o] = K.get(r, "display") || null, i[o] || (r.style.display = "")), "" === r.style.display && ut(r) && (i[o] = ft(r))) : "none" !== n && (i[o] = "none", K.set(r, "display", n))); for (o = 0; o < a; o++) null != i[o] && (t[o].style.display = i[o]); return t }
            E.fn.extend({ show: function() { return ht(this, !0) }, hide: function() { return ht(this) }, toggle: function(t) { return "boolean" == typeof t ? t ? this.show() : this.hide() : this.each((function() { ut(this) ? E(this).show() : E(this).hide() })) } });
            var dt, pt, vt = /^(?:checkbox|radio)$/i,
                gt = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i,
                mt = /^$|^module$|\/(?:java|ecma)script/i;
            dt = b.createDocumentFragment().appendChild(b.createElement("div")), (pt = b.createElement("input")).setAttribute("type", "radio"), pt.setAttribute("checked", "checked"), pt.setAttribute("name", "t"), dt.appendChild(pt), g.checkClone = dt.cloneNode(!0).cloneNode(!0).lastChild.checked, dt.innerHTML = "<textarea>x</textarea>", g.noCloneChecked = !!dt.cloneNode(!0).lastChild.defaultValue, dt.innerHTML = "<option></option>", g.option = !!dt.lastChild;
            var yt = { thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };

            function bt(t, e) { var n; return n = void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e || "*") : void 0 !== t.querySelectorAll ? t.querySelectorAll(e || "*") : [], void 0 === e || e && I(t, e) ? E.merge([t], n) : n }

            function _t(t, e) { for (var n = 0, r = t.length; n < r; n++) K.set(t[n], "globalEval", !e || K.get(e[n], "globalEval")) }
            yt.tbody = yt.tfoot = yt.colgroup = yt.caption = yt.thead, yt.th = yt.td, g.option || (yt.optgroup = yt.option = [1, "<select multiple='multiple'>", "</select>"]);
            var wt = /<|&#?\w+;/;

            function xt(t, e, n, r, i) {
                for (var o, a, s, u, l, c, f = e.createDocumentFragment(), h = [], d = 0, p = t.length; d < p; d++)
                    if ((o = t[d]) || 0 === o)
                        if ("object" === x(o)) E.merge(h, o.nodeType ? [o] : o);
                        else if (wt.test(o)) {
                    for (a = a || f.appendChild(e.createElement("div")), s = (gt.exec(o) || ["", ""])[1].toLowerCase(), u = yt[s] || yt._default, a.innerHTML = u[1] + E.htmlPrefilter(o) + u[2], c = u[0]; c--;) a = a.lastChild;
                    E.merge(h, a.childNodes), (a = f.firstChild).textContent = ""
                } else h.push(e.createTextNode(o));
                for (f.textContent = "", d = 0; o = h[d++];)
                    if (r && E.inArray(o, r) > -1) i && i.push(o);
                    else if (l = at(o), a = bt(f.appendChild(o), "script"), l && _t(a), n)
                    for (c = 0; o = a[c++];) mt.test(o.type || "") && n.push(o);
                return f
            }
            var Et = /^([^.]*)(?:\.(.+)|)/;

            function Tt() { return !0 }

            function Ct() { return !1 }

            function St(t, e) { return t === function() { try { return b.activeElement } catch (t) {} }() == ("focus" === e) }

            function kt(t, e, n, r, i, o) {
                var a, s;
                if ("object" == typeof e) { for (s in "string" != typeof n && (r = r || n, n = void 0), e) kt(t, s, n, r, e[s], o); return t }
                if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Ct;
                else if (!i) return t;
                return 1 === o && (a = i, (i = function(t) { return E().off(t), a.apply(this, arguments) }).guid = a.guid || (a.guid = E.guid++)), t.each((function() { E.event.add(this, e, i, r, n) }))
            }

            function At(t, e, n) {
                n ? (K.set(t, e, !1), E.event.add(t, e, {
                    namespace: !1,
                    handler: function(t) {
                        var r, i, o = K.get(this, e);
                        if (1 & t.isTrigger && this[e]) {
                            if (o.length)(E.event.special[e] || {}).delegateType && t.stopPropagation();
                            else if (o = s.call(arguments), K.set(this, e, o), r = n(this, e), this[e](), o !== (i = K.get(this, e)) || r ? K.set(this, e, !1) : i = {}, o !== i) return t.stopImmediatePropagation(), t.preventDefault(), i && i.value
                        } else o.length && (K.set(this, e, { value: E.event.trigger(E.extend(o[0], E.Event.prototype), o.slice(1), this) }), t.stopImmediatePropagation())
                    }
                })) : void 0 === K.get(t, e) && E.event.add(t, e, Tt)
            }
            E.event = {
                global: {},
                add: function(t, e, n, r, i) {
                    var o, a, s, u, l, c, f, h, d, p, v, g = K.get(t);
                    if (X(t))
                        for (n.handler && (n = (o = n).handler, i = o.selector), i && E.find.matchesSelector(ot, i), n.guid || (n.guid = E.guid++), (u = g.events) || (u = g.events = Object.create(null)), (a = g.handle) || (a = g.handle = function(e) { return void 0 !== E && E.event.triggered !== e.type ? E.event.dispatch.apply(t, arguments) : void 0 }), l = (e = (e || "").match(F) || [""]).length; l--;) d = v = (s = Et.exec(e[l]) || [])[1], p = (s[2] || "").split(".").sort(), d && (f = E.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = E.event.special[d] || {}, c = E.extend({ type: d, origType: v, data: r, handler: n, guid: n.guid, selector: i, needsContext: i && E.expr.match.needsContext.test(i), namespace: p.join(".") }, o), (h = u[d]) || ((h = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, p, a) || t.addEventListener && t.addEventListener(d, a)), f.add && (f.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? h.splice(h.delegateCount++, 0, c) : h.push(c), E.event.global[d] = !0)
                },
                remove: function(t, e, n, r, i) {
                    var o, a, s, u, l, c, f, h, d, p, v, g = K.hasData(t) && K.get(t);
                    if (g && (u = g.events)) {
                        for (l = (e = (e || "").match(F) || [""]).length; l--;)
                            if (d = v = (s = Et.exec(e[l]) || [])[1], p = (s[2] || "").split(".").sort(), d) {
                                for (f = E.event.special[d] || {}, h = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = h.length; o--;) c = h[o], !i && v !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (h.splice(o, 1), c.selector && h.delegateCount--, f.remove && f.remove.call(t, c));
                                a && !h.length && (f.teardown && !1 !== f.teardown.call(t, p, g.handle) || E.removeEvent(t, d, g.handle), delete u[d])
                            } else
                                for (d in u) E.event.remove(t, d + e[l], n, r, !0);
                        E.isEmptyObject(u) && K.remove(t, "handle events")
                    }
                },
                dispatch: function(t) {
                    var e, n, r, i, o, a, s = new Array(arguments.length),
                        u = E.event.fix(t),
                        l = (K.get(this, "events") || Object.create(null))[u.type] || [],
                        c = E.event.special[u.type] || {};
                    for (s[0] = u, e = 1; e < arguments.length; e++) s[e] = arguments[e];
                    if (u.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, u)) {
                        for (a = E.event.handlers.call(this, u, l), e = 0;
                            (i = a[e++]) && !u.isPropagationStopped();)
                            for (u.currentTarget = i.elem, n = 0;
                                (o = i.handlers[n++]) && !u.isImmediatePropagationStopped();) u.rnamespace && !1 !== o.namespace && !u.rnamespace.test(o.namespace) || (u.handleObj = o, u.data = o.data, void 0 !== (r = ((E.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, s)) && !1 === (u.result = r) && (u.preventDefault(), u.stopPropagation()));
                        return c.postDispatch && c.postDispatch.call(this, u), u.result
                    }
                },
                handlers: function(t, e) {
                    var n, r, i, o, a, s = [],
                        u = e.delegateCount,
                        l = t.target;
                    if (u && l.nodeType && !("click" === t.type && t.button >= 1))
                        for (; l !== this; l = l.parentNode || this)
                            if (1 === l.nodeType && ("click" !== t.type || !0 !== l.disabled)) {
                                for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = (r = e[n]).selector + " "] && (a[i] = r.needsContext ? E(i, this).index(l) > -1 : E.find(i, this, null, [l]).length), a[i] && o.push(r);
                                o.length && s.push({ elem: l, handlers: o })
                            }
                    return l = this, u < e.length && s.push({ elem: l, handlers: e.slice(u) }), s
                },
                addProp: function(t, e) { Object.defineProperty(E.Event.prototype, t, { enumerable: !0, configurable: !0, get: m(e) ? function() { if (this.originalEvent) return e(this.originalEvent) } : function() { if (this.originalEvent) return this.originalEvent[t] }, set: function(e) { Object.defineProperty(this, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) } }) },
                fix: function(t) { return t[E.expando] ? t : new E.Event(t) },
                special: { load: { noBubble: !0 }, click: { setup: function(t) { var e = this || t; return vt.test(e.type) && e.click && I(e, "input") && At(e, "click", Tt), !1 }, trigger: function(t) { var e = this || t; return vt.test(e.type) && e.click && I(e, "input") && At(e, "click"), !0 }, _default: function(t) { var e = t.target; return vt.test(e.type) && e.click && I(e, "input") && K.get(e, "click") || I(e, "a") } }, beforeunload: { postDispatch: function(t) { void 0 !== t.result && t.originalEvent && (t.originalEvent.returnValue = t.result) } } }
            }, E.removeEvent = function(t, e, n) { t.removeEventListener && t.removeEventListener(e, n) }, E.Event = function(t, e) {
                if (!(this instanceof E.Event)) return new E.Event(t, e);
                t && t.type ? (this.originalEvent = t, this.type = t.type, this.isDefaultPrevented = t.defaultPrevented || void 0 === t.defaultPrevented && !1 === t.returnValue ? Tt : Ct, this.target = t.target && 3 === t.target.nodeType ? t.target.parentNode : t.target, this.currentTarget = t.currentTarget, this.relatedTarget = t.relatedTarget) : this.type = t, e && E.extend(this, e), this.timeStamp = t && t.timeStamp || Date.now(), this[E.expando] = !0
            }, E.Event.prototype = {
                constructor: E.Event,
                isDefaultPrevented: Ct,
                isPropagationStopped: Ct,
                isImmediatePropagationStopped: Ct,
                isSimulated: !1,
                preventDefault: function() {
                    var t = this.originalEvent;
                    this.isDefaultPrevented = Tt, t && !this.isSimulated && t.preventDefault()
                },
                stopPropagation: function() {
                    var t = this.originalEvent;
                    this.isPropagationStopped = Tt, t && !this.isSimulated && t.stopPropagation()
                },
                stopImmediatePropagation: function() {
                    var t = this.originalEvent;
                    this.isImmediatePropagationStopped = Tt, t && !this.isSimulated && t.stopImmediatePropagation(), this.stopPropagation()
                }
            }, E.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, char: !0, code: !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: !0 }, E.event.addProp), E.each({ focus: "focusin", blur: "focusout" }, (function(t, e) { E.event.special[t] = { setup: function() { return At(this, t, St), !1 }, trigger: function() { return At(this, t), !0 }, _default: function() { return !0 }, delegateType: e } })), E.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, (function(t, e) {
                E.event.special[t] = {
                    delegateType: e,
                    bindType: e,
                    handle: function(t) {
                        var n, r = this,
                            i = t.relatedTarget,
                            o = t.handleObj;
                        return i && (i === r || E.contains(r, i)) || (t.type = o.origType, n = o.handler.apply(this, arguments), t.type = e), n
                    }
                }
            })), E.fn.extend({ on: function(t, e, n, r) { return kt(this, t, e, n, r) }, one: function(t, e, n, r) { return kt(this, t, e, n, r, 1) }, off: function(t, e, n) { var r, i; if (t && t.preventDefault && t.handleObj) return r = t.handleObj, E(t.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this; if ("object" == typeof t) { for (i in t) this.off(i, e, t[i]); return this } return !1 !== e && "function" != typeof e || (n = e, e = void 0), !1 === n && (n = Ct), this.each((function() { E.event.remove(this, t, n, e) })) } });
            var It = /<script|<style|<link/i,
                Ot = /checked\s*(?:[^=]|=\s*.checked.)/i,
                Nt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

            function Dt(t, e) { return I(t, "table") && I(11 !== e.nodeType ? e : e.firstChild, "tr") && E(t).children("tbody")[0] || t }

            function Lt(t) { return t.type = (null !== t.getAttribute("type")) + "/" + t.type, t }

            function jt(t) { return "true/" === (t.type || "").slice(0, 5) ? t.type = t.type.slice(5) : t.removeAttribute("type"), t }

            function Pt(t, e) {
                var n, r, i, o, a, s;
                if (1 === e.nodeType) {
                    if (K.hasData(t) && (s = K.get(t).events))
                        for (i in K.remove(e, "handle events"), s)
                            for (n = 0, r = s[i].length; n < r; n++) E.event.add(e, i, s[i][n]);
                    J.hasData(t) && (o = J.access(t), a = E.extend({}, o), J.set(e, a))
                }
            }

            function Rt(t, e) { var n = e.nodeName.toLowerCase(); "input" === n && vt.test(t.type) ? e.checked = t.checked : "input" !== n && "textarea" !== n || (e.defaultValue = t.defaultValue) }

            function Ft(t, e, n, r) {
                e = u(e);
                var i, o, a, s, l, c, f = 0,
                    h = t.length,
                    d = h - 1,
                    p = e[0],
                    v = m(p);
                if (v || h > 1 && "string" == typeof p && !g.checkClone && Ot.test(p)) return t.each((function(i) {
                    var o = t.eq(i);
                    v && (e[0] = p.call(this, i, o.html())), Ft(o, e, n, r)
                }));
                if (h && (o = (i = xt(e, t[0].ownerDocument, !1, t, r)).firstChild, 1 === i.childNodes.length && (i = o), o || r)) {
                    for (s = (a = E.map(bt(i, "script"), Lt)).length; f < h; f++) l = i, f !== d && (l = E.clone(l, !0, !0), s && E.merge(a, bt(l, "script"))), n.call(t[f], l, f);
                    if (s)
                        for (c = a[a.length - 1].ownerDocument, E.map(a, jt), f = 0; f < s; f++) l = a[f], mt.test(l.type || "") && !K.access(l, "globalEval") && E.contains(c, l) && (l.src && "module" !== (l.type || "").toLowerCase() ? E._evalUrl && !l.noModule && E._evalUrl(l.src, { nonce: l.nonce || l.getAttribute("nonce") }, c) : w(l.textContent.replace(Nt, ""), l, c))
                }
                return t
            }

            function Mt(t, e, n) { for (var r, i = e ? E.filter(e, t) : t, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || E.cleanData(bt(r)), r.parentNode && (n && at(r) && _t(bt(r, "script")), r.parentNode.removeChild(r)); return t }
            E.extend({
                htmlPrefilter: function(t) { return t },
                clone: function(t, e, n) {
                    var r, i, o, a, s = t.cloneNode(!0),
                        u = at(t);
                    if (!(g.noCloneChecked || 1 !== t.nodeType && 11 !== t.nodeType || E.isXMLDoc(t)))
                        for (a = bt(s), r = 0, i = (o = bt(t)).length; r < i; r++) Rt(o[r], a[r]);
                    if (e)
                        if (n)
                            for (o = o || bt(t), a = a || bt(s), r = 0, i = o.length; r < i; r++) Pt(o[r], a[r]);
                        else Pt(t, s);
                    return (a = bt(s, "script")).length > 0 && _t(a, !u && bt(t, "script")), s
                },
                cleanData: function(t) {
                    for (var e, n, r, i = E.event.special, o = 0; void 0 !== (n = t[o]); o++)
                        if (X(n)) {
                            if (e = n[K.expando]) {
                                if (e.events)
                                    for (r in e.events) i[r] ? E.event.remove(n, r) : E.removeEvent(n, r, e.handle);
                                n[K.expando] = void 0
                            }
                            n[J.expando] && (n[J.expando] = void 0)
                        }
                }
            }), E.fn.extend({
                detach: function(t) { return Mt(this, t, !0) },
                remove: function(t) { return Mt(this, t) },
                text: function(t) { return W(this, (function(t) { return void 0 === t ? E.text(this) : this.empty().each((function() { 1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = t) })) }), null, t, arguments.length) },
                append: function() { return Ft(this, arguments, (function(t) { 1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Dt(this, t).appendChild(t) })) },
                prepend: function() {
                    return Ft(this, arguments, (function(t) {
                        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                            var e = Dt(this, t);
                            e.insertBefore(t, e.firstChild)
                        }
                    }))
                },
                before: function() { return Ft(this, arguments, (function(t) { this.parentNode && this.parentNode.insertBefore(t, this) })) },
                after: function() { return Ft(this, arguments, (function(t) { this.parentNode && this.parentNode.insertBefore(t, this.nextSibling) })) },
                empty: function() { for (var t, e = 0; null != (t = this[e]); e++) 1 === t.nodeType && (E.cleanData(bt(t, !1)), t.textContent = ""); return this },
                clone: function(t, e) { return t = null != t && t, e = null == e ? t : e, this.map((function() { return E.clone(this, t, e) })) },
                html: function(t) {
                    return W(this, (function(t) {
                        var e = this[0] || {},
                            n = 0,
                            r = this.length;
                        if (void 0 === t && 1 === e.nodeType) return e.innerHTML;
                        if ("string" == typeof t && !It.test(t) && !yt[(gt.exec(t) || ["", ""])[1].toLowerCase()]) {
                            t = E.htmlPrefilter(t);
                            try {
                                for (; n < r; n++) 1 === (e = this[n] || {}).nodeType && (E.cleanData(bt(e, !1)), e.innerHTML = t);
                                e = 0
                            } catch (t) {}
                        }
                        e && this.empty().append(t)
                    }), null, t, arguments.length)
                },
                replaceWith: function() {
                    var t = [];
                    return Ft(this, arguments, (function(e) {
                        var n = this.parentNode;
                        E.inArray(this, t) < 0 && (E.cleanData(bt(this)), n && n.replaceChild(e, this))
                    }), t)
                }
            }), E.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, (function(t, e) { E.fn[t] = function(t) { for (var n, r = [], i = E(t), o = i.length - 1, a = 0; a <= o; a++) n = a === o ? this : this.clone(!0), E(i[a])[e](n), l.apply(r, n.get()); return this.pushStack(r) } }));
            var Ut = new RegExp("^(" + nt + ")(?!px)[a-z%]+$", "i"),
                qt = function(t) { var e = t.ownerDocument.defaultView; return e && e.opener || (e = n), e.getComputedStyle(t) },
                Bt = function(t, e, n) { var r, i, o = {}; for (i in e) o[i] = t.style[i], t.style[i] = e[i]; for (i in r = n.call(t), e) t.style[i] = o[i]; return r },
                Ht = new RegExp(it.join("|"), "i");

            function zt(t, e, n) { var r, i, o, a, s = t.style; return (n = n || qt(t)) && ("" !== (a = n.getPropertyValue(e) || n[e]) || at(t) || (a = E.style(t, e)), !g.pixelBoxStyles() && Ut.test(a) && Ht.test(e) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a }

            function Wt(t, e) {
                return {
                    get: function() {
                        if (!t()) return (this.get = e).apply(this, arguments);
                        delete this.get
                    }
                }
            }! function() {
                function t() {
                    if (c) {
                        l.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", c.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", ot.appendChild(l).appendChild(c);
                        var t = n.getComputedStyle(c);
                        r = "1%" !== t.top, u = 12 === e(t.marginLeft), c.style.right = "60%", a = 36 === e(t.right), i = 36 === e(t.width), c.style.position = "absolute", o = 12 === e(c.offsetWidth / 3), ot.removeChild(l), c = null
                    }
                }

                function e(t) { return Math.round(parseFloat(t)) }
                var r, i, o, a, s, u, l = b.createElement("div"),
                    c = b.createElement("div");
                c.style && (c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", g.clearCloneStyle = "content-box" === c.style.backgroundClip, E.extend(g, { boxSizingReliable: function() { return t(), i }, pixelBoxStyles: function() { return t(), a }, pixelPosition: function() { return t(), r }, reliableMarginLeft: function() { return t(), u }, scrollboxSize: function() { return t(), o }, reliableTrDimensions: function() { var t, e, r, i; return null == s && (t = b.createElement("table"), e = b.createElement("tr"), r = b.createElement("div"), t.style.cssText = "position:absolute;left:-11111px;border-collapse:separate", e.style.cssText = "border:1px solid", e.style.height = "1px", r.style.height = "9px", r.style.display = "block", ot.appendChild(t).appendChild(e).appendChild(r), i = n.getComputedStyle(e), s = parseInt(i.height, 10) + parseInt(i.borderTopWidth, 10) + parseInt(i.borderBottomWidth, 10) === e.offsetHeight, ot.removeChild(t)), s } }))
            }();
            var Qt = ["Webkit", "Moz", "ms"],
                $t = b.createElement("div").style,
                Vt = {};

            function Yt(t) {
                var e = E.cssProps[t] || Vt[t];
                return e || (t in $t ? t : Vt[t] = function(t) {
                    for (var e = t[0].toUpperCase() + t.slice(1), n = Qt.length; n--;)
                        if ((t = Qt[n] + e) in $t) return t
                }(t) || t)
            }
            var Xt = /^(none|table(?!-c[ea]).+)/,
                Gt = /^--/,
                Kt = { position: "absolute", visibility: "hidden", display: "block" },
                Jt = { letterSpacing: "0", fontWeight: "400" };

            function Zt(t, e, n) { var r = rt.exec(e); return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : e }

            function te(t, e, n, r, i, o) {
                var a = "width" === e ? 1 : 0,
                    s = 0,
                    u = 0;
                if (n === (r ? "border" : "content")) return 0;
                for (; a < 4; a += 2) "margin" === n && (u += E.css(t, n + it[a], !0, i)), r ? ("content" === n && (u -= E.css(t, "padding" + it[a], !0, i)), "margin" !== n && (u -= E.css(t, "border" + it[a] + "Width", !0, i))) : (u += E.css(t, "padding" + it[a], !0, i), "padding" !== n ? u += E.css(t, "border" + it[a] + "Width", !0, i) : s += E.css(t, "border" + it[a] + "Width", !0, i));
                return !r && o >= 0 && (u += Math.max(0, Math.ceil(t["offset" + e[0].toUpperCase() + e.slice(1)] - o - u - s - .5)) || 0), u
            }

            function ee(t, e, n) {
                var r = qt(t),
                    i = (!g.boxSizingReliable() || n) && "border-box" === E.css(t, "boxSizing", !1, r),
                    o = i,
                    a = zt(t, e, r),
                    s = "offset" + e[0].toUpperCase() + e.slice(1);
                if (Ut.test(a)) {
                    if (!n) return a;
                    a = "auto"
                }
                return (!g.boxSizingReliable() && i || !g.reliableTrDimensions() && I(t, "tr") || "auto" === a || !parseFloat(a) && "inline" === E.css(t, "display", !1, r)) && t.getClientRects().length && (i = "border-box" === E.css(t, "boxSizing", !1, r), (o = s in t) && (a = t[s])), (a = parseFloat(a) || 0) + te(t, e, n || (i ? "border" : "content"), o, r, a) + "px"
            }

            function ne(t, e, n, r, i) { return new ne.prototype.init(t, e, n, r, i) }
            E.extend({
                cssHooks: { opacity: { get: function(t, e) { if (e) { var n = zt(t, "opacity"); return "" === n ? "1" : n } } } },
                cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, gridArea: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnStart: !0, gridRow: !0, gridRowEnd: !0, gridRowStart: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 },
                cssProps: {},
                style: function(t, e, n, r) {
                    if (t && 3 !== t.nodeType && 8 !== t.nodeType && t.style) {
                        var i, o, a, s = Y(e),
                            u = Gt.test(e),
                            l = t.style;
                        if (u || (e = Yt(s)), a = E.cssHooks[e] || E.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(t, !1, r)) ? i : l[e];
                        "string" === (o = typeof n) && (i = rt.exec(n)) && i[1] && (n = lt(t, e, i), o = "number"), null != n && n == n && ("number" !== o || u || (n += i && i[3] || (E.cssNumber[s] ? "" : "px")), g.clearCloneStyle || "" !== n || 0 !== e.indexOf("background") || (l[e] = "inherit"), a && "set" in a && void 0 === (n = a.set(t, n, r)) || (u ? l.setProperty(e, n) : l[e] = n))
                    }
                },
                css: function(t, e, n, r) { var i, o, a, s = Y(e); return Gt.test(e) || (e = Yt(s)), (a = E.cssHooks[e] || E.cssHooks[s]) && "get" in a && (i = a.get(t, !0, n)), void 0 === i && (i = zt(t, e, r)), "normal" === i && e in Jt && (i = Jt[e]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i }
            }), E.each(["height", "width"], (function(t, e) {
                E.cssHooks[e] = {
                    get: function(t, n, r) { if (n) return !Xt.test(E.css(t, "display")) || t.getClientRects().length && t.getBoundingClientRect().width ? ee(t, e, r) : Bt(t, Kt, (function() { return ee(t, e, r) })) },
                    set: function(t, n, r) {
                        var i, o = qt(t),
                            a = !g.scrollboxSize() && "absolute" === o.position,
                            s = (a || r) && "border-box" === E.css(t, "boxSizing", !1, o),
                            u = r ? te(t, e, r, s, o) : 0;
                        return s && a && (u -= Math.ceil(t["offset" + e[0].toUpperCase() + e.slice(1)] - parseFloat(o[e]) - te(t, e, "border", !1, o) - .5)), u && (i = rt.exec(n)) && "px" !== (i[3] || "px") && (t.style[e] = n, n = E.css(t, e)), Zt(0, n, u)
                    }
                }
            })), E.cssHooks.marginLeft = Wt(g.reliableMarginLeft, (function(t, e) { if (e) return (parseFloat(zt(t, "marginLeft")) || t.getBoundingClientRect().left - Bt(t, { marginLeft: 0 }, (function() { return t.getBoundingClientRect().left }))) + "px" })), E.each({ margin: "", padding: "", border: "Width" }, (function(t, e) { E.cssHooks[t + e] = { expand: function(n) { for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; r < 4; r++) i[t + it[r] + e] = o[r] || o[r - 2] || o[0]; return i } }, "margin" !== t && (E.cssHooks[t + e].set = Zt) })), E.fn.extend({
                css: function(t, e) {
                    return W(this, (function(t, e, n) {
                        var r, i, o = {},
                            a = 0;
                        if (Array.isArray(e)) { for (r = qt(t), i = e.length; a < i; a++) o[e[a]] = E.css(t, e[a], !1, r); return o }
                        return void 0 !== n ? E.style(t, e, n) : E.css(t, e)
                    }), t, e, arguments.length > 1)
                }
            }), E.Tween = ne, ne.prototype = { constructor: ne, init: function(t, e, n, r, i, o) { this.elem = t, this.prop = n, this.easing = i || E.easing._default, this.options = e, this.start = this.now = this.cur(), this.end = r, this.unit = o || (E.cssNumber[n] ? "" : "px") }, cur: function() { var t = ne.propHooks[this.prop]; return t && t.get ? t.get(this) : ne.propHooks._default.get(this) }, run: function(t) { var e, n = ne.propHooks[this.prop]; return this.options.duration ? this.pos = e = E.easing[this.easing](t, this.options.duration * t, 0, 1, this.options.duration) : this.pos = e = t, this.now = (this.end - this.start) * e + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : ne.propHooks._default.set(this), this } }, ne.prototype.init.prototype = ne.prototype, ne.propHooks = { _default: { get: function(t) { var e; return 1 !== t.elem.nodeType || null != t.elem[t.prop] && null == t.elem.style[t.prop] ? t.elem[t.prop] : (e = E.css(t.elem, t.prop, "")) && "auto" !== e ? e : 0 }, set: function(t) { E.fx.step[t.prop] ? E.fx.step[t.prop](t) : 1 !== t.elem.nodeType || !E.cssHooks[t.prop] && null == t.elem.style[Yt(t.prop)] ? t.elem[t.prop] = t.now : E.style(t.elem, t.prop, t.now + t.unit) } } }, ne.propHooks.scrollTop = ne.propHooks.scrollLeft = { set: function(t) { t.elem.nodeType && t.elem.parentNode && (t.elem[t.prop] = t.now) } }, E.easing = { linear: function(t) { return t }, swing: function(t) { return .5 - Math.cos(t * Math.PI) / 2 }, _default: "swing" }, E.fx = ne.prototype.init, E.fx.step = {};
            var re, ie, oe = /^(?:toggle|show|hide)$/,
                ae = /queueHooks$/;

            function se() { ie && (!1 === b.hidden && n.requestAnimationFrame ? n.requestAnimationFrame(se) : n.setTimeout(se, E.fx.interval), E.fx.tick()) }

            function ue() { return n.setTimeout((function() { re = void 0 })), re = Date.now() }

            function le(t, e) {
                var n, r = 0,
                    i = { height: t };
                for (e = e ? 1 : 0; r < 4; r += 2 - e) i["margin" + (n = it[r])] = i["padding" + n] = t;
                return e && (i.opacity = i.width = t), i
            }

            function ce(t, e, n) {
                for (var r, i = (fe.tweeners[e] || []).concat(fe.tweeners["*"]), o = 0, a = i.length; o < a; o++)
                    if (r = i[o].call(n, e, t)) return r
            }

            function fe(t, e, n) {
                var r, i, o = 0,
                    a = fe.prefilters.length,
                    s = E.Deferred().always((function() { delete u.elem })),
                    u = function() { if (i) return !1; for (var e = re || ue(), n = Math.max(0, l.startTime + l.duration - e), r = 1 - (n / l.duration || 0), o = 0, a = l.tweens.length; o < a; o++) l.tweens[o].run(r); return s.notifyWith(t, [l, r, n]), r < 1 && a ? n : (a || s.notifyWith(t, [l, 1, 0]), s.resolveWith(t, [l]), !1) },
                    l = s.promise({
                        elem: t,
                        props: E.extend({}, e),
                        opts: E.extend(!0, { specialEasing: {}, easing: E.easing._default }, n),
                        originalProperties: e,
                        originalOptions: n,
                        startTime: re || ue(),
                        duration: n.duration,
                        tweens: [],
                        createTween: function(e, n) { var r = E.Tween(t, l.opts, e, n, l.opts.specialEasing[e] || l.opts.easing); return l.tweens.push(r), r },
                        stop: function(e) {
                            var n = 0,
                                r = e ? l.tweens.length : 0;
                            if (i) return this;
                            for (i = !0; n < r; n++) l.tweens[n].run(1);
                            return e ? (s.notifyWith(t, [l, 1, 0]), s.resolveWith(t, [l, e])) : s.rejectWith(t, [l, e]), this
                        }
                    }),
                    c = l.props;
                for (! function(t, e) {
                        var n, r, i, o, a;
                        for (n in t)
                            if (i = e[r = Y(n)], o = t[n], Array.isArray(o) && (i = o[1], o = t[n] = o[0]), n !== r && (t[r] = o, delete t[n]), (a = E.cssHooks[r]) && "expand" in a)
                                for (n in o = a.expand(o), delete t[r], o) n in t || (t[n] = o[n], e[n] = i);
                            else e[r] = i
                    }(c, l.opts.specialEasing); o < a; o++)
                    if (r = fe.prefilters[o].call(l, t, c, l.opts)) return m(r.stop) && (E._queueHooks(l.elem, l.opts.queue).stop = r.stop.bind(r)), r;
                return E.map(c, ce, l), m(l.opts.start) && l.opts.start.call(t, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), E.fx.timer(E.extend(u, { elem: t, anim: l, queue: l.opts.queue })), l
            }
            E.Animation = E.extend(fe, {
                    tweeners: { "*": [function(t, e) { var n = this.createTween(t, e); return lt(n.elem, t, rt.exec(e), n), n }] },
                    tweener: function(t, e) { m(t) ? (e = t, t = ["*"]) : t = t.match(F); for (var n, r = 0, i = t.length; r < i; r++) n = t[r], fe.tweeners[n] = fe.tweeners[n] || [], fe.tweeners[n].unshift(e) },
                    prefilters: [function(t, e, n) {
                        var r, i, o, a, s, u, l, c, f = "width" in e || "height" in e,
                            h = this,
                            d = {},
                            p = t.style,
                            v = t.nodeType && ut(t),
                            g = K.get(t, "fxshow");
                        for (r in n.queue || (null == (a = E._queueHooks(t, "fx")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function() { a.unqueued || s() }), a.unqueued++, h.always((function() { h.always((function() { a.unqueued--, E.queue(t, "fx").length || a.empty.fire() })) }))), e)
                            if (i = e[r], oe.test(i)) {
                                if (delete e[r], o = o || "toggle" === i, i === (v ? "hide" : "show")) {
                                    if ("show" !== i || !g || void 0 === g[r]) continue;
                                    v = !0
                                }
                                d[r] = g && g[r] || E.style(t, r)
                            }
                        if ((u = !E.isEmptyObject(e)) || !E.isEmptyObject(d))
                            for (r in f && 1 === t.nodeType && (n.overflow = [p.overflow, p.overflowX, p.overflowY], null == (l = g && g.display) && (l = K.get(t, "display")), "none" === (c = E.css(t, "display")) && (l ? c = l : (ht([t], !0), l = t.style.display || l, c = E.css(t, "display"), ht([t]))), ("inline" === c || "inline-block" === c && null != l) && "none" === E.css(t, "float") && (u || (h.done((function() { p.display = l })), null == l && (c = p.display, l = "none" === c ? "" : c)), p.display = "inline-block")), n.overflow && (p.overflow = "hidden", h.always((function() { p.overflow = n.overflow[0], p.overflowX = n.overflow[1], p.overflowY = n.overflow[2] }))), u = !1, d) u || (g ? "hidden" in g && (v = g.hidden) : g = K.access(t, "fxshow", { display: l }), o && (g.hidden = !v), v && ht([t], !0), h.done((function() { for (r in v || ht([t]), K.remove(t, "fxshow"), d) E.style(t, r, d[r]) }))), u = ce(v ? g[r] : 0, r, h), r in g || (g[r] = u.start, v && (u.end = u.start, u.start = 0))
                    }],
                    prefilter: function(t, e) { e ? fe.prefilters.unshift(t) : fe.prefilters.push(t) }
                }), E.speed = function(t, e, n) { var r = t && "object" == typeof t ? E.extend({}, t) : { complete: n || !n && e || m(t) && t, duration: t, easing: n && e || e && !m(e) && e }; return E.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in E.fx.speeds ? r.duration = E.fx.speeds[r.duration] : r.duration = E.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function() { m(r.old) && r.old.call(this), r.queue && E.dequeue(this, r.queue) }, r }, E.fn.extend({
                    fadeTo: function(t, e, n, r) { return this.filter(ut).css("opacity", 0).show().end().animate({ opacity: e }, t, n, r) },
                    animate: function(t, e, n, r) {
                        var i = E.isEmptyObject(t),
                            o = E.speed(e, n, r),
                            a = function() {
                                var e = fe(this, E.extend({}, t), o);
                                (i || K.get(this, "finish")) && e.stop(!0)
                            };
                        return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a)
                    },
                    stop: function(t, e, n) {
                        var r = function(t) {
                            var e = t.stop;
                            delete t.stop, e(n)
                        };
                        return "string" != typeof t && (n = e, e = t, t = void 0), e && this.queue(t || "fx", []), this.each((function() {
                            var e = !0,
                                i = null != t && t + "queueHooks",
                                o = E.timers,
                                a = K.get(this);
                            if (i) a[i] && a[i].stop && r(a[i]);
                            else
                                for (i in a) a[i] && a[i].stop && ae.test(i) && r(a[i]);
                            for (i = o.length; i--;) o[i].elem !== this || null != t && o[i].queue !== t || (o[i].anim.stop(n), e = !1, o.splice(i, 1));
                            !e && n || E.dequeue(this, t)
                        }))
                    },
                    finish: function(t) {
                        return !1 !== t && (t = t || "fx"), this.each((function() {
                            var e, n = K.get(this),
                                r = n[t + "queue"],
                                i = n[t + "queueHooks"],
                                o = E.timers,
                                a = r ? r.length : 0;
                            for (n.finish = !0, E.queue(this, t, []), i && i.stop && i.stop.call(this, !0), e = o.length; e--;) o[e].elem === this && o[e].queue === t && (o[e].anim.stop(!0), o.splice(e, 1));
                            for (e = 0; e < a; e++) r[e] && r[e].finish && r[e].finish.call(this);
                            delete n.finish
                        }))
                    }
                }), E.each(["toggle", "show", "hide"], (function(t, e) {
                    var n = E.fn[e];
                    E.fn[e] = function(t, r, i) { return null == t || "boolean" == typeof t ? n.apply(this, arguments) : this.animate(le(e, !0), t, r, i) }
                })), E.each({ slideDown: le("show"), slideUp: le("hide"), slideToggle: le("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, (function(t, e) { E.fn[t] = function(t, n, r) { return this.animate(e, t, n, r) } })), E.timers = [], E.fx.tick = function() {
                    var t, e = 0,
                        n = E.timers;
                    for (re = Date.now(); e < n.length; e++)(t = n[e])() || n[e] !== t || n.splice(e--, 1);
                    n.length || E.fx.stop(), re = void 0
                }, E.fx.timer = function(t) { E.timers.push(t), E.fx.start() }, E.fx.interval = 13, E.fx.start = function() { ie || (ie = !0, se()) }, E.fx.stop = function() { ie = null }, E.fx.speeds = { slow: 600, fast: 200, _default: 400 }, E.fn.delay = function(t, e) {
                    return t = E.fx && E.fx.speeds[t] || t, e = e || "fx", this.queue(e, (function(e, r) {
                        var i = n.setTimeout(e, t);
                        r.stop = function() { n.clearTimeout(i) }
                    }))
                },
                function() {
                    var t = b.createElement("input"),
                        e = b.createElement("select").appendChild(b.createElement("option"));
                    t.type = "checkbox", g.checkOn = "" !== t.value, g.optSelected = e.selected, (t = b.createElement("input")).value = "t", t.type = "radio", g.radioValue = "t" === t.value
                }();
            var he, de = E.expr.attrHandle;
            E.fn.extend({ attr: function(t, e) { return W(this, E.attr, t, e, arguments.length > 1) }, removeAttr: function(t) { return this.each((function() { E.removeAttr(this, t) })) } }), E.extend({
                attr: function(t, e, n) { var r, i, o = t.nodeType; if (3 !== o && 8 !== o && 2 !== o) return void 0 === t.getAttribute ? E.prop(t, e, n) : (1 === o && E.isXMLDoc(t) || (i = E.attrHooks[e.toLowerCase()] || (E.expr.match.bool.test(e) ? he : void 0)), void 0 !== n ? null === n ? void E.removeAttr(t, e) : i && "set" in i && void 0 !== (r = i.set(t, n, e)) ? r : (t.setAttribute(e, n + ""), n) : i && "get" in i && null !== (r = i.get(t, e)) ? r : null == (r = E.find.attr(t, e)) ? void 0 : r) },
                attrHooks: { type: { set: function(t, e) { if (!g.radioValue && "radio" === e && I(t, "input")) { var n = t.value; return t.setAttribute("type", e), n && (t.value = n), e } } } },
                removeAttr: function(t, e) {
                    var n, r = 0,
                        i = e && e.match(F);
                    if (i && 1 === t.nodeType)
                        for (; n = i[r++];) t.removeAttribute(n)
                }
            }), he = { set: function(t, e, n) { return !1 === e ? E.removeAttr(t, n) : t.setAttribute(n, n), n } }, E.each(E.expr.match.bool.source.match(/\w+/g), (function(t, e) {
                var n = de[e] || E.find.attr;
                de[e] = function(t, e, r) { var i, o, a = e.toLowerCase(); return r || (o = de[a], de[a] = i, i = null != n(t, e, r) ? a : null, de[a] = o), i }
            }));
            var pe = /^(?:input|select|textarea|button)$/i,
                ve = /^(?:a|area)$/i;

            function ge(t) { return (t.match(F) || []).join(" ") }

            function me(t) { return t.getAttribute && t.getAttribute("class") || "" }

            function ye(t) { return Array.isArray(t) ? t : "string" == typeof t && t.match(F) || [] }
            E.fn.extend({ prop: function(t, e) { return W(this, E.prop, t, e, arguments.length > 1) }, removeProp: function(t) { return this.each((function() { delete this[E.propFix[t] || t] })) } }), E.extend({ prop: function(t, e, n) { var r, i, o = t.nodeType; if (3 !== o && 8 !== o && 2 !== o) return 1 === o && E.isXMLDoc(t) || (e = E.propFix[e] || e, i = E.propHooks[e]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(t, n, e)) ? r : t[e] = n : i && "get" in i && null !== (r = i.get(t, e)) ? r : t[e] }, propHooks: { tabIndex: { get: function(t) { var e = E.find.attr(t, "tabindex"); return e ? parseInt(e, 10) : pe.test(t.nodeName) || ve.test(t.nodeName) && t.href ? 0 : -1 } } }, propFix: { for: "htmlFor", class: "className" } }), g.optSelected || (E.propHooks.selected = {
                get: function(t) { var e = t.parentNode; return e && e.parentNode && e.parentNode.selectedIndex, null },
                set: function(t) {
                    var e = t.parentNode;
                    e && (e.selectedIndex, e.parentNode && e.parentNode.selectedIndex)
                }
            }), E.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], (function() { E.propFix[this.toLowerCase()] = this })), E.fn.extend({
                addClass: function(t) {
                    var e, n, r, i, o, a, s, u = 0;
                    if (m(t)) return this.each((function(e) { E(this).addClass(t.call(this, e, me(this))) }));
                    if ((e = ye(t)).length)
                        for (; n = this[u++];)
                            if (i = me(n), r = 1 === n.nodeType && " " + ge(i) + " ") {
                                for (a = 0; o = e[a++];) r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                                i !== (s = ge(r)) && n.setAttribute("class", s)
                            }
                    return this
                },
                removeClass: function(t) {
                    var e, n, r, i, o, a, s, u = 0;
                    if (m(t)) return this.each((function(e) { E(this).removeClass(t.call(this, e, me(this))) }));
                    if (!arguments.length) return this.attr("class", "");
                    if ((e = ye(t)).length)
                        for (; n = this[u++];)
                            if (i = me(n), r = 1 === n.nodeType && " " + ge(i) + " ") {
                                for (a = 0; o = e[a++];)
                                    for (; r.indexOf(" " + o + " ") > -1;) r = r.replace(" " + o + " ", " ");
                                i !== (s = ge(r)) && n.setAttribute("class", s)
                            }
                    return this
                },
                toggleClass: function(t, e) {
                    var n = typeof t,
                        r = "string" === n || Array.isArray(t);
                    return "boolean" == typeof e && r ? e ? this.addClass(t) : this.removeClass(t) : m(t) ? this.each((function(n) { E(this).toggleClass(t.call(this, n, me(this), e), e) })) : this.each((function() {
                        var e, i, o, a;
                        if (r)
                            for (i = 0, o = E(this), a = ye(t); e = a[i++];) o.hasClass(e) ? o.removeClass(e) : o.addClass(e);
                        else void 0 !== t && "boolean" !== n || ((e = me(this)) && K.set(this, "__className__", e), this.setAttribute && this.setAttribute("class", e || !1 === t ? "" : K.get(this, "__className__") || ""))
                    }))
                },
                hasClass: function(t) {
                    var e, n, r = 0;
                    for (e = " " + t + " "; n = this[r++];)
                        if (1 === n.nodeType && (" " + ge(me(n)) + " ").indexOf(e) > -1) return !0;
                    return !1
                }
            });
            var be = /\r/g;
            E.fn.extend({
                val: function(t) {
                    var e, n, r, i = this[0];
                    return arguments.length ? (r = m(t), this.each((function(n) {
                        var i;
                        1 === this.nodeType && (null == (i = r ? t.call(this, n, E(this).val()) : t) ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = E.map(i, (function(t) { return null == t ? "" : t + "" }))), (e = E.valHooks[this.type] || E.valHooks[this.nodeName.toLowerCase()]) && "set" in e && void 0 !== e.set(this, i, "value") || (this.value = i))
                    }))) : i ? (e = E.valHooks[i.type] || E.valHooks[i.nodeName.toLowerCase()]) && "get" in e && void 0 !== (n = e.get(i, "value")) ? n : "string" == typeof(n = i.value) ? n.replace(be, "") : null == n ? "" : n : void 0
                }
            }), E.extend({
                valHooks: {
                    option: { get: function(t) { var e = E.find.attr(t, "value"); return null != e ? e : ge(E.text(t)) } },
                    select: {
                        get: function(t) {
                            var e, n, r, i = t.options,
                                o = t.selectedIndex,
                                a = "select-one" === t.type,
                                s = a ? null : [],
                                u = a ? o + 1 : i.length;
                            for (r = o < 0 ? u : a ? o : 0; r < u; r++)
                                if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !I(n.parentNode, "optgroup"))) {
                                    if (e = E(n).val(), a) return e;
                                    s.push(e)
                                }
                            return s
                        },
                        set: function(t, e) { for (var n, r, i = t.options, o = E.makeArray(e), a = i.length; a--;)((r = i[a]).selected = E.inArray(E.valHooks.option.get(r), o) > -1) && (n = !0); return n || (t.selectedIndex = -1), o }
                    }
                }
            }), E.each(["radio", "checkbox"], (function() { E.valHooks[this] = { set: function(t, e) { if (Array.isArray(e)) return t.checked = E.inArray(E(t).val(), e) > -1 } }, g.checkOn || (E.valHooks[this].get = function(t) { return null === t.getAttribute("value") ? "on" : t.value }) })), g.focusin = "onfocusin" in n;
            var _e = /^(?:focusinfocus|focusoutblur)$/,
                we = function(t) { t.stopPropagation() };
            E.extend(E.event, {
                trigger: function(t, e, r, i) {
                    var o, a, s, u, l, c, f, h, p = [r || b],
                        v = d.call(t, "type") ? t.type : t,
                        g = d.call(t, "namespace") ? t.namespace.split(".") : [];
                    if (a = h = s = r = r || b, 3 !== r.nodeType && 8 !== r.nodeType && !_e.test(v + E.event.triggered) && (v.indexOf(".") > -1 && (g = v.split("."), v = g.shift(), g.sort()), l = v.indexOf(":") < 0 && "on" + v, (t = t[E.expando] ? t : new E.Event(v, "object" == typeof t && t)).isTrigger = i ? 2 : 3, t.namespace = g.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + g.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = r), e = null == e ? [t] : E.makeArray(e, [t]), f = E.event.special[v] || {}, i || !f.trigger || !1 !== f.trigger.apply(r, e))) {
                        if (!i && !f.noBubble && !y(r)) {
                            for (u = f.delegateType || v, _e.test(u + v) || (a = a.parentNode); a; a = a.parentNode) p.push(a), s = a;
                            s === (r.ownerDocument || b) && p.push(s.defaultView || s.parentWindow || n)
                        }
                        for (o = 0;
                            (a = p[o++]) && !t.isPropagationStopped();) h = a, t.type = o > 1 ? u : f.bindType || v, (c = (K.get(a, "events") || Object.create(null))[t.type] && K.get(a, "handle")) && c.apply(a, e), (c = l && a[l]) && c.apply && X(a) && (t.result = c.apply(a, e), !1 === t.result && t.preventDefault());
                        return t.type = v, i || t.isDefaultPrevented() || f._default && !1 !== f._default.apply(p.pop(), e) || !X(r) || l && m(r[v]) && !y(r) && ((s = r[l]) && (r[l] = null), E.event.triggered = v, t.isPropagationStopped() && h.addEventListener(v, we), r[v](), t.isPropagationStopped() && h.removeEventListener(v, we), E.event.triggered = void 0, s && (r[l] = s)), t.result
                    }
                },
                simulate: function(t, e, n) {
                    var r = E.extend(new E.Event, n, { type: t, isSimulated: !0 });
                    E.event.trigger(r, null, e)
                }
            }), E.fn.extend({ trigger: function(t, e) { return this.each((function() { E.event.trigger(t, e, this) })) }, triggerHandler: function(t, e) { var n = this[0]; if (n) return E.event.trigger(t, e, n, !0) } }), g.focusin || E.each({ focus: "focusin", blur: "focusout" }, (function(t, e) {
                var n = function(t) { E.event.simulate(e, t.target, E.event.fix(t)) };
                E.event.special[e] = {
                    setup: function() {
                        var r = this.ownerDocument || this.document || this,
                            i = K.access(r, e);
                        i || r.addEventListener(t, n, !0), K.access(r, e, (i || 0) + 1)
                    },
                    teardown: function() {
                        var r = this.ownerDocument || this.document || this,
                            i = K.access(r, e) - 1;
                        i ? K.access(r, e, i) : (r.removeEventListener(t, n, !0), K.remove(r, e))
                    }
                }
            }));
            var xe = n.location,
                Ee = { guid: Date.now() },
                Te = /\?/;
            E.parseXML = function(t) { var e, r; if (!t || "string" != typeof t) return null; try { e = (new n.DOMParser).parseFromString(t, "text/xml") } catch (t) {} return r = e && e.getElementsByTagName("parsererror")[0], e && !r || E.error("Invalid XML: " + (r ? E.map(r.childNodes, (function(t) { return t.textContent })).join("\n") : t)), e };
            var Ce = /\[\]$/,
                Se = /\r?\n/g,
                ke = /^(?:submit|button|image|reset|file)$/i,
                Ae = /^(?:input|select|textarea|keygen)/i;

            function Ie(t, e, n, r) {
                var i;
                if (Array.isArray(e)) E.each(e, (function(e, i) { n || Ce.test(t) ? r(t, i) : Ie(t + "[" + ("object" == typeof i && null != i ? e : "") + "]", i, n, r) }));
                else if (n || "object" !== x(e)) r(t, e);
                else
                    for (i in e) Ie(t + "[" + i + "]", e[i], n, r)
            }
            E.param = function(t, e) {
                var n, r = [],
                    i = function(t, e) {
                        var n = m(e) ? e() : e;
                        r[r.length] = encodeURIComponent(t) + "=" + encodeURIComponent(null == n ? "" : n)
                    };
                if (null == t) return "";
                if (Array.isArray(t) || t.jquery && !E.isPlainObject(t)) E.each(t, (function() { i(this.name, this.value) }));
                else
                    for (n in t) Ie(n, t[n], e, i);
                return r.join("&")
            }, E.fn.extend({ serialize: function() { return E.param(this.serializeArray()) }, serializeArray: function() { return this.map((function() { var t = E.prop(this, "elements"); return t ? E.makeArray(t) : this })).filter((function() { var t = this.type; return this.name && !E(this).is(":disabled") && Ae.test(this.nodeName) && !ke.test(t) && (this.checked || !vt.test(t)) })).map((function(t, e) { var n = E(this).val(); return null == n ? null : Array.isArray(n) ? E.map(n, (function(t) { return { name: e.name, value: t.replace(Se, "\r\n") } })) : { name: e.name, value: n.replace(Se, "\r\n") } })).get() } });
            var Oe = /%20/g,
                Ne = /#.*$/,
                De = /([?&])_=[^&]*/,
                Le = /^(.*?):[ \t]*([^\r\n]*)$/gm,
                je = /^(?:GET|HEAD)$/,
                Pe = /^\/\//,
                Re = {},
                Fe = {},
                Me = "*/".concat("*"),
                Ue = b.createElement("a");

            function qe(t) {
                return function(e, n) {
                    "string" != typeof e && (n = e, e = "*");
                    var r, i = 0,
                        o = e.toLowerCase().match(F) || [];
                    if (m(n))
                        for (; r = o[i++];) "+" === r[0] ? (r = r.slice(1) || "*", (t[r] = t[r] || []).unshift(n)) : (t[r] = t[r] || []).push(n)
                }
            }

            function Be(t, e, n, r) {
                var i = {},
                    o = t === Fe;

                function a(s) { var u; return i[s] = !0, E.each(t[s] || [], (function(t, s) { var l = s(e, n, r); return "string" != typeof l || o || i[l] ? o ? !(u = l) : void 0 : (e.dataTypes.unshift(l), a(l), !1) })), u }
                return a(e.dataTypes[0]) || !i["*"] && a("*")
            }

            function He(t, e) { var n, r, i = E.ajaxSettings.flatOptions || {}; for (n in e) void 0 !== e[n] && ((i[n] ? t : r || (r = {}))[n] = e[n]); return r && E.extend(!0, t, r), t }
            Ue.href = xe.href, E.extend({
                active: 0,
                lastModified: {},
                etag: {},
                ajaxSettings: { url: xe.href, type: "GET", isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Me, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": E.parseXML }, flatOptions: { url: !0, context: !0 } },
                ajaxSetup: function(t, e) { return e ? He(He(t, E.ajaxSettings), e) : He(E.ajaxSettings, t) },
                ajaxPrefilter: qe(Re),
                ajaxTransport: qe(Fe),
                ajax: function(t, e) {
                    "object" == typeof t && (e = t, t = void 0), e = e || {};
                    var r, i, o, a, s, u, l, c, f, h, d = E.ajaxSetup({}, e),
                        p = d.context || d,
                        v = d.context && (p.nodeType || p.jquery) ? E(p) : E.event,
                        g = E.Deferred(),
                        m = E.Callbacks("once memory"),
                        y = d.statusCode || {},
                        _ = {},
                        w = {},
                        x = "canceled",
                        T = {
                            readyState: 0,
                            getResponseHeader: function(t) {
                                var e;
                                if (l) {
                                    if (!a)
                                        for (a = {}; e = Le.exec(o);) a[e[1].toLowerCase() + " "] = (a[e[1].toLowerCase() + " "] || []).concat(e[2]);
                                    e = a[t.toLowerCase() + " "]
                                }
                                return null == e ? null : e.join(", ")
                            },
                            getAllResponseHeaders: function() { return l ? o : null },
                            setRequestHeader: function(t, e) { return null == l && (t = w[t.toLowerCase()] = w[t.toLowerCase()] || t, _[t] = e), this },
                            overrideMimeType: function(t) { return null == l && (d.mimeType = t), this },
                            statusCode: function(t) {
                                var e;
                                if (t)
                                    if (l) T.always(t[T.status]);
                                    else
                                        for (e in t) y[e] = [y[e], t[e]];
                                return this
                            },
                            abort: function(t) { var e = t || x; return r && r.abort(e), C(0, e), this }
                        };
                    if (g.promise(T), d.url = ((t || d.url || xe.href) + "").replace(Pe, xe.protocol + "//"), d.type = e.method || e.type || d.method || d.type, d.dataTypes = (d.dataType || "*").toLowerCase().match(F) || [""], null == d.crossDomain) { u = b.createElement("a"); try { u.href = d.url, u.href = u.href, d.crossDomain = Ue.protocol + "//" + Ue.host != u.protocol + "//" + u.host } catch (t) { d.crossDomain = !0 } }
                    if (d.data && d.processData && "string" != typeof d.data && (d.data = E.param(d.data, d.traditional)), Be(Re, d, e, T), l) return T;
                    for (f in (c = E.event && d.global) && 0 == E.active++ && E.event.trigger("ajaxStart"), d.type = d.type.toUpperCase(), d.hasContent = !je.test(d.type), i = d.url.replace(Ne, ""), d.hasContent ? d.data && d.processData && 0 === (d.contentType || "").indexOf("application/x-www-form-urlencoded") && (d.data = d.data.replace(Oe, "+")) : (h = d.url.slice(i.length), d.data && (d.processData || "string" == typeof d.data) && (i += (Te.test(i) ? "&" : "?") + d.data, delete d.data), !1 === d.cache && (i = i.replace(De, "$1"), h = (Te.test(i) ? "&" : "?") + "_=" + Ee.guid++ + h), d.url = i + h), d.ifModified && (E.lastModified[i] && T.setRequestHeader("If-Modified-Since", E.lastModified[i]), E.etag[i] && T.setRequestHeader("If-None-Match", E.etag[i])), (d.data && d.hasContent && !1 !== d.contentType || e.contentType) && T.setRequestHeader("Content-Type", d.contentType), T.setRequestHeader("Accept", d.dataTypes[0] && d.accepts[d.dataTypes[0]] ? d.accepts[d.dataTypes[0]] + ("*" !== d.dataTypes[0] ? ", " + Me + "; q=0.01" : "") : d.accepts["*"]), d.headers) T.setRequestHeader(f, d.headers[f]);
                    if (d.beforeSend && (!1 === d.beforeSend.call(p, T, d) || l)) return T.abort();
                    if (x = "abort", m.add(d.complete), T.done(d.success), T.fail(d.error), r = Be(Fe, d, e, T)) {
                        if (T.readyState = 1, c && v.trigger("ajaxSend", [T, d]), l) return T;
                        d.async && d.timeout > 0 && (s = n.setTimeout((function() { T.abort("timeout") }), d.timeout));
                        try { l = !1, r.send(_, C) } catch (t) {
                            if (l) throw t;
                            C(-1, t)
                        }
                    } else C(-1, "No Transport");

                    function C(t, e, a, u) {
                        var f, h, b, _, w, x = e;
                        l || (l = !0, s && n.clearTimeout(s), r = void 0, o = u || "", T.readyState = t > 0 ? 4 : 0, f = t >= 200 && t < 300 || 304 === t, a && (_ = function(t, e, n) {
                            for (var r, i, o, a, s = t.contents, u = t.dataTypes;
                                "*" === u[0];) u.shift(), void 0 === r && (r = t.mimeType || e.getResponseHeader("Content-Type"));
                            if (r)
                                for (i in s)
                                    if (s[i] && s[i].test(r)) { u.unshift(i); break }
                            if (u[0] in n) o = u[0];
                            else {
                                for (i in n) {
                                    if (!u[0] || t.converters[i + " " + u[0]]) { o = i; break }
                                    a || (a = i)
                                }
                                o = o || a
                            }
                            if (o) return o !== u[0] && u.unshift(o), n[o]
                        }(d, T, a)), !f && E.inArray("script", d.dataTypes) > -1 && E.inArray("json", d.dataTypes) < 0 && (d.converters["text script"] = function() {}), _ = function(t, e, n, r) {
                            var i, o, a, s, u, l = {},
                                c = t.dataTypes.slice();
                            if (c[1])
                                for (a in t.converters) l[a.toLowerCase()] = t.converters[a];
                            for (o = c.shift(); o;)
                                if (t.responseFields[o] && (n[t.responseFields[o]] = e), !u && r && t.dataFilter && (e = t.dataFilter(e, t.dataType)), u = o, o = c.shift())
                                    if ("*" === o) o = u;
                                    else if ("*" !== u && u !== o) {
                                if (!(a = l[u + " " + o] || l["* " + o]))
                                    for (i in l)
                                        if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {!0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1])); break }
                                if (!0 !== a)
                                    if (a && t.throws) e = a(e);
                                    else try { e = a(e) } catch (t) { return { state: "parsererror", error: a ? t : "No conversion from " + u + " to " + o } }
                            }
                            return { state: "success", data: e }
                        }(d, _, T, f), f ? (d.ifModified && ((w = T.getResponseHeader("Last-Modified")) && (E.lastModified[i] = w), (w = T.getResponseHeader("etag")) && (E.etag[i] = w)), 204 === t || "HEAD" === d.type ? x = "nocontent" : 304 === t ? x = "notmodified" : (x = _.state, h = _.data, f = !(b = _.error))) : (b = x, !t && x || (x = "error", t < 0 && (t = 0))), T.status = t, T.statusText = (e || x) + "", f ? g.resolveWith(p, [h, x, T]) : g.rejectWith(p, [T, x, b]), T.statusCode(y), y = void 0, c && v.trigger(f ? "ajaxSuccess" : "ajaxError", [T, d, f ? h : b]), m.fireWith(p, [T, x]), c && (v.trigger("ajaxComplete", [T, d]), --E.active || E.event.trigger("ajaxStop")))
                    }
                    return T
                },
                getJSON: function(t, e, n) { return E.get(t, e, n, "json") },
                getScript: function(t, e) { return E.get(t, void 0, e, "script") }
            }), E.each(["get", "post"], (function(t, e) { E[e] = function(t, n, r, i) { return m(n) && (i = i || r, r = n, n = void 0), E.ajax(E.extend({ url: t, type: e, dataType: i, data: n, success: r }, E.isPlainObject(t) && t)) } })), E.ajaxPrefilter((function(t) { var e; for (e in t.headers) "content-type" === e.toLowerCase() && (t.contentType = t.headers[e] || "") })), E._evalUrl = function(t, e, n) { return E.ajax({ url: t, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, converters: { "text script": function() {} }, dataFilter: function(t) { E.globalEval(t, e, n) } }) }, E.fn.extend({
                wrapAll: function(t) { var e; return this[0] && (m(t) && (t = t.call(this[0])), e = E(t, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && e.insertBefore(this[0]), e.map((function() { for (var t = this; t.firstElementChild;) t = t.firstElementChild; return t })).append(this)), this },
                wrapInner: function(t) {
                    return m(t) ? this.each((function(e) { E(this).wrapInner(t.call(this, e)) })) : this.each((function() {
                        var e = E(this),
                            n = e.contents();
                        n.length ? n.wrapAll(t) : e.append(t)
                    }))
                },
                wrap: function(t) { var e = m(t); return this.each((function(n) { E(this).wrapAll(e ? t.call(this, n) : t) })) },
                unwrap: function(t) { return this.parent(t).not("body").each((function() { E(this).replaceWith(this.childNodes) })), this }
            }), E.expr.pseudos.hidden = function(t) { return !E.expr.pseudos.visible(t) }, E.expr.pseudos.visible = function(t) { return !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length) }, E.ajaxSettings.xhr = function() { try { return new n.XMLHttpRequest } catch (t) {} };
            var ze = { 0: 200, 1223: 204 },
                We = E.ajaxSettings.xhr();
            g.cors = !!We && "withCredentials" in We, g.ajax = We = !!We, E.ajaxTransport((function(t) {
                var e, r;
                if (g.cors || We && !t.crossDomain) return {
                    send: function(i, o) {
                        var a, s = t.xhr();
                        if (s.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields)
                            for (a in t.xhrFields) s[a] = t.xhrFields[a];
                        for (a in t.mimeType && s.overrideMimeType && s.overrideMimeType(t.mimeType), t.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest"), i) s.setRequestHeader(a, i[a]);
                        e = function(t) { return function() { e && (e = r = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null, "abort" === t ? s.abort() : "error" === t ? "number" != typeof s.status ? o(0, "error") : o(s.status, s.statusText) : o(ze[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? { binary: s.response } : { text: s.responseText }, s.getAllResponseHeaders())) } }, s.onload = e(), r = s.onerror = s.ontimeout = e("error"), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function() { 4 === s.readyState && n.setTimeout((function() { e && r() })) }, e = e("abort");
                        try { s.send(t.hasContent && t.data || null) } catch (t) { if (e) throw t }
                    },
                    abort: function() { e && e() }
                }
            })), E.ajaxPrefilter((function(t) { t.crossDomain && (t.contents.script = !1) })), E.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function(t) { return E.globalEval(t), t } } }), E.ajaxPrefilter("script", (function(t) { void 0 === t.cache && (t.cache = !1), t.crossDomain && (t.type = "GET") })), E.ajaxTransport("script", (function(t) { var e, n; if (t.crossDomain || t.scriptAttrs) return { send: function(r, i) { e = E("<script>").attr(t.scriptAttrs || {}).prop({ charset: t.scriptCharset, src: t.url }).on("load error", n = function(t) { e.remove(), n = null, t && i("error" === t.type ? 404 : 200, t.type) }), b.head.appendChild(e[0]) }, abort: function() { n && n() } } }));
            var Qe, $e = [],
                Ve = /(=)\?(?=&|$)|\?\?/;
            E.ajaxSetup({ jsonp: "callback", jsonpCallback: function() { var t = $e.pop() || E.expando + "_" + Ee.guid++; return this[t] = !0, t } }), E.ajaxPrefilter("json jsonp", (function(t, e, r) { var i, o, a, s = !1 !== t.jsonp && (Ve.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Ve.test(t.data) && "data"); if (s || "jsonp" === t.dataTypes[0]) return i = t.jsonpCallback = m(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, s ? t[s] = t[s].replace(Ve, "$1" + i) : !1 !== t.jsonp && (t.url += (Te.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), t.converters["script json"] = function() { return a || E.error(i + " was not called"), a[0] }, t.dataTypes[0] = "json", o = n[i], n[i] = function() { a = arguments }, r.always((function() { void 0 === o ? E(n).removeProp(i) : n[i] = o, t[i] && (t.jsonpCallback = e.jsonpCallback, $e.push(i)), a && m(o) && o(a[0]), a = o = void 0 })), "script" })), g.createHTMLDocument = ((Qe = b.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 2 === Qe.childNodes.length), E.parseHTML = function(t, e, n) { return "string" != typeof t ? [] : ("boolean" == typeof e && (n = e, e = !1), e || (g.createHTMLDocument ? ((r = (e = b.implementation.createHTMLDocument("")).createElement("base")).href = b.location.href, e.head.appendChild(r)) : e = b), o = !n && [], (i = O.exec(t)) ? [e.createElement(i[1])] : (i = xt([t], e, o), o && o.length && E(o).remove(), E.merge([], i.childNodes))); var r, i, o }, E.fn.load = function(t, e, n) {
                var r, i, o, a = this,
                    s = t.indexOf(" ");
                return s > -1 && (r = ge(t.slice(s)), t = t.slice(0, s)), m(e) ? (n = e, e = void 0) : e && "object" == typeof e && (i = "POST"), a.length > 0 && E.ajax({ url: t, type: i || "GET", dataType: "html", data: e }).done((function(t) { o = arguments, a.html(r ? E("<div>").append(E.parseHTML(t)).find(r) : t) })).always(n && function(t, e) { a.each((function() { n.apply(this, o || [t.responseText, e, t]) })) }), this
            }, E.expr.pseudos.animated = function(t) { return E.grep(E.timers, (function(e) { return t === e.elem })).length }, E.offset = {
                setOffset: function(t, e, n) {
                    var r, i, o, a, s, u, l = E.css(t, "position"),
                        c = E(t),
                        f = {};
                    "static" === l && (t.style.position = "relative"), s = c.offset(), o = E.css(t, "top"), u = E.css(t, "left"), ("absolute" === l || "fixed" === l) && (o + u).indexOf("auto") > -1 ? (a = (r = c.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), m(e) && (e = e.call(t, n, E.extend({}, s))), null != e.top && (f.top = e.top - s.top + a), null != e.left && (f.left = e.left - s.left + i), "using" in e ? e.using.call(t, f) : c.css(f)
                }
            }, E.fn.extend({
                offset: function(t) { if (arguments.length) return void 0 === t ? this : this.each((function(e) { E.offset.setOffset(this, t, e) })); var e, n, r = this[0]; return r ? r.getClientRects().length ? (e = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, { top: e.top + n.pageYOffset, left: e.left + n.pageXOffset }) : { top: 0, left: 0 } : void 0 },
                position: function() {
                    if (this[0]) {
                        var t, e, n, r = this[0],
                            i = { top: 0, left: 0 };
                        if ("fixed" === E.css(r, "position")) e = r.getBoundingClientRect();
                        else {
                            for (e = this.offset(), n = r.ownerDocument, t = r.offsetParent || n.documentElement; t && (t === n.body || t === n.documentElement) && "static" === E.css(t, "position");) t = t.parentNode;
                            t && t !== r && 1 === t.nodeType && ((i = E(t).offset()).top += E.css(t, "borderTopWidth", !0), i.left += E.css(t, "borderLeftWidth", !0))
                        }
                        return { top: e.top - i.top - E.css(r, "marginTop", !0), left: e.left - i.left - E.css(r, "marginLeft", !0) }
                    }
                },
                offsetParent: function() { return this.map((function() { for (var t = this.offsetParent; t && "static" === E.css(t, "position");) t = t.offsetParent; return t || ot })) }
            }), E.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, (function(t, e) {
                var n = "pageYOffset" === e;
                E.fn[t] = function(r) {
                    return W(this, (function(t, r, i) {
                        var o;
                        if (y(t) ? o = t : 9 === t.nodeType && (o = t.defaultView), void 0 === i) return o ? o[e] : t[r];
                        o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : t[r] = i
                    }), t, r, arguments.length)
                }
            })), E.each(["top", "left"], (function(t, e) { E.cssHooks[e] = Wt(g.pixelPosition, (function(t, n) { if (n) return n = zt(t, e), Ut.test(n) ? E(t).position()[e] + "px" : n })) })), E.each({ Height: "height", Width: "width" }, (function(t, e) {
                E.each({ padding: "inner" + t, content: e, "": "outer" + t }, (function(n, r) {
                    E.fn[r] = function(i, o) {
                        var a = arguments.length && (n || "boolean" != typeof i),
                            s = n || (!0 === i || !0 === o ? "margin" : "border");
                        return W(this, (function(e, n, i) { var o; return y(e) ? 0 === r.indexOf("outer") ? e["inner" + t] : e.document.documentElement["client" + t] : 9 === e.nodeType ? (o = e.documentElement, Math.max(e.body["scroll" + t], o["scroll" + t], e.body["offset" + t], o["offset" + t], o["client" + t])) : void 0 === i ? E.css(e, n, s) : E.style(e, n, i, s) }), e, a ? i : void 0, a)
                    }
                }))
            })), E.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], (function(t, e) { E.fn[e] = function(t) { return this.on(e, t) } })), E.fn.extend({ bind: function(t, e, n) { return this.on(t, null, e, n) }, unbind: function(t, e) { return this.off(t, null, e) }, delegate: function(t, e, n, r) { return this.on(e, t, n, r) }, undelegate: function(t, e, n) { return 1 === arguments.length ? this.off(t, "**") : this.off(e, t || "**", n) }, hover: function(t, e) { return this.mouseenter(t).mouseleave(e || t) } }), E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), (function(t, e) { E.fn[e] = function(t, n) { return arguments.length > 0 ? this.on(e, null, t, n) : this.trigger(e) } }));
            var Ye = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
            E.proxy = function(t, e) { var n, r, i; if ("string" == typeof e && (n = t[e], e = t, t = n), m(t)) return r = s.call(arguments, 2), (i = function() { return t.apply(e || this, r.concat(s.call(arguments))) }).guid = t.guid = t.guid || E.guid++, i }, E.holdReady = function(t) { t ? E.readyWait++ : E.ready(!0) }, E.isArray = Array.isArray, E.parseJSON = JSON.parse, E.nodeName = I, E.isFunction = m, E.isWindow = y, E.camelCase = Y, E.type = x, E.now = Date.now, E.isNumeric = function(t) { var e = E.type(t); return ("number" === e || "string" === e) && !isNaN(t - parseFloat(t)) }, E.trim = function(t) { return null == t ? "" : (t + "").replace(Ye, "") }, void 0 === (r = function() { return E }.apply(e, [])) || (t.exports = r);
            var Xe = n.jQuery,
                Ge = n.$;
            return E.noConflict = function(t) { return n.$ === E && (n.$ = Ge), t && n.jQuery === E && (n.jQuery = Xe), E }, void 0 === i && (n.jQuery = n.$ = E), E
        }))
    },
    HSsa: function(t, e, n) {
        "use strict";
        t.exports = function(t, e) { return function() { for (var n = new Array(arguments.length), r = 0; r < n.length; r++) n[r] = arguments[r]; return t.apply(e, n) } }
    },
    JEQr: function(t, e, n) {
        "use strict";
        (function(e) {
            var r = n("xTJ+"),
                i = n("yK9s"),
                o = n("OH9c"),
                a = { "Content-Type": "application/x-www-form-urlencoded" };

            function s(t, e) {!r.isUndefined(t) && r.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e) }
            var u, l = {
                transitional: { silentJSONParsing: !0, forcedJSONParsing: !0, clarifyTimeoutError: !1 },
                adapter: (("undefined" != typeof XMLHttpRequest || void 0 !== e && "[object process]" === Object.prototype.toString.call(e)) && (u = n("tQ2B")), u),
                transformRequest: [function(t, e) {
                    return i(e, "Accept"), i(e, "Content-Type"), r.isFormData(t) || r.isArrayBuffer(t) || r.isBuffer(t) || r.isStream(t) || r.isFile(t) || r.isBlob(t) ? t : r.isArrayBufferView(t) ? t.buffer : r.isURLSearchParams(t) ? (s(e, "application/x-www-form-urlencoded;charset=utf-8"), t.toString()) : r.isObject(t) || e && "application/json" === e["Content-Type"] ? (s(e, "application/json"), function(t, e, n) {
                        if (r.isString(t)) try { return (e || JSON.parse)(t), r.trim(t) } catch (t) { if ("SyntaxError" !== t.name) throw t }
                        return (n || JSON.stringify)(t)
                    }(t)) : t
                }],
                transformResponse: [function(t) {
                    var e = this.transitional,
                        n = e && e.silentJSONParsing,
                        i = e && e.forcedJSONParsing,
                        a = !n && "json" === this.responseType;
                    if (a || i && r.isString(t) && t.length) try { return JSON.parse(t) } catch (t) { if (a) { if ("SyntaxError" === t.name) throw o(t, this, "E_JSON_PARSE"); throw t } }
                    return t
                }],
                timeout: 0,
                xsrfCookieName: "XSRF-TOKEN",
                xsrfHeaderName: "X-XSRF-TOKEN",
                maxContentLength: -1,
                maxBodyLength: -1,
                validateStatus: function(t) { return t >= 200 && t < 300 }
            };
            l.headers = { common: { Accept: "application/json, text/plain, */*" } }, r.forEach(["delete", "get", "head"], (function(t) { l.headers[t] = {} })), r.forEach(["post", "put", "patch"], (function(t) { l.headers[t] = r.merge(a) })), t.exports = l
        }).call(this, n("8oxB"))
    },
    JO1w: function(t, e, n) {
        window._ = n("LvDl"), window.$ = window.jQuery = n("EVdn"), n("fPeS"), n("NvoQ"), window.Popper = n("8L3F").default, window.axios = n("vDqi"), window.axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest", window.Dropzone = n("eeMe"), n("SYky");
        var r = document.head.querySelector('meta[name="csrf-token"]');
        r ? window.axios.defaults.headers.common["X-CSRF-TOKEN"] = r.content : console.error("CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token")
    },
    LYNF: function(t, e, n) {
        "use strict";
        var r = n("OH9c");
        t.exports = function(t, e, n, i, o) { var a = new Error(t); return r(a, e, n, i, o) }
    },
    Lmem: function(t, e, n) {
        "use strict";
        t.exports = function(t) { return !(!t || !t.__CANCEL__) }
    },
    LvDl: function(t, e, n) {
        (function(t, r) {
            var i;
            (function() {
                var o = "Expected a function",
                    a = "__lodash_placeholder__",
                    s = [
                        ["ary", 128],
                        ["bind", 1],
                        ["bindKey", 2],
                        ["curry", 8],
                        ["curryRight", 16],
                        ["flip", 512],
                        ["partial", 32],
                        ["partialRight", 64],
                        ["rearg", 256]
                    ],
                    u = "[object Arguments]",
                    l = "[object Array]",
                    c = "[object Boolean]",
                    f = "[object Date]",
                    h = "[object Error]",
                    d = "[object Function]",
                    p = "[object GeneratorFunction]",
                    v = "[object Map]",
                    g = "[object Number]",
                    m = "[object Object]",
                    y = "[object RegExp]",
                    b = "[object Set]",
                    _ = "[object String]",
                    w = "[object Symbol]",
                    x = "[object WeakMap]",
                    E = "[object ArrayBuffer]",
                    T = "[object DataView]",
                    C = "[object Float32Array]",
                    S = "[object Float64Array]",
                    k = "[object Int8Array]",
                    A = "[object Int16Array]",
                    I = "[object Int32Array]",
                    O = "[object Uint8Array]",
                    N = "[object Uint16Array]",
                    D = "[object Uint32Array]",
                    L = /\b__p \+= '';/g,
                    j = /\b(__p \+=) '' \+/g,
                    P = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
                    R = /&(?:amp|lt|gt|quot|#39);/g,
                    F = /[&<>"']/g,
                    M = RegExp(R.source),
                    U = RegExp(F.source),
                    q = /<%-([\s\S]+?)%>/g,
                    B = /<%([\s\S]+?)%>/g,
                    H = /<%=([\s\S]+?)%>/g,
                    z = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    W = /^\w*$/,
                    Q = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
                    $ = /[\\^$.*+?()[\]{}|]/g,
                    V = RegExp($.source),
                    Y = /^\s+/,
                    X = /\s/,
                    G = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                    K = /\{\n\/\* \[wrapped with (.+)\] \*/,
                    J = /,? & /,
                    Z = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
                    tt = /[()=,{}\[\]\/\s]/,
                    et = /\\(\\)?/g,
                    nt = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
                    rt = /\w*$/,
                    it = /^[-+]0x[0-9a-f]+$/i,
                    ot = /^0b[01]+$/i,
                    at = /^\[object .+?Constructor\]$/,
                    st = /^0o[0-7]+$/i,
                    ut = /^(?:0|[1-9]\d*)$/,
                    lt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
                    ct = /($^)/,
                    ft = /['\n\r\u2028\u2029\\]/g,
                    ht = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
                    dt = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
                    pt = "[\\ud800-\\udfff]",
                    vt = "[" + dt + "]",
                    gt = "[" + ht + "]",
                    mt = "\\d+",
                    yt = "[\\u2700-\\u27bf]",
                    bt = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
                    _t = "[^\\ud800-\\udfff" + dt + mt + "\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
                    wt = "\\ud83c[\\udffb-\\udfff]",
                    xt = "[^\\ud800-\\udfff]",
                    Et = "(?:\\ud83c[\\udde6-\\uddff]){2}",
                    Tt = "[\\ud800-\\udbff][\\udc00-\\udfff]",
                    Ct = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
                    St = "(?:" + bt + "|" + _t + ")",
                    kt = "(?:" + Ct + "|" + _t + ")",
                    At = "(?:" + gt + "|" + wt + ")" + "?",
                    It = "[\\ufe0e\\ufe0f]?" + At + ("(?:\\u200d(?:" + [xt, Et, Tt].join("|") + ")[\\ufe0e\\ufe0f]?" + At + ")*"),
                    Ot = "(?:" + [yt, Et, Tt].join("|") + ")" + It,
                    Nt = "(?:" + [xt + gt + "?", gt, Et, Tt, pt].join("|") + ")",
                    Dt = RegExp("['’]", "g"),
                    Lt = RegExp(gt, "g"),
                    jt = RegExp(wt + "(?=" + wt + ")|" + Nt + It, "g"),
                    Pt = RegExp([Ct + "?" + bt + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + [vt, Ct, "$"].join("|") + ")", kt + "+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + [vt, Ct + St, "$"].join("|") + ")", Ct + "?" + St + "+(?:['’](?:d|ll|m|re|s|t|ve))?", Ct + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", mt, Ot].join("|"), "g"),
                    Rt = RegExp("[\\u200d\\ud800-\\udfff" + ht + "\\ufe0e\\ufe0f]"),
                    Ft = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
                    Mt = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
                    Ut = -1,
                    qt = {};
                qt[C] = qt[S] = qt[k] = qt[A] = qt[I] = qt[O] = qt["[object Uint8ClampedArray]"] = qt[N] = qt[D] = !0, qt[u] = qt[l] = qt[E] = qt[c] = qt[T] = qt[f] = qt[h] = qt[d] = qt[v] = qt[g] = qt[m] = qt[y] = qt[b] = qt[_] = qt[x] = !1;
                var Bt = {};
                Bt[u] = Bt[l] = Bt[E] = Bt[T] = Bt[c] = Bt[f] = Bt[C] = Bt[S] = Bt[k] = Bt[A] = Bt[I] = Bt[v] = Bt[g] = Bt[m] = Bt[y] = Bt[b] = Bt[_] = Bt[w] = Bt[O] = Bt["[object Uint8ClampedArray]"] = Bt[N] = Bt[D] = !0, Bt[h] = Bt[d] = Bt[x] = !1;
                var Ht = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" },
                    zt = parseFloat,
                    Wt = parseInt,
                    Qt = "object" == typeof t && t && t.Object === Object && t,
                    $t = "object" == typeof self && self && self.Object === Object && self,
                    Vt = Qt || $t || Function("return this")(),
                    Yt = e && !e.nodeType && e,
                    Xt = Yt && "object" == typeof r && r && !r.nodeType && r,
                    Gt = Xt && Xt.exports === Yt,
                    Kt = Gt && Qt.process,
                    Jt = function() { try { var t = Xt && Xt.require && Xt.require("util").types; return t || Kt && Kt.binding && Kt.binding("util") } catch (t) {} }(),
                    Zt = Jt && Jt.isArrayBuffer,
                    te = Jt && Jt.isDate,
                    ee = Jt && Jt.isMap,
                    ne = Jt && Jt.isRegExp,
                    re = Jt && Jt.isSet,
                    ie = Jt && Jt.isTypedArray;

                function oe(t, e, n) {
                    switch (n.length) {
                        case 0:
                            return t.call(e);
                        case 1:
                            return t.call(e, n[0]);
                        case 2:
                            return t.call(e, n[0], n[1]);
                        case 3:
                            return t.call(e, n[0], n[1], n[2])
                    }
                    return t.apply(e, n)
                }

                function ae(t, e, n, r) {
                    for (var i = -1, o = null == t ? 0 : t.length; ++i < o;) {
                        var a = t[i];
                        e(r, a, n(a), t)
                    }
                    return r
                }

                function se(t, e) { for (var n = -1, r = null == t ? 0 : t.length; ++n < r && !1 !== e(t[n], n, t);); return t }

                function ue(t, e) { for (var n = null == t ? 0 : t.length; n-- && !1 !== e(t[n], n, t);); return t }

                function le(t, e) {
                    for (var n = -1, r = null == t ? 0 : t.length; ++n < r;)
                        if (!e(t[n], n, t)) return !1;
                    return !0
                }

                function ce(t, e) {
                    for (var n = -1, r = null == t ? 0 : t.length, i = 0, o = []; ++n < r;) {
                        var a = t[n];
                        e(a, n, t) && (o[i++] = a)
                    }
                    return o
                }

                function fe(t, e) { return !!(null == t ? 0 : t.length) && we(t, e, 0) > -1 }

                function he(t, e, n) {
                    for (var r = -1, i = null == t ? 0 : t.length; ++r < i;)
                        if (n(e, t[r])) return !0;
                    return !1
                }

                function de(t, e) { for (var n = -1, r = null == t ? 0 : t.length, i = Array(r); ++n < r;) i[n] = e(t[n], n, t); return i }

                function pe(t, e) { for (var n = -1, r = e.length, i = t.length; ++n < r;) t[i + n] = e[n]; return t }

                function ve(t, e, n, r) {
                    var i = -1,
                        o = null == t ? 0 : t.length;
                    for (r && o && (n = t[++i]); ++i < o;) n = e(n, t[i], i, t);
                    return n
                }

                function ge(t, e, n, r) { var i = null == t ? 0 : t.length; for (r && i && (n = t[--i]); i--;) n = e(n, t[i], i, t); return n }

                function me(t, e) {
                    for (var n = -1, r = null == t ? 0 : t.length; ++n < r;)
                        if (e(t[n], n, t)) return !0;
                    return !1
                }
                var ye = Ce("length");

                function be(t, e, n) { var r; return n(t, (function(t, n, i) { if (e(t, n, i)) return r = n, !1 })), r }

                function _e(t, e, n, r) {
                    for (var i = t.length, o = n + (r ? 1 : -1); r ? o-- : ++o < i;)
                        if (e(t[o], o, t)) return o;
                    return -1
                }

                function we(t, e, n) {
                    return e == e ? function(t, e, n) {
                        var r = n - 1,
                            i = t.length;
                        for (; ++r < i;)
                            if (t[r] === e) return r;
                        return -1
                    }(t, e, n) : _e(t, Ee, n)
                }

                function xe(t, e, n, r) {
                    for (var i = n - 1, o = t.length; ++i < o;)
                        if (r(t[i], e)) return i;
                    return -1
                }

                function Ee(t) { return t != t }

                function Te(t, e) { var n = null == t ? 0 : t.length; return n ? Ae(t, e) / n : NaN }

                function Ce(t) { return function(e) { return null == e ? void 0 : e[t] } }

                function Se(t) { return function(e) { return null == t ? void 0 : t[e] } }

                function ke(t, e, n, r, i) { return i(t, (function(t, i, o) { n = r ? (r = !1, t) : e(n, t, i, o) })), n }

                function Ae(t, e) {
                    for (var n, r = -1, i = t.length; ++r < i;) {
                        var o = e(t[r]);
                        void 0 !== o && (n = void 0 === n ? o : n + o)
                    }
                    return n
                }

                function Ie(t, e) { for (var n = -1, r = Array(t); ++n < t;) r[n] = e(n); return r }

                function Oe(t) { return t ? t.slice(0, Ye(t) + 1).replace(Y, "") : t }

                function Ne(t) { return function(e) { return t(e) } }

                function De(t, e) { return de(e, (function(e) { return t[e] })) }

                function Le(t, e) { return t.has(e) }

                function je(t, e) { for (var n = -1, r = t.length; ++n < r && we(e, t[n], 0) > -1;); return n }

                function Pe(t, e) { for (var n = t.length; n-- && we(e, t[n], 0) > -1;); return n }

                function Re(t, e) { for (var n = t.length, r = 0; n--;) t[n] === e && ++r; return r }
                var Fe = Se({ "À": "A", "Á": "A", "Â": "A", "Ã": "A", "Ä": "A", "Å": "A", "à": "a", "á": "a", "â": "a", "ã": "a", "ä": "a", "å": "a", "Ç": "C", "ç": "c", "Ð": "D", "ð": "d", "È": "E", "É": "E", "Ê": "E", "Ë": "E", "è": "e", "é": "e", "ê": "e", "ë": "e", "Ì": "I", "Í": "I", "Î": "I", "Ï": "I", "ì": "i", "í": "i", "î": "i", "ï": "i", "Ñ": "N", "ñ": "n", "Ò": "O", "Ó": "O", "Ô": "O", "Õ": "O", "Ö": "O", "Ø": "O", "ò": "o", "ó": "o", "ô": "o", "õ": "o", "ö": "o", "ø": "o", "Ù": "U", "Ú": "U", "Û": "U", "Ü": "U", "ù": "u", "ú": "u", "û": "u", "ü": "u", "Ý": "Y", "ý": "y", "ÿ": "y", "Æ": "Ae", "æ": "ae", "Þ": "Th", "þ": "th", "ß": "ss", "Ā": "A", "Ă": "A", "Ą": "A", "ā": "a", "ă": "a", "ą": "a", "Ć": "C", "Ĉ": "C", "Ċ": "C", "Č": "C", "ć": "c", "ĉ": "c", "ċ": "c", "č": "c", "Ď": "D", "Đ": "D", "ď": "d", "đ": "d", "Ē": "E", "Ĕ": "E", "Ė": "E", "Ę": "E", "Ě": "E", "ē": "e", "ĕ": "e", "ė": "e", "ę": "e", "ě": "e", "Ĝ": "G", "Ğ": "G", "Ġ": "G", "Ģ": "G", "ĝ": "g", "ğ": "g", "ġ": "g", "ģ": "g", "Ĥ": "H", "Ħ": "H", "ĥ": "h", "ħ": "h", "Ĩ": "I", "Ī": "I", "Ĭ": "I", "Į": "I", "İ": "I", "ĩ": "i", "ī": "i", "ĭ": "i", "į": "i", "ı": "i", "Ĵ": "J", "ĵ": "j", "Ķ": "K", "ķ": "k", "ĸ": "k", "Ĺ": "L", "Ļ": "L", "Ľ": "L", "Ŀ": "L", "Ł": "L", "ĺ": "l", "ļ": "l", "ľ": "l", "ŀ": "l", "ł": "l", "Ń": "N", "Ņ": "N", "Ň": "N", "Ŋ": "N", "ń": "n", "ņ": "n", "ň": "n", "ŋ": "n", "Ō": "O", "Ŏ": "O", "Ő": "O", "ō": "o", "ŏ": "o", "ő": "o", "Ŕ": "R", "Ŗ": "R", "Ř": "R", "ŕ": "r", "ŗ": "r", "ř": "r", "Ś": "S", "Ŝ": "S", "Ş": "S", "Š": "S", "ś": "s", "ŝ": "s", "ş": "s", "š": "s", "Ţ": "T", "Ť": "T", "Ŧ": "T", "ţ": "t", "ť": "t", "ŧ": "t", "Ũ": "U", "Ū": "U", "Ŭ": "U", "Ů": "U", "Ű": "U", "Ų": "U", "ũ": "u", "ū": "u", "ŭ": "u", "ů": "u", "ű": "u", "ų": "u", "Ŵ": "W", "ŵ": "w", "Ŷ": "Y", "ŷ": "y", "Ÿ": "Y", "Ź": "Z", "Ż": "Z", "Ž": "Z", "ź": "z", "ż": "z", "ž": "z", "Ĳ": "IJ", "ĳ": "ij", "Œ": "Oe", "œ": "oe", "ŉ": "'n", "ſ": "s" }),
                    Me = Se({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" });

                function Ue(t) { return "\\" + Ht[t] }

                function qe(t) { return Rt.test(t) }

                function Be(t) {
                    var e = -1,
                        n = Array(t.size);
                    return t.forEach((function(t, r) { n[++e] = [r, t] })), n
                }

                function He(t, e) { return function(n) { return t(e(n)) } }

                function ze(t, e) {
                    for (var n = -1, r = t.length, i = 0, o = []; ++n < r;) {
                        var s = t[n];
                        s !== e && s !== a || (t[n] = a, o[i++] = n)
                    }
                    return o
                }

                function We(t) {
                    var e = -1,
                        n = Array(t.size);
                    return t.forEach((function(t) { n[++e] = t })), n
                }

                function Qe(t) {
                    var e = -1,
                        n = Array(t.size);
                    return t.forEach((function(t) { n[++e] = [t, t] })), n
                }

                function $e(t) { return qe(t) ? function(t) { var e = jt.lastIndex = 0; for (; jt.test(t);) ++e; return e }(t) : ye(t) }

                function Ve(t) { return qe(t) ? function(t) { return t.match(jt) || [] }(t) : function(t) { return t.split("") }(t) }

                function Ye(t) { for (var e = t.length; e-- && X.test(t.charAt(e));); return e }
                var Xe = Se({ "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" });
                var Ge = function t(e) {
                    var n, r = (e = null == e ? Vt : Ge.defaults(Vt.Object(), e, Ge.pick(Vt, Mt))).Array,
                        i = e.Date,
                        X = e.Error,
                        ht = e.Function,
                        dt = e.Math,
                        pt = e.Object,
                        vt = e.RegExp,
                        gt = e.String,
                        mt = e.TypeError,
                        yt = r.prototype,
                        bt = ht.prototype,
                        _t = pt.prototype,
                        wt = e["__core-js_shared__"],
                        xt = bt.toString,
                        Et = _t.hasOwnProperty,
                        Tt = 0,
                        Ct = (n = /[^.]+$/.exec(wt && wt.keys && wt.keys.IE_PROTO || "")) ? "Symbol(src)_1." + n : "",
                        St = _t.toString,
                        kt = xt.call(pt),
                        At = Vt._,
                        It = vt("^" + xt.call(Et).replace($, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
                        Ot = Gt ? e.Buffer : void 0,
                        Nt = e.Symbol,
                        jt = e.Uint8Array,
                        Rt = Ot ? Ot.allocUnsafe : void 0,
                        Ht = He(pt.getPrototypeOf, pt),
                        Qt = pt.create,
                        $t = _t.propertyIsEnumerable,
                        Yt = yt.splice,
                        Xt = Nt ? Nt.isConcatSpreadable : void 0,
                        Kt = Nt ? Nt.iterator : void 0,
                        Jt = Nt ? Nt.toStringTag : void 0,
                        ye = function() { try { var t = to(pt, "defineProperty"); return t({}, "", {}), t } catch (t) {} }(),
                        Se = e.clearTimeout !== Vt.clearTimeout && e.clearTimeout,
                        Ke = i && i.now !== Vt.Date.now && i.now,
                        Je = e.setTimeout !== Vt.setTimeout && e.setTimeout,
                        Ze = dt.ceil,
                        tn = dt.floor,
                        en = pt.getOwnPropertySymbols,
                        nn = Ot ? Ot.isBuffer : void 0,
                        rn = e.isFinite,
                        on = yt.join,
                        an = He(pt.keys, pt),
                        sn = dt.max,
                        un = dt.min,
                        ln = i.now,
                        cn = e.parseInt,
                        fn = dt.random,
                        hn = yt.reverse,
                        dn = to(e, "DataView"),
                        pn = to(e, "Map"),
                        vn = to(e, "Promise"),
                        gn = to(e, "Set"),
                        mn = to(e, "WeakMap"),
                        yn = to(pt, "create"),
                        bn = mn && new mn,
                        _n = {},
                        wn = Ao(dn),
                        xn = Ao(pn),
                        En = Ao(vn),
                        Tn = Ao(gn),
                        Cn = Ao(mn),
                        Sn = Nt ? Nt.prototype : void 0,
                        kn = Sn ? Sn.valueOf : void 0,
                        An = Sn ? Sn.toString : void 0;

                    function In(t) { if (Qa(t) && !ja(t) && !(t instanceof Ln)) { if (t instanceof Dn) return t; if (Et.call(t, "__wrapped__")) return Io(t) } return new Dn(t) }
                    var On = function() {
                        function t() {}
                        return function(e) {
                            if (!Wa(e)) return {};
                            if (Qt) return Qt(e);
                            t.prototype = e;
                            var n = new t;
                            return t.prototype = void 0, n
                        }
                    }();

                    function Nn() {}

                    function Dn(t, e) { this.__wrapped__ = t, this.__actions__ = [], this.__chain__ = !!e, this.__index__ = 0, this.__values__ = void 0 }

                    function Ln(t) { this.__wrapped__ = t, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = 4294967295, this.__views__ = [] }

                    function jn(t) {
                        var e = -1,
                            n = null == t ? 0 : t.length;
                        for (this.clear(); ++e < n;) {
                            var r = t[e];
                            this.set(r[0], r[1])
                        }
                    }

                    function Pn(t) {
                        var e = -1,
                            n = null == t ? 0 : t.length;
                        for (this.clear(); ++e < n;) {
                            var r = t[e];
                            this.set(r[0], r[1])
                        }
                    }

                    function Rn(t) {
                        var e = -1,
                            n = null == t ? 0 : t.length;
                        for (this.clear(); ++e < n;) {
                            var r = t[e];
                            this.set(r[0], r[1])
                        }
                    }

                    function Fn(t) {
                        var e = -1,
                            n = null == t ? 0 : t.length;
                        for (this.__data__ = new Rn; ++e < n;) this.add(t[e])
                    }

                    function Mn(t) {
                        var e = this.__data__ = new Pn(t);
                        this.size = e.size
                    }

                    function Un(t, e) {
                        var n = ja(t),
                            r = !n && La(t),
                            i = !n && !r && Ma(t),
                            o = !n && !r && !i && Za(t),
                            a = n || r || i || o,
                            s = a ? Ie(t.length, gt) : [],
                            u = s.length;
                        for (var l in t) !e && !Et.call(t, l) || a && ("length" == l || i && ("offset" == l || "parent" == l) || o && ("buffer" == l || "byteLength" == l || "byteOffset" == l) || so(l, u)) || s.push(l);
                        return s
                    }

                    function qn(t) { var e = t.length; return e ? t[Fr(0, e - 1)] : void 0 }

                    function Bn(t, e) { return Co(yi(t), Gn(e, 0, t.length)) }

                    function Hn(t) { return Co(yi(t)) }

                    function zn(t, e, n) {
                        (void 0 !== n && !Oa(t[e], n) || void 0 === n && !(e in t)) && Yn(t, e, n)
                    }

                    function Wn(t, e, n) {
                        var r = t[e];
                        Et.call(t, e) && Oa(r, n) && (void 0 !== n || e in t) || Yn(t, e, n)
                    }

                    function Qn(t, e) {
                        for (var n = t.length; n--;)
                            if (Oa(t[n][0], e)) return n;
                        return -1
                    }

                    function $n(t, e, n, r) { return er(t, (function(t, i, o) { e(r, t, n(t), o) })), r }

                    function Vn(t, e) { return t && bi(e, ws(e), t) }

                    function Yn(t, e, n) { "__proto__" == e && ye ? ye(t, e, { configurable: !0, enumerable: !0, value: n, writable: !0 }) : t[e] = n }

                    function Xn(t, e) { for (var n = -1, i = e.length, o = r(i), a = null == t; ++n < i;) o[n] = a ? void 0 : gs(t, e[n]); return o }

                    function Gn(t, e, n) { return t == t && (void 0 !== n && (t = t <= n ? t : n), void 0 !== e && (t = t >= e ? t : e)), t }

                    function Kn(t, e, n, r, i, o) {
                        var a, s = 1 & e,
                            l = 2 & e,
                            h = 4 & e;
                        if (n && (a = i ? n(t, r, i, o) : n(t)), void 0 !== a) return a;
                        if (!Wa(t)) return t;
                        var x = ja(t);
                        if (x) {
                            if (a = function(t) {
                                    var e = t.length,
                                        n = new t.constructor(e);
                                    e && "string" == typeof t[0] && Et.call(t, "index") && (n.index = t.index, n.input = t.input);
                                    return n
                                }(t), !s) return yi(t, a)
                        } else {
                            var L = ro(t),
                                j = L == d || L == p;
                            if (Ma(t)) return hi(t, s);
                            if (L == m || L == u || j && !i) { if (a = l || j ? {} : oo(t), !s) return l ? function(t, e) { return bi(t, no(t), e) }(t, function(t, e) { return t && bi(e, xs(e), t) }(a, t)) : function(t, e) { return bi(t, eo(t), e) }(t, Vn(a, t)) } else {
                                if (!Bt[L]) return i ? t : {};
                                a = function(t, e, n) {
                                    var r = t.constructor;
                                    switch (e) {
                                        case E:
                                            return di(t);
                                        case c:
                                        case f:
                                            return new r(+t);
                                        case T:
                                            return function(t, e) { var n = e ? di(t.buffer) : t.buffer; return new t.constructor(n, t.byteOffset, t.byteLength) }(t, n);
                                        case C:
                                        case S:
                                        case k:
                                        case A:
                                        case I:
                                        case O:
                                        case "[object Uint8ClampedArray]":
                                        case N:
                                        case D:
                                            return pi(t, n);
                                        case v:
                                            return new r;
                                        case g:
                                        case _:
                                            return new r(t);
                                        case y:
                                            return function(t) { var e = new t.constructor(t.source, rt.exec(t)); return e.lastIndex = t.lastIndex, e }(t);
                                        case b:
                                            return new r;
                                        case w:
                                            return i = t, kn ? pt(kn.call(i)) : {}
                                    }
                                    var i
                                }(t, L, s)
                            }
                        }
                        o || (o = new Mn);
                        var P = o.get(t);
                        if (P) return P;
                        o.set(t, a), Ga(t) ? t.forEach((function(r) { a.add(Kn(r, e, n, r, t, o)) })) : $a(t) && t.forEach((function(r, i) { a.set(i, Kn(r, e, n, i, t, o)) }));
                        var R = x ? void 0 : (h ? l ? Vi : $i : l ? xs : ws)(t);
                        return se(R || t, (function(r, i) { R && (r = t[i = r]), Wn(a, i, Kn(r, e, n, i, t, o)) })), a
                    }

                    function Jn(t, e, n) {
                        var r = n.length;
                        if (null == t) return !r;
                        for (t = pt(t); r--;) {
                            var i = n[r],
                                o = e[i],
                                a = t[i];
                            if (void 0 === a && !(i in t) || !o(a)) return !1
                        }
                        return !0
                    }

                    function Zn(t, e, n) { if ("function" != typeof t) throw new mt(o); return wo((function() { t.apply(void 0, n) }), e) }

                    function tr(t, e, n, r) {
                        var i = -1,
                            o = fe,
                            a = !0,
                            s = t.length,
                            u = [],
                            l = e.length;
                        if (!s) return u;
                        n && (e = de(e, Ne(n))), r ? (o = he, a = !1) : e.length >= 200 && (o = Le, a = !1, e = new Fn(e));
                        t: for (; ++i < s;) {
                            var c = t[i],
                                f = null == n ? c : n(c);
                            if (c = r || 0 !== c ? c : 0, a && f == f) {
                                for (var h = l; h--;)
                                    if (e[h] === f) continue t;
                                u.push(c)
                            } else o(e, f, r) || u.push(c)
                        }
                        return u
                    }
                    In.templateSettings = { escape: q, evaluate: B, interpolate: H, variable: "", imports: { _: In } }, In.prototype = Nn.prototype, In.prototype.constructor = In, Dn.prototype = On(Nn.prototype), Dn.prototype.constructor = Dn, Ln.prototype = On(Nn.prototype), Ln.prototype.constructor = Ln, jn.prototype.clear = function() { this.__data__ = yn ? yn(null) : {}, this.size = 0 }, jn.prototype.delete = function(t) { var e = this.has(t) && delete this.__data__[t]; return this.size -= e ? 1 : 0, e }, jn.prototype.get = function(t) { var e = this.__data__; if (yn) { var n = e[t]; return "__lodash_hash_undefined__" === n ? void 0 : n } return Et.call(e, t) ? e[t] : void 0 }, jn.prototype.has = function(t) { var e = this.__data__; return yn ? void 0 !== e[t] : Et.call(e, t) }, jn.prototype.set = function(t, e) { var n = this.__data__; return this.size += this.has(t) ? 0 : 1, n[t] = yn && void 0 === e ? "__lodash_hash_undefined__" : e, this }, Pn.prototype.clear = function() { this.__data__ = [], this.size = 0 }, Pn.prototype.delete = function(t) {
                        var e = this.__data__,
                            n = Qn(e, t);
                        return !(n < 0) && (n == e.length - 1 ? e.pop() : Yt.call(e, n, 1), --this.size, !0)
                    }, Pn.prototype.get = function(t) {
                        var e = this.__data__,
                            n = Qn(e, t);
                        return n < 0 ? void 0 : e[n][1]
                    }, Pn.prototype.has = function(t) { return Qn(this.__data__, t) > -1 }, Pn.prototype.set = function(t, e) {
                        var n = this.__data__,
                            r = Qn(n, t);
                        return r < 0 ? (++this.size, n.push([t, e])) : n[r][1] = e, this
                    }, Rn.prototype.clear = function() { this.size = 0, this.__data__ = { hash: new jn, map: new(pn || Pn), string: new jn } }, Rn.prototype.delete = function(t) { var e = Ji(this, t).delete(t); return this.size -= e ? 1 : 0, e }, Rn.prototype.get = function(t) { return Ji(this, t).get(t) }, Rn.prototype.has = function(t) { return Ji(this, t).has(t) }, Rn.prototype.set = function(t, e) {
                        var n = Ji(this, t),
                            r = n.size;
                        return n.set(t, e), this.size += n.size == r ? 0 : 1, this
                    }, Fn.prototype.add = Fn.prototype.push = function(t) { return this.__data__.set(t, "__lodash_hash_undefined__"), this }, Fn.prototype.has = function(t) { return this.__data__.has(t) }, Mn.prototype.clear = function() { this.__data__ = new Pn, this.size = 0 }, Mn.prototype.delete = function(t) {
                        var e = this.__data__,
                            n = e.delete(t);
                        return this.size = e.size, n
                    }, Mn.prototype.get = function(t) { return this.__data__.get(t) }, Mn.prototype.has = function(t) { return this.__data__.has(t) }, Mn.prototype.set = function(t, e) {
                        var n = this.__data__;
                        if (n instanceof Pn) {
                            var r = n.__data__;
                            if (!pn || r.length < 199) return r.push([t, e]), this.size = ++n.size, this;
                            n = this.__data__ = new Rn(r)
                        }
                        return n.set(t, e), this.size = n.size, this
                    };
                    var er = xi(lr),
                        nr = xi(cr, !0);

                    function rr(t, e) { var n = !0; return er(t, (function(t, r, i) { return n = !!e(t, r, i) })), n }

                    function ir(t, e, n) {
                        for (var r = -1, i = t.length; ++r < i;) {
                            var o = t[r],
                                a = e(o);
                            if (null != a && (void 0 === s ? a == a && !Ja(a) : n(a, s))) var s = a,
                                u = o
                        }
                        return u
                    }

                    function or(t, e) { var n = []; return er(t, (function(t, r, i) { e(t, r, i) && n.push(t) })), n }

                    function ar(t, e, n, r, i) {
                        var o = -1,
                            a = t.length;
                        for (n || (n = ao), i || (i = []); ++o < a;) {
                            var s = t[o];
                            e > 0 && n(s) ? e > 1 ? ar(s, e - 1, n, r, i) : pe(i, s) : r || (i[i.length] = s)
                        }
                        return i
                    }
                    var sr = Ei(),
                        ur = Ei(!0);

                    function lr(t, e) { return t && sr(t, e, ws) }

                    function cr(t, e) { return t && ur(t, e, ws) }

                    function fr(t, e) { return ce(e, (function(e) { return Ba(t[e]) })) }

                    function hr(t, e) { for (var n = 0, r = (e = ui(e, t)).length; null != t && n < r;) t = t[ko(e[n++])]; return n && n == r ? t : void 0 }

                    function dr(t, e, n) { var r = e(t); return ja(t) ? r : pe(r, n(t)) }

                    function pr(t) {
                        return null == t ? void 0 === t ? "[object Undefined]" : "[object Null]" : Jt && Jt in pt(t) ? function(t) {
                            var e = Et.call(t, Jt),
                                n = t[Jt];
                            try { t[Jt] = void 0; var r = !0 } catch (t) {}
                            var i = St.call(t);
                            r && (e ? t[Jt] = n : delete t[Jt]);
                            return i
                        }(t) : function(t) { return St.call(t) }(t)
                    }

                    function vr(t, e) { return t > e }

                    function gr(t, e) { return null != t && Et.call(t, e) }

                    function mr(t, e) { return null != t && e in pt(t) }

                    function yr(t, e, n) {
                        for (var i = n ? he : fe, o = t[0].length, a = t.length, s = a, u = r(a), l = 1 / 0, c = []; s--;) {
                            var f = t[s];
                            s && e && (f = de(f, Ne(e))), l = un(f.length, l), u[s] = !n && (e || o >= 120 && f.length >= 120) ? new Fn(s && f) : void 0
                        }
                        f = t[0];
                        var h = -1,
                            d = u[0];
                        t: for (; ++h < o && c.length < l;) {
                            var p = f[h],
                                v = e ? e(p) : p;
                            if (p = n || 0 !== p ? p : 0, !(d ? Le(d, v) : i(c, v, n))) {
                                for (s = a; --s;) { var g = u[s]; if (!(g ? Le(g, v) : i(t[s], v, n))) continue t }
                                d && d.push(v), c.push(p)
                            }
                        }
                        return c
                    }

                    function br(t, e, n) { var r = null == (t = mo(t, e = ui(e, t))) ? t : t[ko(qo(e))]; return null == r ? void 0 : oe(r, t, n) }

                    function _r(t) { return Qa(t) && pr(t) == u }

                    function wr(t, e, n, r, i) {
                        return t === e || (null == t || null == e || !Qa(t) && !Qa(e) ? t != t && e != e : function(t, e, n, r, i, o) {
                            var a = ja(t),
                                s = ja(e),
                                d = a ? l : ro(t),
                                p = s ? l : ro(e),
                                x = (d = d == u ? m : d) == m,
                                C = (p = p == u ? m : p) == m,
                                S = d == p;
                            if (S && Ma(t)) {
                                if (!Ma(e)) return !1;
                                a = !0, x = !1
                            }
                            if (S && !x) return o || (o = new Mn), a || Za(t) ? Wi(t, e, n, r, i, o) : function(t, e, n, r, i, o, a) {
                                switch (n) {
                                    case T:
                                        if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset) return !1;
                                        t = t.buffer, e = e.buffer;
                                    case E:
                                        return !(t.byteLength != e.byteLength || !o(new jt(t), new jt(e)));
                                    case c:
                                    case f:
                                    case g:
                                        return Oa(+t, +e);
                                    case h:
                                        return t.name == e.name && t.message == e.message;
                                    case y:
                                    case _:
                                        return t == e + "";
                                    case v:
                                        var s = Be;
                                    case b:
                                        var u = 1 & r;
                                        if (s || (s = We), t.size != e.size && !u) return !1;
                                        var l = a.get(t);
                                        if (l) return l == e;
                                        r |= 2, a.set(t, e);
                                        var d = Wi(s(t), s(e), r, i, o, a);
                                        return a.delete(t), d;
                                    case w:
                                        if (kn) return kn.call(t) == kn.call(e)
                                }
                                return !1
                            }(t, e, d, n, r, i, o);
                            if (!(1 & n)) {
                                var k = x && Et.call(t, "__wrapped__"),
                                    A = C && Et.call(e, "__wrapped__");
                                if (k || A) {
                                    var I = k ? t.value() : t,
                                        O = A ? e.value() : e;
                                    return o || (o = new Mn), i(I, O, n, r, o)
                                }
                            }
                            if (!S) return !1;
                            return o || (o = new Mn),
                                function(t, e, n, r, i, o) {
                                    var a = 1 & n,
                                        s = $i(t),
                                        u = s.length,
                                        l = $i(e).length;
                                    if (u != l && !a) return !1;
                                    var c = u;
                                    for (; c--;) { var f = s[c]; if (!(a ? f in e : Et.call(e, f))) return !1 }
                                    var h = o.get(t),
                                        d = o.get(e);
                                    if (h && d) return h == e && d == t;
                                    var p = !0;
                                    o.set(t, e), o.set(e, t);
                                    var v = a;
                                    for (; ++c < u;) {
                                        f = s[c];
                                        var g = t[f],
                                            m = e[f];
                                        if (r) var y = a ? r(m, g, f, e, t, o) : r(g, m, f, t, e, o);
                                        if (!(void 0 === y ? g === m || i(g, m, n, r, o) : y)) { p = !1; break }
                                        v || (v = "constructor" == f)
                                    }
                                    if (p && !v) {
                                        var b = t.constructor,
                                            _ = e.constructor;
                                        b == _ || !("constructor" in t) || !("constructor" in e) || "function" == typeof b && b instanceof b && "function" == typeof _ && _ instanceof _ || (p = !1)
                                    }
                                    return o.delete(t), o.delete(e), p
                                }(t, e, n, r, i, o)
                        }(t, e, n, r, wr, i))
                    }

                    function xr(t, e, n, r) {
                        var i = n.length,
                            o = i,
                            a = !r;
                        if (null == t) return !o;
                        for (t = pt(t); i--;) { var s = n[i]; if (a && s[2] ? s[1] !== t[s[0]] : !(s[0] in t)) return !1 }
                        for (; ++i < o;) {
                            var u = (s = n[i])[0],
                                l = t[u],
                                c = s[1];
                            if (a && s[2]) { if (void 0 === l && !(u in t)) return !1 } else { var f = new Mn; if (r) var h = r(l, c, u, t, e, f); if (!(void 0 === h ? wr(c, l, 3, r, f) : h)) return !1 }
                        }
                        return !0
                    }

                    function Er(t) { return !(!Wa(t) || (e = t, Ct && Ct in e)) && (Ba(t) ? It : at).test(Ao(t)); var e }

                    function Tr(t) { return "function" == typeof t ? t : null == t ? Vs : "object" == typeof t ? ja(t) ? Or(t[0], t[1]) : Ir(t) : nu(t) }

                    function Cr(t) { if (!ho(t)) return an(t); var e = []; for (var n in pt(t)) Et.call(t, n) && "constructor" != n && e.push(n); return e }

                    function Sr(t) {
                        if (!Wa(t)) return function(t) {
                            var e = [];
                            if (null != t)
                                for (var n in pt(t)) e.push(n);
                            return e
                        }(t);
                        var e = ho(t),
                            n = [];
                        for (var r in t)("constructor" != r || !e && Et.call(t, r)) && n.push(r);
                        return n
                    }

                    function kr(t, e) { return t < e }

                    function Ar(t, e) {
                        var n = -1,
                            i = Ra(t) ? r(t.length) : [];
                        return er(t, (function(t, r, o) { i[++n] = e(t, r, o) })), i
                    }

                    function Ir(t) { var e = Zi(t); return 1 == e.length && e[0][2] ? vo(e[0][0], e[0][1]) : function(n) { return n === t || xr(n, t, e) } }

                    function Or(t, e) { return lo(t) && po(e) ? vo(ko(t), e) : function(n) { var r = gs(n, t); return void 0 === r && r === e ? ms(n, t) : wr(e, r, 3) } }

                    function Nr(t, e, n, r, i) {
                        t !== e && sr(e, (function(o, a) {
                            if (i || (i = new Mn), Wa(o)) ! function(t, e, n, r, i, o, a) {
                                var s = bo(t, n),
                                    u = bo(e, n),
                                    l = a.get(u);
                                if (l) return void zn(t, n, l);
                                var c = o ? o(s, u, n + "", t, e, a) : void 0,
                                    f = void 0 === c;
                                if (f) {
                                    var h = ja(u),
                                        d = !h && Ma(u),
                                        p = !h && !d && Za(u);
                                    c = u, h || d || p ? ja(s) ? c = s : Fa(s) ? c = yi(s) : d ? (f = !1, c = hi(u, !0)) : p ? (f = !1, c = pi(u, !0)) : c = [] : Ya(u) || La(u) ? (c = s, La(s) ? c = ss(s) : Wa(s) && !Ba(s) || (c = oo(u))) : f = !1
                                }
                                f && (a.set(u, c), i(c, u, r, o, a), a.delete(u));
                                zn(t, n, c)
                            }(t, e, a, n, Nr, r, i);
                            else {
                                var s = r ? r(bo(t, a), o, a + "", t, e, i) : void 0;
                                void 0 === s && (s = o), zn(t, a, s)
                            }
                        }), xs)
                    }

                    function Dr(t, e) { var n = t.length; if (n) return so(e += e < 0 ? n : 0, n) ? t[e] : void 0 }

                    function Lr(t, e, n) {
                        e = e.length ? de(e, (function(t) { return ja(t) ? function(e) { return hr(e, 1 === t.length ? t[0] : t) } : t })) : [Vs];
                        var r = -1;
                        return e = de(e, Ne(Ki())),
                            function(t, e) { var n = t.length; for (t.sort(e); n--;) t[n] = t[n].value; return t }(Ar(t, (function(t, n, i) { return { criteria: de(e, (function(e) { return e(t) })), index: ++r, value: t } })), (function(t, e) {
                                return function(t, e, n) {
                                    var r = -1,
                                        i = t.criteria,
                                        o = e.criteria,
                                        a = i.length,
                                        s = n.length;
                                    for (; ++r < a;) { var u = vi(i[r], o[r]); if (u) { if (r >= s) return u; var l = n[r]; return u * ("desc" == l ? -1 : 1) } }
                                    return t.index - e.index
                                }(t, e, n)
                            }))
                    }

                    function jr(t, e, n) {
                        for (var r = -1, i = e.length, o = {}; ++r < i;) {
                            var a = e[r],
                                s = hr(t, a);
                            n(s, a) && Hr(o, ui(a, t), s)
                        }
                        return o
                    }

                    function Pr(t, e, n, r) {
                        var i = r ? xe : we,
                            o = -1,
                            a = e.length,
                            s = t;
                        for (t === e && (e = yi(e)), n && (s = de(t, Ne(n))); ++o < a;)
                            for (var u = 0, l = e[o], c = n ? n(l) : l;
                                (u = i(s, c, u, r)) > -1;) s !== t && Yt.call(s, u, 1), Yt.call(t, u, 1);
                        return t
                    }

                    function Rr(t, e) {
                        for (var n = t ? e.length : 0, r = n - 1; n--;) {
                            var i = e[n];
                            if (n == r || i !== o) {
                                var o = i;
                                so(i) ? Yt.call(t, i, 1) : ti(t, i)
                            }
                        }
                        return t
                    }

                    function Fr(t, e) { return t + tn(fn() * (e - t + 1)) }

                    function Mr(t, e) {
                        var n = "";
                        if (!t || e < 1 || e > 9007199254740991) return n;
                        do { e % 2 && (n += t), (e = tn(e / 2)) && (t += t) } while (e);
                        return n
                    }

                    function Ur(t, e) { return xo(go(t, e, Vs), t + "") }

                    function qr(t) { return qn(Os(t)) }

                    function Br(t, e) { var n = Os(t); return Co(n, Gn(e, 0, n.length)) }

                    function Hr(t, e, n, r) {
                        if (!Wa(t)) return t;
                        for (var i = -1, o = (e = ui(e, t)).length, a = o - 1, s = t; null != s && ++i < o;) {
                            var u = ko(e[i]),
                                l = n;
                            if ("__proto__" === u || "constructor" === u || "prototype" === u) return t;
                            if (i != a) {
                                var c = s[u];
                                void 0 === (l = r ? r(c, u, s) : void 0) && (l = Wa(c) ? c : so(e[i + 1]) ? [] : {})
                            }
                            Wn(s, u, l), s = s[u]
                        }
                        return t
                    }
                    var zr = bn ? function(t, e) { return bn.set(t, e), t } : Vs,
                        Wr = ye ? function(t, e) { return ye(t, "toString", { configurable: !0, enumerable: !1, value: Ws(e), writable: !0 }) } : Vs;

                    function Qr(t) { return Co(Os(t)) }

                    function $r(t, e, n) {
                        var i = -1,
                            o = t.length;
                        e < 0 && (e = -e > o ? 0 : o + e), (n = n > o ? o : n) < 0 && (n += o), o = e > n ? 0 : n - e >>> 0, e >>>= 0;
                        for (var a = r(o); ++i < o;) a[i] = t[i + e];
                        return a
                    }

                    function Vr(t, e) { var n; return er(t, (function(t, r, i) { return !(n = e(t, r, i)) })), !!n }

                    function Yr(t, e, n) {
                        var r = 0,
                            i = null == t ? r : t.length;
                        if ("number" == typeof e && e == e && i <= 2147483647) {
                            for (; r < i;) {
                                var o = r + i >>> 1,
                                    a = t[o];
                                null !== a && !Ja(a) && (n ? a <= e : a < e) ? r = o + 1 : i = o
                            }
                            return i
                        }
                        return Xr(t, e, Vs, n)
                    }

                    function Xr(t, e, n, r) {
                        var i = 0,
                            o = null == t ? 0 : t.length;
                        if (0 === o) return 0;
                        for (var a = (e = n(e)) != e, s = null === e, u = Ja(e), l = void 0 === e; i < o;) {
                            var c = tn((i + o) / 2),
                                f = n(t[c]),
                                h = void 0 !== f,
                                d = null === f,
                                p = f == f,
                                v = Ja(f);
                            if (a) var g = r || p;
                            else g = l ? p && (r || h) : s ? p && h && (r || !d) : u ? p && h && !d && (r || !v) : !d && !v && (r ? f <= e : f < e);
                            g ? i = c + 1 : o = c
                        }
                        return un(o, 4294967294)
                    }

                    function Gr(t, e) {
                        for (var n = -1, r = t.length, i = 0, o = []; ++n < r;) {
                            var a = t[n],
                                s = e ? e(a) : a;
                            if (!n || !Oa(s, u)) {
                                var u = s;
                                o[i++] = 0 === a ? 0 : a
                            }
                        }
                        return o
                    }

                    function Kr(t) { return "number" == typeof t ? t : Ja(t) ? NaN : +t }

                    function Jr(t) { if ("string" == typeof t) return t; if (ja(t)) return de(t, Jr) + ""; if (Ja(t)) return An ? An.call(t) : ""; var e = t + ""; return "0" == e && 1 / t == -1 / 0 ? "-0" : e }

                    function Zr(t, e, n) {
                        var r = -1,
                            i = fe,
                            o = t.length,
                            a = !0,
                            s = [],
                            u = s;
                        if (n) a = !1, i = he;
                        else if (o >= 200) {
                            var l = e ? null : Mi(t);
                            if (l) return We(l);
                            a = !1, i = Le, u = new Fn
                        } else u = e ? [] : s;
                        t: for (; ++r < o;) {
                            var c = t[r],
                                f = e ? e(c) : c;
                            if (c = n || 0 !== c ? c : 0, a && f == f) {
                                for (var h = u.length; h--;)
                                    if (u[h] === f) continue t;
                                e && u.push(f), s.push(c)
                            } else i(u, f, n) || (u !== s && u.push(f), s.push(c))
                        }
                        return s
                    }

                    function ti(t, e) { return null == (t = mo(t, e = ui(e, t))) || delete t[ko(qo(e))] }

                    function ei(t, e, n, r) { return Hr(t, e, n(hr(t, e)), r) }

                    function ni(t, e, n, r) {
                        for (var i = t.length, o = r ? i : -1;
                            (r ? o-- : ++o < i) && e(t[o], o, t););
                        return n ? $r(t, r ? 0 : o, r ? o + 1 : i) : $r(t, r ? o + 1 : 0, r ? i : o)
                    }

                    function ri(t, e) { var n = t; return n instanceof Ln && (n = n.value()), ve(e, (function(t, e) { return e.func.apply(e.thisArg, pe([t], e.args)) }), n) }

                    function ii(t, e, n) {
                        var i = t.length;
                        if (i < 2) return i ? Zr(t[0]) : [];
                        for (var o = -1, a = r(i); ++o < i;)
                            for (var s = t[o], u = -1; ++u < i;) u != o && (a[o] = tr(a[o] || s, t[u], e, n));
                        return Zr(ar(a, 1), e, n)
                    }

                    function oi(t, e, n) {
                        for (var r = -1, i = t.length, o = e.length, a = {}; ++r < i;) {
                            var s = r < o ? e[r] : void 0;
                            n(a, t[r], s)
                        }
                        return a
                    }

                    function ai(t) { return Fa(t) ? t : [] }

                    function si(t) { return "function" == typeof t ? t : Vs }

                    function ui(t, e) { return ja(t) ? t : lo(t, e) ? [t] : So(us(t)) }
                    var li = Ur;

                    function ci(t, e, n) { var r = t.length; return n = void 0 === n ? r : n, !e && n >= r ? t : $r(t, e, n) }
                    var fi = Se || function(t) { return Vt.clearTimeout(t) };

                    function hi(t, e) {
                        if (e) return t.slice();
                        var n = t.length,
                            r = Rt ? Rt(n) : new t.constructor(n);
                        return t.copy(r), r
                    }

                    function di(t) { var e = new t.constructor(t.byteLength); return new jt(e).set(new jt(t)), e }

                    function pi(t, e) { var n = e ? di(t.buffer) : t.buffer; return new t.constructor(n, t.byteOffset, t.length) }

                    function vi(t, e) {
                        if (t !== e) {
                            var n = void 0 !== t,
                                r = null === t,
                                i = t == t,
                                o = Ja(t),
                                a = void 0 !== e,
                                s = null === e,
                                u = e == e,
                                l = Ja(e);
                            if (!s && !l && !o && t > e || o && a && u && !s && !l || r && a && u || !n && u || !i) return 1;
                            if (!r && !o && !l && t < e || l && n && i && !r && !o || s && n && i || !a && i || !u) return -1
                        }
                        return 0
                    }

                    function gi(t, e, n, i) { for (var o = -1, a = t.length, s = n.length, u = -1, l = e.length, c = sn(a - s, 0), f = r(l + c), h = !i; ++u < l;) f[u] = e[u]; for (; ++o < s;)(h || o < a) && (f[n[o]] = t[o]); for (; c--;) f[u++] = t[o++]; return f }

                    function mi(t, e, n, i) { for (var o = -1, a = t.length, s = -1, u = n.length, l = -1, c = e.length, f = sn(a - u, 0), h = r(f + c), d = !i; ++o < f;) h[o] = t[o]; for (var p = o; ++l < c;) h[p + l] = e[l]; for (; ++s < u;)(d || o < a) && (h[p + n[s]] = t[o++]); return h }

                    function yi(t, e) {
                        var n = -1,
                            i = t.length;
                        for (e || (e = r(i)); ++n < i;) e[n] = t[n];
                        return e
                    }

                    function bi(t, e, n, r) {
                        var i = !n;
                        n || (n = {});
                        for (var o = -1, a = e.length; ++o < a;) {
                            var s = e[o],
                                u = r ? r(n[s], t[s], s, n, t) : void 0;
                            void 0 === u && (u = t[s]), i ? Yn(n, s, u) : Wn(n, s, u)
                        }
                        return n
                    }

                    function _i(t, e) {
                        return function(n, r) {
                            var i = ja(n) ? ae : $n,
                                o = e ? e() : {};
                            return i(n, t, Ki(r, 2), o)
                        }
                    }

                    function wi(t) {
                        return Ur((function(e, n) {
                            var r = -1,
                                i = n.length,
                                o = i > 1 ? n[i - 1] : void 0,
                                a = i > 2 ? n[2] : void 0;
                            for (o = t.length > 3 && "function" == typeof o ? (i--, o) : void 0, a && uo(n[0], n[1], a) && (o = i < 3 ? void 0 : o, i = 1), e = pt(e); ++r < i;) {
                                var s = n[r];
                                s && t(e, s, r, o)
                            }
                            return e
                        }))
                    }

                    function xi(t, e) {
                        return function(n, r) {
                            if (null == n) return n;
                            if (!Ra(n)) return t(n, r);
                            for (var i = n.length, o = e ? i : -1, a = pt(n);
                                (e ? o-- : ++o < i) && !1 !== r(a[o], o, a););
                            return n
                        }
                    }

                    function Ei(t) { return function(e, n, r) { for (var i = -1, o = pt(e), a = r(e), s = a.length; s--;) { var u = a[t ? s : ++i]; if (!1 === n(o[u], u, o)) break } return e } }

                    function Ti(t) {
                        return function(e) {
                            var n = qe(e = us(e)) ? Ve(e) : void 0,
                                r = n ? n[0] : e.charAt(0),
                                i = n ? ci(n, 1).join("") : e.slice(1);
                            return r[t]() + i
                        }
                    }

                    function Ci(t) { return function(e) { return ve(Bs(Ls(e).replace(Dt, "")), t, "") } }

                    function Si(t) {
                        return function() {
                            var e = arguments;
                            switch (e.length) {
                                case 0:
                                    return new t;
                                case 1:
                                    return new t(e[0]);
                                case 2:
                                    return new t(e[0], e[1]);
                                case 3:
                                    return new t(e[0], e[1], e[2]);
                                case 4:
                                    return new t(e[0], e[1], e[2], e[3]);
                                case 5:
                                    return new t(e[0], e[1], e[2], e[3], e[4]);
                                case 6:
                                    return new t(e[0], e[1], e[2], e[3], e[4], e[5]);
                                case 7:
                                    return new t(e[0], e[1], e[2], e[3], e[4], e[5], e[6])
                            }
                            var n = On(t.prototype),
                                r = t.apply(n, e);
                            return Wa(r) ? r : n
                        }
                    }

                    function ki(t) {
                        return function(e, n, r) {
                            var i = pt(e);
                            if (!Ra(e)) {
                                var o = Ki(n, 3);
                                e = ws(e), n = function(t) { return o(i[t], t, i) }
                            }
                            var a = t(e, n, r);
                            return a > -1 ? i[o ? e[a] : a] : void 0
                        }
                    }

                    function Ai(t) {
                        return Qi((function(e) {
                            var n = e.length,
                                r = n,
                                i = Dn.prototype.thru;
                            for (t && e.reverse(); r--;) { var a = e[r]; if ("function" != typeof a) throw new mt(o); if (i && !s && "wrapper" == Xi(a)) var s = new Dn([], !0) }
                            for (r = s ? r : n; ++r < n;) {
                                var u = Xi(a = e[r]),
                                    l = "wrapper" == u ? Yi(a) : void 0;
                                s = l && co(l[0]) && 424 == l[1] && !l[4].length && 1 == l[9] ? s[Xi(l[0])].apply(s, l[3]) : 1 == a.length && co(a) ? s[u]() : s.thru(a)
                            }
                            return function() {
                                var t = arguments,
                                    r = t[0];
                                if (s && 1 == t.length && ja(r)) return s.plant(r).value();
                                for (var i = 0, o = n ? e[i].apply(this, t) : r; ++i < n;) o = e[i].call(this, o);
                                return o
                            }
                        }))
                    }

                    function Ii(t, e, n, i, o, a, s, u, l, c) {
                        var f = 128 & e,
                            h = 1 & e,
                            d = 2 & e,
                            p = 24 & e,
                            v = 512 & e,
                            g = d ? void 0 : Si(t);
                        return function m() {
                            for (var y = arguments.length, b = r(y), _ = y; _--;) b[_] = arguments[_];
                            if (p) var w = Gi(m),
                                x = Re(b, w);
                            if (i && (b = gi(b, i, o, p)), a && (b = mi(b, a, s, p)), y -= x, p && y < c) { var E = ze(b, w); return Ri(t, e, Ii, m.placeholder, n, b, E, u, l, c - y) }
                            var T = h ? n : this,
                                C = d ? T[t] : t;
                            return y = b.length, u ? b = yo(b, u) : v && y > 1 && b.reverse(), f && l < y && (b.length = l), this && this !== Vt && this instanceof m && (C = g || Si(C)), C.apply(T, b)
                        }
                    }

                    function Oi(t, e) { return function(n, r) { return function(t, e, n, r) { return lr(t, (function(t, i, o) { e(r, n(t), i, o) })), r }(n, t, e(r), {}) } }

                    function Ni(t, e) { return function(n, r) { var i; if (void 0 === n && void 0 === r) return e; if (void 0 !== n && (i = n), void 0 !== r) { if (void 0 === i) return r; "string" == typeof n || "string" == typeof r ? (n = Jr(n), r = Jr(r)) : (n = Kr(n), r = Kr(r)), i = t(n, r) } return i } }

                    function Di(t) { return Qi((function(e) { return e = de(e, Ne(Ki())), Ur((function(n) { var r = this; return t(e, (function(t) { return oe(t, r, n) })) })) })) }

                    function Li(t, e) { var n = (e = void 0 === e ? " " : Jr(e)).length; if (n < 2) return n ? Mr(e, t) : e; var r = Mr(e, Ze(t / $e(e))); return qe(e) ? ci(Ve(r), 0, t).join("") : r.slice(0, t) }

                    function ji(t) {
                        return function(e, n, i) {
                            return i && "number" != typeof i && uo(e, n, i) && (n = i = void 0), e = rs(e), void 0 === n ? (n = e, e = 0) : n = rs(n),
                                function(t, e, n, i) { for (var o = -1, a = sn(Ze((e - t) / (n || 1)), 0), s = r(a); a--;) s[i ? a : ++o] = t, t += n; return s }(e, n, i = void 0 === i ? e < n ? 1 : -1 : rs(i), t)
                        }
                    }

                    function Pi(t) { return function(e, n) { return "string" == typeof e && "string" == typeof n || (e = as(e), n = as(n)), t(e, n) } }

                    function Ri(t, e, n, r, i, o, a, s, u, l) {
                        var c = 8 & e;
                        e |= c ? 32 : 64, 4 & (e &= ~(c ? 64 : 32)) || (e &= -4);
                        var f = [t, e, i, c ? o : void 0, c ? a : void 0, c ? void 0 : o, c ? void 0 : a, s, u, l],
                            h = n.apply(void 0, f);
                        return co(t) && _o(h, f), h.placeholder = r, Eo(h, t, e)
                    }

                    function Fi(t) { var e = dt[t]; return function(t, n) { if (t = as(t), (n = null == n ? 0 : un(is(n), 292)) && rn(t)) { var r = (us(t) + "e").split("e"); return +((r = (us(e(r[0] + "e" + (+r[1] + n))) + "e").split("e"))[0] + "e" + (+r[1] - n)) } return e(t) } }
                    var Mi = gn && 1 / We(new gn([, -0]))[1] == 1 / 0 ? function(t) { return new gn(t) } : Js;

                    function Ui(t) { return function(e) { var n = ro(e); return n == v ? Be(e) : n == b ? Qe(e) : function(t, e) { return de(e, (function(e) { return [e, t[e]] })) }(e, t(e)) } }

                    function qi(t, e, n, i, s, u, l, c) {
                        var f = 2 & e;
                        if (!f && "function" != typeof t) throw new mt(o);
                        var h = i ? i.length : 0;
                        if (h || (e &= -97, i = s = void 0), l = void 0 === l ? l : sn(is(l), 0), c = void 0 === c ? c : is(c), h -= s ? s.length : 0, 64 & e) {
                            var d = i,
                                p = s;
                            i = s = void 0
                        }
                        var v = f ? void 0 : Yi(t),
                            g = [t, e, n, i, s, d, p, u, l, c];
                        if (v && function(t, e) {
                                var n = t[1],
                                    r = e[1],
                                    i = n | r,
                                    o = i < 131,
                                    s = 128 == r && 8 == n || 128 == r && 256 == n && t[7].length <= e[8] || 384 == r && e[7].length <= e[8] && 8 == n;
                                if (!o && !s) return t;
                                1 & r && (t[2] = e[2], i |= 1 & n ? 0 : 4);
                                var u = e[3];
                                if (u) {
                                    var l = t[3];
                                    t[3] = l ? gi(l, u, e[4]) : u, t[4] = l ? ze(t[3], a) : e[4]
                                }(u = e[5]) && (l = t[5], t[5] = l ? mi(l, u, e[6]) : u, t[6] = l ? ze(t[5], a) : e[6]);
                                (u = e[7]) && (t[7] = u);
                                128 & r && (t[8] = null == t[8] ? e[8] : un(t[8], e[8]));
                                null == t[9] && (t[9] = e[9]);
                                t[0] = e[0], t[1] = i
                            }(g, v), t = g[0], e = g[1], n = g[2], i = g[3], s = g[4], !(c = g[9] = void 0 === g[9] ? f ? 0 : t.length : sn(g[9] - h, 0)) && 24 & e && (e &= -25), e && 1 != e) m = 8 == e || 16 == e ? function(t, e, n) { var i = Si(t); return function o() { for (var a = arguments.length, s = r(a), u = a, l = Gi(o); u--;) s[u] = arguments[u]; var c = a < 3 && s[0] !== l && s[a - 1] !== l ? [] : ze(s, l); if ((a -= c.length) < n) return Ri(t, e, Ii, o.placeholder, void 0, s, c, void 0, void 0, n - a); var f = this && this !== Vt && this instanceof o ? i : t; return oe(f, this, s) } }(t, e, c) : 32 != e && 33 != e || s.length ? Ii.apply(void 0, g) : function(t, e, n, i) {
                            var o = 1 & e,
                                a = Si(t);
                            return function e() { for (var s = -1, u = arguments.length, l = -1, c = i.length, f = r(c + u), h = this && this !== Vt && this instanceof e ? a : t; ++l < c;) f[l] = i[l]; for (; u--;) f[l++] = arguments[++s]; return oe(h, o ? n : this, f) }
                        }(t, e, n, i);
                        else var m = function(t, e, n) {
                            var r = 1 & e,
                                i = Si(t);
                            return function e() { var o = this && this !== Vt && this instanceof e ? i : t; return o.apply(r ? n : this, arguments) }
                        }(t, e, n);
                        return Eo((v ? zr : _o)(m, g), t, e)
                    }

                    function Bi(t, e, n, r) { return void 0 === t || Oa(t, _t[n]) && !Et.call(r, n) ? e : t }

                    function Hi(t, e, n, r, i, o) { return Wa(t) && Wa(e) && (o.set(e, t), Nr(t, e, void 0, Hi, o), o.delete(e)), t }

                    function zi(t) { return Ya(t) ? void 0 : t }

                    function Wi(t, e, n, r, i, o) {
                        var a = 1 & n,
                            s = t.length,
                            u = e.length;
                        if (s != u && !(a && u > s)) return !1;
                        var l = o.get(t),
                            c = o.get(e);
                        if (l && c) return l == e && c == t;
                        var f = -1,
                            h = !0,
                            d = 2 & n ? new Fn : void 0;
                        for (o.set(t, e), o.set(e, t); ++f < s;) {
                            var p = t[f],
                                v = e[f];
                            if (r) var g = a ? r(v, p, f, e, t, o) : r(p, v, f, t, e, o);
                            if (void 0 !== g) {
                                if (g) continue;
                                h = !1;
                                break
                            }
                            if (d) { if (!me(e, (function(t, e) { if (!Le(d, e) && (p === t || i(p, t, n, r, o))) return d.push(e) }))) { h = !1; break } } else if (p !== v && !i(p, v, n, r, o)) { h = !1; break }
                        }
                        return o.delete(t), o.delete(e), h
                    }

                    function Qi(t) { return xo(go(t, void 0, Po), t + "") }

                    function $i(t) { return dr(t, ws, eo) }

                    function Vi(t) { return dr(t, xs, no) }
                    var Yi = bn ? function(t) { return bn.get(t) } : Js;

                    function Xi(t) {
                        for (var e = t.name + "", n = _n[e], r = Et.call(_n, e) ? n.length : 0; r--;) {
                            var i = n[r],
                                o = i.func;
                            if (null == o || o == t) return i.name
                        }
                        return e
                    }

                    function Gi(t) { return (Et.call(In, "placeholder") ? In : t).placeholder }

                    function Ki() { var t = In.iteratee || Ys; return t = t === Ys ? Tr : t, arguments.length ? t(arguments[0], arguments[1]) : t }

                    function Ji(t, e) { var n, r, i = t.__data__; return ("string" == (r = typeof(n = e)) || "number" == r || "symbol" == r || "boolean" == r ? "__proto__" !== n : null === n) ? i["string" == typeof e ? "string" : "hash"] : i.map }

                    function Zi(t) {
                        for (var e = ws(t), n = e.length; n--;) {
                            var r = e[n],
                                i = t[r];
                            e[n] = [r, i, po(i)]
                        }
                        return e
                    }

                    function to(t, e) { var n = function(t, e) { return null == t ? void 0 : t[e] }(t, e); return Er(n) ? n : void 0 }
                    var eo = en ? function(t) { return null == t ? [] : (t = pt(t), ce(en(t), (function(e) { return $t.call(t, e) }))) } : ou,
                        no = en ? function(t) { for (var e = []; t;) pe(e, eo(t)), t = Ht(t); return e } : ou,
                        ro = pr;

                    function io(t, e, n) {
                        for (var r = -1, i = (e = ui(e, t)).length, o = !1; ++r < i;) {
                            var a = ko(e[r]);
                            if (!(o = null != t && n(t, a))) break;
                            t = t[a]
                        }
                        return o || ++r != i ? o : !!(i = null == t ? 0 : t.length) && za(i) && so(a, i) && (ja(t) || La(t))
                    }

                    function oo(t) { return "function" != typeof t.constructor || ho(t) ? {} : On(Ht(t)) }

                    function ao(t) { return ja(t) || La(t) || !!(Xt && t && t[Xt]) }

                    function so(t, e) { var n = typeof t; return !!(e = null == e ? 9007199254740991 : e) && ("number" == n || "symbol" != n && ut.test(t)) && t > -1 && t % 1 == 0 && t < e }

                    function uo(t, e, n) { if (!Wa(n)) return !1; var r = typeof e; return !!("number" == r ? Ra(n) && so(e, n.length) : "string" == r && e in n) && Oa(n[e], t) }

                    function lo(t, e) { if (ja(t)) return !1; var n = typeof t; return !("number" != n && "symbol" != n && "boolean" != n && null != t && !Ja(t)) || (W.test(t) || !z.test(t) || null != e && t in pt(e)) }

                    function co(t) {
                        var e = Xi(t),
                            n = In[e];
                        if ("function" != typeof n || !(e in Ln.prototype)) return !1;
                        if (t === n) return !0;
                        var r = Yi(n);
                        return !!r && t === r[0]
                    }(dn && ro(new dn(new ArrayBuffer(1))) != T || pn && ro(new pn) != v || vn && "[object Promise]" != ro(vn.resolve()) || gn && ro(new gn) != b || mn && ro(new mn) != x) && (ro = function(t) {
                        var e = pr(t),
                            n = e == m ? t.constructor : void 0,
                            r = n ? Ao(n) : "";
                        if (r) switch (r) {
                            case wn:
                                return T;
                            case xn:
                                return v;
                            case En:
                                return "[object Promise]";
                            case Tn:
                                return b;
                            case Cn:
                                return x
                        }
                        return e
                    });
                    var fo = wt ? Ba : au;

                    function ho(t) { var e = t && t.constructor; return t === ("function" == typeof e && e.prototype || _t) }

                    function po(t) { return t == t && !Wa(t) }

                    function vo(t, e) { return function(n) { return null != n && (n[t] === e && (void 0 !== e || t in pt(n))) } }

                    function go(t, e, n) {
                        return e = sn(void 0 === e ? t.length - 1 : e, 0),
                            function() {
                                for (var i = arguments, o = -1, a = sn(i.length - e, 0), s = r(a); ++o < a;) s[o] = i[e + o];
                                o = -1;
                                for (var u = r(e + 1); ++o < e;) u[o] = i[o];
                                return u[e] = n(s), oe(t, this, u)
                            }
                    }

                    function mo(t, e) { return e.length < 2 ? t : hr(t, $r(e, 0, -1)) }

                    function yo(t, e) {
                        for (var n = t.length, r = un(e.length, n), i = yi(t); r--;) {
                            var o = e[r];
                            t[r] = so(o, n) ? i[o] : void 0
                        }
                        return t
                    }

                    function bo(t, e) { if (("constructor" !== e || "function" != typeof t[e]) && "__proto__" != e) return t[e] }
                    var _o = To(zr),
                        wo = Je || function(t, e) { return Vt.setTimeout(t, e) },
                        xo = To(Wr);

                    function Eo(t, e, n) {
                        var r = e + "";
                        return xo(t, function(t, e) { var n = e.length; if (!n) return t; var r = n - 1; return e[r] = (n > 1 ? "& " : "") + e[r], e = e.join(n > 2 ? ", " : " "), t.replace(G, "{\n/* [wrapped with " + e + "] */\n") }(r, function(t, e) {
                            return se(s, (function(n) {
                                var r = "_." + n[0];
                                e & n[1] && !fe(t, r) && t.push(r)
                            })), t.sort()
                        }(function(t) { var e = t.match(K); return e ? e[1].split(J) : [] }(r), n)))
                    }

                    function To(t) {
                        var e = 0,
                            n = 0;
                        return function() {
                            var r = ln(),
                                i = 16 - (r - n);
                            if (n = r, i > 0) { if (++e >= 800) return arguments[0] } else e = 0;
                            return t.apply(void 0, arguments)
                        }
                    }

                    function Co(t, e) {
                        var n = -1,
                            r = t.length,
                            i = r - 1;
                        for (e = void 0 === e ? r : e; ++n < e;) {
                            var o = Fr(n, i),
                                a = t[o];
                            t[o] = t[n], t[n] = a
                        }
                        return t.length = e, t
                    }
                    var So = function(t) {
                        var e = Ta(t, (function(t) { return 500 === n.size && n.clear(), t })),
                            n = e.cache;
                        return e
                    }((function(t) { var e = []; return 46 === t.charCodeAt(0) && e.push(""), t.replace(Q, (function(t, n, r, i) { e.push(r ? i.replace(et, "$1") : n || t) })), e }));

                    function ko(t) { if ("string" == typeof t || Ja(t)) return t; var e = t + ""; return "0" == e && 1 / t == -1 / 0 ? "-0" : e }

                    function Ao(t) { if (null != t) { try { return xt.call(t) } catch (t) {} try { return t + "" } catch (t) {} } return "" }

                    function Io(t) { if (t instanceof Ln) return t.clone(); var e = new Dn(t.__wrapped__, t.__chain__); return e.__actions__ = yi(t.__actions__), e.__index__ = t.__index__, e.__values__ = t.__values__, e }
                    var Oo = Ur((function(t, e) { return Fa(t) ? tr(t, ar(e, 1, Fa, !0)) : [] })),
                        No = Ur((function(t, e) { var n = qo(e); return Fa(n) && (n = void 0), Fa(t) ? tr(t, ar(e, 1, Fa, !0), Ki(n, 2)) : [] })),
                        Do = Ur((function(t, e) { var n = qo(e); return Fa(n) && (n = void 0), Fa(t) ? tr(t, ar(e, 1, Fa, !0), void 0, n) : [] }));

                    function Lo(t, e, n) { var r = null == t ? 0 : t.length; if (!r) return -1; var i = null == n ? 0 : is(n); return i < 0 && (i = sn(r + i, 0)), _e(t, Ki(e, 3), i) }

                    function jo(t, e, n) { var r = null == t ? 0 : t.length; if (!r) return -1; var i = r - 1; return void 0 !== n && (i = is(n), i = n < 0 ? sn(r + i, 0) : un(i, r - 1)), _e(t, Ki(e, 3), i, !0) }

                    function Po(t) { return (null == t ? 0 : t.length) ? ar(t, 1) : [] }

                    function Ro(t) { return t && t.length ? t[0] : void 0 }
                    var Fo = Ur((function(t) { var e = de(t, ai); return e.length && e[0] === t[0] ? yr(e) : [] })),
                        Mo = Ur((function(t) {
                            var e = qo(t),
                                n = de(t, ai);
                            return e === qo(n) ? e = void 0 : n.pop(), n.length && n[0] === t[0] ? yr(n, Ki(e, 2)) : []
                        })),
                        Uo = Ur((function(t) {
                            var e = qo(t),
                                n = de(t, ai);
                            return (e = "function" == typeof e ? e : void 0) && n.pop(), n.length && n[0] === t[0] ? yr(n, void 0, e) : []
                        }));

                    function qo(t) { var e = null == t ? 0 : t.length; return e ? t[e - 1] : void 0 }
                    var Bo = Ur(Ho);

                    function Ho(t, e) { return t && t.length && e && e.length ? Pr(t, e) : t }
                    var zo = Qi((function(t, e) {
                        var n = null == t ? 0 : t.length,
                            r = Xn(t, e);
                        return Rr(t, de(e, (function(t) { return so(t, n) ? +t : t })).sort(vi)), r
                    }));

                    function Wo(t) { return null == t ? t : hn.call(t) }
                    var Qo = Ur((function(t) { return Zr(ar(t, 1, Fa, !0)) })),
                        $o = Ur((function(t) { var e = qo(t); return Fa(e) && (e = void 0), Zr(ar(t, 1, Fa, !0), Ki(e, 2)) })),
                        Vo = Ur((function(t) { var e = qo(t); return e = "function" == typeof e ? e : void 0, Zr(ar(t, 1, Fa, !0), void 0, e) }));

                    function Yo(t) { if (!t || !t.length) return []; var e = 0; return t = ce(t, (function(t) { if (Fa(t)) return e = sn(t.length, e), !0 })), Ie(e, (function(e) { return de(t, Ce(e)) })) }

                    function Xo(t, e) { if (!t || !t.length) return []; var n = Yo(t); return null == e ? n : de(n, (function(t) { return oe(e, void 0, t) })) }
                    var Go = Ur((function(t, e) { return Fa(t) ? tr(t, e) : [] })),
                        Ko = Ur((function(t) { return ii(ce(t, Fa)) })),
                        Jo = Ur((function(t) { var e = qo(t); return Fa(e) && (e = void 0), ii(ce(t, Fa), Ki(e, 2)) })),
                        Zo = Ur((function(t) { var e = qo(t); return e = "function" == typeof e ? e : void 0, ii(ce(t, Fa), void 0, e) })),
                        ta = Ur(Yo);
                    var ea = Ur((function(t) {
                        var e = t.length,
                            n = e > 1 ? t[e - 1] : void 0;
                        return n = "function" == typeof n ? (t.pop(), n) : void 0, Xo(t, n)
                    }));

                    function na(t) { var e = In(t); return e.__chain__ = !0, e }

                    function ra(t, e) { return e(t) }
                    var ia = Qi((function(t) {
                        var e = t.length,
                            n = e ? t[0] : 0,
                            r = this.__wrapped__,
                            i = function(e) { return Xn(e, t) };
                        return !(e > 1 || this.__actions__.length) && r instanceof Ln && so(n) ? ((r = r.slice(n, +n + (e ? 1 : 0))).__actions__.push({ func: ra, args: [i], thisArg: void 0 }), new Dn(r, this.__chain__).thru((function(t) { return e && !t.length && t.push(void 0), t }))) : this.thru(i)
                    }));
                    var oa = _i((function(t, e, n) { Et.call(t, n) ? ++t[n] : Yn(t, n, 1) }));
                    var aa = ki(Lo),
                        sa = ki(jo);

                    function ua(t, e) { return (ja(t) ? se : er)(t, Ki(e, 3)) }

                    function la(t, e) { return (ja(t) ? ue : nr)(t, Ki(e, 3)) }
                    var ca = _i((function(t, e, n) { Et.call(t, n) ? t[n].push(e) : Yn(t, n, [e]) }));
                    var fa = Ur((function(t, e, n) {
                            var i = -1,
                                o = "function" == typeof e,
                                a = Ra(t) ? r(t.length) : [];
                            return er(t, (function(t) { a[++i] = o ? oe(e, t, n) : br(t, e, n) })), a
                        })),
                        ha = _i((function(t, e, n) { Yn(t, n, e) }));

                    function da(t, e) { return (ja(t) ? de : Ar)(t, Ki(e, 3)) }
                    var pa = _i((function(t, e, n) { t[n ? 0 : 1].push(e) }), (function() {
                        return [
                            [],
                            []
                        ]
                    }));
                    var va = Ur((function(t, e) { if (null == t) return []; var n = e.length; return n > 1 && uo(t, e[0], e[1]) ? e = [] : n > 2 && uo(e[0], e[1], e[2]) && (e = [e[0]]), Lr(t, ar(e, 1), []) })),
                        ga = Ke || function() { return Vt.Date.now() };

                    function ma(t, e, n) { return e = n ? void 0 : e, qi(t, 128, void 0, void 0, void 0, void 0, e = t && null == e ? t.length : e) }

                    function ya(t, e) {
                        var n;
                        if ("function" != typeof e) throw new mt(o);
                        return t = is(t),
                            function() { return --t > 0 && (n = e.apply(this, arguments)), t <= 1 && (e = void 0), n }
                    }
                    var ba = Ur((function(t, e, n) {
                            var r = 1;
                            if (n.length) {
                                var i = ze(n, Gi(ba));
                                r |= 32
                            }
                            return qi(t, r, e, n, i)
                        })),
                        _a = Ur((function(t, e, n) {
                            var r = 3;
                            if (n.length) {
                                var i = ze(n, Gi(_a));
                                r |= 32
                            }
                            return qi(e, r, t, n, i)
                        }));

                    function wa(t, e, n) {
                        var r, i, a, s, u, l, c = 0,
                            f = !1,
                            h = !1,
                            d = !0;
                        if ("function" != typeof t) throw new mt(o);

                        function p(e) {
                            var n = r,
                                o = i;
                            return r = i = void 0, c = e, s = t.apply(o, n)
                        }

                        function v(t) { return c = t, u = wo(m, e), f ? p(t) : s }

                        function g(t) { var n = t - l; return void 0 === l || n >= e || n < 0 || h && t - c >= a }

                        function m() {
                            var t = ga();
                            if (g(t)) return y(t);
                            u = wo(m, function(t) { var n = e - (t - l); return h ? un(n, a - (t - c)) : n }(t))
                        }

                        function y(t) { return u = void 0, d && r ? p(t) : (r = i = void 0, s) }

                        function b() {
                            var t = ga(),
                                n = g(t);
                            if (r = arguments, i = this, l = t, n) { if (void 0 === u) return v(l); if (h) return fi(u), u = wo(m, e), p(l) }
                            return void 0 === u && (u = wo(m, e)), s
                        }
                        return e = as(e) || 0, Wa(n) && (f = !!n.leading, a = (h = "maxWait" in n) ? sn(as(n.maxWait) || 0, e) : a, d = "trailing" in n ? !!n.trailing : d), b.cancel = function() { void 0 !== u && fi(u), c = 0, r = l = i = u = void 0 }, b.flush = function() { return void 0 === u ? s : y(ga()) }, b
                    }
                    var xa = Ur((function(t, e) { return Zn(t, 1, e) })),
                        Ea = Ur((function(t, e, n) { return Zn(t, as(e) || 0, n) }));

                    function Ta(t, e) {
                        if ("function" != typeof t || null != e && "function" != typeof e) throw new mt(o);
                        var n = function() {
                            var r = arguments,
                                i = e ? e.apply(this, r) : r[0],
                                o = n.cache;
                            if (o.has(i)) return o.get(i);
                            var a = t.apply(this, r);
                            return n.cache = o.set(i, a) || o, a
                        };
                        return n.cache = new(Ta.Cache || Rn), n
                    }

                    function Ca(t) {
                        if ("function" != typeof t) throw new mt(o);
                        return function() {
                            var e = arguments;
                            switch (e.length) {
                                case 0:
                                    return !t.call(this);
                                case 1:
                                    return !t.call(this, e[0]);
                                case 2:
                                    return !t.call(this, e[0], e[1]);
                                case 3:
                                    return !t.call(this, e[0], e[1], e[2])
                            }
                            return !t.apply(this, e)
                        }
                    }
                    Ta.Cache = Rn;
                    var Sa = li((function(t, e) { var n = (e = 1 == e.length && ja(e[0]) ? de(e[0], Ne(Ki())) : de(ar(e, 1), Ne(Ki()))).length; return Ur((function(r) { for (var i = -1, o = un(r.length, n); ++i < o;) r[i] = e[i].call(this, r[i]); return oe(t, this, r) })) })),
                        ka = Ur((function(t, e) { return qi(t, 32, void 0, e, ze(e, Gi(ka))) })),
                        Aa = Ur((function(t, e) { return qi(t, 64, void 0, e, ze(e, Gi(Aa))) })),
                        Ia = Qi((function(t, e) { return qi(t, 256, void 0, void 0, void 0, e) }));

                    function Oa(t, e) { return t === e || t != t && e != e }
                    var Na = Pi(vr),
                        Da = Pi((function(t, e) { return t >= e })),
                        La = _r(function() { return arguments }()) ? _r : function(t) { return Qa(t) && Et.call(t, "callee") && !$t.call(t, "callee") },
                        ja = r.isArray,
                        Pa = Zt ? Ne(Zt) : function(t) { return Qa(t) && pr(t) == E };

                    function Ra(t) { return null != t && za(t.length) && !Ba(t) }

                    function Fa(t) { return Qa(t) && Ra(t) }
                    var Ma = nn || au,
                        Ua = te ? Ne(te) : function(t) { return Qa(t) && pr(t) == f };

                    function qa(t) { if (!Qa(t)) return !1; var e = pr(t); return e == h || "[object DOMException]" == e || "string" == typeof t.message && "string" == typeof t.name && !Ya(t) }

                    function Ba(t) { if (!Wa(t)) return !1; var e = pr(t); return e == d || e == p || "[object AsyncFunction]" == e || "[object Proxy]" == e }

                    function Ha(t) { return "number" == typeof t && t == is(t) }

                    function za(t) { return "number" == typeof t && t > -1 && t % 1 == 0 && t <= 9007199254740991 }

                    function Wa(t) { var e = typeof t; return null != t && ("object" == e || "function" == e) }

                    function Qa(t) { return null != t && "object" == typeof t }
                    var $a = ee ? Ne(ee) : function(t) { return Qa(t) && ro(t) == v };

                    function Va(t) { return "number" == typeof t || Qa(t) && pr(t) == g }

                    function Ya(t) { if (!Qa(t) || pr(t) != m) return !1; var e = Ht(t); if (null === e) return !0; var n = Et.call(e, "constructor") && e.constructor; return "function" == typeof n && n instanceof n && xt.call(n) == kt }
                    var Xa = ne ? Ne(ne) : function(t) { return Qa(t) && pr(t) == y };
                    var Ga = re ? Ne(re) : function(t) { return Qa(t) && ro(t) == b };

                    function Ka(t) { return "string" == typeof t || !ja(t) && Qa(t) && pr(t) == _ }

                    function Ja(t) { return "symbol" == typeof t || Qa(t) && pr(t) == w }
                    var Za = ie ? Ne(ie) : function(t) { return Qa(t) && za(t.length) && !!qt[pr(t)] };
                    var ts = Pi(kr),
                        es = Pi((function(t, e) { return t <= e }));

                    function ns(t) { if (!t) return []; if (Ra(t)) return Ka(t) ? Ve(t) : yi(t); if (Kt && t[Kt]) return function(t) { for (var e, n = []; !(e = t.next()).done;) n.push(e.value); return n }(t[Kt]()); var e = ro(t); return (e == v ? Be : e == b ? We : Os)(t) }

                    function rs(t) { return t ? (t = as(t)) === 1 / 0 || t === -1 / 0 ? 17976931348623157e292 * (t < 0 ? -1 : 1) : t == t ? t : 0 : 0 === t ? t : 0 }

                    function is(t) {
                        var e = rs(t),
                            n = e % 1;
                        return e == e ? n ? e - n : e : 0
                    }

                    function os(t) { return t ? Gn(is(t), 0, 4294967295) : 0 }

                    function as(t) {
                        if ("number" == typeof t) return t;
                        if (Ja(t)) return NaN;
                        if (Wa(t)) {
                            var e = "function" == typeof t.valueOf ? t.valueOf() : t;
                            t = Wa(e) ? e + "" : e
                        }
                        if ("string" != typeof t) return 0 === t ? t : +t;
                        t = Oe(t);
                        var n = ot.test(t);
                        return n || st.test(t) ? Wt(t.slice(2), n ? 2 : 8) : it.test(t) ? NaN : +t
                    }

                    function ss(t) { return bi(t, xs(t)) }

                    function us(t) { return null == t ? "" : Jr(t) }
                    var ls = wi((function(t, e) {
                            if (ho(e) || Ra(e)) bi(e, ws(e), t);
                            else
                                for (var n in e) Et.call(e, n) && Wn(t, n, e[n])
                        })),
                        cs = wi((function(t, e) { bi(e, xs(e), t) })),
                        fs = wi((function(t, e, n, r) { bi(e, xs(e), t, r) })),
                        hs = wi((function(t, e, n, r) { bi(e, ws(e), t, r) })),
                        ds = Qi(Xn);
                    var ps = Ur((function(t, e) {
                            t = pt(t);
                            var n = -1,
                                r = e.length,
                                i = r > 2 ? e[2] : void 0;
                            for (i && uo(e[0], e[1], i) && (r = 1); ++n < r;)
                                for (var o = e[n], a = xs(o), s = -1, u = a.length; ++s < u;) {
                                    var l = a[s],
                                        c = t[l];
                                    (void 0 === c || Oa(c, _t[l]) && !Et.call(t, l)) && (t[l] = o[l])
                                }
                            return t
                        })),
                        vs = Ur((function(t) { return t.push(void 0, Hi), oe(Ts, void 0, t) }));

                    function gs(t, e, n) { var r = null == t ? void 0 : hr(t, e); return void 0 === r ? n : r }

                    function ms(t, e) { return null != t && io(t, e, mr) }
                    var ys = Oi((function(t, e, n) { null != e && "function" != typeof e.toString && (e = St.call(e)), t[e] = n }), Ws(Vs)),
                        bs = Oi((function(t, e, n) { null != e && "function" != typeof e.toString && (e = St.call(e)), Et.call(t, e) ? t[e].push(n) : t[e] = [n] }), Ki),
                        _s = Ur(br);

                    function ws(t) { return Ra(t) ? Un(t) : Cr(t) }

                    function xs(t) { return Ra(t) ? Un(t, !0) : Sr(t) }
                    var Es = wi((function(t, e, n) { Nr(t, e, n) })),
                        Ts = wi((function(t, e, n, r) { Nr(t, e, n, r) })),
                        Cs = Qi((function(t, e) {
                            var n = {};
                            if (null == t) return n;
                            var r = !1;
                            e = de(e, (function(e) { return e = ui(e, t), r || (r = e.length > 1), e })), bi(t, Vi(t), n), r && (n = Kn(n, 7, zi));
                            for (var i = e.length; i--;) ti(n, e[i]);
                            return n
                        }));
                    var Ss = Qi((function(t, e) { return null == t ? {} : function(t, e) { return jr(t, e, (function(e, n) { return ms(t, n) })) }(t, e) }));

                    function ks(t, e) { if (null == t) return {}; var n = de(Vi(t), (function(t) { return [t] })); return e = Ki(e), jr(t, n, (function(t, n) { return e(t, n[0]) })) }
                    var As = Ui(ws),
                        Is = Ui(xs);

                    function Os(t) { return null == t ? [] : De(t, ws(t)) }
                    var Ns = Ci((function(t, e, n) { return e = e.toLowerCase(), t + (n ? Ds(e) : e) }));

                    function Ds(t) { return qs(us(t).toLowerCase()) }

                    function Ls(t) { return (t = us(t)) && t.replace(lt, Fe).replace(Lt, "") }
                    var js = Ci((function(t, e, n) { return t + (n ? "-" : "") + e.toLowerCase() })),
                        Ps = Ci((function(t, e, n) { return t + (n ? " " : "") + e.toLowerCase() })),
                        Rs = Ti("toLowerCase");
                    var Fs = Ci((function(t, e, n) { return t + (n ? "_" : "") + e.toLowerCase() }));
                    var Ms = Ci((function(t, e, n) { return t + (n ? " " : "") + qs(e) }));
                    var Us = Ci((function(t, e, n) { return t + (n ? " " : "") + e.toUpperCase() })),
                        qs = Ti("toUpperCase");

                    function Bs(t, e, n) { return t = us(t), void 0 === (e = n ? void 0 : e) ? function(t) { return Ft.test(t) }(t) ? function(t) { return t.match(Pt) || [] }(t) : function(t) { return t.match(Z) || [] }(t) : t.match(e) || [] }
                    var Hs = Ur((function(t, e) { try { return oe(t, void 0, e) } catch (t) { return qa(t) ? t : new X(t) } })),
                        zs = Qi((function(t, e) { return se(e, (function(e) { e = ko(e), Yn(t, e, ba(t[e], t)) })), t }));

                    function Ws(t) { return function() { return t } }
                    var Qs = Ai(),
                        $s = Ai(!0);

                    function Vs(t) { return t }

                    function Ys(t) { return Tr("function" == typeof t ? t : Kn(t, 1)) }
                    var Xs = Ur((function(t, e) { return function(n) { return br(n, t, e) } })),
                        Gs = Ur((function(t, e) { return function(n) { return br(t, n, e) } }));

                    function Ks(t, e, n) {
                        var r = ws(e),
                            i = fr(e, r);
                        null != n || Wa(e) && (i.length || !r.length) || (n = e, e = t, t = this, i = fr(e, ws(e)));
                        var o = !(Wa(n) && "chain" in n && !n.chain),
                            a = Ba(t);
                        return se(i, (function(n) {
                            var r = e[n];
                            t[n] = r, a && (t.prototype[n] = function() {
                                var e = this.__chain__;
                                if (o || e) {
                                    var n = t(this.__wrapped__),
                                        i = n.__actions__ = yi(this.__actions__);
                                    return i.push({ func: r, args: arguments, thisArg: t }), n.__chain__ = e, n
                                }
                                return r.apply(t, pe([this.value()], arguments))
                            })
                        })), t
                    }

                    function Js() {}
                    var Zs = Di(de),
                        tu = Di(le),
                        eu = Di(me);

                    function nu(t) { return lo(t) ? Ce(ko(t)) : function(t) { return function(e) { return hr(e, t) } }(t) }
                    var ru = ji(),
                        iu = ji(!0);

                    function ou() { return [] }

                    function au() { return !1 }
                    var su = Ni((function(t, e) { return t + e }), 0),
                        uu = Fi("ceil"),
                        lu = Ni((function(t, e) { return t / e }), 1),
                        cu = Fi("floor");
                    var fu, hu = Ni((function(t, e) { return t * e }), 1),
                        du = Fi("round"),
                        pu = Ni((function(t, e) { return t - e }), 0);
                    return In.after = function(t, e) {
                        if ("function" != typeof e) throw new mt(o);
                        return t = is(t),
                            function() { if (--t < 1) return e.apply(this, arguments) }
                    }, In.ary = ma, In.assign = ls, In.assignIn = cs, In.assignInWith = fs, In.assignWith = hs, In.at = ds, In.before = ya, In.bind = ba, In.bindAll = zs, In.bindKey = _a, In.castArray = function() { if (!arguments.length) return []; var t = arguments[0]; return ja(t) ? t : [t] }, In.chain = na, In.chunk = function(t, e, n) { e = (n ? uo(t, e, n) : void 0 === e) ? 1 : sn(is(e), 0); var i = null == t ? 0 : t.length; if (!i || e < 1) return []; for (var o = 0, a = 0, s = r(Ze(i / e)); o < i;) s[a++] = $r(t, o, o += e); return s }, In.compact = function(t) {
                        for (var e = -1, n = null == t ? 0 : t.length, r = 0, i = []; ++e < n;) {
                            var o = t[e];
                            o && (i[r++] = o)
                        }
                        return i
                    }, In.concat = function() { var t = arguments.length; if (!t) return []; for (var e = r(t - 1), n = arguments[0], i = t; i--;) e[i - 1] = arguments[i]; return pe(ja(n) ? yi(n) : [n], ar(e, 1)) }, In.cond = function(t) {
                        var e = null == t ? 0 : t.length,
                            n = Ki();
                        return t = e ? de(t, (function(t) { if ("function" != typeof t[1]) throw new mt(o); return [n(t[0]), t[1]] })) : [], Ur((function(n) { for (var r = -1; ++r < e;) { var i = t[r]; if (oe(i[0], this, n)) return oe(i[1], this, n) } }))
                    }, In.conforms = function(t) { return function(t) { var e = ws(t); return function(n) { return Jn(n, t, e) } }(Kn(t, 1)) }, In.constant = Ws, In.countBy = oa, In.create = function(t, e) { var n = On(t); return null == e ? n : Vn(n, e) }, In.curry = function t(e, n, r) { var i = qi(e, 8, void 0, void 0, void 0, void 0, void 0, n = r ? void 0 : n); return i.placeholder = t.placeholder, i }, In.curryRight = function t(e, n, r) { var i = qi(e, 16, void 0, void 0, void 0, void 0, void 0, n = r ? void 0 : n); return i.placeholder = t.placeholder, i }, In.debounce = wa, In.defaults = ps, In.defaultsDeep = vs, In.defer = xa, In.delay = Ea, In.difference = Oo, In.differenceBy = No, In.differenceWith = Do, In.drop = function(t, e, n) { var r = null == t ? 0 : t.length; return r ? $r(t, (e = n || void 0 === e ? 1 : is(e)) < 0 ? 0 : e, r) : [] }, In.dropRight = function(t, e, n) { var r = null == t ? 0 : t.length; return r ? $r(t, 0, (e = r - (e = n || void 0 === e ? 1 : is(e))) < 0 ? 0 : e) : [] }, In.dropRightWhile = function(t, e) { return t && t.length ? ni(t, Ki(e, 3), !0, !0) : [] }, In.dropWhile = function(t, e) { return t && t.length ? ni(t, Ki(e, 3), !0) : [] }, In.fill = function(t, e, n, r) { var i = null == t ? 0 : t.length; return i ? (n && "number" != typeof n && uo(t, e, n) && (n = 0, r = i), function(t, e, n, r) { var i = t.length; for ((n = is(n)) < 0 && (n = -n > i ? 0 : i + n), (r = void 0 === r || r > i ? i : is(r)) < 0 && (r += i), r = n > r ? 0 : os(r); n < r;) t[n++] = e; return t }(t, e, n, r)) : [] }, In.filter = function(t, e) { return (ja(t) ? ce : or)(t, Ki(e, 3)) }, In.flatMap = function(t, e) { return ar(da(t, e), 1) }, In.flatMapDeep = function(t, e) { return ar(da(t, e), 1 / 0) }, In.flatMapDepth = function(t, e, n) { return n = void 0 === n ? 1 : is(n), ar(da(t, e), n) }, In.flatten = Po, In.flattenDeep = function(t) { return (null == t ? 0 : t.length) ? ar(t, 1 / 0) : [] }, In.flattenDepth = function(t, e) { return (null == t ? 0 : t.length) ? ar(t, e = void 0 === e ? 1 : is(e)) : [] }, In.flip = function(t) { return qi(t, 512) }, In.flow = Qs, In.flowRight = $s, In.fromPairs = function(t) {
                        for (var e = -1, n = null == t ? 0 : t.length, r = {}; ++e < n;) {
                            var i = t[e];
                            r[i[0]] = i[1]
                        }
                        return r
                    }, In.functions = function(t) { return null == t ? [] : fr(t, ws(t)) }, In.functionsIn = function(t) { return null == t ? [] : fr(t, xs(t)) }, In.groupBy = ca, In.initial = function(t) { return (null == t ? 0 : t.length) ? $r(t, 0, -1) : [] }, In.intersection = Fo, In.intersectionBy = Mo, In.intersectionWith = Uo, In.invert = ys, In.invertBy = bs, In.invokeMap = fa, In.iteratee = Ys, In.keyBy = ha, In.keys = ws, In.keysIn = xs, In.map = da, In.mapKeys = function(t, e) { var n = {}; return e = Ki(e, 3), lr(t, (function(t, r, i) { Yn(n, e(t, r, i), t) })), n }, In.mapValues = function(t, e) { var n = {}; return e = Ki(e, 3), lr(t, (function(t, r, i) { Yn(n, r, e(t, r, i)) })), n }, In.matches = function(t) { return Ir(Kn(t, 1)) }, In.matchesProperty = function(t, e) { return Or(t, Kn(e, 1)) }, In.memoize = Ta, In.merge = Es, In.mergeWith = Ts, In.method = Xs, In.methodOf = Gs, In.mixin = Ks, In.negate = Ca, In.nthArg = function(t) { return t = is(t), Ur((function(e) { return Dr(e, t) })) }, In.omit = Cs, In.omitBy = function(t, e) { return ks(t, Ca(Ki(e))) }, In.once = function(t) { return ya(2, t) }, In.orderBy = function(t, e, n, r) { return null == t ? [] : (ja(e) || (e = null == e ? [] : [e]), ja(n = r ? void 0 : n) || (n = null == n ? [] : [n]), Lr(t, e, n)) }, In.over = Zs, In.overArgs = Sa, In.overEvery = tu, In.overSome = eu, In.partial = ka, In.partialRight = Aa, In.partition = pa, In.pick = Ss, In.pickBy = ks, In.property = nu, In.propertyOf = function(t) { return function(e) { return null == t ? void 0 : hr(t, e) } }, In.pull = Bo, In.pullAll = Ho, In.pullAllBy = function(t, e, n) { return t && t.length && e && e.length ? Pr(t, e, Ki(n, 2)) : t }, In.pullAllWith = function(t, e, n) { return t && t.length && e && e.length ? Pr(t, e, void 0, n) : t }, In.pullAt = zo, In.range = ru, In.rangeRight = iu, In.rearg = Ia, In.reject = function(t, e) { return (ja(t) ? ce : or)(t, Ca(Ki(e, 3))) }, In.remove = function(t, e) {
                        var n = [];
                        if (!t || !t.length) return n;
                        var r = -1,
                            i = [],
                            o = t.length;
                        for (e = Ki(e, 3); ++r < o;) {
                            var a = t[r];
                            e(a, r, t) && (n.push(a), i.push(r))
                        }
                        return Rr(t, i), n
                    }, In.rest = function(t, e) { if ("function" != typeof t) throw new mt(o); return Ur(t, e = void 0 === e ? e : is(e)) }, In.reverse = Wo, In.sampleSize = function(t, e, n) { return e = (n ? uo(t, e, n) : void 0 === e) ? 1 : is(e), (ja(t) ? Bn : Br)(t, e) }, In.set = function(t, e, n) { return null == t ? t : Hr(t, e, n) }, In.setWith = function(t, e, n, r) { return r = "function" == typeof r ? r : void 0, null == t ? t : Hr(t, e, n, r) }, In.shuffle = function(t) { return (ja(t) ? Hn : Qr)(t) }, In.slice = function(t, e, n) { var r = null == t ? 0 : t.length; return r ? (n && "number" != typeof n && uo(t, e, n) ? (e = 0, n = r) : (e = null == e ? 0 : is(e), n = void 0 === n ? r : is(n)), $r(t, e, n)) : [] }, In.sortBy = va, In.sortedUniq = function(t) { return t && t.length ? Gr(t) : [] }, In.sortedUniqBy = function(t, e) { return t && t.length ? Gr(t, Ki(e, 2)) : [] }, In.split = function(t, e, n) { return n && "number" != typeof n && uo(t, e, n) && (e = n = void 0), (n = void 0 === n ? 4294967295 : n >>> 0) ? (t = us(t)) && ("string" == typeof e || null != e && !Xa(e)) && !(e = Jr(e)) && qe(t) ? ci(Ve(t), 0, n) : t.split(e, n) : [] }, In.spread = function(t, e) {
                        if ("function" != typeof t) throw new mt(o);
                        return e = null == e ? 0 : sn(is(e), 0), Ur((function(n) {
                            var r = n[e],
                                i = ci(n, 0, e);
                            return r && pe(i, r), oe(t, this, i)
                        }))
                    }, In.tail = function(t) { var e = null == t ? 0 : t.length; return e ? $r(t, 1, e) : [] }, In.take = function(t, e, n) { return t && t.length ? $r(t, 0, (e = n || void 0 === e ? 1 : is(e)) < 0 ? 0 : e) : [] }, In.takeRight = function(t, e, n) { var r = null == t ? 0 : t.length; return r ? $r(t, (e = r - (e = n || void 0 === e ? 1 : is(e))) < 0 ? 0 : e, r) : [] }, In.takeRightWhile = function(t, e) { return t && t.length ? ni(t, Ki(e, 3), !1, !0) : [] }, In.takeWhile = function(t, e) { return t && t.length ? ni(t, Ki(e, 3)) : [] }, In.tap = function(t, e) { return e(t), t }, In.throttle = function(t, e, n) {
                        var r = !0,
                            i = !0;
                        if ("function" != typeof t) throw new mt(o);
                        return Wa(n) && (r = "leading" in n ? !!n.leading : r, i = "trailing" in n ? !!n.trailing : i), wa(t, e, { leading: r, maxWait: e, trailing: i })
                    }, In.thru = ra, In.toArray = ns, In.toPairs = As, In.toPairsIn = Is, In.toPath = function(t) { return ja(t) ? de(t, ko) : Ja(t) ? [t] : yi(So(us(t))) }, In.toPlainObject = ss, In.transform = function(t, e, n) {
                        var r = ja(t),
                            i = r || Ma(t) || Za(t);
                        if (e = Ki(e, 4), null == n) {
                            var o = t && t.constructor;
                            n = i ? r ? new o : [] : Wa(t) && Ba(o) ? On(Ht(t)) : {}
                        }
                        return (i ? se : lr)(t, (function(t, r, i) { return e(n, t, r, i) })), n
                    }, In.unary = function(t) { return ma(t, 1) }, In.union = Qo, In.unionBy = $o, In.unionWith = Vo, In.uniq = function(t) { return t && t.length ? Zr(t) : [] }, In.uniqBy = function(t, e) { return t && t.length ? Zr(t, Ki(e, 2)) : [] }, In.uniqWith = function(t, e) { return e = "function" == typeof e ? e : void 0, t && t.length ? Zr(t, void 0, e) : [] }, In.unset = function(t, e) { return null == t || ti(t, e) }, In.unzip = Yo, In.unzipWith = Xo, In.update = function(t, e, n) { return null == t ? t : ei(t, e, si(n)) }, In.updateWith = function(t, e, n, r) { return r = "function" == typeof r ? r : void 0, null == t ? t : ei(t, e, si(n), r) }, In.values = Os, In.valuesIn = function(t) { return null == t ? [] : De(t, xs(t)) }, In.without = Go, In.words = Bs, In.wrap = function(t, e) { return ka(si(e), t) }, In.xor = Ko, In.xorBy = Jo, In.xorWith = Zo, In.zip = ta, In.zipObject = function(t, e) { return oi(t || [], e || [], Wn) }, In.zipObjectDeep = function(t, e) { return oi(t || [], e || [], Hr) }, In.zipWith = ea, In.entries = As, In.entriesIn = Is, In.extend = cs, In.extendWith = fs, Ks(In, In), In.add = su, In.attempt = Hs, In.camelCase = Ns, In.capitalize = Ds, In.ceil = uu, In.clamp = function(t, e, n) { return void 0 === n && (n = e, e = void 0), void 0 !== n && (n = (n = as(n)) == n ? n : 0), void 0 !== e && (e = (e = as(e)) == e ? e : 0), Gn(as(t), e, n) }, In.clone = function(t) { return Kn(t, 4) }, In.cloneDeep = function(t) { return Kn(t, 5) }, In.cloneDeepWith = function(t, e) { return Kn(t, 5, e = "function" == typeof e ? e : void 0) }, In.cloneWith = function(t, e) { return Kn(t, 4, e = "function" == typeof e ? e : void 0) }, In.conformsTo = function(t, e) { return null == e || Jn(t, e, ws(e)) }, In.deburr = Ls, In.defaultTo = function(t, e) { return null == t || t != t ? e : t }, In.divide = lu, In.endsWith = function(t, e, n) {
                        t = us(t), e = Jr(e);
                        var r = t.length,
                            i = n = void 0 === n ? r : Gn(is(n), 0, r);
                        return (n -= e.length) >= 0 && t.slice(n, i) == e
                    }, In.eq = Oa, In.escape = function(t) { return (t = us(t)) && U.test(t) ? t.replace(F, Me) : t }, In.escapeRegExp = function(t) { return (t = us(t)) && V.test(t) ? t.replace($, "\\$&") : t }, In.every = function(t, e, n) { var r = ja(t) ? le : rr; return n && uo(t, e, n) && (e = void 0), r(t, Ki(e, 3)) }, In.find = aa, In.findIndex = Lo, In.findKey = function(t, e) { return be(t, Ki(e, 3), lr) }, In.findLast = sa, In.findLastIndex = jo, In.findLastKey = function(t, e) { return be(t, Ki(e, 3), cr) }, In.floor = cu, In.forEach = ua, In.forEachRight = la, In.forIn = function(t, e) { return null == t ? t : sr(t, Ki(e, 3), xs) }, In.forInRight = function(t, e) { return null == t ? t : ur(t, Ki(e, 3), xs) }, In.forOwn = function(t, e) { return t && lr(t, Ki(e, 3)) }, In.forOwnRight = function(t, e) { return t && cr(t, Ki(e, 3)) }, In.get = gs, In.gt = Na, In.gte = Da, In.has = function(t, e) { return null != t && io(t, e, gr) }, In.hasIn = ms, In.head = Ro, In.identity = Vs, In.includes = function(t, e, n, r) { t = Ra(t) ? t : Os(t), n = n && !r ? is(n) : 0; var i = t.length; return n < 0 && (n = sn(i + n, 0)), Ka(t) ? n <= i && t.indexOf(e, n) > -1 : !!i && we(t, e, n) > -1 }, In.indexOf = function(t, e, n) { var r = null == t ? 0 : t.length; if (!r) return -1; var i = null == n ? 0 : is(n); return i < 0 && (i = sn(r + i, 0)), we(t, e, i) }, In.inRange = function(t, e, n) {
                        return e = rs(e), void 0 === n ? (n = e, e = 0) : n = rs(n),
                            function(t, e, n) { return t >= un(e, n) && t < sn(e, n) }(t = as(t), e, n)
                    }, In.invoke = _s, In.isArguments = La, In.isArray = ja, In.isArrayBuffer = Pa, In.isArrayLike = Ra, In.isArrayLikeObject = Fa, In.isBoolean = function(t) { return !0 === t || !1 === t || Qa(t) && pr(t) == c }, In.isBuffer = Ma, In.isDate = Ua, In.isElement = function(t) { return Qa(t) && 1 === t.nodeType && !Ya(t) }, In.isEmpty = function(t) {
                        if (null == t) return !0;
                        if (Ra(t) && (ja(t) || "string" == typeof t || "function" == typeof t.splice || Ma(t) || Za(t) || La(t))) return !t.length;
                        var e = ro(t);
                        if (e == v || e == b) return !t.size;
                        if (ho(t)) return !Cr(t).length;
                        for (var n in t)
                            if (Et.call(t, n)) return !1;
                        return !0
                    }, In.isEqual = function(t, e) { return wr(t, e) }, In.isEqualWith = function(t, e, n) { var r = (n = "function" == typeof n ? n : void 0) ? n(t, e) : void 0; return void 0 === r ? wr(t, e, void 0, n) : !!r }, In.isError = qa, In.isFinite = function(t) { return "number" == typeof t && rn(t) }, In.isFunction = Ba, In.isInteger = Ha, In.isLength = za, In.isMap = $a, In.isMatch = function(t, e) { return t === e || xr(t, e, Zi(e)) }, In.isMatchWith = function(t, e, n) { return n = "function" == typeof n ? n : void 0, xr(t, e, Zi(e), n) }, In.isNaN = function(t) { return Va(t) && t != +t }, In.isNative = function(t) { if (fo(t)) throw new X("Unsupported core-js use. Try https://npms.io/search?q=ponyfill."); return Er(t) }, In.isNil = function(t) { return null == t }, In.isNull = function(t) { return null === t }, In.isNumber = Va, In.isObject = Wa, In.isObjectLike = Qa, In.isPlainObject = Ya, In.isRegExp = Xa, In.isSafeInteger = function(t) { return Ha(t) && t >= -9007199254740991 && t <= 9007199254740991 }, In.isSet = Ga, In.isString = Ka, In.isSymbol = Ja, In.isTypedArray = Za, In.isUndefined = function(t) { return void 0 === t }, In.isWeakMap = function(t) { return Qa(t) && ro(t) == x }, In.isWeakSet = function(t) { return Qa(t) && "[object WeakSet]" == pr(t) }, In.join = function(t, e) { return null == t ? "" : on.call(t, e) }, In.kebabCase = js, In.last = qo, In.lastIndexOf = function(t, e, n) {
                        var r = null == t ? 0 : t.length;
                        if (!r) return -1;
                        var i = r;
                        return void 0 !== n && (i = (i = is(n)) < 0 ? sn(r + i, 0) : un(i, r - 1)), e == e ? function(t, e, n) {
                            for (var r = n + 1; r--;)
                                if (t[r] === e) return r;
                            return r
                        }(t, e, i) : _e(t, Ee, i, !0)
                    }, In.lowerCase = Ps, In.lowerFirst = Rs, In.lt = ts, In.lte = es, In.max = function(t) { return t && t.length ? ir(t, Vs, vr) : void 0 }, In.maxBy = function(t, e) { return t && t.length ? ir(t, Ki(e, 2), vr) : void 0 }, In.mean = function(t) { return Te(t, Vs) }, In.meanBy = function(t, e) { return Te(t, Ki(e, 2)) }, In.min = function(t) { return t && t.length ? ir(t, Vs, kr) : void 0 }, In.minBy = function(t, e) { return t && t.length ? ir(t, Ki(e, 2), kr) : void 0 }, In.stubArray = ou, In.stubFalse = au, In.stubObject = function() { return {} }, In.stubString = function() { return "" }, In.stubTrue = function() { return !0 }, In.multiply = hu, In.nth = function(t, e) { return t && t.length ? Dr(t, is(e)) : void 0 }, In.noConflict = function() { return Vt._ === this && (Vt._ = At), this }, In.noop = Js, In.now = ga, In.pad = function(t, e, n) { t = us(t); var r = (e = is(e)) ? $e(t) : 0; if (!e || r >= e) return t; var i = (e - r) / 2; return Li(tn(i), n) + t + Li(Ze(i), n) }, In.padEnd = function(t, e, n) { t = us(t); var r = (e = is(e)) ? $e(t) : 0; return e && r < e ? t + Li(e - r, n) : t }, In.padStart = function(t, e, n) { t = us(t); var r = (e = is(e)) ? $e(t) : 0; return e && r < e ? Li(e - r, n) + t : t }, In.parseInt = function(t, e, n) { return n || null == e ? e = 0 : e && (e = +e), cn(us(t).replace(Y, ""), e || 0) }, In.random = function(t, e, n) {
                        if (n && "boolean" != typeof n && uo(t, e, n) && (e = n = void 0), void 0 === n && ("boolean" == typeof e ? (n = e, e = void 0) : "boolean" == typeof t && (n = t, t = void 0)), void 0 === t && void 0 === e ? (t = 0, e = 1) : (t = rs(t), void 0 === e ? (e = t, t = 0) : e = rs(e)), t > e) {
                            var r = t;
                            t = e, e = r
                        }
                        if (n || t % 1 || e % 1) { var i = fn(); return un(t + i * (e - t + zt("1e-" + ((i + "").length - 1))), e) }
                        return Fr(t, e)
                    }, In.reduce = function(t, e, n) {
                        var r = ja(t) ? ve : ke,
                            i = arguments.length < 3;
                        return r(t, Ki(e, 4), n, i, er)
                    }, In.reduceRight = function(t, e, n) {
                        var r = ja(t) ? ge : ke,
                            i = arguments.length < 3;
                        return r(t, Ki(e, 4), n, i, nr)
                    }, In.repeat = function(t, e, n) { return e = (n ? uo(t, e, n) : void 0 === e) ? 1 : is(e), Mr(us(t), e) }, In.replace = function() {
                        var t = arguments,
                            e = us(t[0]);
                        return t.length < 3 ? e : e.replace(t[1], t[2])
                    }, In.result = function(t, e, n) {
                        var r = -1,
                            i = (e = ui(e, t)).length;
                        for (i || (i = 1, t = void 0); ++r < i;) {
                            var o = null == t ? void 0 : t[ko(e[r])];
                            void 0 === o && (r = i, o = n), t = Ba(o) ? o.call(t) : o
                        }
                        return t
                    }, In.round = du, In.runInContext = t, In.sample = function(t) { return (ja(t) ? qn : qr)(t) }, In.size = function(t) { if (null == t) return 0; if (Ra(t)) return Ka(t) ? $e(t) : t.length; var e = ro(t); return e == v || e == b ? t.size : Cr(t).length }, In.snakeCase = Fs, In.some = function(t, e, n) { var r = ja(t) ? me : Vr; return n && uo(t, e, n) && (e = void 0), r(t, Ki(e, 3)) }, In.sortedIndex = function(t, e) { return Yr(t, e) }, In.sortedIndexBy = function(t, e, n) { return Xr(t, e, Ki(n, 2)) }, In.sortedIndexOf = function(t, e) { var n = null == t ? 0 : t.length; if (n) { var r = Yr(t, e); if (r < n && Oa(t[r], e)) return r } return -1 }, In.sortedLastIndex = function(t, e) { return Yr(t, e, !0) }, In.sortedLastIndexBy = function(t, e, n) { return Xr(t, e, Ki(n, 2), !0) }, In.sortedLastIndexOf = function(t, e) { if (null == t ? 0 : t.length) { var n = Yr(t, e, !0) - 1; if (Oa(t[n], e)) return n } return -1 }, In.startCase = Ms, In.startsWith = function(t, e, n) { return t = us(t), n = null == n ? 0 : Gn(is(n), 0, t.length), e = Jr(e), t.slice(n, n + e.length) == e }, In.subtract = pu, In.sum = function(t) { return t && t.length ? Ae(t, Vs) : 0 }, In.sumBy = function(t, e) { return t && t.length ? Ae(t, Ki(e, 2)) : 0 }, In.template = function(t, e, n) {
                        var r = In.templateSettings;
                        n && uo(t, e, n) && (e = void 0), t = us(t), e = fs({}, e, r, Bi);
                        var i, o, a = fs({}, e.imports, r.imports, Bi),
                            s = ws(a),
                            u = De(a, s),
                            l = 0,
                            c = e.interpolate || ct,
                            f = "__p += '",
                            h = vt((e.escape || ct).source + "|" + c.source + "|" + (c === H ? nt : ct).source + "|" + (e.evaluate || ct).source + "|$", "g"),
                            d = "//# sourceURL=" + (Et.call(e, "sourceURL") ? (e.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++Ut + "]") + "\n";
                        t.replace(h, (function(e, n, r, a, s, u) { return r || (r = a), f += t.slice(l, u).replace(ft, Ue), n && (i = !0, f += "' +\n__e(" + n + ") +\n'"), s && (o = !0, f += "';\n" + s + ";\n__p += '"), r && (f += "' +\n((__t = (" + r + ")) == null ? '' : __t) +\n'"), l = u + e.length, e })), f += "';\n";
                        var p = Et.call(e, "variable") && e.variable;
                        if (p) { if (tt.test(p)) throw new X("Invalid `variable` option passed into `_.template`") } else f = "with (obj) {\n" + f + "\n}\n";
                        f = (o ? f.replace(L, "") : f).replace(j, "$1").replace(P, "$1;"), f = "function(" + (p || "obj") + ") {\n" + (p ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (i ? ", __e = _.escape" : "") + (o ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + f + "return __p\n}";
                        var v = Hs((function() { return ht(s, d + "return " + f).apply(void 0, u) }));
                        if (v.source = f, qa(v)) throw v;
                        return v
                    }, In.times = function(t, e) {
                        if ((t = is(t)) < 1 || t > 9007199254740991) return [];
                        var n = 4294967295,
                            r = un(t, 4294967295);
                        t -= 4294967295;
                        for (var i = Ie(r, e = Ki(e)); ++n < t;) e(n);
                        return i
                    }, In.toFinite = rs, In.toInteger = is, In.toLength = os, In.toLower = function(t) { return us(t).toLowerCase() }, In.toNumber = as, In.toSafeInteger = function(t) { return t ? Gn(is(t), -9007199254740991, 9007199254740991) : 0 === t ? t : 0 }, In.toString = us, In.toUpper = function(t) { return us(t).toUpperCase() }, In.trim = function(t, e, n) {
                        if ((t = us(t)) && (n || void 0 === e)) return Oe(t);
                        if (!t || !(e = Jr(e))) return t;
                        var r = Ve(t),
                            i = Ve(e);
                        return ci(r, je(r, i), Pe(r, i) + 1).join("")
                    }, In.trimEnd = function(t, e, n) { if ((t = us(t)) && (n || void 0 === e)) return t.slice(0, Ye(t) + 1); if (!t || !(e = Jr(e))) return t; var r = Ve(t); return ci(r, 0, Pe(r, Ve(e)) + 1).join("") }, In.trimStart = function(t, e, n) { if ((t = us(t)) && (n || void 0 === e)) return t.replace(Y, ""); if (!t || !(e = Jr(e))) return t; var r = Ve(t); return ci(r, je(r, Ve(e))).join("") }, In.truncate = function(t, e) {
                        var n = 30,
                            r = "...";
                        if (Wa(e)) {
                            var i = "separator" in e ? e.separator : i;
                            n = "length" in e ? is(e.length) : n, r = "omission" in e ? Jr(e.omission) : r
                        }
                        var o = (t = us(t)).length;
                        if (qe(t)) {
                            var a = Ve(t);
                            o = a.length
                        }
                        if (n >= o) return t;
                        var s = n - $e(r);
                        if (s < 1) return r;
                        var u = a ? ci(a, 0, s).join("") : t.slice(0, s);
                        if (void 0 === i) return u + r;
                        if (a && (s += u.length - s), Xa(i)) {
                            if (t.slice(s).search(i)) {
                                var l, c = u;
                                for (i.global || (i = vt(i.source, us(rt.exec(i)) + "g")), i.lastIndex = 0; l = i.exec(c);) var f = l.index;
                                u = u.slice(0, void 0 === f ? s : f)
                            }
                        } else if (t.indexOf(Jr(i), s) != s) {
                            var h = u.lastIndexOf(i);
                            h > -1 && (u = u.slice(0, h))
                        }
                        return u + r
                    }, In.unescape = function(t) { return (t = us(t)) && M.test(t) ? t.replace(R, Xe) : t }, In.uniqueId = function(t) { var e = ++Tt; return us(t) + e }, In.upperCase = Us, In.upperFirst = qs, In.each = ua, In.eachRight = la, In.first = Ro, Ks(In, (fu = {}, lr(In, (function(t, e) { Et.call(In.prototype, e) || (fu[e] = t) })), fu), { chain: !1 }), In.VERSION = "4.17.21", se(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], (function(t) { In[t].placeholder = In })), se(["drop", "take"], (function(t, e) { Ln.prototype[t] = function(n) { n = void 0 === n ? 1 : sn(is(n), 0); var r = this.__filtered__ && !e ? new Ln(this) : this.clone(); return r.__filtered__ ? r.__takeCount__ = un(n, r.__takeCount__) : r.__views__.push({ size: un(n, 4294967295), type: t + (r.__dir__ < 0 ? "Right" : "") }), r }, Ln.prototype[t + "Right"] = function(e) { return this.reverse()[t](e).reverse() } })), se(["filter", "map", "takeWhile"], (function(t, e) {
                        var n = e + 1,
                            r = 1 == n || 3 == n;
                        Ln.prototype[t] = function(t) { var e = this.clone(); return e.__iteratees__.push({ iteratee: Ki(t, 3), type: n }), e.__filtered__ = e.__filtered__ || r, e }
                    })), se(["head", "last"], (function(t, e) {
                        var n = "take" + (e ? "Right" : "");
                        Ln.prototype[t] = function() { return this[n](1).value()[0] }
                    })), se(["initial", "tail"], (function(t, e) {
                        var n = "drop" + (e ? "" : "Right");
                        Ln.prototype[t] = function() { return this.__filtered__ ? new Ln(this) : this[n](1) }
                    })), Ln.prototype.compact = function() { return this.filter(Vs) }, Ln.prototype.find = function(t) { return this.filter(t).head() }, Ln.prototype.findLast = function(t) { return this.reverse().find(t) }, Ln.prototype.invokeMap = Ur((function(t, e) { return "function" == typeof t ? new Ln(this) : this.map((function(n) { return br(n, t, e) })) })), Ln.prototype.reject = function(t) { return this.filter(Ca(Ki(t))) }, Ln.prototype.slice = function(t, e) { t = is(t); var n = this; return n.__filtered__ && (t > 0 || e < 0) ? new Ln(n) : (t < 0 ? n = n.takeRight(-t) : t && (n = n.drop(t)), void 0 !== e && (n = (e = is(e)) < 0 ? n.dropRight(-e) : n.take(e - t)), n) }, Ln.prototype.takeRightWhile = function(t) { return this.reverse().takeWhile(t).reverse() }, Ln.prototype.toArray = function() { return this.take(4294967295) }, lr(Ln.prototype, (function(t, e) {
                        var n = /^(?:filter|find|map|reject)|While$/.test(e),
                            r = /^(?:head|last)$/.test(e),
                            i = In[r ? "take" + ("last" == e ? "Right" : "") : e],
                            o = r || /^find/.test(e);
                        i && (In.prototype[e] = function() {
                            var e = this.__wrapped__,
                                a = r ? [1] : arguments,
                                s = e instanceof Ln,
                                u = a[0],
                                l = s || ja(e),
                                c = function(t) { var e = i.apply(In, pe([t], a)); return r && f ? e[0] : e };
                            l && n && "function" == typeof u && 1 != u.length && (s = l = !1);
                            var f = this.__chain__,
                                h = !!this.__actions__.length,
                                d = o && !f,
                                p = s && !h;
                            if (!o && l) { e = p ? e : new Ln(this); var v = t.apply(e, a); return v.__actions__.push({ func: ra, args: [c], thisArg: void 0 }), new Dn(v, f) }
                            return d && p ? t.apply(this, a) : (v = this.thru(c), d ? r ? v.value()[0] : v.value() : v)
                        })
                    })), se(["pop", "push", "shift", "sort", "splice", "unshift"], (function(t) {
                        var e = yt[t],
                            n = /^(?:push|sort|unshift)$/.test(t) ? "tap" : "thru",
                            r = /^(?:pop|shift)$/.test(t);
                        In.prototype[t] = function() { var t = arguments; if (r && !this.__chain__) { var i = this.value(); return e.apply(ja(i) ? i : [], t) } return this[n]((function(n) { return e.apply(ja(n) ? n : [], t) })) }
                    })), lr(Ln.prototype, (function(t, e) {
                        var n = In[e];
                        if (n) {
                            var r = n.name + "";
                            Et.call(_n, r) || (_n[r] = []), _n[r].push({ name: e, func: n })
                        }
                    })), _n[Ii(void 0, 2).name] = [{ name: "wrapper", func: void 0 }], Ln.prototype.clone = function() { var t = new Ln(this.__wrapped__); return t.__actions__ = yi(this.__actions__), t.__dir__ = this.__dir__, t.__filtered__ = this.__filtered__, t.__iteratees__ = yi(this.__iteratees__), t.__takeCount__ = this.__takeCount__, t.__views__ = yi(this.__views__), t }, Ln.prototype.reverse = function() {
                        if (this.__filtered__) {
                            var t = new Ln(this);
                            t.__dir__ = -1, t.__filtered__ = !0
                        } else(t = this.clone()).__dir__ *= -1;
                        return t
                    }, Ln.prototype.value = function() {
                        var t = this.__wrapped__.value(),
                            e = this.__dir__,
                            n = ja(t),
                            r = e < 0,
                            i = n ? t.length : 0,
                            o = function(t, e, n) {
                                var r = -1,
                                    i = n.length;
                                for (; ++r < i;) {
                                    var o = n[r],
                                        a = o.size;
                                    switch (o.type) {
                                        case "drop":
                                            t += a;
                                            break;
                                        case "dropRight":
                                            e -= a;
                                            break;
                                        case "take":
                                            e = un(e, t + a);
                                            break;
                                        case "takeRight":
                                            t = sn(t, e - a)
                                    }
                                }
                                return { start: t, end: e }
                            }(0, i, this.__views__),
                            a = o.start,
                            s = o.end,
                            u = s - a,
                            l = r ? s : a - 1,
                            c = this.__iteratees__,
                            f = c.length,
                            h = 0,
                            d = un(u, this.__takeCount__);
                        if (!n || !r && i == u && d == u) return ri(t, this.__actions__);
                        var p = [];
                        t: for (; u-- && h < d;) {
                            for (var v = -1, g = t[l += e]; ++v < f;) {
                                var m = c[v],
                                    y = m.iteratee,
                                    b = m.type,
                                    _ = y(g);
                                if (2 == b) g = _;
                                else if (!_) { if (1 == b) continue t; break t }
                            }
                            p[h++] = g
                        }
                        return p
                    }, In.prototype.at = ia, In.prototype.chain = function() { return na(this) }, In.prototype.commit = function() { return new Dn(this.value(), this.__chain__) }, In.prototype.next = function() { void 0 === this.__values__ && (this.__values__ = ns(this.value())); var t = this.__index__ >= this.__values__.length; return { done: t, value: t ? void 0 : this.__values__[this.__index__++] } }, In.prototype.plant = function(t) {
                        for (var e, n = this; n instanceof Nn;) {
                            var r = Io(n);
                            r.__index__ = 0, r.__values__ = void 0, e ? i.__wrapped__ = r : e = r;
                            var i = r;
                            n = n.__wrapped__
                        }
                        return i.__wrapped__ = t, e
                    }, In.prototype.reverse = function() { var t = this.__wrapped__; if (t instanceof Ln) { var e = t; return this.__actions__.length && (e = new Ln(this)), (e = e.reverse()).__actions__.push({ func: ra, args: [Wo], thisArg: void 0 }), new Dn(e, this.__chain__) } return this.thru(Wo) }, In.prototype.toJSON = In.prototype.valueOf = In.prototype.value = function() { return ri(this.__wrapped__, this.__actions__) }, In.prototype.first = In.prototype.head, Kt && (In.prototype[Kt] = function() { return this }), In
                }();
                Vt._ = Ge, void 0 === (i = function() { return Ge }.call(e, n, e, r)) || (r.exports = i)
            }).call(this)
        }).call(this, n("yLpj"), n("YuTi")(t))
    },
    MIQu: function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn"), n("Qwlt")], void 0 === (o = "function" == typeof(r = function(t) {
                var e = 0,
                    n = Array.prototype.hasOwnProperty,
                    r = Array.prototype.slice;
                return t.cleanData = function(e) {
                    return function(n) {
                        var r, i, o;
                        for (o = 0; null != (i = n[o]); o++)(r = t._data(i, "events")) && r.remove && t(i).triggerHandler("remove");
                        e(n)
                    }
                }(t.cleanData), t.widget = function(e, n, r) {
                    var i, o, a, s = {},
                        u = e.split(".")[0],
                        l = u + "-" + (e = e.split(".")[1]);
                    return r || (r = n, n = t.Widget), Array.isArray(r) && (r = t.extend.apply(null, [{}].concat(r))), t.expr.pseudos[l.toLowerCase()] = function(e) { return !!t.data(e, l) }, t[u] = t[u] || {}, i = t[u][e], o = t[u][e] = function(t, e) {
                        if (!this || !this._createWidget) return new o(t, e);
                        arguments.length && this._createWidget(t, e)
                    }, t.extend(o, i, { version: r.version, _proto: t.extend({}, r), _childConstructors: [] }), (a = new n).options = t.widget.extend({}, a.options), t.each(r, (function(t, e) {
                        s[t] = "function" == typeof e ? function() {
                            function r() { return n.prototype[t].apply(this, arguments) }

                            function i(e) { return n.prototype[t].apply(this, e) }
                            return function() {
                                var t, n = this._super,
                                    o = this._superApply;
                                return this._super = r, this._superApply = i, t = e.apply(this, arguments), this._super = n, this._superApply = o, t
                            }
                        }() : e
                    })), o.prototype = t.widget.extend(a, { widgetEventPrefix: i && a.widgetEventPrefix || e }, s, { constructor: o, namespace: u, widgetName: e, widgetFullName: l }), i ? (t.each(i._childConstructors, (function(e, n) {
                        var r = n.prototype;
                        t.widget(r.namespace + "." + r.widgetName, o, n._proto)
                    })), delete i._childConstructors) : n._childConstructors.push(o), t.widget.bridge(e, o), o
                }, t.widget.extend = function(e) {
                    for (var i, o, a = r.call(arguments, 1), s = 0, u = a.length; s < u; s++)
                        for (i in a[s]) o = a[s][i], n.call(a[s], i) && void 0 !== o && (t.isPlainObject(o) ? e[i] = t.isPlainObject(e[i]) ? t.widget.extend({}, e[i], o) : t.widget.extend({}, o) : e[i] = o);
                    return e
                }, t.widget.bridge = function(e, n) {
                    var i = n.prototype.widgetFullName || e;
                    t.fn[e] = function(o) {
                        var a = "string" == typeof o,
                            s = r.call(arguments, 1),
                            u = this;
                        return a ? this.length || "instance" !== o ? this.each((function() { var n, r = t.data(this, i); return "instance" === o ? (u = r, !1) : r ? "function" != typeof r[o] || "_" === o.charAt(0) ? t.error("no such method '" + o + "' for " + e + " widget instance") : (n = r[o].apply(r, s)) !== r && void 0 !== n ? (u = n && n.jquery ? u.pushStack(n.get()) : n, !1) : void 0 : t.error("cannot call methods on " + e + " prior to initialization; attempted to call method '" + o + "'") })) : u = void 0 : (s.length && (o = t.widget.extend.apply(null, [o].concat(s))), this.each((function() {
                            var e = t.data(this, i);
                            e ? (e.option(o || {}), e._init && e._init()) : t.data(this, i, new n(o, this))
                        }))), u
                    }
                }, t.Widget = function() {}, t.Widget._childConstructors = [], t.Widget.prototype = {
                    widgetName: "widget",
                    widgetEventPrefix: "",
                    defaultElement: "<div>",
                    options: { classes: {}, disabled: !1, create: null },
                    _createWidget: function(n, r) { r = t(r || this.defaultElement || this)[0], this.element = t(r), this.uuid = e++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = t(), this.hoverable = t(), this.focusable = t(), this.classesElementLookup = {}, r !== this && (t.data(r, this.widgetFullName, this), this._on(!0, this.element, { remove: function(t) { t.target === r && this.destroy() } }), this.document = t(r.style ? r.ownerDocument : r.document || r), this.window = t(this.document[0].defaultView || this.document[0].parentWindow)), this.options = t.widget.extend({}, this.options, this._getCreateOptions(), n), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger("create", null, this._getCreateEventData()), this._init() },
                    _getCreateOptions: function() { return {} },
                    _getCreateEventData: t.noop,
                    _create: t.noop,
                    _init: t.noop,
                    destroy: function() {
                        var e = this;
                        this._destroy(), t.each(this.classesElementLookup, (function(t, n) { e._removeClass(n, t) })), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), this.bindings.off(this.eventNamespace)
                    },
                    _destroy: t.noop,
                    widget: function() { return this.element },
                    option: function(e, n) {
                        var r, i, o, a = e;
                        if (0 === arguments.length) return t.widget.extend({}, this.options);
                        if ("string" == typeof e)
                            if (a = {}, r = e.split("."), e = r.shift(), r.length) {
                                for (i = a[e] = t.widget.extend({}, this.options[e]), o = 0; o < r.length - 1; o++) i[r[o]] = i[r[o]] || {}, i = i[r[o]];
                                if (e = r.pop(), 1 === arguments.length) return void 0 === i[e] ? null : i[e];
                                i[e] = n
                            } else {
                                if (1 === arguments.length) return void 0 === this.options[e] ? null : this.options[e];
                                a[e] = n
                            }
                        return this._setOptions(a), this
                    },
                    _setOptions: function(t) { var e; for (e in t) this._setOption(e, t[e]); return this },
                    _setOption: function(t, e) { return "classes" === t && this._setOptionClasses(e), this.options[t] = e, "disabled" === t && this._setOptionDisabled(e), this },
                    _setOptionClasses: function(e) { var n, r, i; for (n in e) i = this.classesElementLookup[n], e[n] !== this.options.classes[n] && i && i.length && (r = t(i.get()), this._removeClass(i, n), r.addClass(this._classes({ element: r, keys: n, classes: e, add: !0 }))) },
                    _setOptionDisabled: function(t) { this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!t), t && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus")) },
                    enable: function() { return this._setOptions({ disabled: !1 }) },
                    disable: function() { return this._setOptions({ disabled: !0 }) },
                    _classes: function(e) {
                        var n = [],
                            r = this;

                        function i() {
                            var n = [];
                            e.element.each((function(e, i) { t.map(r.classesElementLookup, (function(t) { return t })).some((function(t) { return t.is(i) })) || n.push(i) })), r._on(t(n), { remove: "_untrackClassesElement" })
                        }

                        function o(o, a) { var s, u; for (u = 0; u < o.length; u++) s = r.classesElementLookup[o[u]] || t(), e.add ? (i(), s = t(t.uniqueSort(s.get().concat(e.element.get())))) : s = t(s.not(e.element).get()), r.classesElementLookup[o[u]] = s, n.push(o[u]), a && e.classes[o[u]] && n.push(e.classes[o[u]]) }
                        return (e = t.extend({ element: this.element, classes: this.options.classes || {} }, e)).keys && o(e.keys.match(/\S+/g) || [], !0), e.extra && o(e.extra.match(/\S+/g) || []), n.join(" ")
                    },
                    _untrackClassesElement: function(e) {
                        var n = this;
                        t.each(n.classesElementLookup, (function(r, i) {-1 !== t.inArray(e.target, i) && (n.classesElementLookup[r] = t(i.not(e.target).get())) })), this._off(t(e.target))
                    },
                    _removeClass: function(t, e, n) { return this._toggleClass(t, e, n, !1) },
                    _addClass: function(t, e, n) { return this._toggleClass(t, e, n, !0) },
                    _toggleClass: function(t, e, n, r) {
                        r = "boolean" == typeof r ? r : n;
                        var i = "string" == typeof t || null === t,
                            o = { extra: i ? e : n, keys: i ? t : e, element: i ? this.element : t, add: r };
                        return o.element.toggleClass(this._classes(o), r), this
                    },
                    _on: function(e, n, r) {
                        var i, o = this;
                        "boolean" != typeof e && (r = n, n = e, e = !1), r ? (n = i = t(n), this.bindings = this.bindings.add(n)) : (r = n, n = this.element, i = this.widget()), t.each(r, (function(r, a) {
                            function s() { if (e || !0 !== o.options.disabled && !t(this).hasClass("ui-state-disabled")) return ("string" == typeof a ? o[a] : a).apply(o, arguments) }
                            "string" != typeof a && (s.guid = a.guid = a.guid || s.guid || t.guid++);
                            var u = r.match(/^([\w:-]*)\s*(.*)$/),
                                l = u[1] + o.eventNamespace,
                                c = u[2];
                            c ? i.on(l, c, s) : n.on(l, s)
                        }))
                    },
                    _off: function(e, n) { n = (n || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.off(n), this.bindings = t(this.bindings.not(e).get()), this.focusable = t(this.focusable.not(e).get()), this.hoverable = t(this.hoverable.not(e).get()) },
                    _delay: function(t, e) { var n = this; return setTimeout((function() { return ("string" == typeof t ? n[t] : t).apply(n, arguments) }), e || 0) },
                    _hoverable: function(e) { this.hoverable = this.hoverable.add(e), this._on(e, { mouseenter: function(e) { this._addClass(t(e.currentTarget), null, "ui-state-hover") }, mouseleave: function(e) { this._removeClass(t(e.currentTarget), null, "ui-state-hover") } }) },
                    _focusable: function(e) { this.focusable = this.focusable.add(e), this._on(e, { focusin: function(e) { this._addClass(t(e.currentTarget), null, "ui-state-focus") }, focusout: function(e) { this._removeClass(t(e.currentTarget), null, "ui-state-focus") } }) },
                    _trigger: function(e, n, r) {
                        var i, o, a = this.options[e];
                        if (r = r || {}, (n = t.Event(n)).type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), n.target = this.element[0], o = n.originalEvent)
                            for (i in o) i in n || (n[i] = o[i]);
                        return this.element.trigger(n, r), !("function" == typeof a && !1 === a.apply(this.element[0], [n].concat(r)) || n.isDefaultPrevented())
                    }
                }, t.each({ show: "fadeIn", hide: "fadeOut" }, (function(e, n) { t.Widget.prototype["_" + e] = function(r, i, o) { var a; "string" == typeof i && (i = { effect: i }); var s = i ? !0 === i || "number" == typeof i ? n : i.effect || n : e; "number" == typeof(i = i || {}) ? i = { duration: i }: !0 === i && (i = {}), a = !t.isEmptyObject(i), i.complete = o, i.delay && r.delay(i.delay), a && t.effects && t.effects.effect[s] ? r[e](i) : s !== e && r[s] ? r[s](i.duration, i.easing, o) : r.queue((function(n) { t(this)[e](), o && o.call(r[0]), n() })) } })), t.widget
            }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    MLWZ: function(t, e, n) {
        "use strict";
        var r = n("xTJ+");

        function i(t) { return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]") }
        t.exports = function(t, e, n) {
            if (!e) return t;
            var o;
            if (n) o = n(e);
            else if (r.isURLSearchParams(e)) o = e.toString();
            else {
                var a = [];
                r.forEach(e, (function(t, e) { null != t && (r.isArray(t) ? e += "[]" : t = [t], r.forEach(t, (function(t) { r.isDate(t) ? t = t.toISOString() : r.isObject(t) && (t = JSON.stringify(t)), a.push(i(e) + "=" + i(t)) }))) })), o = a.join("&")
            }
            if (o) { var s = t.indexOf("#"); - 1 !== s && (t = t.slice(0, s)), t += (-1 === t.indexOf("?") ? "?" : "&") + o }
            return t
        }
    },
    NHgk: function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn"), n("Qwlt")], void 0 === (o = "function" == typeof(r = function(t) { return t.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()) }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    NvoQ: function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn"), n("iGnl"), n("CumE"), n("NHgk"), n("8Iik"), n("Qwlt"), n("MIQu")], void 0 === (o = "function" == typeof(r = function(t) {
                return t.widget("ui.sortable", t.ui.mouse, {
                    version: "1.13.2",
                    widgetEventPrefix: "sort",
                    ready: !1,
                    options: { appendTo: "parent", axis: !1, connectWith: !1, containment: !1, cursor: "auto", cursorAt: !1, dropOnEmpty: !0, forcePlaceholderSize: !1, forceHelperSize: !1, grid: !1, handle: !1, helper: "original", items: "> *", opacity: !1, placeholder: !1, revert: !1, scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1e3, activate: null, beforeStop: null, change: null, deactivate: null, out: null, over: null, receive: null, remove: null, sort: null, start: null, stop: null, update: null },
                    _isOverAxis: function(t, e, n) { return t >= e && t < e + n },
                    _isFloating: function(t) { return /left|right/.test(t.css("float")) || /inline|table-cell/.test(t.css("display")) },
                    _create: function() { this.containerCache = {}, this._addClass("ui-sortable"), this.refresh(), this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0 },
                    _setOption: function(t, e) { this._super(t, e), "handle" === t && this._setHandleClassName() },
                    _setHandleClassName: function() {
                        var e = this;
                        this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle"), t.each(this.items, (function() { e._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle") }))
                    },
                    _destroy: function() { this._mouseDestroy(); for (var t = this.items.length - 1; t >= 0; t--) this.items[t].item.removeData(this.widgetName + "-item"); return this },
                    _mouseCapture: function(e, n) {
                        var r = null,
                            i = !1,
                            o = this;
                        return !this.reverting && (!this.options.disabled && "static" !== this.options.type && (this._refreshItems(e), t(e.target).parents().each((function() { if (t.data(this, o.widgetName + "-item") === o) return r = t(this), !1 })), t.data(e.target, o.widgetName + "-item") === o && (r = t(e.target)), !!r && (!(this.options.handle && !n && (t(this.options.handle, r).find("*").addBack().each((function() { this === e.target && (i = !0) })), !i)) && (this.currentItem = r, this._removeCurrentsFromItems(), !0))))
                    },
                    _mouseStart: function(e, n, r) {
                        var i, o, a = this.options;
                        if (this.currentContainer = this, this.refreshPositions(), this.appendTo = t("parent" !== a.appendTo ? a.appendTo : this.currentItem.parent()), this.helper = this._createHelper(e), this._cacheHelperProportions(), this._cacheMargins(), this.offset = this.currentItem.offset(), this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }, t.extend(this.offset, { click: { left: e.pageX - this.offset.left, top: e.pageY - this.offset.top }, relative: this._getRelativeOffset() }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), a.cursorAt && this._adjustOffsetFromHelper(a.cursorAt), this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), this.scrollParent = this.placeholder.scrollParent(), t.extend(this.offset, { parent: this._getParentOffset() }), a.containment && this._setContainment(), a.cursor && "auto" !== a.cursor && (o = this.document.find("body"), this.storedCursor = o.css("cursor"), o.css("cursor", a.cursor), this.storedStylesheet = t("<style>*{ cursor: " + a.cursor + " !important; }</style>").appendTo(o)), a.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", a.zIndex)), a.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", a.opacity)), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", e, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !r)
                            for (i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("activate", e, this._uiHash(this));
                        return t.ui.ddmanager && (t.ui.ddmanager.current = this), t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this.dragging = !0, this._addClass(this.helper, "ui-sortable-helper"), this.helper.parent().is(this.appendTo) || (this.helper.detach().appendTo(this.appendTo), this.offset.parent = this._getParentOffset()), this.position = this.originalPosition = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, this.lastPositionAbs = this.positionAbs = this._convertPositionTo("absolute"), this._mouseDrag(e), !0
                    },
                    _scroll: function(t) {
                        var e = this.options,
                            n = !1;
                        return this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - t.pageY < e.scrollSensitivity ? this.scrollParent[0].scrollTop = n = this.scrollParent[0].scrollTop + e.scrollSpeed : t.pageY - this.overflowOffset.top < e.scrollSensitivity && (this.scrollParent[0].scrollTop = n = this.scrollParent[0].scrollTop - e.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - t.pageX < e.scrollSensitivity ? this.scrollParent[0].scrollLeft = n = this.scrollParent[0].scrollLeft + e.scrollSpeed : t.pageX - this.overflowOffset.left < e.scrollSensitivity && (this.scrollParent[0].scrollLeft = n = this.scrollParent[0].scrollLeft - e.scrollSpeed)) : (t.pageY - this.document.scrollTop() < e.scrollSensitivity ? n = this.document.scrollTop(this.document.scrollTop() - e.scrollSpeed) : this.window.height() - (t.pageY - this.document.scrollTop()) < e.scrollSensitivity && (n = this.document.scrollTop(this.document.scrollTop() + e.scrollSpeed)), t.pageX - this.document.scrollLeft() < e.scrollSensitivity ? n = this.document.scrollLeft(this.document.scrollLeft() - e.scrollSpeed) : this.window.width() - (t.pageX - this.document.scrollLeft()) < e.scrollSensitivity && (n = this.document.scrollLeft(this.document.scrollLeft() + e.scrollSpeed))), n
                    },
                    _mouseDrag: function(e) {
                        var n, r, i, o, a = this.options;
                        for (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), a.scroll && !1 !== this._scroll(e) && (this._refreshItemPositions(!0), t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e)), this.dragDirection = { vertical: this._getDragVerticalDirection(), horizontal: this._getDragHorizontalDirection() }, n = this.items.length - 1; n >= 0; n--)
                            if (i = (r = this.items[n]).item[0], (o = this._intersectsWithPointer(r)) && r.instance === this.currentContainer && !(i === this.currentItem[0] || this.placeholder[1 === o ? "next" : "prev"]()[0] === i || t.contains(this.placeholder[0], i) || "semi-dynamic" === this.options.type && t.contains(this.element[0], i))) {
                                if (this.direction = 1 === o ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(r)) break;
                                this._rearrange(e, r), this._trigger("change", e, this._uiHash());
                                break
                            }
                        return this._contactContainers(e), t.ui.ddmanager && t.ui.ddmanager.drag(this, e), this._trigger("sort", e, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1
                    },
                    _mouseStop: function(e, n) {
                        if (e) {
                            if (t.ui.ddmanager && !this.options.dropBehaviour && t.ui.ddmanager.drop(this, e), this.options.revert) {
                                var r = this,
                                    i = this.placeholder.offset(),
                                    o = this.options.axis,
                                    a = {};
                                o && "x" !== o || (a.left = i.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), o && "y" !== o || (a.top = i.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, t(this.helper).animate(a, parseInt(this.options.revert, 10) || 500, (function() { r._clear(e) }))
                            } else this._clear(e, n);
                            return !1
                        }
                    },
                    cancel: function() { if (this.dragging) { this._mouseUp(new t.Event("mouseup", { target: null })), "original" === this.options.helper ? (this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper")) : this.currentItem.show(); for (var e = this.containers.length - 1; e >= 0; e--) this.containers[e]._trigger("deactivate", null, this._uiHash(this)), this.containers[e].containerCache.over && (this.containers[e]._trigger("out", null, this._uiHash(this)), this.containers[e].containerCache.over = 0) } return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), t.extend(this, { helper: null, dragging: !1, reverting: !1, _noFinalSort: null }), this.domPosition.prev ? t(this.domPosition.prev).after(this.currentItem) : t(this.domPosition.parent).prepend(this.currentItem)), this },
                    serialize: function(e) {
                        var n = this._getItemsAsjQuery(e && e.connected),
                            r = [];
                        return e = e || {}, t(n).each((function() {
                            var n = (t(e.item || this).attr(e.attribute || "id") || "").match(e.expression || /(.+)[\-=_](.+)/);
                            n && r.push((e.key || n[1] + "[]") + "=" + (e.key && e.expression ? n[1] : n[2]))
                        })), !r.length && e.key && r.push(e.key + "="), r.join("&")
                    },
                    toArray: function(e) {
                        var n = this._getItemsAsjQuery(e && e.connected),
                            r = [];
                        return e = e || {}, n.each((function() { r.push(t(e.item || this).attr(e.attribute || "id") || "") })), r
                    },
                    _intersectsWith: function(t) {
                        var e = this.positionAbs.left,
                            n = e + this.helperProportions.width,
                            r = this.positionAbs.top,
                            i = r + this.helperProportions.height,
                            o = t.left,
                            a = o + t.width,
                            s = t.top,
                            u = s + t.height,
                            l = this.offset.click.top,
                            c = this.offset.click.left,
                            f = "x" === this.options.axis || r + l > s && r + l < u,
                            h = "y" === this.options.axis || e + c > o && e + c < a,
                            d = f && h;
                        return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > t[this.floating ? "width" : "height"] ? d : o < e + this.helperProportions.width / 2 && n - this.helperProportions.width / 2 < a && s < r + this.helperProportions.height / 2 && i - this.helperProportions.height / 2 < u
                    },
                    _intersectsWithPointer: function(t) {
                        var e, n, r = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height),
                            i = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width);
                        return !(!r || !i) && (e = this.dragDirection.vertical, n = this.dragDirection.horizontal, this.floating ? "right" === n || "down" === e ? 2 : 1 : e && ("down" === e ? 2 : 1))
                    },
                    _intersectsWithSides: function(t) {
                        var e = this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height),
                            n = this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width),
                            r = this.dragDirection.vertical,
                            i = this.dragDirection.horizontal;
                        return this.floating && i ? "right" === i && n || "left" === i && !n : r && ("down" === r && e || "up" === r && !e)
                    },
                    _getDragVerticalDirection: function() { var t = this.positionAbs.top - this.lastPositionAbs.top; return 0 !== t && (t > 0 ? "down" : "up") },
                    _getDragHorizontalDirection: function() { var t = this.positionAbs.left - this.lastPositionAbs.left; return 0 !== t && (t > 0 ? "right" : "left") },
                    refresh: function(t) { return this._refreshItems(t), this._setHandleClassName(), this.refreshPositions(), this },
                    _connectWith: function() { var t = this.options; return t.connectWith.constructor === String ? [t.connectWith] : t.connectWith },
                    _getItemsAsjQuery: function(e) {
                        var n, r, i, o, a = [],
                            s = [],
                            u = this._connectWith();
                        if (u && e)
                            for (n = u.length - 1; n >= 0; n--)
                                for (r = (i = t(u[n], this.document[0])).length - 1; r >= 0; r--)(o = t.data(i[r], this.widgetFullName)) && o !== this && !o.options.disabled && s.push(["function" == typeof o.options.items ? o.options.items.call(o.element) : t(o.options.items, o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), o]);

                        function l() { a.push(this) }
                        for (s.push(["function" == typeof this.options.items ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : t(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]), n = s.length - 1; n >= 0; n--) s[n][0].each(l);
                        return t(a)
                    },
                    _removeCurrentsFromItems: function() {
                        var e = this.currentItem.find(":data(" + this.widgetName + "-item)");
                        this.items = t.grep(this.items, (function(t) {
                            for (var n = 0; n < e.length; n++)
                                if (e[n] === t.item[0]) return !1;
                            return !0
                        }))
                    },
                    _refreshItems: function(e) {
                        this.items = [], this.containers = [this];
                        var n, r, i, o, a, s, u, l, c = this.items,
                            f = [
                                ["function" == typeof this.options.items ? this.options.items.call(this.element[0], e, { item: this.currentItem }) : t(this.options.items, this.element), this]
                            ],
                            h = this._connectWith();
                        if (h && this.ready)
                            for (n = h.length - 1; n >= 0; n--)
                                for (r = (i = t(h[n], this.document[0])).length - 1; r >= 0; r--)(o = t.data(i[r], this.widgetFullName)) && o !== this && !o.options.disabled && (f.push(["function" == typeof o.options.items ? o.options.items.call(o.element[0], e, { item: this.currentItem }) : t(o.options.items, o.element), o]), this.containers.push(o));
                        for (n = f.length - 1; n >= 0; n--)
                            for (a = f[n][1], r = 0, l = (s = f[n][0]).length; r < l; r++)(u = t(s[r])).data(this.widgetName + "-item", a), c.push({ item: u, instance: a, width: 0, height: 0, left: 0, top: 0 })
                    },
                    _refreshItemPositions: function(e) { var n, r, i, o; for (n = this.items.length - 1; n >= 0; n--) r = this.items[n], this.currentContainer && r.instance !== this.currentContainer && r.item[0] !== this.currentItem[0] || (i = this.options.toleranceElement ? t(this.options.toleranceElement, r.item) : r.item, e || (r.width = i.outerWidth(), r.height = i.outerHeight()), o = i.offset(), r.left = o.left, r.top = o.top) },
                    refreshPositions: function(t) {
                        var e, n;
                        if (this.floating = !!this.items.length && ("x" === this.options.axis || this._isFloating(this.items[0].item)), this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset()), this._refreshItemPositions(t), this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);
                        else
                            for (e = this.containers.length - 1; e >= 0; e--) n = this.containers[e].element.offset(), this.containers[e].containerCache.left = n.left, this.containers[e].containerCache.top = n.top, this.containers[e].containerCache.width = this.containers[e].element.outerWidth(), this.containers[e].containerCache.height = this.containers[e].element.outerHeight();
                        return this
                    },
                    _createPlaceholder: function(e) {
                        var n, r, i = (e = e || this).options;
                        i.placeholder && i.placeholder.constructor !== String || (n = i.placeholder, r = e.currentItem[0].nodeName.toLowerCase(), i.placeholder = { element: function() { var i = t("<" + r + ">", e.document[0]); return e._addClass(i, "ui-sortable-placeholder", n || e.currentItem[0].className)._removeClass(i, "ui-sortable-helper"), "tbody" === r ? e._createTrPlaceholder(e.currentItem.find("tr").eq(0), t("<tr>", e.document[0]).appendTo(i)) : "tr" === r ? e._createTrPlaceholder(e.currentItem, i) : "img" === r && i.attr("src", e.currentItem.attr("src")), n || i.css("visibility", "hidden"), i }, update: function(t, o) { n && !i.forcePlaceholderSize || (o.height() && (!i.forcePlaceholderSize || "tbody" !== r && "tr" !== r) || o.height(e.currentItem.innerHeight() - parseInt(e.currentItem.css("paddingTop") || 0, 10) - parseInt(e.currentItem.css("paddingBottom") || 0, 10)), o.width() || o.width(e.currentItem.innerWidth() - parseInt(e.currentItem.css("paddingLeft") || 0, 10) - parseInt(e.currentItem.css("paddingRight") || 0, 10))) } }), e.placeholder = t(i.placeholder.element.call(e.element, e.currentItem)), e.currentItem.after(e.placeholder), i.placeholder.update(e, e.placeholder)
                    },
                    _createTrPlaceholder: function(e, n) {
                        var r = this;
                        e.children().each((function() { t("<td>&#160;</td>", r.document[0]).attr("colspan", t(this).attr("colspan") || 1).appendTo(n) }))
                    },
                    _contactContainers: function(e) {
                        var n, r, i, o, a, s, u, l, c, f, h = null,
                            d = null;
                        for (n = this.containers.length - 1; n >= 0; n--)
                            if (!t.contains(this.currentItem[0], this.containers[n].element[0]))
                                if (this._intersectsWith(this.containers[n].containerCache)) {
                                    if (h && t.contains(this.containers[n].element[0], h.element[0])) continue;
                                    h = this.containers[n], d = n
                                } else this.containers[n].containerCache.over && (this.containers[n]._trigger("out", e, this._uiHash(this)), this.containers[n].containerCache.over = 0);
                        if (h)
                            if (1 === this.containers.length) this.containers[d].containerCache.over || (this.containers[d]._trigger("over", e, this._uiHash(this)), this.containers[d].containerCache.over = 1);
                            else {
                                for (i = 1e4, o = null, a = (c = h.floating || this._isFloating(this.currentItem)) ? "left" : "top", s = c ? "width" : "height", f = c ? "pageX" : "pageY", r = this.items.length - 1; r >= 0; r--) t.contains(this.containers[d].element[0], this.items[r].item[0]) && this.items[r].item[0] !== this.currentItem[0] && (u = this.items[r].item.offset()[a], l = !1, e[f] - u > this.items[r][s] / 2 && (l = !0), Math.abs(e[f] - u) < i && (i = Math.abs(e[f] - u), o = this.items[r], this.direction = l ? "up" : "down"));
                                if (!o && !this.options.dropOnEmpty) return;
                                if (this.currentContainer === this.containers[d]) return void(this.currentContainer.containerCache.over || (this.containers[d]._trigger("over", e, this._uiHash()), this.currentContainer.containerCache.over = 1));
                                o ? this._rearrange(e, o, null, !0) : this._rearrange(e, null, this.containers[d].element, !0), this._trigger("change", e, this._uiHash()), this.containers[d]._trigger("change", e, this._uiHash(this)), this.currentContainer = this.containers[d], this.options.placeholder.update(this.currentContainer, this.placeholder), this.scrollParent = this.placeholder.scrollParent(), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this.containers[d]._trigger("over", e, this._uiHash(this)), this.containers[d].containerCache.over = 1
                            }
                    },
                    _createHelper: function(e) {
                        var n = this.options,
                            r = "function" == typeof n.helper ? t(n.helper.apply(this.element[0], [e, this.currentItem])) : "clone" === n.helper ? this.currentItem.clone() : this.currentItem;
                        return r.parents("body").length || this.appendTo[0].appendChild(r[0]), r[0] === this.currentItem[0] && (this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") }), r[0].style.width && !n.forceHelperSize || r.width(this.currentItem.width()), r[0].style.height && !n.forceHelperSize || r.height(this.currentItem.height()), r
                    },
                    _adjustOffsetFromHelper: function(t) { "string" == typeof t && (t = t.split(" ")), Array.isArray(t) && (t = { left: +t[0], top: +t[1] || 0 }), "left" in t && (this.offset.click.left = t.left + this.margins.left), "right" in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), "top" in t && (this.offset.click.top = t.top + this.margins.top), "bottom" in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top) },
                    _getParentOffset: function() { this.offsetParent = this.helper.offsetParent(); var e = this.offsetParent.offset(); return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && t.ui.ie) && (e = { top: 0, left: 0 }), { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) } },
                    _getRelativeOffset: function() { if ("relative" === this.cssPosition) { var t = this.currentItem.position(); return { top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() } } return { top: 0, left: 0 } },
                    _cacheMargins: function() { this.margins = { left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0 } },
                    _cacheHelperProportions: function() { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() } },
                    _setContainment: function() { var e, n, r, i = this.options; "parent" === i.containment && (i.containment = this.helper[0].parentNode), "document" !== i.containment && "window" !== i.containment || (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === i.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === i.containment ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(i.containment) || (e = t(i.containment)[0], n = t(i.containment).offset(), r = "hidden" !== t(e).css("overflow"), this.containment = [n.left + (parseInt(t(e).css("borderLeftWidth"), 10) || 0) + (parseInt(t(e).css("paddingLeft"), 10) || 0) - this.margins.left, n.top + (parseInt(t(e).css("borderTopWidth"), 10) || 0) + (parseInt(t(e).css("paddingTop"), 10) || 0) - this.margins.top, n.left + (r ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(t(e).css("borderLeftWidth"), 10) || 0) - (parseInt(t(e).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, n.top + (r ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(t(e).css("borderTopWidth"), 10) || 0) - (parseInt(t(e).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]) },
                    _convertPositionTo: function(e, n) {
                        n || (n = this.position);
                        var r = "absolute" === e ? 1 : -1,
                            i = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
                            o = /(html|body)/i.test(i[0].tagName);
                        return { top: n.top + this.offset.relative.top * r + this.offset.parent.top * r - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : o ? 0 : i.scrollTop()) * r, left: n.left + this.offset.relative.left * r + this.offset.parent.left * r - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : o ? 0 : i.scrollLeft()) * r }
                    },
                    _generatePosition: function(e) {
                        var n, r, i = this.options,
                            o = e.pageX,
                            a = e.pageY,
                            s = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
                            u = /(html|body)/i.test(s[0].tagName);
                        return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (e.pageX - this.offset.click.left < this.containment[0] && (o = this.containment[0] + this.offset.click.left), e.pageY - this.offset.click.top < this.containment[1] && (a = this.containment[1] + this.offset.click.top), e.pageX - this.offset.click.left > this.containment[2] && (o = this.containment[2] + this.offset.click.left), e.pageY - this.offset.click.top > this.containment[3] && (a = this.containment[3] + this.offset.click.top)), i.grid && (n = this.originalPageY + Math.round((a - this.originalPageY) / i.grid[1]) * i.grid[1], a = this.containment ? n - this.offset.click.top >= this.containment[1] && n - this.offset.click.top <= this.containment[3] ? n : n - this.offset.click.top >= this.containment[1] ? n - i.grid[1] : n + i.grid[1] : n, r = this.originalPageX + Math.round((o - this.originalPageX) / i.grid[0]) * i.grid[0], o = this.containment ? r - this.offset.click.left >= this.containment[0] && r - this.offset.click.left <= this.containment[2] ? r : r - this.offset.click.left >= this.containment[0] ? r - i.grid[0] : r + i.grid[0] : r)), { top: a - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : u ? 0 : s.scrollTop()), left: o - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : u ? 0 : s.scrollLeft()) }
                    },
                    _rearrange: function(t, e, n, r) {
                        n ? n[0].appendChild(this.placeholder[0]) : e.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? e.item[0] : e.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;
                        var i = this.counter;
                        this._delay((function() { i === this.counter && this.refreshPositions(!r) }))
                    },
                    _clear: function(t, e) {
                        this.reverting = !1;
                        var n, r = [];
                        if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
                            for (n in this._storedCSS) "auto" !== this._storedCSS[n] && "static" !== this._storedCSS[n] || (this._storedCSS[n] = "");
                            this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper")
                        } else this.currentItem.show();

                        function i(t, e, n) { return function(r) { n._trigger(t, r, e._uiHash(e)) } }
                        for (this.fromOutside && !e && r.push((function(t) { this._trigger("receive", t, this._uiHash(this.fromOutside)) })), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || e || r.push((function(t) { this._trigger("update", t, this._uiHash()) })), this !== this.currentContainer && (e || (r.push((function(t) { this._trigger("remove", t, this._uiHash()) })), r.push(function(t) { return function(e) { t._trigger("receive", e, this._uiHash(this)) } }.call(this, this.currentContainer)), r.push(function(t) { return function(e) { t._trigger("update", e, this._uiHash(this)) } }.call(this, this.currentContainer)))), n = this.containers.length - 1; n >= 0; n--) e || r.push(i("deactivate", this, this.containers[n])), this.containers[n].containerCache.over && (r.push(i("out", this, this.containers[n])), this.containers[n].containerCache.over = 0);
                        if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, e || this._trigger("beforeStop", t, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !e) {
                            for (n = 0; n < r.length; n++) r[n].call(this, t);
                            this._trigger("stop", t, this._uiHash())
                        }
                        return this.fromOutside = !1, !this.cancelHelperRemoval
                    },
                    _trigger: function() {!1 === t.Widget.prototype._trigger.apply(this, arguments) && this.cancel() },
                    _uiHash: function(e) { var n = e || this; return { helper: n.helper, placeholder: n.placeholder || t([]), position: n.position, originalPosition: n.originalPosition, offset: n.positionAbs, item: n.currentItem, sender: e ? e.element : null } }
                })
            }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    OH9c: function(t, e, n) {
        "use strict";
        t.exports = function(t, e, n, r, i) { return t.config = e, n && (t.code = n), t.request = r, t.response = i, t.isAxiosError = !0, t.toJSON = function() { return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code } }, t }
    },
    OTTw: function(t, e, n) {
        "use strict";
        var r = n("xTJ+");
        t.exports = r.isStandardBrowserEnv() ? function() {
            var t, e = /(msie|trident)/i.test(navigator.userAgent),
                n = document.createElement("a");

            function i(t) { var r = t; return e && (n.setAttribute("href", r), r = n.href), n.setAttribute("href", r), { href: n.href, protocol: n.protocol ? n.protocol.replace(/:$/, "") : "", host: n.host, search: n.search ? n.search.replace(/^\?/, "") : "", hash: n.hash ? n.hash.replace(/^#/, "") : "", hostname: n.hostname, port: n.port, pathname: "/" === n.pathname.charAt(0) ? n.pathname : "/" + n.pathname } }
            return t = i(window.location.href),
                function(e) { var n = r.isString(e) ? i(e) : e; return n.protocol === t.protocol && n.host === t.host }
        }() : function() { return !0 }
    },
    Qwlt: function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn")], void 0 === (o = "function" == typeof(r = function(t) { return t.ui = t.ui || {}, t.ui.version = "1.13.2" }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    "Rn+g": function(t, e, n) {
        "use strict";
        var r = n("LYNF");
        t.exports = function(t, e, n) {
            var i = n.config.validateStatus;
            n.status && i && !i(n.status) ? e(r("Request failed with status code " + n.status, n.config, null, n.request, n)) : t(n)
        }
    },
    SYky: function(t, e, n) {
        ! function(t, e, n) {
            "use strict";

            function r(t) { return t && "object" == typeof t && "default" in t ? t : { default: t } }
            var i = r(e),
                o = r(n);

            function a(t, e) {
                for (var n = 0; n < e.length; n++) {
                    var r = e[n];
                    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
                }
            }

            function s(t, e, n) { return e && a(t.prototype, e), n && a(t, n), t }

            function u() { return (u = Object.assign || function(t) { for (var e = 1; e < arguments.length; e++) { var n = arguments[e]; for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]) } return t }).apply(this, arguments) }

            function l(t, e) { return (l = Object.setPrototypeOf || function(t, e) { return t.__proto__ = e, t })(t, e) }

            function c(t) {
                var e = this,
                    n = !1;
                return i.default(this).one(f.TRANSITION_END, (function() { n = !0 })), setTimeout((function() { n || f.triggerTransitionEnd(e) }), t), this
            }
            var f = {
                TRANSITION_END: "bsTransitionEnd",
                getUID: function(t) { do { t += ~~(1e6 * Math.random()) } while (document.getElementById(t)); return t },
                getSelectorFromElement: function(t) {
                    var e = t.getAttribute("data-target");
                    if (!e || "#" === e) {
                        var n = t.getAttribute("href");
                        e = n && "#" !== n ? n.trim() : ""
                    }
                    try { return document.querySelector(e) ? e : null } catch (t) { return null }
                },
                getTransitionDurationFromElement: function(t) {
                    if (!t) return 0;
                    var e = i.default(t).css("transition-duration"),
                        n = i.default(t).css("transition-delay"),
                        r = parseFloat(e),
                        o = parseFloat(n);
                    return r || o ? (e = e.split(",")[0], n = n.split(",")[0], 1e3 * (parseFloat(e) + parseFloat(n))) : 0
                },
                reflow: function(t) { return t.offsetHeight },
                triggerTransitionEnd: function(t) { i.default(t).trigger("transitionend") },
                supportsTransitionEnd: function() { return Boolean("transitionend") },
                isElement: function(t) { return (t[0] || t).nodeType },
                typeCheckConfig: function(t, e, n) {
                    for (var r in n)
                        if (Object.prototype.hasOwnProperty.call(n, r)) {
                            var i = n[r],
                                o = e[r],
                                a = o && f.isElement(o) ? "element" : null == (s = o) ? "" + s : {}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();
                            if (!new RegExp(i).test(a)) throw new Error(t.toUpperCase() + ': Option "' + r + '" provided type "' + a + '" but expected type "' + i + '".')
                        }
                    var s
                },
                findShadowRoot: function(t) { if (!document.documentElement.attachShadow) return null; if ("function" == typeof t.getRootNode) { var e = t.getRootNode(); return e instanceof ShadowRoot ? e : null } return t instanceof ShadowRoot ? t : t.parentNode ? f.findShadowRoot(t.parentNode) : null },
                jQueryDetection: function() { if (void 0 === i.default) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript."); var t = i.default.fn.jquery.split(" ")[0].split("."); if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || t[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0") }
            };
            f.jQueryDetection(), i.default.fn.emulateTransitionEnd = c, i.default.event.special[f.TRANSITION_END] = { bindType: "transitionend", delegateType: "transitionend", handle: function(t) { if (i.default(t.target).is(this)) return t.handleObj.handler.apply(this, arguments) } };
            var h = i.default.fn.alert,
                d = function() {
                    function t(t) { this._element = t }
                    var e = t.prototype;
                    return e.close = function(t) {
                        var e = this._element;
                        t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e)
                    }, e.dispose = function() { i.default.removeData(this._element, "bs.alert"), this._element = null }, e._getRootElement = function(t) {
                        var e = f.getSelectorFromElement(t),
                            n = !1;
                        return e && (n = document.querySelector(e)), n || (n = i.default(t).closest(".alert")[0]), n
                    }, e._triggerCloseEvent = function(t) { var e = i.default.Event("close.bs.alert"); return i.default(t).trigger(e), e }, e._removeElement = function(t) {
                        var e = this;
                        if (i.default(t).removeClass("show"), i.default(t).hasClass("fade")) {
                            var n = f.getTransitionDurationFromElement(t);
                            i.default(t).one(f.TRANSITION_END, (function(n) { return e._destroyElement(t, n) })).emulateTransitionEnd(n)
                        } else this._destroyElement(t)
                    }, e._destroyElement = function(t) { i.default(t).detach().trigger("closed.bs.alert").remove() }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this),
                                r = n.data("bs.alert");
                            r || (r = new t(this), n.data("bs.alert", r)), "close" === e && r[e](this)
                        }))
                    }, t._handleDismiss = function(t) { return function(e) { e && e.preventDefault(), t.close(this) } }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }]), t
                }();
            i.default(document).on("click.bs.alert.data-api", '[data-dismiss="alert"]', d._handleDismiss(new d)), i.default.fn.alert = d._jQueryInterface, i.default.fn.alert.Constructor = d, i.default.fn.alert.noConflict = function() { return i.default.fn.alert = h, d._jQueryInterface };
            var p = i.default.fn.button,
                v = function() {
                    function t(t) { this._element = t, this.shouldAvoidTriggerChange = !1 }
                    var e = t.prototype;
                    return e.toggle = function() {
                        var t = !0,
                            e = !0,
                            n = i.default(this._element).closest('[data-toggle="buttons"]')[0];
                        if (n) {
                            var r = this._element.querySelector('input:not([type="hidden"])');
                            if (r) {
                                if ("radio" === r.type)
                                    if (r.checked && this._element.classList.contains("active")) t = !1;
                                    else {
                                        var o = n.querySelector(".active");
                                        o && i.default(o).removeClass("active")
                                    }
                                t && ("checkbox" !== r.type && "radio" !== r.type || (r.checked = !this._element.classList.contains("active")), this.shouldAvoidTriggerChange || i.default(r).trigger("change")), r.focus(), e = !1
                            }
                        }
                        this._element.hasAttribute("disabled") || this._element.classList.contains("disabled") || (e && this._element.setAttribute("aria-pressed", !this._element.classList.contains("active")), t && i.default(this._element).toggleClass("active"))
                    }, e.dispose = function() { i.default.removeData(this._element, "bs.button"), this._element = null }, t._jQueryInterface = function(e, n) {
                        return this.each((function() {
                            var r = i.default(this),
                                o = r.data("bs.button");
                            o || (o = new t(this), r.data("bs.button", o)), o.shouldAvoidTriggerChange = n, "toggle" === e && o[e]()
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }]), t
                }();
            i.default(document).on("click.bs.button.data-api", '[data-toggle^="button"]', (function(t) {
                var e = t.target,
                    n = e;
                if (i.default(e).hasClass("btn") || (e = i.default(e).closest(".btn")[0]), !e || e.hasAttribute("disabled") || e.classList.contains("disabled")) t.preventDefault();
                else { var r = e.querySelector('input:not([type="hidden"])'); if (r && (r.hasAttribute("disabled") || r.classList.contains("disabled"))) return void t.preventDefault(); "INPUT" !== n.tagName && "LABEL" === e.tagName || v._jQueryInterface.call(i.default(e), "toggle", "INPUT" === n.tagName) }
            })).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', (function(t) {
                var e = i.default(t.target).closest(".btn")[0];
                i.default(e).toggleClass("focus", /^focus(in)?$/.test(t.type))
            })), i.default(window).on("load.bs.button.data-api", (function() {
                for (var t = [].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn')), e = 0, n = t.length; e < n; e++) {
                    var r = t[e],
                        i = r.querySelector('input:not([type="hidden"])');
                    i.checked || i.hasAttribute("checked") ? r.classList.add("active") : r.classList.remove("active")
                }
                for (var o = 0, a = (t = [].slice.call(document.querySelectorAll('[data-toggle="button"]'))).length; o < a; o++) { var s = t[o]; "true" === s.getAttribute("aria-pressed") ? s.classList.add("active") : s.classList.remove("active") }
            })), i.default.fn.button = v._jQueryInterface, i.default.fn.button.Constructor = v, i.default.fn.button.noConflict = function() { return i.default.fn.button = p, v._jQueryInterface };
            var g = "carousel",
                m = ".bs.carousel",
                y = i.default.fn[g],
                b = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0, touch: !0 },
                _ = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean", touch: "boolean" },
                w = { TOUCH: "touch", PEN: "pen" },
                x = function() {
                    function t(t, e) { this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = this._element.querySelector(".carousel-indicators"), this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners() }
                    var e = t.prototype;
                    return e.next = function() { this._isSliding || this._slide("next") }, e.nextWhenVisible = function() { var t = i.default(this._element);!document.hidden && t.is(":visible") && "hidden" !== t.css("visibility") && this.next() }, e.prev = function() { this._isSliding || this._slide("prev") }, e.pause = function(t) { t || (this._isPaused = !0), this._element.querySelector(".carousel-item-next, .carousel-item-prev") && (f.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null }, e.cycle = function(t) { t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval)) }, e.to = function(t) {
                        var e = this;
                        this._activeElement = this._element.querySelector(".active.carousel-item");
                        var n = this._getItemIndex(this._activeElement);
                        if (!(t > this._items.length - 1 || t < 0))
                            if (this._isSliding) i.default(this._element).one("slid.bs.carousel", (function() { return e.to(t) }));
                            else {
                                if (n === t) return this.pause(), void this.cycle();
                                var r = t > n ? "next" : "prev";
                                this._slide(r, this._items[t])
                            }
                    }, e.dispose = function() { i.default(this._element).off(m), i.default.removeData(this._element, "bs.carousel"), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null }, e._getConfig = function(t) { return t = u({}, b, t), f.typeCheckConfig(g, t, _), t }, e._handleSwipe = function() {
                        var t = Math.abs(this.touchDeltaX);
                        if (!(t <= 40)) {
                            var e = t / this.touchDeltaX;
                            this.touchDeltaX = 0, e > 0 && this.prev(), e < 0 && this.next()
                        }
                    }, e._addEventListeners = function() {
                        var t = this;
                        this._config.keyboard && i.default(this._element).on("keydown.bs.carousel", (function(e) { return t._keydown(e) })), "hover" === this._config.pause && i.default(this._element).on("mouseenter.bs.carousel", (function(e) { return t.pause(e) })).on("mouseleave.bs.carousel", (function(e) { return t.cycle(e) })), this._config.touch && this._addTouchEventListeners()
                    }, e._addTouchEventListeners = function() {
                        var t = this;
                        if (this._touchSupported) {
                            var e = function(e) { t._pointerEvent && w[e.originalEvent.pointerType.toUpperCase()] ? t.touchStartX = e.originalEvent.clientX : t._pointerEvent || (t.touchStartX = e.originalEvent.touches[0].clientX) },
                                n = function(e) { t._pointerEvent && w[e.originalEvent.pointerType.toUpperCase()] && (t.touchDeltaX = e.originalEvent.clientX - t.touchStartX), t._handleSwipe(), "hover" === t._config.pause && (t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout((function(e) { return t.cycle(e) }), 500 + t._config.interval)) };
                            i.default(this._element.querySelectorAll(".carousel-item img")).on("dragstart.bs.carousel", (function(t) { return t.preventDefault() })), this._pointerEvent ? (i.default(this._element).on("pointerdown.bs.carousel", (function(t) { return e(t) })), i.default(this._element).on("pointerup.bs.carousel", (function(t) { return n(t) })), this._element.classList.add("pointer-event")) : (i.default(this._element).on("touchstart.bs.carousel", (function(t) { return e(t) })), i.default(this._element).on("touchmove.bs.carousel", (function(e) { return function(e) { t.touchDeltaX = e.originalEvent.touches && e.originalEvent.touches.length > 1 ? 0 : e.originalEvent.touches[0].clientX - t.touchStartX }(e) })), i.default(this._element).on("touchend.bs.carousel", (function(t) { return n(t) })))
                        }
                    }, e._keydown = function(t) {
                        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {
                            case 37:
                                t.preventDefault(), this.prev();
                                break;
                            case 39:
                                t.preventDefault(), this.next()
                        }
                    }, e._getItemIndex = function(t) { return this._items = t && t.parentNode ? [].slice.call(t.parentNode.querySelectorAll(".carousel-item")) : [], this._items.indexOf(t) }, e._getItemByDirection = function(t, e) {
                        var n = "next" === t,
                            r = "prev" === t,
                            i = this._getItemIndex(e),
                            o = this._items.length - 1;
                        if ((r && 0 === i || n && i === o) && !this._config.wrap) return e;
                        var a = (i + ("prev" === t ? -1 : 1)) % this._items.length;
                        return -1 === a ? this._items[this._items.length - 1] : this._items[a]
                    }, e._triggerSlideEvent = function(t, e) {
                        var n = this._getItemIndex(t),
                            r = this._getItemIndex(this._element.querySelector(".active.carousel-item")),
                            o = i.default.Event("slide.bs.carousel", { relatedTarget: t, direction: e, from: r, to: n });
                        return i.default(this._element).trigger(o), o
                    }, e._setActiveIndicatorElement = function(t) {
                        if (this._indicatorsElement) {
                            var e = [].slice.call(this._indicatorsElement.querySelectorAll(".active"));
                            i.default(e).removeClass("active");
                            var n = this._indicatorsElement.children[this._getItemIndex(t)];
                            n && i.default(n).addClass("active")
                        }
                    }, e._updateInterval = function() {
                        var t = this._activeElement || this._element.querySelector(".active.carousel-item");
                        if (t) {
                            var e = parseInt(t.getAttribute("data-interval"), 10);
                            e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval
                        }
                    }, e._slide = function(t, e) {
                        var n, r, o, a = this,
                            s = this._element.querySelector(".active.carousel-item"),
                            u = this._getItemIndex(s),
                            l = e || s && this._getItemByDirection(t, s),
                            c = this._getItemIndex(l),
                            h = Boolean(this._interval);
                        if ("next" === t ? (n = "carousel-item-left", r = "carousel-item-next", o = "left") : (n = "carousel-item-right", r = "carousel-item-prev", o = "right"), l && i.default(l).hasClass("active")) this._isSliding = !1;
                        else if (!this._triggerSlideEvent(l, o).isDefaultPrevented() && s && l) {
                            this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(l), this._activeElement = l;
                            var d = i.default.Event("slid.bs.carousel", { relatedTarget: l, direction: o, from: u, to: c });
                            if (i.default(this._element).hasClass("slide")) {
                                i.default(l).addClass(r), f.reflow(l), i.default(s).addClass(n), i.default(l).addClass(n);
                                var p = f.getTransitionDurationFromElement(s);
                                i.default(s).one(f.TRANSITION_END, (function() { i.default(l).removeClass(n + " " + r).addClass("active"), i.default(s).removeClass("active " + r + " " + n), a._isSliding = !1, setTimeout((function() { return i.default(a._element).trigger(d) }), 0) })).emulateTransitionEnd(p)
                            } else i.default(s).removeClass("active"), i.default(l).addClass("active"), this._isSliding = !1, i.default(this._element).trigger(d);
                            h && this.cycle()
                        }
                    }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this).data("bs.carousel"),
                                r = u({}, b, i.default(this).data());
                            "object" == typeof e && (r = u({}, r, e));
                            var o = "string" == typeof e ? e : r.slide;
                            if (n || (n = new t(this, r), i.default(this).data("bs.carousel", n)), "number" == typeof e) n.to(e);
                            else if ("string" == typeof o) {
                                if (void 0 === n[o]) throw new TypeError('No method named "' + o + '"');
                                n[o]()
                            } else r.interval && r.ride && (n.pause(), n.cycle())
                        }))
                    }, t._dataApiClickHandler = function(e) {
                        var n = f.getSelectorFromElement(this);
                        if (n) {
                            var r = i.default(n)[0];
                            if (r && i.default(r).hasClass("carousel")) {
                                var o = u({}, i.default(r).data(), i.default(this).data()),
                                    a = this.getAttribute("data-slide-to");
                                a && (o.interval = !1), t._jQueryInterface.call(i.default(r), o), a && i.default(r).data("bs.carousel").to(a), e.preventDefault()
                            }
                        }
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return b } }]), t
                }();
            i.default(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", x._dataApiClickHandler), i.default(window).on("load.bs.carousel.data-api", (function() {
                for (var t = [].slice.call(document.querySelectorAll('[data-ride="carousel"]')), e = 0, n = t.length; e < n; e++) {
                    var r = i.default(t[e]);
                    x._jQueryInterface.call(r, r.data())
                }
            })), i.default.fn[g] = x._jQueryInterface, i.default.fn[g].Constructor = x, i.default.fn[g].noConflict = function() { return i.default.fn[g] = y, x._jQueryInterface };
            var E = "collapse",
                T = i.default.fn[E],
                C = { toggle: !0, parent: "" },
                S = { toggle: "boolean", parent: "(string|element)" },
                k = function() {
                    function t(t, e) {
                        this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));
                        for (var n = [].slice.call(document.querySelectorAll('[data-toggle="collapse"]')), r = 0, i = n.length; r < i; r++) {
                            var o = n[r],
                                a = f.getSelectorFromElement(o),
                                s = [].slice.call(document.querySelectorAll(a)).filter((function(e) { return e === t }));
                            null !== a && s.length > 0 && (this._selector = a, this._triggerArray.push(o))
                        }
                        this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle()
                    }
                    var e = t.prototype;
                    return e.toggle = function() { i.default(this._element).hasClass("show") ? this.hide() : this.show() }, e.show = function() {
                        var e, n, r = this;
                        if (!(this._isTransitioning || i.default(this._element).hasClass("show") || (this._parent && 0 === (e = [].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter((function(t) { return "string" == typeof r._config.parent ? t.getAttribute("data-parent") === r._config.parent : t.classList.contains("collapse") }))).length && (e = null), e && (n = i.default(e).not(this._selector).data("bs.collapse")) && n._isTransitioning))) {
                            var o = i.default.Event("show.bs.collapse");
                            if (i.default(this._element).trigger(o), !o.isDefaultPrevented()) {
                                e && (t._jQueryInterface.call(i.default(e).not(this._selector), "hide"), n || i.default(e).data("bs.collapse", null));
                                var a = this._getDimension();
                                i.default(this._element).removeClass("collapse").addClass("collapsing"), this._element.style[a] = 0, this._triggerArray.length && i.default(this._triggerArray).removeClass("collapsed").attr("aria-expanded", !0), this.setTransitioning(!0);
                                var s = "scroll" + (a[0].toUpperCase() + a.slice(1)),
                                    u = f.getTransitionDurationFromElement(this._element);
                                i.default(this._element).one(f.TRANSITION_END, (function() { i.default(r._element).removeClass("collapsing").addClass("collapse show"), r._element.style[a] = "", r.setTransitioning(!1), i.default(r._element).trigger("shown.bs.collapse") })).emulateTransitionEnd(u), this._element.style[a] = this._element[s] + "px"
                            }
                        }
                    }, e.hide = function() {
                        var t = this;
                        if (!this._isTransitioning && i.default(this._element).hasClass("show")) {
                            var e = i.default.Event("hide.bs.collapse");
                            if (i.default(this._element).trigger(e), !e.isDefaultPrevented()) {
                                var n = this._getDimension();
                                this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", f.reflow(this._element), i.default(this._element).addClass("collapsing").removeClass("collapse show");
                                var r = this._triggerArray.length;
                                if (r > 0)
                                    for (var o = 0; o < r; o++) {
                                        var a = this._triggerArray[o],
                                            s = f.getSelectorFromElement(a);
                                        null !== s && (i.default([].slice.call(document.querySelectorAll(s))).hasClass("show") || i.default(a).addClass("collapsed").attr("aria-expanded", !1))
                                    }
                                this.setTransitioning(!0), this._element.style[n] = "";
                                var u = f.getTransitionDurationFromElement(this._element);
                                i.default(this._element).one(f.TRANSITION_END, (function() { t.setTransitioning(!1), i.default(t._element).removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse") })).emulateTransitionEnd(u)
                            }
                        }
                    }, e.setTransitioning = function(t) { this._isTransitioning = t }, e.dispose = function() { i.default.removeData(this._element, "bs.collapse"), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null }, e._getConfig = function(t) { return (t = u({}, C, t)).toggle = Boolean(t.toggle), f.typeCheckConfig(E, t, S), t }, e._getDimension = function() { return i.default(this._element).hasClass("width") ? "width" : "height" }, e._getParent = function() {
                        var e, n = this;
                        f.isElement(this._config.parent) ? (e = this._config.parent, void 0 !== this._config.parent.jquery && (e = this._config.parent[0])) : e = document.querySelector(this._config.parent);
                        var r = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]',
                            o = [].slice.call(e.querySelectorAll(r));
                        return i.default(o).each((function(e, r) { n._addAriaAndCollapsedClass(t._getTargetFromElement(r), [r]) })), e
                    }, e._addAriaAndCollapsedClass = function(t, e) {
                        var n = i.default(t).hasClass("show");
                        e.length && i.default(e).toggleClass("collapsed", !n).attr("aria-expanded", n)
                    }, t._getTargetFromElement = function(t) { var e = f.getSelectorFromElement(t); return e ? document.querySelector(e) : null }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this),
                                r = n.data("bs.collapse"),
                                o = u({}, C, n.data(), "object" == typeof e && e ? e : {});
                            if (!r && o.toggle && "string" == typeof e && /show|hide/.test(e) && (o.toggle = !1), r || (r = new t(this, o), n.data("bs.collapse", r)), "string" == typeof e) {
                                if (void 0 === r[e]) throw new TypeError('No method named "' + e + '"');
                                r[e]()
                            }
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return C } }]), t
                }();
            i.default(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', (function(t) {
                "A" === t.currentTarget.tagName && t.preventDefault();
                var e = i.default(this),
                    n = f.getSelectorFromElement(this),
                    r = [].slice.call(document.querySelectorAll(n));
                i.default(r).each((function() {
                    var t = i.default(this),
                        n = t.data("bs.collapse") ? "toggle" : e.data();
                    k._jQueryInterface.call(t, n)
                }))
            })), i.default.fn[E] = k._jQueryInterface, i.default.fn[E].Constructor = k, i.default.fn[E].noConflict = function() { return i.default.fn[E] = T, k._jQueryInterface };
            var A = "dropdown",
                I = i.default.fn[A],
                O = new RegExp("38|40|27"),
                N = { offset: 0, flip: !0, boundary: "scrollParent", reference: "toggle", display: "dynamic", popperConfig: null },
                D = { offset: "(number|string|function)", flip: "boolean", boundary: "(string|element)", reference: "(string|element)", display: "string", popperConfig: "(null|object)" },
                L = function() {
                    function t(t, e) { this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners() }
                    var e = t.prototype;
                    return e.toggle = function() {
                        if (!this._element.disabled && !i.default(this._element).hasClass("disabled")) {
                            var e = i.default(this._menu).hasClass("show");
                            t._clearMenus(), e || this.show(!0)
                        }
                    }, e.show = function(e) {
                        if (void 0 === e && (e = !1), !(this._element.disabled || i.default(this._element).hasClass("disabled") || i.default(this._menu).hasClass("show"))) {
                            var n = { relatedTarget: this._element },
                                r = i.default.Event("show.bs.dropdown", n),
                                a = t._getParentFromElement(this._element);
                            if (i.default(a).trigger(r), !r.isDefaultPrevented()) { if (!this._inNavbar && e) { if (void 0 === o.default) throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)"); var s = this._element; "parent" === this._config.reference ? s = a : f.isElement(this._config.reference) && (s = this._config.reference, void 0 !== this._config.reference.jquery && (s = this._config.reference[0])), "scrollParent" !== this._config.boundary && i.default(a).addClass("position-static"), this._popper = new o.default(s, this._menu, this._getPopperConfig()) } "ontouchstart" in document.documentElement && 0 === i.default(a).closest(".navbar-nav").length && i.default(document.body).children().on("mouseover", null, i.default.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), i.default(this._menu).toggleClass("show"), i.default(a).toggleClass("show").trigger(i.default.Event("shown.bs.dropdown", n)) }
                        }
                    }, e.hide = function() {
                        if (!this._element.disabled && !i.default(this._element).hasClass("disabled") && i.default(this._menu).hasClass("show")) {
                            var e = { relatedTarget: this._element },
                                n = i.default.Event("hide.bs.dropdown", e),
                                r = t._getParentFromElement(this._element);
                            i.default(r).trigger(n), n.isDefaultPrevented() || (this._popper && this._popper.destroy(), i.default(this._menu).toggleClass("show"), i.default(r).toggleClass("show").trigger(i.default.Event("hidden.bs.dropdown", e)))
                        }
                    }, e.dispose = function() { i.default.removeData(this._element, "bs.dropdown"), i.default(this._element).off(".bs.dropdown"), this._element = null, this._menu = null, null !== this._popper && (this._popper.destroy(), this._popper = null) }, e.update = function() { this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate() }, e._addEventListeners = function() {
                        var t = this;
                        i.default(this._element).on("click.bs.dropdown", (function(e) { e.preventDefault(), e.stopPropagation(), t.toggle() }))
                    }, e._getConfig = function(t) { return t = u({}, this.constructor.Default, i.default(this._element).data(), t), f.typeCheckConfig(A, t, this.constructor.DefaultType), t }, e._getMenuElement = function() {
                        if (!this._menu) {
                            var e = t._getParentFromElement(this._element);
                            e && (this._menu = e.querySelector(".dropdown-menu"))
                        }
                        return this._menu
                    }, e._getPlacement = function() {
                        var t = i.default(this._element.parentNode),
                            e = "bottom-start";
                        return t.hasClass("dropup") ? e = i.default(this._menu).hasClass("dropdown-menu-right") ? "top-end" : "top-start" : t.hasClass("dropright") ? e = "right-start" : t.hasClass("dropleft") ? e = "left-start" : i.default(this._menu).hasClass("dropdown-menu-right") && (e = "bottom-end"), e
                    }, e._detectNavbar = function() { return i.default(this._element).closest(".navbar").length > 0 }, e._getOffset = function() {
                        var t = this,
                            e = {};
                        return "function" == typeof this._config.offset ? e.fn = function(e) { return e.offsets = u({}, e.offsets, t._config.offset(e.offsets, t._element)), e } : e.offset = this._config.offset, e
                    }, e._getPopperConfig = function() { var t = { placement: this._getPlacement(), modifiers: { offset: this._getOffset(), flip: { enabled: this._config.flip }, preventOverflow: { boundariesElement: this._config.boundary } } }; return "static" === this._config.display && (t.modifiers.applyStyle = { enabled: !1 }), u({}, t, this._config.popperConfig) }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this).data("bs.dropdown");
                            if (n || (n = new t(this, "object" == typeof e ? e : null), i.default(this).data("bs.dropdown", n)), "string" == typeof e) {
                                if (void 0 === n[e]) throw new TypeError('No method named "' + e + '"');
                                n[e]()
                            }
                        }))
                    }, t._clearMenus = function(e) {
                        if (!e || 3 !== e.which && ("keyup" !== e.type || 9 === e.which))
                            for (var n = [].slice.call(document.querySelectorAll('[data-toggle="dropdown"]')), r = 0, o = n.length; r < o; r++) {
                                var a = t._getParentFromElement(n[r]),
                                    s = i.default(n[r]).data("bs.dropdown"),
                                    u = { relatedTarget: n[r] };
                                if (e && "click" === e.type && (u.clickEvent = e), s) {
                                    var l = s._menu;
                                    if (i.default(a).hasClass("show") && !(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && 9 === e.which) && i.default.contains(a, e.target))) {
                                        var c = i.default.Event("hide.bs.dropdown", u);
                                        i.default(a).trigger(c), c.isDefaultPrevented() || ("ontouchstart" in document.documentElement && i.default(document.body).children().off("mouseover", null, i.default.noop), n[r].setAttribute("aria-expanded", "false"), s._popper && s._popper.destroy(), i.default(l).removeClass("show"), i.default(a).removeClass("show").trigger(i.default.Event("hidden.bs.dropdown", u)))
                                    }
                                }
                            }
                    }, t._getParentFromElement = function(t) { var e, n = f.getSelectorFromElement(t); return n && (e = document.querySelector(n)), e || t.parentNode }, t._dataApiKeydownHandler = function(e) {
                        if (!(/input|textarea/i.test(e.target.tagName) ? 32 === e.which || 27 !== e.which && (40 !== e.which && 38 !== e.which || i.default(e.target).closest(".dropdown-menu").length) : !O.test(e.which)) && !this.disabled && !i.default(this).hasClass("disabled")) {
                            var n = t._getParentFromElement(this),
                                r = i.default(n).hasClass("show");
                            if (r || 27 !== e.which) {
                                if (e.preventDefault(), e.stopPropagation(), !r || 27 === e.which || 32 === e.which) return 27 === e.which && i.default(n.querySelector('[data-toggle="dropdown"]')).trigger("focus"), void i.default(this).trigger("click");
                                var o = [].slice.call(n.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter((function(t) { return i.default(t).is(":visible") }));
                                if (0 !== o.length) {
                                    var a = o.indexOf(e.target);
                                    38 === e.which && a > 0 && a--, 40 === e.which && a < o.length - 1 && a++, a < 0 && (a = 0), o[a].focus()
                                }
                            }
                        }
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return N } }, { key: "DefaultType", get: function() { return D } }]), t
                }();
            i.default(document).on("keydown.bs.dropdown.data-api", '[data-toggle="dropdown"]', L._dataApiKeydownHandler).on("keydown.bs.dropdown.data-api", ".dropdown-menu", L._dataApiKeydownHandler).on("click.bs.dropdown.data-api keyup.bs.dropdown.data-api", L._clearMenus).on("click.bs.dropdown.data-api", '[data-toggle="dropdown"]', (function(t) { t.preventDefault(), t.stopPropagation(), L._jQueryInterface.call(i.default(this), "toggle") })).on("click.bs.dropdown.data-api", ".dropdown form", (function(t) { t.stopPropagation() })), i.default.fn[A] = L._jQueryInterface, i.default.fn[A].Constructor = L, i.default.fn[A].noConflict = function() { return i.default.fn[A] = I, L._jQueryInterface };
            var j = i.default.fn.modal,
                P = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
                R = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" },
                F = function() {
                    function t(t, e) { this._config = this._getConfig(e), this._element = t, this._dialog = t.querySelector(".modal-dialog"), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0 }
                    var e = t.prototype;
                    return e.toggle = function(t) { return this._isShown ? this.hide() : this.show(t) }, e.show = function(t) {
                        var e = this;
                        if (!this._isShown && !this._isTransitioning) {
                            var n = i.default.Event("show.bs.modal", { relatedTarget: t });
                            i.default(this._element).trigger(n), n.isDefaultPrevented() || (this._isShown = !0, i.default(this._element).hasClass("fade") && (this._isTransitioning = !0), this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), i.default(this._element).on("click.dismiss.bs.modal", '[data-dismiss="modal"]', (function(t) { return e.hide(t) })), i.default(this._dialog).on("mousedown.dismiss.bs.modal", (function() { i.default(e._element).one("mouseup.dismiss.bs.modal", (function(t) { i.default(t.target).is(e._element) && (e._ignoreBackdropClick = !0) })) })), this._showBackdrop((function() { return e._showElement(t) })))
                        }
                    }, e.hide = function(t) {
                        var e = this;
                        if (t && t.preventDefault(), this._isShown && !this._isTransitioning) {
                            var n = i.default.Event("hide.bs.modal");
                            if (i.default(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
                                this._isShown = !1;
                                var r = i.default(this._element).hasClass("fade");
                                if (r && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), i.default(document).off("focusin.bs.modal"), i.default(this._element).removeClass("show"), i.default(this._element).off("click.dismiss.bs.modal"), i.default(this._dialog).off("mousedown.dismiss.bs.modal"), r) {
                                    var o = f.getTransitionDurationFromElement(this._element);
                                    i.default(this._element).one(f.TRANSITION_END, (function(t) { return e._hideModal(t) })).emulateTransitionEnd(o)
                                } else this._hideModal()
                            }
                        }
                    }, e.dispose = function() {
                        [window, this._element, this._dialog].forEach((function(t) { return i.default(t).off(".bs.modal") })), i.default(document).off("focusin.bs.modal"), i.default.removeData(this._element, "bs.modal"), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null
                    }, e.handleUpdate = function() { this._adjustDialog() }, e._getConfig = function(t) { return t = u({}, P, t), f.typeCheckConfig("modal", t, R), t }, e._triggerBackdropTransition = function() {
                        var t = this,
                            e = i.default.Event("hidePrevented.bs.modal");
                        if (i.default(this._element).trigger(e), !e.isDefaultPrevented()) {
                            var n = this._element.scrollHeight > document.documentElement.clientHeight;
                            n || (this._element.style.overflowY = "hidden"), this._element.classList.add("modal-static");
                            var r = f.getTransitionDurationFromElement(this._dialog);
                            i.default(this._element).off(f.TRANSITION_END), i.default(this._element).one(f.TRANSITION_END, (function() { t._element.classList.remove("modal-static"), n || i.default(t._element).one(f.TRANSITION_END, (function() { t._element.style.overflowY = "" })).emulateTransitionEnd(t._element, r) })).emulateTransitionEnd(r), this._element.focus()
                        }
                    }, e._showElement = function(t) {
                        var e = this,
                            n = i.default(this._element).hasClass("fade"),
                            r = this._dialog ? this._dialog.querySelector(".modal-body") : null;
                        this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), i.default(this._dialog).hasClass("modal-dialog-scrollable") && r ? r.scrollTop = 0 : this._element.scrollTop = 0, n && f.reflow(this._element), i.default(this._element).addClass("show"), this._config.focus && this._enforceFocus();
                        var o = i.default.Event("shown.bs.modal", { relatedTarget: t }),
                            a = function() { e._config.focus && e._element.focus(), e._isTransitioning = !1, i.default(e._element).trigger(o) };
                        if (n) {
                            var s = f.getTransitionDurationFromElement(this._dialog);
                            i.default(this._dialog).one(f.TRANSITION_END, a).emulateTransitionEnd(s)
                        } else a()
                    }, e._enforceFocus = function() {
                        var t = this;
                        i.default(document).off("focusin.bs.modal").on("focusin.bs.modal", (function(e) { document !== e.target && t._element !== e.target && 0 === i.default(t._element).has(e.target).length && t._element.focus() }))
                    }, e._setEscapeEvent = function() {
                        var t = this;
                        this._isShown ? i.default(this._element).on("keydown.dismiss.bs.modal", (function(e) { t._config.keyboard && 27 === e.which ? (e.preventDefault(), t.hide()) : t._config.keyboard || 27 !== e.which || t._triggerBackdropTransition() })) : this._isShown || i.default(this._element).off("keydown.dismiss.bs.modal")
                    }, e._setResizeEvent = function() {
                        var t = this;
                        this._isShown ? i.default(window).on("resize.bs.modal", (function(e) { return t.handleUpdate(e) })) : i.default(window).off("resize.bs.modal")
                    }, e._hideModal = function() {
                        var t = this;
                        this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._showBackdrop((function() { i.default(document.body).removeClass("modal-open"), t._resetAdjustments(), t._resetScrollbar(), i.default(t._element).trigger("hidden.bs.modal") }))
                    }, e._removeBackdrop = function() { this._backdrop && (i.default(this._backdrop).remove(), this._backdrop = null) }, e._showBackdrop = function(t) {
                        var e = this,
                            n = i.default(this._element).hasClass("fade") ? "fade" : "";
                        if (this._isShown && this._config.backdrop) {
                            if (this._backdrop = document.createElement("div"), this._backdrop.className = "modal-backdrop", n && this._backdrop.classList.add(n), i.default(this._backdrop).appendTo(document.body), i.default(this._element).on("click.dismiss.bs.modal", (function(t) { e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._triggerBackdropTransition() : e.hide()) })), n && f.reflow(this._backdrop), i.default(this._backdrop).addClass("show"), !t) return;
                            if (!n) return void t();
                            var r = f.getTransitionDurationFromElement(this._backdrop);
                            i.default(this._backdrop).one(f.TRANSITION_END, t).emulateTransitionEnd(r)
                        } else if (!this._isShown && this._backdrop) {
                            i.default(this._backdrop).removeClass("show");
                            var o = function() { e._removeBackdrop(), t && t() };
                            if (i.default(this._element).hasClass("fade")) {
                                var a = f.getTransitionDurationFromElement(this._backdrop);
                                i.default(this._backdrop).one(f.TRANSITION_END, o).emulateTransitionEnd(a)
                            } else o()
                        } else t && t()
                    }, e._adjustDialog = function() { var t = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px") }, e._resetAdjustments = function() { this._element.style.paddingLeft = "", this._element.style.paddingRight = "" }, e._checkScrollbar = function() {
                        var t = document.body.getBoundingClientRect();
                        this._isBodyOverflowing = Math.round(t.left + t.right) < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth()
                    }, e._setScrollbar = function() {
                        var t = this;
                        if (this._isBodyOverflowing) {
                            var e = [].slice.call(document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")),
                                n = [].slice.call(document.querySelectorAll(".sticky-top"));
                            i.default(e).each((function(e, n) {
                                var r = n.style.paddingRight,
                                    o = i.default(n).css("padding-right");
                                i.default(n).data("padding-right", r).css("padding-right", parseFloat(o) + t._scrollbarWidth + "px")
                            })), i.default(n).each((function(e, n) {
                                var r = n.style.marginRight,
                                    o = i.default(n).css("margin-right");
                                i.default(n).data("margin-right", r).css("margin-right", parseFloat(o) - t._scrollbarWidth + "px")
                            }));
                            var r = document.body.style.paddingRight,
                                o = i.default(document.body).css("padding-right");
                            i.default(document.body).data("padding-right", r).css("padding-right", parseFloat(o) + this._scrollbarWidth + "px")
                        }
                        i.default(document.body).addClass("modal-open")
                    }, e._resetScrollbar = function() {
                        var t = [].slice.call(document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"));
                        i.default(t).each((function(t, e) {
                            var n = i.default(e).data("padding-right");
                            i.default(e).removeData("padding-right"), e.style.paddingRight = n || ""
                        }));
                        var e = [].slice.call(document.querySelectorAll(".sticky-top"));
                        i.default(e).each((function(t, e) {
                            var n = i.default(e).data("margin-right");
                            void 0 !== n && i.default(e).css("margin-right", n).removeData("margin-right")
                        }));
                        var n = i.default(document.body).data("padding-right");
                        i.default(document.body).removeData("padding-right"), document.body.style.paddingRight = n || ""
                    }, e._getScrollbarWidth = function() {
                        var t = document.createElement("div");
                        t.className = "modal-scrollbar-measure", document.body.appendChild(t);
                        var e = t.getBoundingClientRect().width - t.clientWidth;
                        return document.body.removeChild(t), e
                    }, t._jQueryInterface = function(e, n) {
                        return this.each((function() {
                            var r = i.default(this).data("bs.modal"),
                                o = u({}, P, i.default(this).data(), "object" == typeof e && e ? e : {});
                            if (r || (r = new t(this, o), i.default(this).data("bs.modal", r)), "string" == typeof e) {
                                if (void 0 === r[e]) throw new TypeError('No method named "' + e + '"');
                                r[e](n)
                            } else o.show && r.show(n)
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return P } }]), t
                }();
            i.default(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', (function(t) {
                var e, n = this,
                    r = f.getSelectorFromElement(this);
                r && (e = document.querySelector(r));
                var o = i.default(e).data("bs.modal") ? "toggle" : u({}, i.default(e).data(), i.default(this).data());
                "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
                var a = i.default(e).one("show.bs.modal", (function(t) { t.isDefaultPrevented() || a.one("hidden.bs.modal", (function() { i.default(n).is(":visible") && n.focus() })) }));
                F._jQueryInterface.call(i.default(e), o, this)
            })), i.default.fn.modal = F._jQueryInterface, i.default.fn.modal.Constructor = F, i.default.fn.modal.noConflict = function() { return i.default.fn.modal = j, F._jQueryInterface };
            var M = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"],
                U = { "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] },
                q = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,
                B = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

            function H(t, e, n) {
                if (0 === t.length) return t;
                if (n && "function" == typeof n) return n(t);
                for (var r = (new window.DOMParser).parseFromString(t, "text/html"), i = Object.keys(e), o = [].slice.call(r.body.querySelectorAll("*")), a = function(t, n) {
                        var r = o[t],
                            a = r.nodeName.toLowerCase();
                        if (-1 === i.indexOf(r.nodeName.toLowerCase())) return r.parentNode.removeChild(r), "continue";
                        var s = [].slice.call(r.attributes),
                            u = [].concat(e["*"] || [], e[a] || []);
                        s.forEach((function(t) {
                            (function(t, e) {
                                var n = t.nodeName.toLowerCase();
                                if (-1 !== e.indexOf(n)) return -1 === M.indexOf(n) || Boolean(q.test(t.nodeValue) || B.test(t.nodeValue));
                                for (var r = e.filter((function(t) { return t instanceof RegExp })), i = 0, o = r.length; i < o; i++)
                                    if (r[i].test(n)) return !0;
                                return !1
                            })(t, u) || r.removeAttribute(t.nodeName)
                        }))
                    }, s = 0, u = o.length; s < u; s++) a(s);
                return r.body.innerHTML
            }
            var z = "tooltip",
                W = i.default.fn[z],
                Q = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
                $ = ["sanitize", "whiteList", "sanitizeFn"],
                V = { AUTO: "auto", TOP: "top", RIGHT: "right", BOTTOM: "bottom", LEFT: "left" },
                Y = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: 0, container: !1, fallbackPlacement: "flip", boundary: "scrollParent", customClass: "", sanitize: !0, sanitizeFn: null, whiteList: U, popperConfig: null },
                X = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(number|string|function)", container: "(string|element|boolean)", fallbackPlacement: "(string|array)", boundary: "(string|element)", customClass: "(string|function)", sanitize: "boolean", sanitizeFn: "(null|function)", whiteList: "object", popperConfig: "(null|object)" },
                G = { HIDE: "hide.bs.tooltip", HIDDEN: "hidden.bs.tooltip", SHOW: "show.bs.tooltip", SHOWN: "shown.bs.tooltip", INSERTED: "inserted.bs.tooltip", CLICK: "click.bs.tooltip", FOCUSIN: "focusin.bs.tooltip", FOCUSOUT: "focusout.bs.tooltip", MOUSEENTER: "mouseenter.bs.tooltip", MOUSELEAVE: "mouseleave.bs.tooltip" },
                K = function() {
                    function t(t, e) {
                        if (void 0 === o.default) throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
                        this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners()
                    }
                    var e = t.prototype;
                    return e.enable = function() { this._isEnabled = !0 }, e.disable = function() { this._isEnabled = !1 }, e.toggleEnabled = function() { this._isEnabled = !this._isEnabled }, e.toggle = function(t) {
                        if (this._isEnabled)
                            if (t) {
                                var e = this.constructor.DATA_KEY,
                                    n = i.default(t.currentTarget).data(e);
                                n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), i.default(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n)
                            } else {
                                if (i.default(this.getTipElement()).hasClass("show")) return void this._leave(null, this);
                                this._enter(null, this)
                            }
                    }, e.dispose = function() { clearTimeout(this._timeout), i.default.removeData(this.element, this.constructor.DATA_KEY), i.default(this.element).off(this.constructor.EVENT_KEY), i.default(this.element).closest(".modal").off("hide.bs.modal", this._hideModalHandler), this.tip && i.default(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null }, e.show = function() {
                        var t = this;
                        if ("none" === i.default(this.element).css("display")) throw new Error("Please use show on visible elements");
                        var e = i.default.Event(this.constructor.Event.SHOW);
                        if (this.isWithContent() && this._isEnabled) {
                            i.default(this.element).trigger(e);
                            var n = f.findShadowRoot(this.element),
                                r = i.default.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);
                            if (e.isDefaultPrevented() || !r) return;
                            var a = this.getTipElement(),
                                s = f.getUID(this.constructor.NAME);
                            a.setAttribute("id", s), this.element.setAttribute("aria-describedby", s), this.setContent(), this.config.animation && i.default(a).addClass("fade");
                            var u = "function" == typeof this.config.placement ? this.config.placement.call(this, a, this.element) : this.config.placement,
                                l = this._getAttachment(u);
                            this.addAttachmentClass(l);
                            var c = this._getContainer();
                            i.default(a).data(this.constructor.DATA_KEY, this), i.default.contains(this.element.ownerDocument.documentElement, this.tip) || i.default(a).appendTo(c), i.default(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new o.default(this.element, a, this._getPopperConfig(l)), i.default(a).addClass("show"), i.default(a).addClass(this.config.customClass), "ontouchstart" in document.documentElement && i.default(document.body).children().on("mouseover", null, i.default.noop);
                            var h = function() {
                                t.config.animation && t._fixTransition();
                                var e = t._hoverState;
                                t._hoverState = null, i.default(t.element).trigger(t.constructor.Event.SHOWN), "out" === e && t._leave(null, t)
                            };
                            if (i.default(this.tip).hasClass("fade")) {
                                var d = f.getTransitionDurationFromElement(this.tip);
                                i.default(this.tip).one(f.TRANSITION_END, h).emulateTransitionEnd(d)
                            } else h()
                        }
                    }, e.hide = function(t) {
                        var e = this,
                            n = this.getTipElement(),
                            r = i.default.Event(this.constructor.Event.HIDE),
                            o = function() { "show" !== e._hoverState && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute("aria-describedby"), i.default(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t() };
                        if (i.default(this.element).trigger(r), !r.isDefaultPrevented()) {
                            if (i.default(n).removeClass("show"), "ontouchstart" in document.documentElement && i.default(document.body).children().off("mouseover", null, i.default.noop), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1, i.default(this.tip).hasClass("fade")) {
                                var a = f.getTransitionDurationFromElement(n);
                                i.default(n).one(f.TRANSITION_END, o).emulateTransitionEnd(a)
                            } else o();
                            this._hoverState = ""
                        }
                    }, e.update = function() { null !== this._popper && this._popper.scheduleUpdate() }, e.isWithContent = function() { return Boolean(this.getTitle()) }, e.addAttachmentClass = function(t) { i.default(this.getTipElement()).addClass("bs-tooltip-" + t) }, e.getTipElement = function() { return this.tip = this.tip || i.default(this.config.template)[0], this.tip }, e.setContent = function() {
                        var t = this.getTipElement();
                        this.setElementContent(i.default(t.querySelectorAll(".tooltip-inner")), this.getTitle()), i.default(t).removeClass("fade show")
                    }, e.setElementContent = function(t, e) { "object" != typeof e || !e.nodeType && !e.jquery ? this.config.html ? (this.config.sanitize && (e = H(e, this.config.whiteList, this.config.sanitizeFn)), t.html(e)) : t.text(e) : this.config.html ? i.default(e).parent().is(t) || t.empty().append(e) : t.text(i.default(e).text()) }, e.getTitle = function() { var t = this.element.getAttribute("data-original-title"); return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t }, e._getPopperConfig = function(t) { var e = this; return u({}, { placement: t, modifiers: { offset: this._getOffset(), flip: { behavior: this.config.fallbackPlacement }, arrow: { element: ".arrow" }, preventOverflow: { boundariesElement: this.config.boundary } }, onCreate: function(t) { t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t) }, onUpdate: function(t) { return e._handlePopperPlacementChange(t) } }, this.config.popperConfig) }, e._getOffset = function() {
                        var t = this,
                            e = {};
                        return "function" == typeof this.config.offset ? e.fn = function(e) { return e.offsets = u({}, e.offsets, t.config.offset(e.offsets, t.element)), e } : e.offset = this.config.offset, e
                    }, e._getContainer = function() { return !1 === this.config.container ? document.body : f.isElement(this.config.container) ? i.default(this.config.container) : i.default(document).find(this.config.container) }, e._getAttachment = function(t) { return V[t.toUpperCase()] }, e._setListeners = function() {
                        var t = this;
                        this.config.trigger.split(" ").forEach((function(e) {
                            if ("click" === e) i.default(t.element).on(t.constructor.Event.CLICK, t.config.selector, (function(e) { return t.toggle(e) }));
                            else if ("manual" !== e) {
                                var n = "hover" === e ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,
                                    r = "hover" === e ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;
                                i.default(t.element).on(n, t.config.selector, (function(e) { return t._enter(e) })).on(r, t.config.selector, (function(e) { return t._leave(e) }))
                            }
                        })), this._hideModalHandler = function() { t.element && t.hide() }, i.default(this.element).closest(".modal").on("hide.bs.modal", this._hideModalHandler), this.config.selector ? this.config = u({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle()
                    }, e._fixTitle = function() {
                        var t = typeof this.element.getAttribute("data-original-title");
                        (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""))
                    }, e._enter = function(t, e) {
                        var n = this.constructor.DATA_KEY;
                        (e = e || i.default(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), i.default(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? "focus" : "hover"] = !0), i.default(e.getTipElement()).hasClass("show") || "show" === e._hoverState ? e._hoverState = "show" : (clearTimeout(e._timeout), e._hoverState = "show", e.config.delay && e.config.delay.show ? e._timeout = setTimeout((function() { "show" === e._hoverState && e.show() }), e.config.delay.show) : e.show())
                    }, e._leave = function(t, e) {
                        var n = this.constructor.DATA_KEY;
                        (e = e || i.default(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), i.default(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? "focus" : "hover"] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = "out", e.config.delay && e.config.delay.hide ? e._timeout = setTimeout((function() { "out" === e._hoverState && e.hide() }), e.config.delay.hide) : e.hide())
                    }, e._isWithActiveTrigger = function() {
                        for (var t in this._activeTrigger)
                            if (this._activeTrigger[t]) return !0;
                        return !1
                    }, e._getConfig = function(t) { var e = i.default(this.element).data(); return Object.keys(e).forEach((function(t) {-1 !== $.indexOf(t) && delete e[t] })), "number" == typeof(t = u({}, this.constructor.Default, e, "object" == typeof t && t ? t : {})).delay && (t.delay = { show: t.delay, hide: t.delay }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), f.typeCheckConfig(z, t, this.constructor.DefaultType), t.sanitize && (t.template = H(t.template, t.whiteList, t.sanitizeFn)), t }, e._getDelegateConfig = function() {
                        var t = {};
                        if (this.config)
                            for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
                        return t
                    }, e._cleanTipClass = function() {
                        var t = i.default(this.getTipElement()),
                            e = t.attr("class").match(Q);
                        null !== e && e.length && t.removeClass(e.join(""))
                    }, e._handlePopperPlacementChange = function(t) { this.tip = t.instance.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement)) }, e._fixTransition = function() {
                        var t = this.getTipElement(),
                            e = this.config.animation;
                        null === t.getAttribute("x-placement") && (i.default(t).removeClass("fade"), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e)
                    }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this),
                                r = n.data("bs.tooltip"),
                                o = "object" == typeof e && e;
                            if ((r || !/dispose|hide/.test(e)) && (r || (r = new t(this, o), n.data("bs.tooltip", r)), "string" == typeof e)) {
                                if (void 0 === r[e]) throw new TypeError('No method named "' + e + '"');
                                r[e]()
                            }
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return Y } }, { key: "NAME", get: function() { return z } }, { key: "DATA_KEY", get: function() { return "bs.tooltip" } }, { key: "Event", get: function() { return G } }, { key: "EVENT_KEY", get: function() { return ".bs.tooltip" } }, { key: "DefaultType", get: function() { return X } }]), t
                }();
            i.default.fn[z] = K._jQueryInterface, i.default.fn[z].Constructor = K, i.default.fn[z].noConflict = function() { return i.default.fn[z] = W, K._jQueryInterface };
            var J = "popover",
                Z = i.default.fn[J],
                tt = new RegExp("(^|\\s)bs-popover\\S+", "g"),
                et = u({}, K.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),
                nt = u({}, K.DefaultType, { content: "(string|element|function)" }),
                rt = { HIDE: "hide.bs.popover", HIDDEN: "hidden.bs.popover", SHOW: "show.bs.popover", SHOWN: "shown.bs.popover", INSERTED: "inserted.bs.popover", CLICK: "click.bs.popover", FOCUSIN: "focusin.bs.popover", FOCUSOUT: "focusout.bs.popover", MOUSEENTER: "mouseenter.bs.popover", MOUSELEAVE: "mouseleave.bs.popover" },
                it = function(t) {
                    var e, n;

                    function r() { return t.apply(this, arguments) || this }
                    n = t, (e = r).prototype = Object.create(n.prototype), e.prototype.constructor = e, l(e, n);
                    var o = r.prototype;
                    return o.isWithContent = function() { return this.getTitle() || this._getContent() }, o.addAttachmentClass = function(t) { i.default(this.getTipElement()).addClass("bs-popover-" + t) }, o.getTipElement = function() { return this.tip = this.tip || i.default(this.config.template)[0], this.tip }, o.setContent = function() {
                        var t = i.default(this.getTipElement());
                        this.setElementContent(t.find(".popover-header"), this.getTitle());
                        var e = this._getContent();
                        "function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(".popover-body"), e), t.removeClass("fade show")
                    }, o._getContent = function() { return this.element.getAttribute("data-content") || this.config.content }, o._cleanTipClass = function() {
                        var t = i.default(this.getTipElement()),
                            e = t.attr("class").match(tt);
                        null !== e && e.length > 0 && t.removeClass(e.join(""))
                    }, r._jQueryInterface = function(t) {
                        return this.each((function() {
                            var e = i.default(this).data("bs.popover"),
                                n = "object" == typeof t ? t : null;
                            if ((e || !/dispose|hide/.test(t)) && (e || (e = new r(this, n), i.default(this).data("bs.popover", e)), "string" == typeof t)) {
                                if (void 0 === e[t]) throw new TypeError('No method named "' + t + '"');
                                e[t]()
                            }
                        }))
                    }, s(r, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return et } }, { key: "NAME", get: function() { return J } }, { key: "DATA_KEY", get: function() { return "bs.popover" } }, { key: "Event", get: function() { return rt } }, { key: "EVENT_KEY", get: function() { return ".bs.popover" } }, { key: "DefaultType", get: function() { return nt } }]), r
                }(K);
            i.default.fn[J] = it._jQueryInterface, i.default.fn[J].Constructor = it, i.default.fn[J].noConflict = function() { return i.default.fn[J] = Z, it._jQueryInterface };
            var ot = "scrollspy",
                at = i.default.fn[ot],
                st = { offset: 10, method: "auto", target: "" },
                ut = { offset: "number", method: "string", target: "(string|element)" },
                lt = function() {
                    function t(t, e) {
                        var n = this;
                        this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + " .nav-link," + this._config.target + " .list-group-item," + this._config.target + " .dropdown-item", this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, i.default(this._scrollElement).on("scroll.bs.scrollspy", (function(t) { return n._process(t) })), this.refresh(), this._process()
                    }
                    var e = t.prototype;
                    return e.refresh = function() {
                        var t = this,
                            e = this._scrollElement === this._scrollElement.window ? "offset" : "position",
                            n = "auto" === this._config.method ? e : this._config.method,
                            r = "position" === n ? this._getScrollTop() : 0;
                        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map((function(t) { var e, o = f.getSelectorFromElement(t); if (o && (e = document.querySelector(o)), e) { var a = e.getBoundingClientRect(); if (a.width || a.height) return [i.default(e)[n]().top + r, o] } return null })).filter((function(t) { return t })).sort((function(t, e) { return t[0] - e[0] })).forEach((function(e) { t._offsets.push(e[0]), t._targets.push(e[1]) }))
                    }, e.dispose = function() { i.default.removeData(this._element, "bs.scrollspy"), i.default(this._scrollElement).off(".bs.scrollspy"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null }, e._getConfig = function(t) {
                        if ("string" != typeof(t = u({}, st, "object" == typeof t && t ? t : {})).target && f.isElement(t.target)) {
                            var e = i.default(t.target).attr("id");
                            e || (e = f.getUID(ot), i.default(t.target).attr("id", e)), t.target = "#" + e
                        }
                        return f.typeCheckConfig(ot, t, ut), t
                    }, e._getScrollTop = function() { return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop }, e._getScrollHeight = function() { return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight) }, e._getOffsetHeight = function() { return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height }, e._process = function() {
                        var t = this._getScrollTop() + this._config.offset,
                            e = this._getScrollHeight(),
                            n = this._config.offset + e - this._getOffsetHeight();
                        if (this._scrollHeight !== e && this.refresh(), t >= n) {
                            var r = this._targets[this._targets.length - 1];
                            this._activeTarget !== r && this._activate(r)
                        } else { if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear(); for (var i = this._offsets.length; i--;) this._activeTarget !== this._targets[i] && t >= this._offsets[i] && (void 0 === this._offsets[i + 1] || t < this._offsets[i + 1]) && this._activate(this._targets[i]) }
                    }, e._activate = function(t) {
                        this._activeTarget = t, this._clear();
                        var e = this._selector.split(",").map((function(e) { return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]' })),
                            n = i.default([].slice.call(document.querySelectorAll(e.join(","))));
                        n.hasClass("dropdown-item") ? (n.closest(".dropdown").find(".dropdown-toggle").addClass("active"), n.addClass("active")) : (n.addClass("active"), n.parents(".nav, .list-group").prev(".nav-link, .list-group-item").addClass("active"), n.parents(".nav, .list-group").prev(".nav-item").children(".nav-link").addClass("active")), i.default(this._scrollElement).trigger("activate.bs.scrollspy", { relatedTarget: t })
                    }, e._clear = function() {
                        [].slice.call(document.querySelectorAll(this._selector)).filter((function(t) { return t.classList.contains("active") })).forEach((function(t) { return t.classList.remove("active") }))
                    }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this).data("bs.scrollspy");
                            if (n || (n = new t(this, "object" == typeof e && e), i.default(this).data("bs.scrollspy", n)), "string" == typeof e) {
                                if (void 0 === n[e]) throw new TypeError('No method named "' + e + '"');
                                n[e]()
                            }
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "Default", get: function() { return st } }]), t
                }();
            i.default(window).on("load.bs.scrollspy.data-api", (function() {
                for (var t = [].slice.call(document.querySelectorAll('[data-spy="scroll"]')), e = t.length; e--;) {
                    var n = i.default(t[e]);
                    lt._jQueryInterface.call(n, n.data())
                }
            })), i.default.fn[ot] = lt._jQueryInterface, i.default.fn[ot].Constructor = lt, i.default.fn[ot].noConflict = function() { return i.default.fn[ot] = at, lt._jQueryInterface };
            var ct = i.default.fn.tab,
                ft = function() {
                    function t(t) { this._element = t }
                    var e = t.prototype;
                    return e.show = function() {
                        var t = this;
                        if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && i.default(this._element).hasClass("active") || i.default(this._element).hasClass("disabled"))) {
                            var e, n, r = i.default(this._element).closest(".nav, .list-group")[0],
                                o = f.getSelectorFromElement(this._element);
                            if (r) {
                                var a = "UL" === r.nodeName || "OL" === r.nodeName ? "> li > .active" : ".active";
                                n = (n = i.default.makeArray(i.default(r).find(a)))[n.length - 1]
                            }
                            var s = i.default.Event("hide.bs.tab", { relatedTarget: this._element }),
                                u = i.default.Event("show.bs.tab", { relatedTarget: n });
                            if (n && i.default(n).trigger(s), i.default(this._element).trigger(u), !u.isDefaultPrevented() && !s.isDefaultPrevented()) {
                                o && (e = document.querySelector(o)), this._activate(this._element, r);
                                var l = function() {
                                    var e = i.default.Event("hidden.bs.tab", { relatedTarget: t._element }),
                                        r = i.default.Event("shown.bs.tab", { relatedTarget: n });
                                    i.default(n).trigger(e), i.default(t._element).trigger(r)
                                };
                                e ? this._activate(e, e.parentNode, l) : l()
                            }
                        }
                    }, e.dispose = function() { i.default.removeData(this._element, "bs.tab"), this._element = null }, e._activate = function(t, e, n) {
                        var r = this,
                            o = (!e || "UL" !== e.nodeName && "OL" !== e.nodeName ? i.default(e).children(".active") : i.default(e).find("> li > .active"))[0],
                            a = n && o && i.default(o).hasClass("fade"),
                            s = function() { return r._transitionComplete(t, o, n) };
                        if (o && a) {
                            var u = f.getTransitionDurationFromElement(o);
                            i.default(o).removeClass("show").one(f.TRANSITION_END, s).emulateTransitionEnd(u)
                        } else s()
                    }, e._transitionComplete = function(t, e, n) {
                        if (e) {
                            i.default(e).removeClass("active");
                            var r = i.default(e.parentNode).find("> .dropdown-menu .active")[0];
                            r && i.default(r).removeClass("active"), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1)
                        }
                        i.default(t).addClass("active"), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), f.reflow(t), t.classList.contains("fade") && t.classList.add("show");
                        var o = t.parentNode;
                        if (o && "LI" === o.nodeName && (o = o.parentNode), o && i.default(o).hasClass("dropdown-menu")) {
                            var a = i.default(t).closest(".dropdown")[0];
                            if (a) {
                                var s = [].slice.call(a.querySelectorAll(".dropdown-toggle"));
                                i.default(s).addClass("active")
                            }
                            t.setAttribute("aria-expanded", !0)
                        }
                        n && n()
                    }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this),
                                r = n.data("bs.tab");
                            if (r || (r = new t(this), n.data("bs.tab", r)), "string" == typeof e) {
                                if (void 0 === r[e]) throw new TypeError('No method named "' + e + '"');
                                r[e]()
                            }
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }]), t
                }();
            i.default(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', (function(t) { t.preventDefault(), ft._jQueryInterface.call(i.default(this), "show") })), i.default.fn.tab = ft._jQueryInterface, i.default.fn.tab.Constructor = ft, i.default.fn.tab.noConflict = function() { return i.default.fn.tab = ct, ft._jQueryInterface };
            var ht = "toast",
                dt = i.default.fn[ht],
                pt = { animation: !0, autohide: !0, delay: 500 },
                vt = { animation: "boolean", autohide: "boolean", delay: "number" },
                gt = function() {
                    function t(t, e) { this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners() }
                    var e = t.prototype;
                    return e.show = function() {
                        var t = this,
                            e = i.default.Event("show.bs.toast");
                        if (i.default(this._element).trigger(e), !e.isDefaultPrevented()) {
                            this._clearTimeout(), this._config.animation && this._element.classList.add("fade");
                            var n = function() { t._element.classList.remove("showing"), t._element.classList.add("show"), i.default(t._element).trigger("shown.bs.toast"), t._config.autohide && (t._timeout = setTimeout((function() { t.hide() }), t._config.delay)) };
                            if (this._element.classList.remove("hide"), f.reflow(this._element), this._element.classList.add("showing"), this._config.animation) {
                                var r = f.getTransitionDurationFromElement(this._element);
                                i.default(this._element).one(f.TRANSITION_END, n).emulateTransitionEnd(r)
                            } else n()
                        }
                    }, e.hide = function() {
                        if (this._element.classList.contains("show")) {
                            var t = i.default.Event("hide.bs.toast");
                            i.default(this._element).trigger(t), t.isDefaultPrevented() || this._close()
                        }
                    }, e.dispose = function() { this._clearTimeout(), this._element.classList.contains("show") && this._element.classList.remove("show"), i.default(this._element).off("click.dismiss.bs.toast"), i.default.removeData(this._element, "bs.toast"), this._element = null, this._config = null }, e._getConfig = function(t) { return t = u({}, pt, i.default(this._element).data(), "object" == typeof t && t ? t : {}), f.typeCheckConfig(ht, t, this.constructor.DefaultType), t }, e._setListeners = function() {
                        var t = this;
                        i.default(this._element).on("click.dismiss.bs.toast", '[data-dismiss="toast"]', (function() { return t.hide() }))
                    }, e._close = function() {
                        var t = this,
                            e = function() { t._element.classList.add("hide"), i.default(t._element).trigger("hidden.bs.toast") };
                        if (this._element.classList.remove("show"), this._config.animation) {
                            var n = f.getTransitionDurationFromElement(this._element);
                            i.default(this._element).one(f.TRANSITION_END, e).emulateTransitionEnd(n)
                        } else e()
                    }, e._clearTimeout = function() { clearTimeout(this._timeout), this._timeout = null }, t._jQueryInterface = function(e) {
                        return this.each((function() {
                            var n = i.default(this),
                                r = n.data("bs.toast");
                            if (r || (r = new t(this, "object" == typeof e && e), n.data("bs.toast", r)), "string" == typeof e) {
                                if (void 0 === r[e]) throw new TypeError('No method named "' + e + '"');
                                r[e](this)
                            }
                        }))
                    }, s(t, null, [{ key: "VERSION", get: function() { return "4.6.1" } }, { key: "DefaultType", get: function() { return vt } }, { key: "Default", get: function() { return pt } }]), t
                }();
            i.default.fn[ht] = gt._jQueryInterface, i.default.fn[ht].Constructor = gt, i.default.fn[ht].noConflict = function() { return i.default.fn[ht] = dt, gt._jQueryInterface }, t.Alert = d, t.Button = v, t.Carousel = x, t.Collapse = k, t.Dropdown = L, t.Modal = F, t.Popover = it, t.Scrollspy = lt, t.Tab = ft, t.Toast = gt, t.Tooltip = K, t.Util = f, Object.defineProperty(t, "__esModule", { value: !0 })
        }(e, n("EVdn"), n("8L3F"))
    },
    SgzI: function(t) { t.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}') },
    SntB: function(t, e, n) {
        "use strict";
        var r = n("xTJ+");
        t.exports = function(t, e) {
            e = e || {};
            var n = {},
                i = ["url", "method", "data"],
                o = ["headers", "auth", "proxy", "params"],
                a = ["baseURL", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "timeoutMessage", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "decompress", "maxContentLength", "maxBodyLength", "maxRedirects", "transport", "httpAgent", "httpsAgent", "cancelToken", "socketPath", "responseEncoding"],
                s = ["validateStatus"];

            function u(t, e) { return r.isPlainObject(t) && r.isPlainObject(e) ? r.merge(t, e) : r.isPlainObject(e) ? r.merge({}, e) : r.isArray(e) ? e.slice() : e }

            function l(i) { r.isUndefined(e[i]) ? r.isUndefined(t[i]) || (n[i] = u(void 0, t[i])) : n[i] = u(t[i], e[i]) }
            r.forEach(i, (function(t) { r.isUndefined(e[t]) || (n[t] = u(void 0, e[t])) })), r.forEach(o, l), r.forEach(a, (function(i) { r.isUndefined(e[i]) ? r.isUndefined(t[i]) || (n[i] = u(void 0, t[i])) : n[i] = u(void 0, e[i]) })), r.forEach(s, (function(r) { r in e ? n[r] = u(t[r], e[r]) : r in t && (n[r] = u(void 0, t[r])) }));
            var c = i.concat(o).concat(a).concat(s),
                f = Object.keys(t).concat(Object.keys(e)).filter((function(t) { return -1 === c.indexOf(t) }));
            return r.forEach(f, l), n
        }
    },
    UnBK: function(t, e, n) {
        "use strict";
        var r = n("xTJ+"),
            i = n("xAGQ"),
            o = n("Lmem"),
            a = n("JEQr");

        function s(t) { t.cancelToken && t.cancelToken.throwIfRequested() }
        t.exports = function(t) { return s(t), t.headers = t.headers || {}, t.data = i.call(t, t.data, t.headers, t.transformRequest), t.headers = r.merge(t.headers.common || {}, t.headers[t.method] || {}, t.headers), r.forEach(["delete", "get", "head", "post", "put", "patch", "common"], (function(e) { delete t.headers[e] })), (t.adapter || a.adapter)(t).then((function(e) { return s(t), e.data = i.call(t, e.data, e.headers, t.transformResponse), e }), (function(e) { return o(e) || (s(t), e && e.response && (e.response.data = i.call(t, e.response.data, e.response.headers, t.transformResponse))), Promise.reject(e) })) }
    },
    XwJu: function(t, e, n) {
        "use strict";
        t.exports = function(t) { return "object" == typeof t && !0 === t.isAxiosError }
    },
    YuTi: function(t, e) { t.exports = function(t) { return t.webpackPolyfill || (t.deprecate = function() {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", { enumerable: !0, get: function() { return t.l } }), Object.defineProperty(t, "id", { enumerable: !0, get: function() { return t.i } }), t.webpackPolyfill = 1), t } },
    eeMe: function(t, e, n) {
        var r;
        self, r = function() {
            return function() {
                var t = {
                        3099: function(t) { t.exports = function(t) { if ("function" != typeof t) throw TypeError(String(t) + " is not a function"); return t } },
                        6077: function(t, e, n) {
                            var r = n(111);
                            t.exports = function(t) { if (!r(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype"); return t }
                        },
                        1223: function(t, e, n) {
                            var r = n(5112),
                                i = n(30),
                                o = n(3070),
                                a = r("unscopables"),
                                s = Array.prototype;
                            null == s[a] && o.f(s, a, { configurable: !0, value: i(null) }), t.exports = function(t) { s[a][t] = !0 }
                        },
                        1530: function(t, e, n) {
                            "use strict";
                            var r = n(8710).charAt;
                            t.exports = function(t, e, n) { return e + (n ? r(t, e).length : 1) }
                        },
                        5787: function(t) { t.exports = function(t, e, n) { if (!(t instanceof e)) throw TypeError("Incorrect " + (n ? n + " " : "") + "invocation"); return t } },
                        9670: function(t, e, n) {
                            var r = n(111);
                            t.exports = function(t) { if (!r(t)) throw TypeError(String(t) + " is not an object"); return t }
                        },
                        4019: function(t) { t.exports = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView },
                        260: function(t, e, n) {
                            "use strict";
                            var r, i = n(4019),
                                o = n(9781),
                                a = n(7854),
                                s = n(111),
                                u = n(6656),
                                l = n(648),
                                c = n(8880),
                                f = n(1320),
                                h = n(3070).f,
                                d = n(9518),
                                p = n(7674),
                                v = n(5112),
                                g = n(9711),
                                m = a.Int8Array,
                                y = m && m.prototype,
                                b = a.Uint8ClampedArray,
                                _ = b && b.prototype,
                                w = m && d(m),
                                x = y && d(y),
                                E = Object.prototype,
                                T = E.isPrototypeOf,
                                C = v("toStringTag"),
                                S = g("TYPED_ARRAY_TAG"),
                                k = i && !!p && "Opera" !== l(a.opera),
                                A = !1,
                                I = { Int8Array: 1, Uint8Array: 1, Uint8ClampedArray: 1, Int16Array: 2, Uint16Array: 2, Int32Array: 4, Uint32Array: 4, Float32Array: 4, Float64Array: 8 },
                                O = { BigInt64Array: 8, BigUint64Array: 8 },
                                N = function(t) { if (!s(t)) return !1; var e = l(t); return u(I, e) || u(O, e) };
                            for (r in I) a[r] || (k = !1);
                            if ((!k || "function" != typeof w || w === Function.prototype) && (w = function() { throw TypeError("Incorrect invocation") }, k))
                                for (r in I) a[r] && p(a[r], w);
                            if ((!k || !x || x === E) && (x = w.prototype, k))
                                for (r in I) a[r] && p(a[r].prototype, x);
                            if (k && d(_) !== x && p(_, x), o && !u(x, C))
                                for (r in A = !0, h(x, C, { get: function() { return s(this) ? this[S] : void 0 } }), I) a[r] && c(a[r], S, r);
                            t.exports = {
                                NATIVE_ARRAY_BUFFER_VIEWS: k,
                                TYPED_ARRAY_TAG: A && S,
                                aTypedArray: function(t) { if (N(t)) return t; throw TypeError("Target is not a typed array") },
                                aTypedArrayConstructor: function(t) {
                                    if (p) { if (T.call(w, t)) return t } else
                                        for (var e in I)
                                            if (u(I, r)) { var n = a[e]; if (n && (t === n || T.call(n, t))) return t } throw TypeError("Target is not a typed array constructor")
                                },
                                exportTypedArrayMethod: function(t, e, n) {
                                    if (o) {
                                        if (n)
                                            for (var r in I) {
                                                var i = a[r];
                                                i && u(i.prototype, t) && delete i.prototype[t]
                                            }
                                        x[t] && !n || f(x, t, n ? e : k && y[t] || e)
                                    }
                                },
                                exportTypedArrayStaticMethod: function(t, e, n) {
                                    var r, i;
                                    if (o) {
                                        if (p) {
                                            if (n)
                                                for (r in I)(i = a[r]) && u(i, t) && delete i[t];
                                            if (w[t] && !n) return;
                                            try { return f(w, t, n ? e : k && m[t] || e) } catch (t) {}
                                        }
                                        for (r in I) !(i = a[r]) || i[t] && !n || f(i, t, e)
                                    }
                                },
                                isView: function(t) { if (!s(t)) return !1; var e = l(t); return "DataView" === e || u(I, e) || u(O, e) },
                                isTypedArray: N,
                                TypedArray: w,
                                TypedArrayPrototype: x
                            }
                        },
                        3331: function(t, e, n) {
                            "use strict";
                            var r = n(7854),
                                i = n(9781),
                                o = n(4019),
                                a = n(8880),
                                s = n(2248),
                                u = n(7293),
                                l = n(5787),
                                c = n(9958),
                                f = n(7466),
                                h = n(7067),
                                d = n(1179),
                                p = n(9518),
                                v = n(7674),
                                g = n(8006).f,
                                m = n(3070).f,
                                y = n(1285),
                                b = n(8003),
                                _ = n(9909),
                                w = _.get,
                                x = _.set,
                                E = r.ArrayBuffer,
                                T = E,
                                C = r.DataView,
                                S = C && C.prototype,
                                k = Object.prototype,
                                A = r.RangeError,
                                I = d.pack,
                                O = d.unpack,
                                N = function(t) { return [255 & t] },
                                D = function(t) { return [255 & t, t >> 8 & 255] },
                                L = function(t) { return [255 & t, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255] },
                                j = function(t) { return t[3] << 24 | t[2] << 16 | t[1] << 8 | t[0] },
                                P = function(t) { return I(t, 23, 4) },
                                R = function(t) { return I(t, 52, 8) },
                                F = function(t, e) { m(t.prototype, e, { get: function() { return w(this)[e] } }) },
                                M = function(t, e, n, r) {
                                    var i = h(n),
                                        o = w(t);
                                    if (i + e > o.byteLength) throw A("Wrong index");
                                    var a = w(o.buffer).bytes,
                                        s = i + o.byteOffset,
                                        u = a.slice(s, s + e);
                                    return r ? u : u.reverse()
                                },
                                U = function(t, e, n, r, i, o) {
                                    var a = h(n),
                                        s = w(t);
                                    if (a + e > s.byteLength) throw A("Wrong index");
                                    for (var u = w(s.buffer).bytes, l = a + s.byteOffset, c = r(+i), f = 0; f < e; f++) u[l + f] = c[o ? f : e - f - 1]
                                };
                            if (o) {
                                if (!u((function() { E(1) })) || !u((function() { new E(-1) })) || u((function() { return new E, new E(1.5), new E(NaN), "ArrayBuffer" != E.name }))) {
                                    for (var q, B = (T = function(t) { return l(this, T), new E(h(t)) }).prototype = E.prototype, H = g(E), z = 0; H.length > z;)(q = H[z++]) in T || a(T, q, E[q]);
                                    B.constructor = T
                                }
                                v && p(S) !== k && v(S, k);
                                var W = new C(new T(2)),
                                    Q = S.setInt8;
                                W.setInt8(0, 2147483648), W.setInt8(1, 2147483649), !W.getInt8(0) && W.getInt8(1) || s(S, { setInt8: function(t, e) { Q.call(this, t, e << 24 >> 24) }, setUint8: function(t, e) { Q.call(this, t, e << 24 >> 24) } }, { unsafe: !0 })
                            } else T = function(t) {
                                l(this, T, "ArrayBuffer");
                                var e = h(t);
                                x(this, { bytes: y.call(new Array(e), 0), byteLength: e }), i || (this.byteLength = e)
                            }, C = function(t, e, n) {
                                l(this, C, "DataView"), l(t, T, "DataView");
                                var r = w(t).byteLength,
                                    o = c(e);
                                if (o < 0 || o > r) throw A("Wrong offset");
                                if (o + (n = void 0 === n ? r - o : f(n)) > r) throw A("Wrong length");
                                x(this, { buffer: t, byteLength: n, byteOffset: o }), i || (this.buffer = t, this.byteLength = n, this.byteOffset = o)
                            }, i && (F(T, "byteLength"), F(C, "buffer"), F(C, "byteLength"), F(C, "byteOffset")), s(C.prototype, { getInt8: function(t) { return M(this, 1, t)[0] << 24 >> 24 }, getUint8: function(t) { return M(this, 1, t)[0] }, getInt16: function(t) { var e = M(this, 2, t, arguments.length > 1 ? arguments[1] : void 0); return (e[1] << 8 | e[0]) << 16 >> 16 }, getUint16: function(t) { var e = M(this, 2, t, arguments.length > 1 ? arguments[1] : void 0); return e[1] << 8 | e[0] }, getInt32: function(t) { return j(M(this, 4, t, arguments.length > 1 ? arguments[1] : void 0)) }, getUint32: function(t) { return j(M(this, 4, t, arguments.length > 1 ? arguments[1] : void 0)) >>> 0 }, getFloat32: function(t) { return O(M(this, 4, t, arguments.length > 1 ? arguments[1] : void 0), 23) }, getFloat64: function(t) { return O(M(this, 8, t, arguments.length > 1 ? arguments[1] : void 0), 52) }, setInt8: function(t, e) { U(this, 1, t, N, e) }, setUint8: function(t, e) { U(this, 1, t, N, e) }, setInt16: function(t, e) { U(this, 2, t, D, e, arguments.length > 2 ? arguments[2] : void 0) }, setUint16: function(t, e) { U(this, 2, t, D, e, arguments.length > 2 ? arguments[2] : void 0) }, setInt32: function(t, e) { U(this, 4, t, L, e, arguments.length > 2 ? arguments[2] : void 0) }, setUint32: function(t, e) { U(this, 4, t, L, e, arguments.length > 2 ? arguments[2] : void 0) }, setFloat32: function(t, e) { U(this, 4, t, P, e, arguments.length > 2 ? arguments[2] : void 0) }, setFloat64: function(t, e) { U(this, 8, t, R, e, arguments.length > 2 ? arguments[2] : void 0) } });
                            b(T, "ArrayBuffer"), b(C, "DataView"), t.exports = { ArrayBuffer: T, DataView: C }
                        },
                        1048: function(t, e, n) {
                            "use strict";
                            var r = n(7908),
                                i = n(1400),
                                o = n(7466),
                                a = Math.min;
                            t.exports = [].copyWithin || function(t, e) {
                                var n = r(this),
                                    s = o(n.length),
                                    u = i(t, s),
                                    l = i(e, s),
                                    c = arguments.length > 2 ? arguments[2] : void 0,
                                    f = a((void 0 === c ? s : i(c, s)) - l, s - u),
                                    h = 1;
                                for (l < u && u < l + f && (h = -1, l += f - 1, u += f - 1); f-- > 0;) l in n ? n[u] = n[l] : delete n[u], u += h, l += h;
                                return n
                            }
                        },
                        1285: function(t, e, n) {
                            "use strict";
                            var r = n(7908),
                                i = n(1400),
                                o = n(7466);
                            t.exports = function(t) { for (var e = r(this), n = o(e.length), a = arguments.length, s = i(a > 1 ? arguments[1] : void 0, n), u = a > 2 ? arguments[2] : void 0, l = void 0 === u ? n : i(u, n); l > s;) e[s++] = t; return e }
                        },
                        8533: function(t, e, n) {
                            "use strict";
                            var r = n(2092).forEach,
                                i = n(9341)("forEach");
                            t.exports = i ? [].forEach : function(t) { return r(this, t, arguments.length > 1 ? arguments[1] : void 0) }
                        },
                        8457: function(t, e, n) {
                            "use strict";
                            var r = n(9974),
                                i = n(7908),
                                o = n(3411),
                                a = n(7659),
                                s = n(7466),
                                u = n(6135),
                                l = n(1246);
                            t.exports = function(t) {
                                var e, n, c, f, h, d, p = i(t),
                                    v = "function" == typeof this ? this : Array,
                                    g = arguments.length,
                                    m = g > 1 ? arguments[1] : void 0,
                                    y = void 0 !== m,
                                    b = l(p),
                                    _ = 0;
                                if (y && (m = r(m, g > 2 ? arguments[2] : void 0, 2)), null == b || v == Array && a(b))
                                    for (n = new v(e = s(p.length)); e > _; _++) d = y ? m(p[_], _) : p[_], u(n, _, d);
                                else
                                    for (h = (f = b.call(p)).next, n = new v; !(c = h.call(f)).done; _++) d = y ? o(f, m, [c.value, _], !0) : c.value, u(n, _, d);
                                return n.length = _, n
                            }
                        },
                        1318: function(t, e, n) {
                            var r = n(5656),
                                i = n(7466),
                                o = n(1400),
                                a = function(t) {
                                    return function(e, n, a) {
                                        var s, u = r(e),
                                            l = i(u.length),
                                            c = o(a, l);
                                        if (t && n != n) {
                                            for (; l > c;)
                                                if ((s = u[c++]) != s) return !0
                                        } else
                                            for (; l > c; c++)
                                                if ((t || c in u) && u[c] === n) return t || c || 0; return !t && -1
                                    }
                                };
                            t.exports = { includes: a(!0), indexOf: a(!1) }
                        },
                        2092: function(t, e, n) {
                            var r = n(9974),
                                i = n(8361),
                                o = n(7908),
                                a = n(7466),
                                s = n(5417),
                                u = [].push,
                                l = function(t) {
                                    var e = 1 == t,
                                        n = 2 == t,
                                        l = 3 == t,
                                        c = 4 == t,
                                        f = 6 == t,
                                        h = 7 == t,
                                        d = 5 == t || f;
                                    return function(p, v, g, m) {
                                        for (var y, b, _ = o(p), w = i(_), x = r(v, g, 3), E = a(w.length), T = 0, C = m || s, S = e ? C(p, E) : n || h ? C(p, 0) : void 0; E > T; T++)
                                            if ((d || T in w) && (b = x(y = w[T], T, _), t))
                                                if (e) S[T] = b;
                                                else if (b) switch (t) {
                                            case 3:
                                                return !0;
                                            case 5:
                                                return y;
                                            case 6:
                                                return T;
                                            case 2:
                                                u.call(S, y)
                                        } else switch (t) {
                                            case 4:
                                                return !1;
                                            case 7:
                                                u.call(S, y)
                                        }
                                        return f ? -1 : l || c ? c : S
                                    }
                                };
                            t.exports = { forEach: l(0), map: l(1), filter: l(2), some: l(3), every: l(4), find: l(5), findIndex: l(6), filterOut: l(7) }
                        },
                        6583: function(t, e, n) {
                            "use strict";
                            var r = n(5656),
                                i = n(9958),
                                o = n(7466),
                                a = n(9341),
                                s = Math.min,
                                u = [].lastIndexOf,
                                l = !!u && 1 / [1].lastIndexOf(1, -0) < 0,
                                c = a("lastIndexOf"),
                                f = l || !c;
                            t.exports = f ? function(t) {
                                if (l) return u.apply(this, arguments) || 0;
                                var e = r(this),
                                    n = o(e.length),
                                    a = n - 1;
                                for (arguments.length > 1 && (a = s(a, i(arguments[1]))), a < 0 && (a = n + a); a >= 0; a--)
                                    if (a in e && e[a] === t) return a || 0;
                                return -1
                            } : u
                        },
                        1194: function(t, e, n) {
                            var r = n(7293),
                                i = n(5112),
                                o = n(7392),
                                a = i("species");
                            t.exports = function(t) { return o >= 51 || !r((function() { var e = []; return (e.constructor = {})[a] = function() { return { foo: 1 } }, 1 !== e[t](Boolean).foo })) }
                        },
                        9341: function(t, e, n) {
                            "use strict";
                            var r = n(7293);
                            t.exports = function(t, e) { var n = [][t]; return !!n && r((function() { n.call(null, e || function() { throw 1 }, 1) })) }
                        },
                        3671: function(t, e, n) {
                            var r = n(3099),
                                i = n(7908),
                                o = n(8361),
                                a = n(7466),
                                s = function(t) {
                                    return function(e, n, s, u) {
                                        r(n);
                                        var l = i(e),
                                            c = o(l),
                                            f = a(l.length),
                                            h = t ? f - 1 : 0,
                                            d = t ? -1 : 1;
                                        if (s < 2)
                                            for (;;) { if (h in c) { u = c[h], h += d; break } if (h += d, t ? h < 0 : f <= h) throw TypeError("Reduce of empty array with no initial value") }
                                        for (; t ? h >= 0 : f > h; h += d) h in c && (u = n(u, c[h], h, l));
                                        return u
                                    }
                                };
                            t.exports = { left: s(!1), right: s(!0) }
                        },
                        5417: function(t, e, n) {
                            var r = n(111),
                                i = n(3157),
                                o = n(5112)("species");
                            t.exports = function(t, e) { var n; return i(t) && ("function" != typeof(n = t.constructor) || n !== Array && !i(n.prototype) ? r(n) && null === (n = n[o]) && (n = void 0) : n = void 0), new(void 0 === n ? Array : n)(0 === e ? 0 : e) }
                        },
                        3411: function(t, e, n) {
                            var r = n(9670),
                                i = n(9212);
                            t.exports = function(t, e, n, o) { try { return o ? e(r(n)[0], n[1]) : e(n) } catch (e) { throw i(t), e } }
                        },
                        7072: function(t, e, n) {
                            var r = n(5112)("iterator"),
                                i = !1;
                            try {
                                var o = 0,
                                    a = { next: function() { return { done: !!o++ } }, return: function() { i = !0 } };
                                a[r] = function() { return this }, Array.from(a, (function() { throw 2 }))
                            } catch (t) {}
                            t.exports = function(t, e) {
                                if (!e && !i) return !1;
                                var n = !1;
                                try {
                                    var o = {};
                                    o[r] = function() { return { next: function() { return { done: n = !0 } } } }, t(o)
                                } catch (t) {}
                                return n
                            }
                        },
                        4326: function(t) {
                            var e = {}.toString;
                            t.exports = function(t) { return e.call(t).slice(8, -1) }
                        },
                        648: function(t, e, n) {
                            var r = n(1694),
                                i = n(4326),
                                o = n(5112)("toStringTag"),
                                a = "Arguments" == i(function() { return arguments }());
                            t.exports = r ? i : function(t) { var e, n, r; return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof(n = function(t, e) { try { return t[e] } catch (t) {} }(e = Object(t), o)) ? n : a ? i(e) : "Object" == (r = i(e)) && "function" == typeof e.callee ? "Arguments" : r }
                        },
                        9920: function(t, e, n) {
                            var r = n(6656),
                                i = n(3887),
                                o = n(1236),
                                a = n(3070);
                            t.exports = function(t, e) {
                                for (var n = i(e), s = a.f, u = o.f, l = 0; l < n.length; l++) {
                                    var c = n[l];
                                    r(t, c) || s(t, c, u(e, c))
                                }
                            }
                        },
                        8544: function(t, e, n) {
                            var r = n(7293);
                            t.exports = !r((function() {
                                function t() {}
                                return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype
                            }))
                        },
                        4994: function(t, e, n) {
                            "use strict";
                            var r = n(3383).IteratorPrototype,
                                i = n(30),
                                o = n(9114),
                                a = n(8003),
                                s = n(7497),
                                u = function() { return this };
                            t.exports = function(t, e, n) { var l = e + " Iterator"; return t.prototype = i(r, { next: o(1, n) }), a(t, l, !1, !0), s[l] = u, t }
                        },
                        8880: function(t, e, n) {
                            var r = n(9781),
                                i = n(3070),
                                o = n(9114);
                            t.exports = r ? function(t, e, n) { return i.f(t, e, o(1, n)) } : function(t, e, n) { return t[e] = n, t }
                        },
                        9114: function(t) { t.exports = function(t, e) { return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: e } } },
                        6135: function(t, e, n) {
                            "use strict";
                            var r = n(7593),
                                i = n(3070),
                                o = n(9114);
                            t.exports = function(t, e, n) {
                                var a = r(e);
                                a in t ? i.f(t, a, o(0, n)) : t[a] = n
                            }
                        },
                        654: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(4994),
                                o = n(9518),
                                a = n(7674),
                                s = n(8003),
                                u = n(8880),
                                l = n(1320),
                                c = n(5112),
                                f = n(1913),
                                h = n(7497),
                                d = n(3383),
                                p = d.IteratorPrototype,
                                v = d.BUGGY_SAFARI_ITERATORS,
                                g = c("iterator"),
                                m = function() { return this };
                            t.exports = function(t, e, n, c, d, y, b) {
                                i(n, e, c);
                                var _, w, x, E = function(t) {
                                        if (t === d && A) return A;
                                        if (!v && t in S) return S[t];
                                        switch (t) {
                                            case "keys":
                                            case "values":
                                            case "entries":
                                                return function() { return new n(this, t) }
                                        }
                                        return function() { return new n(this) }
                                    },
                                    T = e + " Iterator",
                                    C = !1,
                                    S = t.prototype,
                                    k = S[g] || S["@@iterator"] || d && S[d],
                                    A = !v && k || E(d),
                                    I = "Array" == e && S.entries || k;
                                if (I && (_ = o(I.call(new t)), p !== Object.prototype && _.next && (f || o(_) === p || (a ? a(_, p) : "function" != typeof _[g] && u(_, g, m)), s(_, T, !0, !0), f && (h[T] = m))), "values" == d && k && "values" !== k.name && (C = !0, A = function() { return k.call(this) }), f && !b || S[g] === A || u(S, g, A), h[e] = A, d)
                                    if (w = { values: E("values"), keys: y ? A : E("keys"), entries: E("entries") }, b)
                                        for (x in w)(v || C || !(x in S)) && l(S, x, w[x]);
                                    else r({ target: e, proto: !0, forced: v || C }, w);
                                return w
                            }
                        },
                        9781: function(t, e, n) {
                            var r = n(7293);
                            t.exports = !r((function() { return 7 != Object.defineProperty({}, 1, { get: function() { return 7 } })[1] }))
                        },
                        317: function(t, e, n) {
                            var r = n(7854),
                                i = n(111),
                                o = r.document,
                                a = i(o) && i(o.createElement);
                            t.exports = function(t) { return a ? o.createElement(t) : {} }
                        },
                        8324: function(t) { t.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 } },
                        8113: function(t, e, n) {
                            var r = n(5005);
                            t.exports = r("navigator", "userAgent") || ""
                        },
                        7392: function(t, e, n) {
                            var r, i, o = n(7854),
                                a = n(8113),
                                s = o.process,
                                u = s && s.versions,
                                l = u && u.v8;
                            l ? i = (r = l.split("."))[0] + r[1] : a && (!(r = a.match(/Edge\/(\d+)/)) || r[1] >= 74) && (r = a.match(/Chrome\/(\d+)/)) && (i = r[1]), t.exports = i && +i
                        },
                        748: function(t) { t.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"] },
                        2109: function(t, e, n) {
                            var r = n(7854),
                                i = n(1236).f,
                                o = n(8880),
                                a = n(1320),
                                s = n(3505),
                                u = n(9920),
                                l = n(4705);
                            t.exports = function(t, e) {
                                var n, c, f, h, d, p = t.target,
                                    v = t.global,
                                    g = t.stat;
                                if (n = v ? r : g ? r[p] || s(p, {}) : (r[p] || {}).prototype)
                                    for (c in e) {
                                        if (h = e[c], f = t.noTargetGet ? (d = i(n, c)) && d.value : n[c], !l(v ? c : p + (g ? "." : "#") + c, t.forced) && void 0 !== f) {
                                            if (typeof h == typeof f) continue;
                                            u(h, f)
                                        }(t.sham || f && f.sham) && o(h, "sham", !0), a(n, c, h, t)
                                    }
                            }
                        },
                        7293: function(t) { t.exports = function(t) { try { return !!t() } catch (t) { return !0 } } },
                        7007: function(t, e, n) {
                            "use strict";
                            n(4916);
                            var r = n(1320),
                                i = n(7293),
                                o = n(5112),
                                a = n(2261),
                                s = n(8880),
                                u = o("species"),
                                l = !i((function() { var t = /./; return t.exec = function() { var t = []; return t.groups = { a: "7" }, t }, "7" !== "".replace(t, "$<a>") })),
                                c = "$0" === "a".replace(/./, "$0"),
                                f = o("replace"),
                                h = !!/./ [f] && "" === /./ [f]("a", "$0"),
                                d = !i((function() {
                                    var t = /(?:)/,
                                        e = t.exec;
                                    t.exec = function() { return e.apply(this, arguments) };
                                    var n = "ab".split(t);
                                    return 2 !== n.length || "a" !== n[0] || "b" !== n[1]
                                }));
                            t.exports = function(t, e, n, f) {
                                var p = o(t),
                                    v = !i((function() { var e = {}; return e[p] = function() { return 7 }, 7 != "" [t](e) })),
                                    g = v && !i((function() {
                                        var e = !1,
                                            n = /a/;
                                        return "split" === t && ((n = {}).constructor = {}, n.constructor[u] = function() { return n }, n.flags = "", n[p] = /./ [p]), n.exec = function() { return e = !0, null }, n[p](""), !e
                                    }));
                                if (!v || !g || "replace" === t && (!l || !c || h) || "split" === t && !d) {
                                    var m = /./ [p],
                                        y = n(p, "" [t], (function(t, e, n, r, i) { return e.exec === a ? v && !i ? { done: !0, value: m.call(e, n, r) } : { done: !0, value: t.call(n, e, r) } : { done: !1 } }), { REPLACE_KEEPS_$0: c, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: h }),
                                        b = y[0],
                                        _ = y[1];
                                    r(String.prototype, t, b), r(RegExp.prototype, p, 2 == e ? function(t, e) { return _.call(t, this, e) } : function(t) { return _.call(t, this) })
                                }
                                f && s(RegExp.prototype[p], "sham", !0)
                            }
                        },
                        9974: function(t, e, n) {
                            var r = n(3099);
                            t.exports = function(t, e, n) {
                                if (r(t), void 0 === e) return t;
                                switch (n) {
                                    case 0:
                                        return function() { return t.call(e) };
                                    case 1:
                                        return function(n) { return t.call(e, n) };
                                    case 2:
                                        return function(n, r) { return t.call(e, n, r) };
                                    case 3:
                                        return function(n, r, i) { return t.call(e, n, r, i) }
                                }
                                return function() { return t.apply(e, arguments) }
                            }
                        },
                        5005: function(t, e, n) {
                            var r = n(857),
                                i = n(7854),
                                o = function(t) { return "function" == typeof t ? t : void 0 };
                            t.exports = function(t, e) { return arguments.length < 2 ? o(r[t]) || o(i[t]) : r[t] && r[t][e] || i[t] && i[t][e] }
                        },
                        1246: function(t, e, n) {
                            var r = n(648),
                                i = n(7497),
                                o = n(5112)("iterator");
                            t.exports = function(t) { if (null != t) return t[o] || t["@@iterator"] || i[r(t)] }
                        },
                        8554: function(t, e, n) {
                            var r = n(9670),
                                i = n(1246);
                            t.exports = function(t) { var e = i(t); if ("function" != typeof e) throw TypeError(String(t) + " is not iterable"); return r(e.call(t)) }
                        },
                        647: function(t, e, n) {
                            var r = n(7908),
                                i = Math.floor,
                                o = "".replace,
                                a = /\$([$&'`]|\d\d?|<[^>]*>)/g,
                                s = /\$([$&'`]|\d\d?)/g;
                            t.exports = function(t, e, n, u, l, c) {
                                var f = n + t.length,
                                    h = u.length,
                                    d = s;
                                return void 0 !== l && (l = r(l), d = a), o.call(c, d, (function(r, o) {
                                    var a;
                                    switch (o.charAt(0)) {
                                        case "$":
                                            return "$";
                                        case "&":
                                            return t;
                                        case "`":
                                            return e.slice(0, n);
                                        case "'":
                                            return e.slice(f);
                                        case "<":
                                            a = l[o.slice(1, -1)];
                                            break;
                                        default:
                                            var s = +o;
                                            if (0 === s) return r;
                                            if (s > h) { var c = i(s / 10); return 0 === c ? r : c <= h ? void 0 === u[c - 1] ? o.charAt(1) : u[c - 1] + o.charAt(1) : r }
                                            a = u[s - 1]
                                    }
                                    return void 0 === a ? "" : a
                                }))
                            }
                        },
                        7854: function(t, e, n) {
                            var r = function(t) { return t && t.Math == Math && t };
                            t.exports = r("object" == typeof globalThis && globalThis) || r("object" == typeof window && window) || r("object" == typeof self && self) || r("object" == typeof n.g && n.g) || function() { return this }() || Function("return this")()
                        },
                        6656: function(t) {
                            var e = {}.hasOwnProperty;
                            t.exports = function(t, n) { return e.call(t, n) }
                        },
                        3501: function(t) { t.exports = {} },
                        490: function(t, e, n) {
                            var r = n(5005);
                            t.exports = r("document", "documentElement")
                        },
                        4664: function(t, e, n) {
                            var r = n(9781),
                                i = n(7293),
                                o = n(317);
                            t.exports = !r && !i((function() { return 7 != Object.defineProperty(o("div"), "a", { get: function() { return 7 } }).a }))
                        },
                        1179: function(t) {
                            var e = Math.abs,
                                n = Math.pow,
                                r = Math.floor,
                                i = Math.log,
                                o = Math.LN2;
                            t.exports = {
                                pack: function(t, a, s) {
                                    var u, l, c, f = new Array(s),
                                        h = 8 * s - a - 1,
                                        d = (1 << h) - 1,
                                        p = d >> 1,
                                        v = 23 === a ? n(2, -24) - n(2, -77) : 0,
                                        g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0,
                                        m = 0;
                                    for ((t = e(t)) != t || t === 1 / 0 ? (l = t != t ? 1 : 0, u = d) : (u = r(i(t) / o), t * (c = n(2, -u)) < 1 && (u--, c *= 2), (t += u + p >= 1 ? v / c : v * n(2, 1 - p)) * c >= 2 && (u++, c /= 2), u + p >= d ? (l = 0, u = d) : u + p >= 1 ? (l = (t * c - 1) * n(2, a), u += p) : (l = t * n(2, p - 1) * n(2, a), u = 0)); a >= 8; f[m++] = 255 & l, l /= 256, a -= 8);
                                    for (u = u << a | l, h += a; h > 0; f[m++] = 255 & u, u /= 256, h -= 8);
                                    return f[--m] |= 128 * g, f
                                },
                                unpack: function(t, e) {
                                    var r, i = t.length,
                                        o = 8 * i - e - 1,
                                        a = (1 << o) - 1,
                                        s = a >> 1,
                                        u = o - 7,
                                        l = i - 1,
                                        c = t[l--],
                                        f = 127 & c;
                                    for (c >>= 7; u > 0; f = 256 * f + t[l], l--, u -= 8);
                                    for (r = f & (1 << -u) - 1, f >>= -u, u += e; u > 0; r = 256 * r + t[l], l--, u -= 8);
                                    if (0 === f) f = 1 - s;
                                    else {
                                        if (f === a) return r ? NaN : c ? -1 / 0 : 1 / 0;
                                        r += n(2, e), f -= s
                                    }
                                    return (c ? -1 : 1) * r * n(2, f - e)
                                }
                            }
                        },
                        8361: function(t, e, n) {
                            var r = n(7293),
                                i = n(4326),
                                o = "".split;
                            t.exports = r((function() { return !Object("z").propertyIsEnumerable(0) })) ? function(t) { return "String" == i(t) ? o.call(t, "") : Object(t) } : Object
                        },
                        9587: function(t, e, n) {
                            var r = n(111),
                                i = n(7674);
                            t.exports = function(t, e, n) { var o, a; return i && "function" == typeof(o = e.constructor) && o !== n && r(a = o.prototype) && a !== n.prototype && i(t, a), t }
                        },
                        2788: function(t, e, n) {
                            var r = n(5465),
                                i = Function.toString;
                            "function" != typeof r.inspectSource && (r.inspectSource = function(t) { return i.call(t) }), t.exports = r.inspectSource
                        },
                        9909: function(t, e, n) {
                            var r, i, o, a = n(8536),
                                s = n(7854),
                                u = n(111),
                                l = n(8880),
                                c = n(6656),
                                f = n(5465),
                                h = n(6200),
                                d = n(3501),
                                p = s.WeakMap;
                            if (a) {
                                var v = f.state || (f.state = new p),
                                    g = v.get,
                                    m = v.has,
                                    y = v.set;
                                r = function(t, e) { return e.facade = t, y.call(v, t, e), e }, i = function(t) { return g.call(v, t) || {} }, o = function(t) { return m.call(v, t) }
                            } else {
                                var b = h("state");
                                d[b] = !0, r = function(t, e) { return e.facade = t, l(t, b, e), e }, i = function(t) { return c(t, b) ? t[b] : {} }, o = function(t) { return c(t, b) }
                            }
                            t.exports = { set: r, get: i, has: o, enforce: function(t) { return o(t) ? i(t) : r(t, {}) }, getterFor: function(t) { return function(e) { var n; if (!u(e) || (n = i(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required"); return n } } }
                        },
                        7659: function(t, e, n) {
                            var r = n(5112),
                                i = n(7497),
                                o = r("iterator"),
                                a = Array.prototype;
                            t.exports = function(t) { return void 0 !== t && (i.Array === t || a[o] === t) }
                        },
                        3157: function(t, e, n) {
                            var r = n(4326);
                            t.exports = Array.isArray || function(t) { return "Array" == r(t) }
                        },
                        4705: function(t, e, n) {
                            var r = n(7293),
                                i = /#|\.prototype\./,
                                o = function(t, e) { var n = s[a(t)]; return n == l || n != u && ("function" == typeof e ? r(e) : !!e) },
                                a = o.normalize = function(t) { return String(t).replace(i, ".").toLowerCase() },
                                s = o.data = {},
                                u = o.NATIVE = "N",
                                l = o.POLYFILL = "P";
                            t.exports = o
                        },
                        111: function(t) { t.exports = function(t) { return "object" == typeof t ? null !== t : "function" == typeof t } },
                        1913: function(t) { t.exports = !1 },
                        7850: function(t, e, n) {
                            var r = n(111),
                                i = n(4326),
                                o = n(5112)("match");
                            t.exports = function(t) { var e; return r(t) && (void 0 !== (e = t[o]) ? !!e : "RegExp" == i(t)) }
                        },
                        9212: function(t, e, n) {
                            var r = n(9670);
                            t.exports = function(t) { var e = t.return; if (void 0 !== e) return r(e.call(t)).value }
                        },
                        3383: function(t, e, n) {
                            "use strict";
                            var r, i, o, a = n(7293),
                                s = n(9518),
                                u = n(8880),
                                l = n(6656),
                                c = n(5112),
                                f = n(1913),
                                h = c("iterator"),
                                d = !1;
                            [].keys && ("next" in (o = [].keys()) ? (i = s(s(o))) !== Object.prototype && (r = i) : d = !0);
                            var p = null == r || a((function() { var t = {}; return r[h].call(t) !== t }));
                            p && (r = {}), f && !p || l(r, h) || u(r, h, (function() { return this })), t.exports = { IteratorPrototype: r, BUGGY_SAFARI_ITERATORS: d }
                        },
                        7497: function(t) { t.exports = {} },
                        133: function(t, e, n) {
                            var r = n(7293);
                            t.exports = !!Object.getOwnPropertySymbols && !r((function() { return !String(Symbol()) }))
                        },
                        590: function(t, e, n) {
                            var r = n(7293),
                                i = n(5112),
                                o = n(1913),
                                a = i("iterator");
                            t.exports = !r((function() {
                                var t = new URL("b?a=1&b=2&c=3", "http://a"),
                                    e = t.searchParams,
                                    n = "";
                                return t.pathname = "c%20d", e.forEach((function(t, r) { e.delete("b"), n += r + t })), o && !t.toJSON || !e.sort || "http://a/c%20d?a=1&c=3" !== t.href || "3" !== e.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !e[a] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://тест").host || "#%D0%B1" !== new URL("http://a#б").hash || "a1c3" !== n || "x" !== new URL("http://x", void 0).host
                            }))
                        },
                        8536: function(t, e, n) {
                            var r = n(7854),
                                i = n(2788),
                                o = r.WeakMap;
                            t.exports = "function" == typeof o && /native code/.test(i(o))
                        },
                        1574: function(t, e, n) {
                            "use strict";
                            var r = n(9781),
                                i = n(7293),
                                o = n(1956),
                                a = n(5181),
                                s = n(5296),
                                u = n(7908),
                                l = n(8361),
                                c = Object.assign,
                                f = Object.defineProperty;
                            t.exports = !c || i((function() {
                                if (r && 1 !== c({ b: 1 }, c(f({}, "a", { enumerable: !0, get: function() { f(this, "b", { value: 3, enumerable: !1 }) } }), { b: 2 })).b) return !0;
                                var t = {},
                                    e = {},
                                    n = Symbol();
                                return t[n] = 7, "abcdefghijklmnopqrst".split("").forEach((function(t) { e[t] = t })), 7 != c({}, t)[n] || "abcdefghijklmnopqrst" != o(c({}, e)).join("")
                            })) ? function(t, e) {
                                for (var n = u(t), i = arguments.length, c = 1, f = a.f, h = s.f; i > c;)
                                    for (var d, p = l(arguments[c++]), v = f ? o(p).concat(f(p)) : o(p), g = v.length, m = 0; g > m;) d = v[m++], r && !h.call(p, d) || (n[d] = p[d]);
                                return n
                            } : c
                        },
                        30: function(t, e, n) {
                            var r, i = n(9670),
                                o = n(6048),
                                a = n(748),
                                s = n(3501),
                                u = n(490),
                                l = n(317),
                                c = n(6200),
                                f = c("IE_PROTO"),
                                h = function() {},
                                d = function(t) { return "<script>" + t + "<\/script>" },
                                p = function() {
                                    try { r = document.domain && new ActiveXObject("htmlfile") } catch (t) {}
                                    var t, e;
                                    p = r ? function(t) { t.write(d("")), t.close(); var e = t.parentWindow.Object; return t = null, e }(r) : ((e = l("iframe")).style.display = "none", u.appendChild(e), e.src = String("javascript:"), (t = e.contentWindow.document).open(), t.write(d("document.F=Object")), t.close(), t.F);
                                    for (var n = a.length; n--;) delete p.prototype[a[n]];
                                    return p()
                                };
                            s[f] = !0, t.exports = Object.create || function(t, e) { var n; return null !== t ? (h.prototype = i(t), n = new h, h.prototype = null, n[f] = t) : n = p(), void 0 === e ? n : o(n, e) }
                        },
                        6048: function(t, e, n) {
                            var r = n(9781),
                                i = n(3070),
                                o = n(9670),
                                a = n(1956);
                            t.exports = r ? Object.defineProperties : function(t, e) { o(t); for (var n, r = a(e), s = r.length, u = 0; s > u;) i.f(t, n = r[u++], e[n]); return t }
                        },
                        3070: function(t, e, n) {
                            var r = n(9781),
                                i = n(4664),
                                o = n(9670),
                                a = n(7593),
                                s = Object.defineProperty;
                            e.f = r ? s : function(t, e, n) {
                                if (o(t), e = a(e, !0), o(n), i) try { return s(t, e, n) } catch (t) {}
                                if ("get" in n || "set" in n) throw TypeError("Accessors not supported");
                                return "value" in n && (t[e] = n.value), t
                            }
                        },
                        1236: function(t, e, n) {
                            var r = n(9781),
                                i = n(5296),
                                o = n(9114),
                                a = n(5656),
                                s = n(7593),
                                u = n(6656),
                                l = n(4664),
                                c = Object.getOwnPropertyDescriptor;
                            e.f = r ? c : function(t, e) {
                                if (t = a(t), e = s(e, !0), l) try { return c(t, e) } catch (t) {}
                                if (u(t, e)) return o(!i.f.call(t, e), t[e])
                            }
                        },
                        8006: function(t, e, n) {
                            var r = n(6324),
                                i = n(748).concat("length", "prototype");
                            e.f = Object.getOwnPropertyNames || function(t) { return r(t, i) }
                        },
                        5181: function(t, e) { e.f = Object.getOwnPropertySymbols },
                        9518: function(t, e, n) {
                            var r = n(6656),
                                i = n(7908),
                                o = n(6200),
                                a = n(8544),
                                s = o("IE_PROTO"),
                                u = Object.prototype;
                            t.exports = a ? Object.getPrototypeOf : function(t) { return t = i(t), r(t, s) ? t[s] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? u : null }
                        },
                        6324: function(t, e, n) {
                            var r = n(6656),
                                i = n(5656),
                                o = n(1318).indexOf,
                                a = n(3501);
                            t.exports = function(t, e) {
                                var n, s = i(t),
                                    u = 0,
                                    l = [];
                                for (n in s) !r(a, n) && r(s, n) && l.push(n);
                                for (; e.length > u;) r(s, n = e[u++]) && (~o(l, n) || l.push(n));
                                return l
                            }
                        },
                        1956: function(t, e, n) {
                            var r = n(6324),
                                i = n(748);
                            t.exports = Object.keys || function(t) { return r(t, i) }
                        },
                        5296: function(t, e) {
                            "use strict";
                            var n = {}.propertyIsEnumerable,
                                r = Object.getOwnPropertyDescriptor,
                                i = r && !n.call({ 1: 2 }, 1);
                            e.f = i ? function(t) { var e = r(this, t); return !!e && e.enumerable } : n
                        },
                        7674: function(t, e, n) {
                            var r = n(9670),
                                i = n(6077);
                            t.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
                                var t, e = !1,
                                    n = {};
                                try {
                                    (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(n, []), e = n instanceof Array
                                } catch (t) {}
                                return function(n, o) { return r(n), i(o), e ? t.call(n, o) : n.__proto__ = o, n }
                            }() : void 0)
                        },
                        288: function(t, e, n) {
                            "use strict";
                            var r = n(1694),
                                i = n(648);
                            t.exports = r ? {}.toString : function() { return "[object " + i(this) + "]" }
                        },
                        3887: function(t, e, n) {
                            var r = n(5005),
                                i = n(8006),
                                o = n(5181),
                                a = n(9670);
                            t.exports = r("Reflect", "ownKeys") || function(t) {
                                var e = i.f(a(t)),
                                    n = o.f;
                                return n ? e.concat(n(t)) : e
                            }
                        },
                        857: function(t, e, n) {
                            var r = n(7854);
                            t.exports = r
                        },
                        2248: function(t, e, n) {
                            var r = n(1320);
                            t.exports = function(t, e, n) { for (var i in e) r(t, i, e[i], n); return t }
                        },
                        1320: function(t, e, n) {
                            var r = n(7854),
                                i = n(8880),
                                o = n(6656),
                                a = n(3505),
                                s = n(2788),
                                u = n(9909),
                                l = u.get,
                                c = u.enforce,
                                f = String(String).split("String");
                            (t.exports = function(t, e, n, s) {
                                var u, l = !!s && !!s.unsafe,
                                    h = !!s && !!s.enumerable,
                                    d = !!s && !!s.noTargetGet;
                                "function" == typeof n && ("string" != typeof e || o(n, "name") || i(n, "name", e), (u = c(n)).source || (u.source = f.join("string" == typeof e ? e : ""))), t !== r ? (l ? !d && t[e] && (h = !0) : delete t[e], h ? t[e] = n : i(t, e, n)) : h ? t[e] = n : a(e, n)
                            })(Function.prototype, "toString", (function() { return "function" == typeof this && l(this).source || s(this) }))
                        },
                        7651: function(t, e, n) {
                            var r = n(4326),
                                i = n(2261);
                            t.exports = function(t, e) { var n = t.exec; if ("function" == typeof n) { var o = n.call(t, e); if ("object" != typeof o) throw TypeError("RegExp exec method returned something other than an Object or null"); return o } if ("RegExp" !== r(t)) throw TypeError("RegExp#exec called on incompatible receiver"); return i.call(t, e) }
                        },
                        2261: function(t, e, n) {
                            "use strict";
                            var r, i, o = n(7066),
                                a = n(2999),
                                s = RegExp.prototype.exec,
                                u = String.prototype.replace,
                                l = s,
                                c = (r = /a/, i = /b*/g, s.call(r, "a"), s.call(i, "a"), 0 !== r.lastIndex || 0 !== i.lastIndex),
                                f = a.UNSUPPORTED_Y || a.BROKEN_CARET,
                                h = void 0 !== /()??/.exec("")[1];
                            (c || h || f) && (l = function(t) {
                                var e, n, r, i, a = this,
                                    l = f && a.sticky,
                                    d = o.call(a),
                                    p = a.source,
                                    v = 0,
                                    g = t;
                                return l && (-1 === (d = d.replace("y", "")).indexOf("g") && (d += "g"), g = String(t).slice(a.lastIndex), a.lastIndex > 0 && (!a.multiline || a.multiline && "\n" !== t[a.lastIndex - 1]) && (p = "(?: " + p + ")", g = " " + g, v++), n = new RegExp("^(?:" + p + ")", d)), h && (n = new RegExp("^" + p + "$(?!\\s)", d)), c && (e = a.lastIndex), r = s.call(l ? n : a, g), l ? r ? (r.input = r.input.slice(v), r[0] = r[0].slice(v), r.index = a.lastIndex, a.lastIndex += r[0].length) : a.lastIndex = 0 : c && r && (a.lastIndex = a.global ? r.index + r[0].length : e), h && r && r.length > 1 && u.call(r[0], n, (function() { for (i = 1; i < arguments.length - 2; i++) void 0 === arguments[i] && (r[i] = void 0) })), r
                            }), t.exports = l
                        },
                        7066: function(t, e, n) {
                            "use strict";
                            var r = n(9670);
                            t.exports = function() {
                                var t = r(this),
                                    e = "";
                                return t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.sticky && (e += "y"), e
                            }
                        },
                        2999: function(t, e, n) {
                            "use strict";
                            var r = n(7293);

                            function i(t, e) { return RegExp(t, e) }
                            e.UNSUPPORTED_Y = r((function() { var t = i("a", "y"); return t.lastIndex = 2, null != t.exec("abcd") })), e.BROKEN_CARET = r((function() { var t = i("^r", "gy"); return t.lastIndex = 2, null != t.exec("str") }))
                        },
                        4488: function(t) { t.exports = function(t) { if (null == t) throw TypeError("Can't call method on " + t); return t } },
                        3505: function(t, e, n) {
                            var r = n(7854),
                                i = n(8880);
                            t.exports = function(t, e) { try { i(r, t, e) } catch (n) { r[t] = e } return e }
                        },
                        6340: function(t, e, n) {
                            "use strict";
                            var r = n(5005),
                                i = n(3070),
                                o = n(5112),
                                a = n(9781),
                                s = o("species");
                            t.exports = function(t) {
                                var e = r(t),
                                    n = i.f;
                                a && e && !e[s] && n(e, s, { configurable: !0, get: function() { return this } })
                            }
                        },
                        8003: function(t, e, n) {
                            var r = n(3070).f,
                                i = n(6656),
                                o = n(5112)("toStringTag");
                            t.exports = function(t, e, n) { t && !i(t = n ? t : t.prototype, o) && r(t, o, { configurable: !0, value: e }) }
                        },
                        6200: function(t, e, n) {
                            var r = n(2309),
                                i = n(9711),
                                o = r("keys");
                            t.exports = function(t) { return o[t] || (o[t] = i(t)) }
                        },
                        5465: function(t, e, n) {
                            var r = n(7854),
                                i = n(3505),
                                o = r["__core-js_shared__"] || i("__core-js_shared__", {});
                            t.exports = o
                        },
                        2309: function(t, e, n) {
                            var r = n(1913),
                                i = n(5465);
                            (t.exports = function(t, e) { return i[t] || (i[t] = void 0 !== e ? e : {}) })("versions", []).push({ version: "3.9.0", mode: r ? "pure" : "global", copyright: "© 2021 Denis Pushkarev (zloirock.ru)" })
                        },
                        6707: function(t, e, n) {
                            var r = n(9670),
                                i = n(3099),
                                o = n(5112)("species");
                            t.exports = function(t, e) { var n, a = r(t).constructor; return void 0 === a || null == (n = r(a)[o]) ? e : i(n) }
                        },
                        8710: function(t, e, n) {
                            var r = n(9958),
                                i = n(4488),
                                o = function(t) {
                                    return function(e, n) {
                                        var o, a, s = String(i(e)),
                                            u = r(n),
                                            l = s.length;
                                        return u < 0 || u >= l ? t ? "" : void 0 : (o = s.charCodeAt(u)) < 55296 || o > 56319 || u + 1 === l || (a = s.charCodeAt(u + 1)) < 56320 || a > 57343 ? t ? s.charAt(u) : o : t ? s.slice(u, u + 2) : a - 56320 + (o - 55296 << 10) + 65536
                                    }
                                };
                            t.exports = { codeAt: o(!1), charAt: o(!0) }
                        },
                        3197: function(t) {
                            "use strict";
                            var e = /[^\0-\u007E]/,
                                n = /[.\u3002\uFF0E\uFF61]/g,
                                r = "Overflow: input needs wider integers to process",
                                i = Math.floor,
                                o = String.fromCharCode,
                                a = function(t) { return t + 22 + 75 * (t < 26) },
                                s = function(t, e, n) { var r = 0; for (t = n ? i(t / 700) : t >> 1, t += i(t / e); t > 455; r += 36) t = i(t / 35); return i(r + 36 * t / (t + 38)) },
                                u = function(t) {
                                    var e, n, u = [],
                                        l = (t = function(t) {
                                            for (var e = [], n = 0, r = t.length; n < r;) {
                                                var i = t.charCodeAt(n++);
                                                if (i >= 55296 && i <= 56319 && n < r) {
                                                    var o = t.charCodeAt(n++);
                                                    56320 == (64512 & o) ? e.push(((1023 & i) << 10) + (1023 & o) + 65536) : (e.push(i), n--)
                                                } else e.push(i)
                                            }
                                            return e
                                        }(t)).length,
                                        c = 128,
                                        f = 0,
                                        h = 72;
                                    for (e = 0; e < t.length; e++)(n = t[e]) < 128 && u.push(o(n));
                                    var d = u.length,
                                        p = d;
                                    for (d && u.push("-"); p < l;) {
                                        var v = 2147483647;
                                        for (e = 0; e < t.length; e++)(n = t[e]) >= c && n < v && (v = n);
                                        var g = p + 1;
                                        if (v - c > i((2147483647 - f) / g)) throw RangeError(r);
                                        for (f += (v - c) * g, c = v, e = 0; e < t.length; e++) {
                                            if ((n = t[e]) < c && ++f > 2147483647) throw RangeError(r);
                                            if (n == c) {
                                                for (var m = f, y = 36;; y += 36) {
                                                    var b = y <= h ? 1 : y >= h + 26 ? 26 : y - h;
                                                    if (m < b) break;
                                                    var _ = m - b,
                                                        w = 36 - b;
                                                    u.push(o(a(b + _ % w))), m = i(_ / w)
                                                }
                                                u.push(o(a(m))), h = s(f, g, p == d), f = 0, ++p
                                            }
                                        }++f, ++c
                                    }
                                    return u.join("")
                                };
                            t.exports = function(t) {
                                var r, i, o = [],
                                    a = t.toLowerCase().replace(n, ".").split(".");
                                for (r = 0; r < a.length; r++) i = a[r], o.push(e.test(i) ? "xn--" + u(i) : i);
                                return o.join(".")
                            }
                        },
                        6091: function(t, e, n) {
                            var r = n(7293),
                                i = n(1361);
                            t.exports = function(t) { return r((function() { return !!i[t]() || "​᠎" != "​᠎" [t]() || i[t].name !== t })) }
                        },
                        3111: function(t, e, n) {
                            var r = n(4488),
                                i = "[" + n(1361) + "]",
                                o = RegExp("^" + i + i + "*"),
                                a = RegExp(i + i + "*$"),
                                s = function(t) { return function(e) { var n = String(r(e)); return 1 & t && (n = n.replace(o, "")), 2 & t && (n = n.replace(a, "")), n } };
                            t.exports = { start: s(1), end: s(2), trim: s(3) }
                        },
                        1400: function(t, e, n) {
                            var r = n(9958),
                                i = Math.max,
                                o = Math.min;
                            t.exports = function(t, e) { var n = r(t); return n < 0 ? i(n + e, 0) : o(n, e) }
                        },
                        7067: function(t, e, n) {
                            var r = n(9958),
                                i = n(7466);
                            t.exports = function(t) {
                                if (void 0 === t) return 0;
                                var e = r(t),
                                    n = i(e);
                                if (e !== n) throw RangeError("Wrong length or index");
                                return n
                            }
                        },
                        5656: function(t, e, n) {
                            var r = n(8361),
                                i = n(4488);
                            t.exports = function(t) { return r(i(t)) }
                        },
                        9958: function(t) {
                            var e = Math.ceil,
                                n = Math.floor;
                            t.exports = function(t) { return isNaN(t = +t) ? 0 : (t > 0 ? n : e)(t) }
                        },
                        7466: function(t, e, n) {
                            var r = n(9958),
                                i = Math.min;
                            t.exports = function(t) { return t > 0 ? i(r(t), 9007199254740991) : 0 }
                        },
                        7908: function(t, e, n) {
                            var r = n(4488);
                            t.exports = function(t) { return Object(r(t)) }
                        },
                        4590: function(t, e, n) {
                            var r = n(3002);
                            t.exports = function(t, e) { var n = r(t); if (n % e) throw RangeError("Wrong offset"); return n }
                        },
                        3002: function(t, e, n) {
                            var r = n(9958);
                            t.exports = function(t) { var e = r(t); if (e < 0) throw RangeError("The argument can't be less than 0"); return e }
                        },
                        7593: function(t, e, n) {
                            var r = n(111);
                            t.exports = function(t, e) { if (!r(t)) return t; var n, i; if (e && "function" == typeof(n = t.toString) && !r(i = n.call(t))) return i; if ("function" == typeof(n = t.valueOf) && !r(i = n.call(t))) return i; if (!e && "function" == typeof(n = t.toString) && !r(i = n.call(t))) return i; throw TypeError("Can't convert object to primitive value") }
                        },
                        1694: function(t, e, n) {
                            var r = {};
                            r[n(5112)("toStringTag")] = "z", t.exports = "[object z]" === String(r)
                        },
                        9843: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(7854),
                                o = n(9781),
                                a = n(3832),
                                s = n(260),
                                u = n(3331),
                                l = n(5787),
                                c = n(9114),
                                f = n(8880),
                                h = n(7466),
                                d = n(7067),
                                p = n(4590),
                                v = n(7593),
                                g = n(6656),
                                m = n(648),
                                y = n(111),
                                b = n(30),
                                _ = n(7674),
                                w = n(8006).f,
                                x = n(7321),
                                E = n(2092).forEach,
                                T = n(6340),
                                C = n(3070),
                                S = n(1236),
                                k = n(9909),
                                A = n(9587),
                                I = k.get,
                                O = k.set,
                                N = C.f,
                                D = S.f,
                                L = Math.round,
                                j = i.RangeError,
                                P = u.ArrayBuffer,
                                R = u.DataView,
                                F = s.NATIVE_ARRAY_BUFFER_VIEWS,
                                M = s.TYPED_ARRAY_TAG,
                                U = s.TypedArray,
                                q = s.TypedArrayPrototype,
                                B = s.aTypedArrayConstructor,
                                H = s.isTypedArray,
                                z = function(t, e) { for (var n = 0, r = e.length, i = new(B(t))(r); r > n;) i[n] = e[n++]; return i },
                                W = function(t, e) { N(t, e, { get: function() { return I(this)[e] } }) },
                                Q = function(t) { var e; return t instanceof P || "ArrayBuffer" == (e = m(t)) || "SharedArrayBuffer" == e },
                                $ = function(t, e) { return H(t) && "symbol" != typeof e && e in t && String(+e) == String(e) },
                                V = function(t, e) { return $(t, e = v(e, !0)) ? c(2, t[e]) : D(t, e) },
                                Y = function(t, e, n) { return !($(t, e = v(e, !0)) && y(n) && g(n, "value")) || g(n, "get") || g(n, "set") || n.configurable || g(n, "writable") && !n.writable || g(n, "enumerable") && !n.enumerable ? N(t, e, n) : (t[e] = n.value, t) };
                            o ? (F || (S.f = V, C.f = Y, W(q, "buffer"), W(q, "byteOffset"), W(q, "byteLength"), W(q, "length")), r({ target: "Object", stat: !0, forced: !F }, { getOwnPropertyDescriptor: V, defineProperty: Y }), t.exports = function(t, e, n) {
                                var o = t.match(/\d+$/)[0] / 8,
                                    s = t + (n ? "Clamped" : "") + "Array",
                                    u = "get" + t,
                                    c = "set" + t,
                                    v = i[s],
                                    g = v,
                                    m = g && g.prototype,
                                    C = {},
                                    S = function(t, e) {
                                        N(t, e, {
                                            get: function() { return function(t, e) { var n = I(t); return n.view[u](e * o + n.byteOffset, !0) }(this, e) },
                                            set: function(t) {
                                                return function(t, e, r) {
                                                    var i = I(t);
                                                    n && (r = (r = L(r)) < 0 ? 0 : r > 255 ? 255 : 255 & r), i.view[c](e * o + i.byteOffset, r, !0)
                                                }(this, e, t)
                                            },
                                            enumerable: !0
                                        })
                                    };
                                F ? a && (g = e((function(t, e, n, r) { return l(t, g, s), A(y(e) ? Q(e) ? void 0 !== r ? new v(e, p(n, o), r) : void 0 !== n ? new v(e, p(n, o)) : new v(e) : H(e) ? z(g, e) : x.call(g, e) : new v(d(e)), t, g) })), _ && _(g, U), E(w(v), (function(t) { t in g || f(g, t, v[t]) })), g.prototype = m) : (g = e((function(t, e, n, r) {
                                    l(t, g, s);
                                    var i, a, u, c = 0,
                                        f = 0;
                                    if (y(e)) {
                                        if (!Q(e)) return H(e) ? z(g, e) : x.call(g, e);
                                        i = e, f = p(n, o);
                                        var v = e.byteLength;
                                        if (void 0 === r) { if (v % o) throw j("Wrong length"); if ((a = v - f) < 0) throw j("Wrong length") } else if ((a = h(r) * o) + f > v) throw j("Wrong length");
                                        u = a / o
                                    } else u = d(e), i = new P(a = u * o);
                                    for (O(t, { buffer: i, byteOffset: f, byteLength: a, length: u, view: new R(i) }); c < u;) S(t, c++)
                                })), _ && _(g, U), m = g.prototype = b(q)), m.constructor !== g && f(m, "constructor", g), M && f(m, M, s), C[s] = g, r({ global: !0, forced: g != v, sham: !F }, C), "BYTES_PER_ELEMENT" in g || f(g, "BYTES_PER_ELEMENT", o), "BYTES_PER_ELEMENT" in m || f(m, "BYTES_PER_ELEMENT", o), T(s)
                            }) : t.exports = function() {}
                        },
                        3832: function(t, e, n) {
                            var r = n(7854),
                                i = n(7293),
                                o = n(7072),
                                a = n(260).NATIVE_ARRAY_BUFFER_VIEWS,
                                s = r.ArrayBuffer,
                                u = r.Int8Array;
                            t.exports = !a || !i((function() { u(1) })) || !i((function() { new u(-1) })) || !o((function(t) { new u, new u(null), new u(1.5), new u(t) }), !0) || i((function() { return 1 !== new u(new s(2), 1, void 0).length }))
                        },
                        3074: function(t, e, n) {
                            var r = n(260).aTypedArrayConstructor,
                                i = n(6707);
                            t.exports = function(t, e) { for (var n = i(t, t.constructor), o = 0, a = e.length, s = new(r(n))(a); a > o;) s[o] = e[o++]; return s }
                        },
                        7321: function(t, e, n) {
                            var r = n(7908),
                                i = n(7466),
                                o = n(1246),
                                a = n(7659),
                                s = n(9974),
                                u = n(260).aTypedArrayConstructor;
                            t.exports = function(t) {
                                var e, n, l, c, f, h, d = r(t),
                                    p = arguments.length,
                                    v = p > 1 ? arguments[1] : void 0,
                                    g = void 0 !== v,
                                    m = o(d);
                                if (null != m && !a(m))
                                    for (h = (f = m.call(d)).next, d = []; !(c = h.call(f)).done;) d.push(c.value);
                                for (g && p > 2 && (v = s(v, arguments[2], 2)), n = i(d.length), l = new(u(this))(n), e = 0; n > e; e++) l[e] = g ? v(d[e], e) : d[e];
                                return l
                            }
                        },
                        9711: function(t) {
                            var e = 0,
                                n = Math.random();
                            t.exports = function(t) { return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++e + n).toString(36) }
                        },
                        3307: function(t, e, n) {
                            var r = n(133);
                            t.exports = r && !Symbol.sham && "symbol" == typeof Symbol.iterator
                        },
                        5112: function(t, e, n) {
                            var r = n(7854),
                                i = n(2309),
                                o = n(6656),
                                a = n(9711),
                                s = n(133),
                                u = n(3307),
                                l = i("wks"),
                                c = r.Symbol,
                                f = u ? c : c && c.withoutSetter || a;
                            t.exports = function(t) { return o(l, t) || (s && o(c, t) ? l[t] = c[t] : l[t] = f("Symbol." + t)), l[t] }
                        },
                        1361: function(t) { t.exports = "\t\n\v\f\r                　\u2028\u2029\ufeff" },
                        8264: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(7854),
                                o = n(3331),
                                a = n(6340),
                                s = o.ArrayBuffer;
                            r({ global: !0, forced: i.ArrayBuffer !== s }, { ArrayBuffer: s }), a("ArrayBuffer")
                        },
                        2222: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(7293),
                                o = n(3157),
                                a = n(111),
                                s = n(7908),
                                u = n(7466),
                                l = n(6135),
                                c = n(5417),
                                f = n(1194),
                                h = n(5112),
                                d = n(7392),
                                p = h("isConcatSpreadable"),
                                v = d >= 51 || !i((function() { var t = []; return t[p] = !1, t.concat()[0] !== t })),
                                g = f("concat"),
                                m = function(t) { if (!a(t)) return !1; var e = t[p]; return void 0 !== e ? !!e : o(t) };
                            r({ target: "Array", proto: !0, forced: !v || !g }, {
                                concat: function(t) {
                                    var e, n, r, i, o, a = s(this),
                                        f = c(a, 0),
                                        h = 0;
                                    for (e = -1, r = arguments.length; e < r; e++)
                                        if (m(o = -1 === e ? a : arguments[e])) { if (h + (i = u(o.length)) > 9007199254740991) throw TypeError("Maximum allowed index exceeded"); for (n = 0; n < i; n++, h++) n in o && l(f, h, o[n]) } else {
                                            if (h >= 9007199254740991) throw TypeError("Maximum allowed index exceeded");
                                            l(f, h++, o)
                                        }
                                    return f.length = h, f
                                }
                            })
                        },
                        7327: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(2092).filter;
                            r({ target: "Array", proto: !0, forced: !n(1194)("filter") }, { filter: function(t) { return i(this, t, arguments.length > 1 ? arguments[1] : void 0) } })
                        },
                        2772: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(1318).indexOf,
                                o = n(9341),
                                a = [].indexOf,
                                s = !!a && 1 / [1].indexOf(1, -0) < 0,
                                u = o("indexOf");
                            r({ target: "Array", proto: !0, forced: s || !u }, { indexOf: function(t) { return s ? a.apply(this, arguments) || 0 : i(this, t, arguments.length > 1 ? arguments[1] : void 0) } })
                        },
                        6992: function(t, e, n) {
                            "use strict";
                            var r = n(5656),
                                i = n(1223),
                                o = n(7497),
                                a = n(9909),
                                s = n(654),
                                u = a.set,
                                l = a.getterFor("Array Iterator");
                            t.exports = s(Array, "Array", (function(t, e) { u(this, { type: "Array Iterator", target: r(t), index: 0, kind: e }) }), (function() {
                                var t = l(this),
                                    e = t.target,
                                    n = t.kind,
                                    r = t.index++;
                                return !e || r >= e.length ? (t.target = void 0, { value: void 0, done: !0 }) : "keys" == n ? { value: r, done: !1 } : "values" == n ? { value: e[r], done: !1 } : { value: [r, e[r]], done: !1 }
                            }), "values"), o.Arguments = o.Array, i("keys"), i("values"), i("entries")
                        },
                        1249: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(2092).map;
                            r({ target: "Array", proto: !0, forced: !n(1194)("map") }, { map: function(t) { return i(this, t, arguments.length > 1 ? arguments[1] : void 0) } })
                        },
                        7042: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(111),
                                o = n(3157),
                                a = n(1400),
                                s = n(7466),
                                u = n(5656),
                                l = n(6135),
                                c = n(5112),
                                f = n(1194)("slice"),
                                h = c("species"),
                                d = [].slice,
                                p = Math.max;
                            r({ target: "Array", proto: !0, forced: !f }, {
                                slice: function(t, e) {
                                    var n, r, c, f = u(this),
                                        v = s(f.length),
                                        g = a(t, v),
                                        m = a(void 0 === e ? v : e, v);
                                    if (o(f) && ("function" != typeof(n = f.constructor) || n !== Array && !o(n.prototype) ? i(n) && null === (n = n[h]) && (n = void 0) : n = void 0, n === Array || void 0 === n)) return d.call(f, g, m);
                                    for (r = new(void 0 === n ? Array : n)(p(m - g, 0)), c = 0; g < m; g++, c++) g in f && l(r, c, f[g]);
                                    return r.length = c, r
                                }
                            })
                        },
                        561: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(1400),
                                o = n(9958),
                                a = n(7466),
                                s = n(7908),
                                u = n(5417),
                                l = n(6135),
                                c = n(1194)("splice"),
                                f = Math.max,
                                h = Math.min;
                            r({ target: "Array", proto: !0, forced: !c }, {
                                splice: function(t, e) {
                                    var n, r, c, d, p, v, g = s(this),
                                        m = a(g.length),
                                        y = i(t, m),
                                        b = arguments.length;
                                    if (0 === b ? n = r = 0 : 1 === b ? (n = 0, r = m - y) : (n = b - 2, r = h(f(o(e), 0), m - y)), m + n - r > 9007199254740991) throw TypeError("Maximum allowed length exceeded");
                                    for (c = u(g, r), d = 0; d < r; d++)(p = y + d) in g && l(c, d, g[p]);
                                    if (c.length = r, n < r) { for (d = y; d < m - r; d++) v = d + n, (p = d + r) in g ? g[v] = g[p] : delete g[v]; for (d = m; d > m - r + n; d--) delete g[d - 1] } else if (n > r)
                                        for (d = m - r; d > y; d--) v = d + n - 1, (p = d + r - 1) in g ? g[v] = g[p] : delete g[v];
                                    for (d = 0; d < n; d++) g[d + y] = arguments[d + 2];
                                    return g.length = m - r + n, c
                                }
                            })
                        },
                        8309: function(t, e, n) {
                            var r = n(9781),
                                i = n(3070).f,
                                o = Function.prototype,
                                a = o.toString,
                                s = /^\s*function ([^ (]*)/;
                            r && !("name" in o) && i(o, "name", { configurable: !0, get: function() { try { return a.call(this).match(s)[1] } catch (t) { return "" } } })
                        },
                        489: function(t, e, n) {
                            var r = n(2109),
                                i = n(7293),
                                o = n(7908),
                                a = n(9518),
                                s = n(8544);
                            r({ target: "Object", stat: !0, forced: i((function() { a(1) })), sham: !s }, { getPrototypeOf: function(t) { return a(o(t)) } })
                        },
                        1539: function(t, e, n) {
                            var r = n(1694),
                                i = n(1320),
                                o = n(288);
                            r || i(Object.prototype, "toString", o, { unsafe: !0 })
                        },
                        4916: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(2261);
                            r({ target: "RegExp", proto: !0, forced: /./.exec !== i }, { exec: i })
                        },
                        9714: function(t, e, n) {
                            "use strict";
                            var r = n(1320),
                                i = n(9670),
                                o = n(7293),
                                a = n(7066),
                                s = RegExp.prototype,
                                u = s.toString,
                                l = o((function() { return "/a/b" != u.call({ source: "a", flags: "b" }) })),
                                c = "toString" != u.name;
                            (l || c) && r(RegExp.prototype, "toString", (function() {
                                var t = i(this),
                                    e = String(t.source),
                                    n = t.flags;
                                return "/" + e + "/" + String(void 0 === n && t instanceof RegExp && !("flags" in s) ? a.call(t) : n)
                            }), { unsafe: !0 })
                        },
                        8783: function(t, e, n) {
                            "use strict";
                            var r = n(8710).charAt,
                                i = n(9909),
                                o = n(654),
                                a = i.set,
                                s = i.getterFor("String Iterator");
                            o(String, "String", (function(t) { a(this, { type: "String Iterator", string: String(t), index: 0 }) }), (function() {
                                var t, e = s(this),
                                    n = e.string,
                                    i = e.index;
                                return i >= n.length ? { value: void 0, done: !0 } : (t = r(n, i), e.index += t.length, { value: t, done: !1 })
                            }))
                        },
                        4723: function(t, e, n) {
                            "use strict";
                            var r = n(7007),
                                i = n(9670),
                                o = n(7466),
                                a = n(4488),
                                s = n(1530),
                                u = n(7651);
                            r("match", 1, (function(t, e, n) {
                                return [function(e) {
                                    var n = a(this),
                                        r = null == e ? void 0 : e[t];
                                    return void 0 !== r ? r.call(e, n) : new RegExp(e)[t](String(n))
                                }, function(t) {
                                    var r = n(e, t, this);
                                    if (r.done) return r.value;
                                    var a = i(t),
                                        l = String(this);
                                    if (!a.global) return u(a, l);
                                    var c = a.unicode;
                                    a.lastIndex = 0;
                                    for (var f, h = [], d = 0; null !== (f = u(a, l));) {
                                        var p = String(f[0]);
                                        h[d] = p, "" === p && (a.lastIndex = s(l, o(a.lastIndex), c)), d++
                                    }
                                    return 0 === d ? null : h
                                }]
                            }))
                        },
                        5306: function(t, e, n) {
                            "use strict";
                            var r = n(7007),
                                i = n(9670),
                                o = n(7466),
                                a = n(9958),
                                s = n(4488),
                                u = n(1530),
                                l = n(647),
                                c = n(7651),
                                f = Math.max,
                                h = Math.min;
                            r("replace", 2, (function(t, e, n, r) {
                                var d = r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,
                                    p = r.REPLACE_KEEPS_$0,
                                    v = d ? "$" : "$0";
                                return [function(n, r) {
                                    var i = s(this),
                                        o = null == n ? void 0 : n[t];
                                    return void 0 !== o ? o.call(n, i, r) : e.call(String(i), n, r)
                                }, function(t, r) {
                                    if (!d && p || "string" == typeof r && -1 === r.indexOf(v)) { var s = n(e, t, this, r); if (s.done) return s.value }
                                    var g = i(t),
                                        m = String(this),
                                        y = "function" == typeof r;
                                    y || (r = String(r));
                                    var b = g.global;
                                    if (b) {
                                        var _ = g.unicode;
                                        g.lastIndex = 0
                                    }
                                    for (var w = [];;) { var x = c(g, m); if (null === x) break; if (w.push(x), !b) break; "" === String(x[0]) && (g.lastIndex = u(m, o(g.lastIndex), _)) }
                                    for (var E, T = "", C = 0, S = 0; S < w.length; S++) {
                                        x = w[S];
                                        for (var k = String(x[0]), A = f(h(a(x.index), m.length), 0), I = [], O = 1; O < x.length; O++) I.push(void 0 === (E = x[O]) ? E : String(E));
                                        var N = x.groups;
                                        if (y) {
                                            var D = [k].concat(I, A, m);
                                            void 0 !== N && D.push(N);
                                            var L = String(r.apply(void 0, D))
                                        } else L = l(k, m, A, I, N, r);
                                        A >= C && (T += m.slice(C, A) + L, C = A + k.length)
                                    }
                                    return T + m.slice(C)
                                }]
                            }))
                        },
                        3123: function(t, e, n) {
                            "use strict";
                            var r = n(7007),
                                i = n(7850),
                                o = n(9670),
                                a = n(4488),
                                s = n(6707),
                                u = n(1530),
                                l = n(7466),
                                c = n(7651),
                                f = n(2261),
                                h = n(7293),
                                d = [].push,
                                p = Math.min,
                                v = !h((function() { return !RegExp(4294967295, "y") }));
                            r("split", 2, (function(t, e, n) {
                                var r;
                                return r = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function(t, n) {
                                    var r = String(a(this)),
                                        o = void 0 === n ? 4294967295 : n >>> 0;
                                    if (0 === o) return [];
                                    if (void 0 === t) return [r];
                                    if (!i(t)) return e.call(r, t, o);
                                    for (var s, u, l, c = [], h = (t.ignoreCase ? "i" : "") + (t.multiline ? "m" : "") + (t.unicode ? "u" : "") + (t.sticky ? "y" : ""), p = 0, v = new RegExp(t.source, h + "g");
                                        (s = f.call(v, r)) && !((u = v.lastIndex) > p && (c.push(r.slice(p, s.index)), s.length > 1 && s.index < r.length && d.apply(c, s.slice(1)), l = s[0].length, p = u, c.length >= o));) v.lastIndex === s.index && v.lastIndex++;
                                    return p === r.length ? !l && v.test("") || c.push("") : c.push(r.slice(p)), c.length > o ? c.slice(0, o) : c
                                } : "0".split(void 0, 0).length ? function(t, n) { return void 0 === t && 0 === n ? [] : e.call(this, t, n) } : e, [function(e, n) {
                                    var i = a(this),
                                        o = null == e ? void 0 : e[t];
                                    return void 0 !== o ? o.call(e, i, n) : r.call(String(i), e, n)
                                }, function(t, i) {
                                    var a = n(r, t, this, i, r !== e);
                                    if (a.done) return a.value;
                                    var f = o(t),
                                        h = String(this),
                                        d = s(f, RegExp),
                                        g = f.unicode,
                                        m = (f.ignoreCase ? "i" : "") + (f.multiline ? "m" : "") + (f.unicode ? "u" : "") + (v ? "y" : "g"),
                                        y = new d(v ? f : "^(?:" + f.source + ")", m),
                                        b = void 0 === i ? 4294967295 : i >>> 0;
                                    if (0 === b) return [];
                                    if (0 === h.length) return null === c(y, h) ? [h] : [];
                                    for (var _ = 0, w = 0, x = []; w < h.length;) {
                                        y.lastIndex = v ? w : 0;
                                        var E, T = c(y, v ? h : h.slice(w));
                                        if (null === T || (E = p(l(y.lastIndex + (v ? 0 : w)), h.length)) === _) w = u(h, w, g);
                                        else {
                                            if (x.push(h.slice(_, w)), x.length === b) return x;
                                            for (var C = 1; C <= T.length - 1; C++)
                                                if (x.push(T[C]), x.length === b) return x;
                                            w = _ = E
                                        }
                                    }
                                    return x.push(h.slice(_)), x
                                }]
                            }), !v)
                        },
                        3210: function(t, e, n) {
                            "use strict";
                            var r = n(2109),
                                i = n(3111).trim;
                            r({ target: "String", proto: !0, forced: n(6091)("trim") }, { trim: function() { return i(this) } })
                        },
                        2990: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(1048),
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("copyWithin", (function(t, e) { return i.call(o(this), t, e, arguments.length > 2 ? arguments[2] : void 0) }))
                        },
                        8927: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).every,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("every", (function(t) { return i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        3105: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(1285),
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("fill", (function(t) { return i.apply(o(this), arguments) }))
                        },
                        5035: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).filter,
                                o = n(3074),
                                a = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("filter", (function(t) { var e = i(a(this), t, arguments.length > 1 ? arguments[1] : void 0); return o(this, e) }))
                        },
                        7174: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).findIndex,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("findIndex", (function(t) { return i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        4345: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).find,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("find", (function(t) { return i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        2846: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).forEach,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("forEach", (function(t) { i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        4731: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(1318).includes,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("includes", (function(t) { return i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        7209: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(1318).indexOf,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("indexOf", (function(t) { return i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        6319: function(t, e, n) {
                            "use strict";
                            var r = n(7854),
                                i = n(260),
                                o = n(6992),
                                a = n(5112)("iterator"),
                                s = r.Uint8Array,
                                u = o.values,
                                l = o.keys,
                                c = o.entries,
                                f = i.aTypedArray,
                                h = i.exportTypedArrayMethod,
                                d = s && s.prototype[a],
                                p = !!d && ("values" == d.name || null == d.name),
                                v = function() { return u.call(f(this)) };
                            h("entries", (function() { return c.call(f(this)) })), h("keys", (function() { return l.call(f(this)) })), h("values", v, !p), h(a, v, !p)
                        },
                        8867: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = r.aTypedArray,
                                o = r.exportTypedArrayMethod,
                                a = [].join;
                            o("join", (function(t) { return a.apply(i(this), arguments) }))
                        },
                        7789: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(6583),
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("lastIndexOf", (function(t) { return i.apply(o(this), arguments) }))
                        },
                        3739: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).map,
                                o = n(6707),
                                a = r.aTypedArray,
                                s = r.aTypedArrayConstructor;
                            (0, r.exportTypedArrayMethod)("map", (function(t) { return i(a(this), t, arguments.length > 1 ? arguments[1] : void 0, (function(t, e) { return new(s(o(t, t.constructor)))(e) })) }))
                        },
                        4483: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(3671).right,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("reduceRight", (function(t) { return i(o(this), t, arguments.length, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        9368: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(3671).left,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("reduce", (function(t) { return i(o(this), t, arguments.length, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        2056: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = r.aTypedArray,
                                o = r.exportTypedArrayMethod,
                                a = Math.floor;
                            o("reverse", (function() { for (var t, e = i(this).length, n = a(e / 2), r = 0; r < n;) t = this[r], this[r++] = this[--e], this[e] = t; return this }))
                        },
                        3462: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(7466),
                                o = n(4590),
                                a = n(7908),
                                s = n(7293),
                                u = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("set", (function(t) {
                                u(this);
                                var e = o(arguments.length > 1 ? arguments[1] : void 0, 1),
                                    n = this.length,
                                    r = a(t),
                                    s = i(r.length),
                                    l = 0;
                                if (s + e > n) throw RangeError("Wrong length");
                                for (; l < s;) this[e + l] = r[l++]
                            }), s((function() { new Int8Array(1).set({}) })))
                        },
                        678: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(6707),
                                o = n(7293),
                                a = r.aTypedArray,
                                s = r.aTypedArrayConstructor,
                                u = r.exportTypedArrayMethod,
                                l = [].slice;
                            u("slice", (function(t, e) { for (var n = l.call(a(this), t, e), r = i(this, this.constructor), o = 0, u = n.length, c = new(s(r))(u); u > o;) c[o] = n[o++]; return c }), o((function() { new Int8Array(1).slice() })))
                        },
                        7462: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(2092).some,
                                o = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("some", (function(t) { return i(o(this), t, arguments.length > 1 ? arguments[1] : void 0) }))
                        },
                        3824: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = r.aTypedArray,
                                o = r.exportTypedArrayMethod,
                                a = [].sort;
                            o("sort", (function(t) { return a.call(i(this), t) }))
                        },
                        5021: function(t, e, n) {
                            "use strict";
                            var r = n(260),
                                i = n(7466),
                                o = n(1400),
                                a = n(6707),
                                s = r.aTypedArray;
                            (0, r.exportTypedArrayMethod)("subarray", (function(t, e) {
                                var n = s(this),
                                    r = n.length,
                                    u = o(t, r);
                                return new(a(n, n.constructor))(n.buffer, n.byteOffset + u * n.BYTES_PER_ELEMENT, i((void 0 === e ? r : o(e, r)) - u))
                            }))
                        },
                        2974: function(t, e, n) {
                            "use strict";
                            var r = n(7854),
                                i = n(260),
                                o = n(7293),
                                a = r.Int8Array,
                                s = i.aTypedArray,
                                u = i.exportTypedArrayMethod,
                                l = [].toLocaleString,
                                c = [].slice,
                                f = !!a && o((function() { l.call(new a(1)) }));
                            u("toLocaleString", (function() { return l.apply(f ? c.call(s(this)) : s(this), arguments) }), o((function() { return [1, 2].toLocaleString() != new a([1, 2]).toLocaleString() })) || !o((function() { a.prototype.toLocaleString.call([1, 2]) })))
                        },
                        5016: function(t, e, n) {
                            "use strict";
                            var r = n(260).exportTypedArrayMethod,
                                i = n(7293),
                                o = n(7854).Uint8Array,
                                a = o && o.prototype || {},
                                s = [].toString,
                                u = [].join;
                            i((function() { s.call({}) })) && (s = function() { return u.call(this) });
                            var l = a.toString != s;
                            r("toString", s, l)
                        },
                        2472: function(t, e, n) { n(9843)("Uint8", (function(t) { return function(e, n, r) { return t(this, e, n, r) } })) },
                        4747: function(t, e, n) {
                            var r = n(7854),
                                i = n(8324),
                                o = n(8533),
                                a = n(8880);
                            for (var s in i) {
                                var u = r[s],
                                    l = u && u.prototype;
                                if (l && l.forEach !== o) try { a(l, "forEach", o) } catch (t) { l.forEach = o }
                            }
                        },
                        3948: function(t, e, n) {
                            var r = n(7854),
                                i = n(8324),
                                o = n(6992),
                                a = n(8880),
                                s = n(5112),
                                u = s("iterator"),
                                l = s("toStringTag"),
                                c = o.values;
                            for (var f in i) {
                                var h = r[f],
                                    d = h && h.prototype;
                                if (d) {
                                    if (d[u] !== c) try { a(d, u, c) } catch (t) { d[u] = c }
                                    if (d[l] || a(d, l, f), i[f])
                                        for (var p in o)
                                            if (d[p] !== o[p]) try { a(d, p, o[p]) } catch (t) { d[p] = o[p] }
                                }
                            }
                        },
                        1637: function(t, e, n) {
                            "use strict";
                            n(6992);
                            var r = n(2109),
                                i = n(5005),
                                o = n(590),
                                a = n(1320),
                                s = n(2248),
                                u = n(8003),
                                l = n(4994),
                                c = n(9909),
                                f = n(5787),
                                h = n(6656),
                                d = n(9974),
                                p = n(648),
                                v = n(9670),
                                g = n(111),
                                m = n(30),
                                y = n(9114),
                                b = n(8554),
                                _ = n(1246),
                                w = n(5112),
                                x = i("fetch"),
                                E = i("Headers"),
                                T = w("iterator"),
                                C = c.set,
                                S = c.getterFor("URLSearchParams"),
                                k = c.getterFor("URLSearchParamsIterator"),
                                A = /\+/g,
                                I = Array(4),
                                O = function(t) { return I[t - 1] || (I[t - 1] = RegExp("((?:%[\\da-f]{2}){" + t + "})", "gi")) },
                                N = function(t) { try { return decodeURIComponent(t) } catch (e) { return t } },
                                D = function(t) {
                                    var e = t.replace(A, " "),
                                        n = 4;
                                    try { return decodeURIComponent(e) } catch (t) { for (; n;) e = e.replace(O(n--), N); return e }
                                },
                                L = /[!'()~]|%20/g,
                                j = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+" },
                                P = function(t) { return j[t] },
                                R = function(t) { return encodeURIComponent(t).replace(L, P) },
                                F = function(t, e) {
                                    if (e)
                                        for (var n, r, i = e.split("&"), o = 0; o < i.length;)(n = i[o++]).length && (r = n.split("="), t.push({ key: D(r.shift()), value: D(r.join("=")) }))
                                },
                                M = function(t) { this.entries.length = 0, F(this.entries, t) },
                                U = function(t, e) { if (t < e) throw TypeError("Not enough arguments") },
                                q = l((function(t, e) { C(this, { type: "URLSearchParamsIterator", iterator: b(S(t).entries), kind: e }) }), "Iterator", (function() {
                                    var t = k(this),
                                        e = t.kind,
                                        n = t.iterator.next(),
                                        r = n.value;
                                    return n.done || (n.value = "keys" === e ? r.key : "values" === e ? r.value : [r.key, r.value]), n
                                })),
                                B = function() {
                                    f(this, B, "URLSearchParams");
                                    var t, e, n, r, i, o, a, s, u, l = arguments.length > 0 ? arguments[0] : void 0,
                                        c = this,
                                        d = [];
                                    if (C(c, { type: "URLSearchParams", entries: d, updateURL: function() {}, updateSearchParams: M }), void 0 !== l)
                                        if (g(l))
                                            if ("function" == typeof(t = _(l)))
                                                for (n = (e = t.call(l)).next; !(r = n.call(e)).done;) {
                                                    if ((a = (o = (i = b(v(r.value))).next).call(i)).done || (s = o.call(i)).done || !o.call(i).done) throw TypeError("Expected sequence with length 2");
                                                    d.push({ key: a.value + "", value: s.value + "" })
                                                } else
                                                    for (u in l) h(l, u) && d.push({ key: u, value: l[u] + "" });
                                            else F(d, "string" == typeof l ? "?" === l.charAt(0) ? l.slice(1) : l : l + "")
                                },
                                H = B.prototype;
                            s(H, {
                                append: function(t, e) {
                                    U(arguments.length, 2);
                                    var n = S(this);
                                    n.entries.push({ key: t + "", value: e + "" }), n.updateURL()
                                },
                                delete: function(t) {
                                    U(arguments.length, 1);
                                    for (var e = S(this), n = e.entries, r = t + "", i = 0; i < n.length;) n[i].key === r ? n.splice(i, 1) : i++;
                                    e.updateURL()
                                },
                                get: function(t) {
                                    U(arguments.length, 1);
                                    for (var e = S(this).entries, n = t + "", r = 0; r < e.length; r++)
                                        if (e[r].key === n) return e[r].value;
                                    return null
                                },
                                getAll: function(t) { U(arguments.length, 1); for (var e = S(this).entries, n = t + "", r = [], i = 0; i < e.length; i++) e[i].key === n && r.push(e[i].value); return r },
                                has: function(t) {
                                    U(arguments.length, 1);
                                    for (var e = S(this).entries, n = t + "", r = 0; r < e.length;)
                                        if (e[r++].key === n) return !0;
                                    return !1
                                },
                                set: function(t, e) {
                                    U(arguments.length, 1);
                                    for (var n, r = S(this), i = r.entries, o = !1, a = t + "", s = e + "", u = 0; u < i.length; u++)(n = i[u]).key === a && (o ? i.splice(u--, 1) : (o = !0, n.value = s));
                                    o || i.push({ key: a, value: s }), r.updateURL()
                                },
                                sort: function() {
                                    var t, e, n, r = S(this),
                                        i = r.entries,
                                        o = i.slice();
                                    for (i.length = 0, n = 0; n < o.length; n++) {
                                        for (t = o[n], e = 0; e < n; e++)
                                            if (i[e].key > t.key) { i.splice(e, 0, t); break }
                                        e === n && i.push(t)
                                    }
                                    r.updateURL()
                                },
                                forEach: function(t) { for (var e, n = S(this).entries, r = d(t, arguments.length > 1 ? arguments[1] : void 0, 3), i = 0; i < n.length;) r((e = n[i++]).value, e.key, this) },
                                keys: function() { return new q(this, "keys") },
                                values: function() { return new q(this, "values") },
                                entries: function() { return new q(this, "entries") }
                            }, { enumerable: !0 }), a(H, T, H.entries), a(H, "toString", (function() { for (var t, e = S(this).entries, n = [], r = 0; r < e.length;) t = e[r++], n.push(R(t.key) + "=" + R(t.value)); return n.join("&") }), { enumerable: !0 }), u(B, "URLSearchParams"), r({ global: !0, forced: !o }, { URLSearchParams: B }), o || "function" != typeof x || "function" != typeof E || r({ global: !0, enumerable: !0, forced: !0 }, { fetch: function(t) { var e, n, r, i = [t]; return arguments.length > 1 && (g(e = arguments[1]) && (n = e.body, "URLSearchParams" === p(n) && ((r = e.headers ? new E(e.headers) : new E).has("content-type") || r.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"), e = m(e, { body: y(0, String(n)), headers: y(0, r) }))), i.push(e)), x.apply(this, i) } }), t.exports = { URLSearchParams: B, getState: S }
                        },
                        285: function(t, e, n) {
                            "use strict";
                            n(8783);
                            var r, i = n(2109),
                                o = n(9781),
                                a = n(590),
                                s = n(7854),
                                u = n(6048),
                                l = n(1320),
                                c = n(5787),
                                f = n(6656),
                                h = n(1574),
                                d = n(8457),
                                p = n(8710).codeAt,
                                v = n(3197),
                                g = n(8003),
                                m = n(1637),
                                y = n(9909),
                                b = s.URL,
                                _ = m.URLSearchParams,
                                w = m.getState,
                                x = y.set,
                                E = y.getterFor("URL"),
                                T = Math.floor,
                                C = Math.pow,
                                S = /[A-Za-z]/,
                                k = /[\d+-.A-Za-z]/,
                                A = /\d/,
                                I = /^(0x|0X)/,
                                O = /^[0-7]+$/,
                                N = /^\d+$/,
                                D = /^[\dA-Fa-f]+$/,
                                L = /[\u0000\t\u000A\u000D #%/:?@[\\]]/,
                                j = /[\u0000\t\u000A\u000D #/:?@[\\]]/,
                                P = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,
                                R = /[\t\u000A\u000D]/g,
                                F = function(t, e) {
                                    var n, r, i;
                                    if ("[" == e.charAt(0)) {
                                        if ("]" != e.charAt(e.length - 1)) return "Invalid host";
                                        if (!(n = U(e.slice(1, -1)))) return "Invalid host";
                                        t.host = n
                                    } else if (V(t)) {
                                        if (e = v(e), L.test(e)) return "Invalid host";
                                        if (null === (n = M(e))) return "Invalid host";
                                        t.host = n
                                    } else {
                                        if (j.test(e)) return "Invalid host";
                                        for (n = "", r = d(e), i = 0; i < r.length; i++) n += Q(r[i], B);
                                        t.host = n
                                    }
                                },
                                M = function(t) {
                                    var e, n, r, i, o, a, s, u = t.split(".");
                                    if (u.length && "" == u[u.length - 1] && u.pop(), (e = u.length) > 4) return t;
                                    for (n = [], r = 0; r < e; r++) {
                                        if ("" == (i = u[r])) return t;
                                        if (o = 10, i.length > 1 && "0" == i.charAt(0) && (o = I.test(i) ? 16 : 8, i = i.slice(8 == o ? 1 : 2)), "" === i) a = 0;
                                        else {
                                            if (!(10 == o ? N : 8 == o ? O : D).test(i)) return t;
                                            a = parseInt(i, o)
                                        }
                                        n.push(a)
                                    }
                                    for (r = 0; r < e; r++)
                                        if (a = n[r], r == e - 1) { if (a >= C(256, 5 - e)) return null } else if (a > 255) return null;
                                    for (s = n.pop(), r = 0; r < n.length; r++) s += n[r] * C(256, 3 - r);
                                    return s
                                },
                                U = function(t) {
                                    var e, n, r, i, o, a, s, u = [0, 0, 0, 0, 0, 0, 0, 0],
                                        l = 0,
                                        c = null,
                                        f = 0,
                                        h = function() { return t.charAt(f) };
                                    if (":" == h()) {
                                        if (":" != t.charAt(1)) return;
                                        f += 2, c = ++l
                                    }
                                    for (; h();) {
                                        if (8 == l) return;
                                        if (":" != h()) {
                                            for (e = n = 0; n < 4 && D.test(h());) e = 16 * e + parseInt(h(), 16), f++, n++;
                                            if ("." == h()) {
                                                if (0 == n) return;
                                                if (f -= n, l > 6) return;
                                                for (r = 0; h();) {
                                                    if (i = null, r > 0) {
                                                        if (!("." == h() && r < 4)) return;
                                                        f++
                                                    }
                                                    if (!A.test(h())) return;
                                                    for (; A.test(h());) {
                                                        if (o = parseInt(h(), 10), null === i) i = o;
                                                        else {
                                                            if (0 == i) return;
                                                            i = 10 * i + o
                                                        }
                                                        if (i > 255) return;
                                                        f++
                                                    }
                                                    u[l] = 256 * u[l] + i, 2 != ++r && 4 != r || l++
                                                }
                                                if (4 != r) return;
                                                break
                                            }
                                            if (":" == h()) { if (f++, !h()) return } else if (h()) return;
                                            u[l++] = e
                                        } else {
                                            if (null !== c) return;
                                            f++, c = ++l
                                        }
                                    }
                                    if (null !== c)
                                        for (a = l - c, l = 7; 0 != l && a > 0;) s = u[l], u[l--] = u[c + a - 1], u[c + --a] = s;
                                    else if (8 != l) return;
                                    return u
                                },
                                q = function(t) { var e, n, r, i; if ("number" == typeof t) { for (e = [], n = 0; n < 4; n++) e.unshift(t % 256), t = T(t / 256); return e.join(".") } if ("object" == typeof t) { for (e = "", r = function(t) { for (var e = null, n = 1, r = null, i = 0, o = 0; o < 8; o++) 0 !== t[o] ? (i > n && (e = r, n = i), r = null, i = 0) : (null === r && (r = o), ++i); return i > n && (e = r, n = i), e }(t), n = 0; n < 8; n++) i && 0 === t[n] || (i && (i = !1), r === n ? (e += n ? ":" : "::", i = !0) : (e += t[n].toString(16), n < 7 && (e += ":"))); return "[" + e + "]" } return t },
                                B = {},
                                H = h({}, B, { " ": 1, '"': 1, "<": 1, ">": 1, "`": 1 }),
                                z = h({}, H, { "#": 1, "?": 1, "{": 1, "}": 1 }),
                                W = h({}, z, { "/": 1, ":": 1, ";": 1, "=": 1, "@": 1, "[": 1, "\\": 1, "]": 1, "^": 1, "|": 1 }),
                                Q = function(t, e) { var n = p(t, 0); return n > 32 && n < 127 && !f(e, t) ? t : encodeURIComponent(t) },
                                $ = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 },
                                V = function(t) { return f($, t.scheme) },
                                Y = function(t) { return "" != t.username || "" != t.password },
                                X = function(t) { return !t.host || t.cannotBeABaseURL || "file" == t.scheme },
                                G = function(t, e) { var n; return 2 == t.length && S.test(t.charAt(0)) && (":" == (n = t.charAt(1)) || !e && "|" == n) },
                                K = function(t) { var e; return t.length > 1 && G(t.slice(0, 2)) && (2 == t.length || "/" === (e = t.charAt(2)) || "\\" === e || "?" === e || "#" === e) },
                                J = function(t) {
                                    var e = t.path,
                                        n = e.length;
                                    !n || "file" == t.scheme && 1 == n && G(e[0], !0) || e.pop()
                                },
                                Z = function(t) { return "." === t || "%2e" === t.toLowerCase() },
                                tt = {},
                                et = {},
                                nt = {},
                                rt = {},
                                it = {},
                                ot = {},
                                at = {},
                                st = {},
                                ut = {},
                                lt = {},
                                ct = {},
                                ft = {},
                                ht = {},
                                dt = {},
                                pt = {},
                                vt = {},
                                gt = {},
                                mt = {},
                                yt = {},
                                bt = {},
                                _t = {},
                                wt = function(t, e, n, i) {
                                    var o, a, s, u, l, c = n || tt,
                                        h = 0,
                                        p = "",
                                        v = !1,
                                        g = !1,
                                        m = !1;
                                    for (n || (t.scheme = "", t.username = "", t.password = "", t.host = null, t.port = null, t.path = [], t.query = null, t.fragment = null, t.cannotBeABaseURL = !1, e = e.replace(P, "")), e = e.replace(R, ""), o = d(e); h <= o.length;) {
                                        switch (a = o[h], c) {
                                            case tt:
                                                if (!a || !S.test(a)) {
                                                    if (n) return "Invalid scheme";
                                                    c = nt;
                                                    continue
                                                }
                                                p += a.toLowerCase(), c = et;
                                                break;
                                            case et:
                                                if (a && (k.test(a) || "+" == a || "-" == a || "." == a)) p += a.toLowerCase();
                                                else {
                                                    if (":" != a) {
                                                        if (n) return "Invalid scheme";
                                                        p = "", c = nt, h = 0;
                                                        continue
                                                    }
                                                    if (n && (V(t) != f($, p) || "file" == p && (Y(t) || null !== t.port) || "file" == t.scheme && !t.host)) return;
                                                    if (t.scheme = p, n) return void(V(t) && $[t.scheme] == t.port && (t.port = null));
                                                    p = "", "file" == t.scheme ? c = dt : V(t) && i && i.scheme == t.scheme ? c = rt : V(t) ? c = st : "/" == o[h + 1] ? (c = it, h++) : (t.cannotBeABaseURL = !0, t.path.push(""), c = yt)
                                                }
                                                break;
                                            case nt:
                                                if (!i || i.cannotBeABaseURL && "#" != a) return "Invalid scheme";
                                                if (i.cannotBeABaseURL && "#" == a) { t.scheme = i.scheme, t.path = i.path.slice(), t.query = i.query, t.fragment = "", t.cannotBeABaseURL = !0, c = _t; break }
                                                c = "file" == i.scheme ? dt : ot;
                                                continue;
                                            case rt:
                                                if ("/" != a || "/" != o[h + 1]) { c = ot; continue }
                                                c = ut, h++;
                                                break;
                                            case it:
                                                if ("/" == a) { c = lt; break }
                                                c = mt;
                                                continue;
                                            case ot:
                                                if (t.scheme = i.scheme, a == r) t.username = i.username, t.password = i.password, t.host = i.host, t.port = i.port, t.path = i.path.slice(), t.query = i.query;
                                                else if ("/" == a || "\\" == a && V(t)) c = at;
                                                else if ("?" == a) t.username = i.username, t.password = i.password, t.host = i.host, t.port = i.port, t.path = i.path.slice(), t.query = "", c = bt;
                                                else {
                                                    if ("#" != a) { t.username = i.username, t.password = i.password, t.host = i.host, t.port = i.port, t.path = i.path.slice(), t.path.pop(), c = mt; continue }
                                                    t.username = i.username, t.password = i.password, t.host = i.host, t.port = i.port, t.path = i.path.slice(), t.query = i.query, t.fragment = "", c = _t
                                                }
                                                break;
                                            case at:
                                                if (!V(t) || "/" != a && "\\" != a) {
                                                    if ("/" != a) { t.username = i.username, t.password = i.password, t.host = i.host, t.port = i.port, c = mt; continue }
                                                    c = lt
                                                } else c = ut;
                                                break;
                                            case st:
                                                if (c = ut, "/" != a || "/" != p.charAt(h + 1)) continue;
                                                h++;
                                                break;
                                            case ut:
                                                if ("/" != a && "\\" != a) { c = lt; continue }
                                                break;
                                            case lt:
                                                if ("@" == a) {
                                                    v && (p = "%40" + p), v = !0, s = d(p);
                                                    for (var y = 0; y < s.length; y++) {
                                                        var b = s[y];
                                                        if (":" != b || m) {
                                                            var _ = Q(b, W);
                                                            m ? t.password += _ : t.username += _
                                                        } else m = !0
                                                    }
                                                    p = ""
                                                } else if (a == r || "/" == a || "?" == a || "#" == a || "\\" == a && V(t)) {
                                                    if (v && "" == p) return "Invalid authority";
                                                    h -= d(p).length + 1, p = "", c = ct
                                                } else p += a;
                                                break;
                                            case ct:
                                            case ft:
                                                if (n && "file" == t.scheme) { c = vt; continue }
                                                if (":" != a || g) { if (a == r || "/" == a || "?" == a || "#" == a || "\\" == a && V(t)) { if (V(t) && "" == p) return "Invalid host"; if (n && "" == p && (Y(t) || null !== t.port)) return; if (u = F(t, p)) return u; if (p = "", c = gt, n) return; continue } "[" == a ? g = !0 : "]" == a && (g = !1), p += a } else { if ("" == p) return "Invalid host"; if (u = F(t, p)) return u; if (p = "", c = ht, n == ft) return }
                                                break;
                                            case ht:
                                                if (!A.test(a)) {
                                                    if (a == r || "/" == a || "?" == a || "#" == a || "\\" == a && V(t) || n) {
                                                        if ("" != p) {
                                                            var w = parseInt(p, 10);
                                                            if (w > 65535) return "Invalid port";
                                                            t.port = V(t) && w === $[t.scheme] ? null : w, p = ""
                                                        }
                                                        if (n) return;
                                                        c = gt;
                                                        continue
                                                    }
                                                    return "Invalid port"
                                                }
                                                p += a;
                                                break;
                                            case dt:
                                                if (t.scheme = "file", "/" == a || "\\" == a) c = pt;
                                                else {
                                                    if (!i || "file" != i.scheme) { c = mt; continue }
                                                    if (a == r) t.host = i.host, t.path = i.path.slice(), t.query = i.query;
                                                    else if ("?" == a) t.host = i.host, t.path = i.path.slice(), t.query = "", c = bt;
                                                    else {
                                                        if ("#" != a) { K(o.slice(h).join("")) || (t.host = i.host, t.path = i.path.slice(), J(t)), c = mt; continue }
                                                        t.host = i.host, t.path = i.path.slice(), t.query = i.query, t.fragment = "", c = _t
                                                    }
                                                }
                                                break;
                                            case pt:
                                                if ("/" == a || "\\" == a) { c = vt; break }
                                                i && "file" == i.scheme && !K(o.slice(h).join("")) && (G(i.path[0], !0) ? t.path.push(i.path[0]) : t.host = i.host), c = mt;
                                                continue;
                                            case vt:
                                                if (a == r || "/" == a || "\\" == a || "?" == a || "#" == a) {
                                                    if (!n && G(p)) c = mt;
                                                    else if ("" == p) {
                                                        if (t.host = "", n) return;
                                                        c = gt
                                                    } else {
                                                        if (u = F(t, p)) return u;
                                                        if ("localhost" == t.host && (t.host = ""), n) return;
                                                        p = "", c = gt
                                                    }
                                                    continue
                                                }
                                                p += a;
                                                break;
                                            case gt:
                                                if (V(t)) { if (c = mt, "/" != a && "\\" != a) continue } else if (n || "?" != a)
                                                    if (n || "#" != a) { if (a != r && (c = mt, "/" != a)) continue } else t.fragment = "", c = _t;
                                                else t.query = "", c = bt;
                                                break;
                                            case mt:
                                                if (a == r || "/" == a || "\\" == a && V(t) || !n && ("?" == a || "#" == a)) {
                                                    if (".." === (l = (l = p).toLowerCase()) || "%2e." === l || ".%2e" === l || "%2e%2e" === l ? (J(t), "/" == a || "\\" == a && V(t) || t.path.push("")) : Z(p) ? "/" == a || "\\" == a && V(t) || t.path.push("") : ("file" == t.scheme && !t.path.length && G(p) && (t.host && (t.host = ""), p = p.charAt(0) + ":"), t.path.push(p)), p = "", "file" == t.scheme && (a == r || "?" == a || "#" == a))
                                                        for (; t.path.length > 1 && "" === t.path[0];) t.path.shift();
                                                    "?" == a ? (t.query = "", c = bt) : "#" == a && (t.fragment = "", c = _t)
                                                } else p += Q(a, z);
                                                break;
                                            case yt:
                                                "?" == a ? (t.query = "", c = bt) : "#" == a ? (t.fragment = "", c = _t) : a != r && (t.path[0] += Q(a, B));
                                                break;
                                            case bt:
                                                n || "#" != a ? a != r && ("'" == a && V(t) ? t.query += "%27" : t.query += "#" == a ? "%23" : Q(a, B)) : (t.fragment = "", c = _t);
                                                break;
                                            case _t:
                                                a != r && (t.fragment += Q(a, H))
                                        }
                                        h++
                                    }
                                },
                                xt = function(t) {
                                    var e, n, r = c(this, xt, "URL"),
                                        i = arguments.length > 1 ? arguments[1] : void 0,
                                        a = String(t),
                                        s = x(r, { type: "URL" });
                                    if (void 0 !== i)
                                        if (i instanceof xt) e = E(i);
                                        else if (n = wt(e = {}, String(i))) throw TypeError(n);
                                    if (n = wt(s, a, null, e)) throw TypeError(n);
                                    var u = s.searchParams = new _,
                                        l = w(u);
                                    l.updateSearchParams(s.query), l.updateURL = function() { s.query = String(u) || null }, o || (r.href = Tt.call(r), r.origin = Ct.call(r), r.protocol = St.call(r), r.username = kt.call(r), r.password = At.call(r), r.host = It.call(r), r.hostname = Ot.call(r), r.port = Nt.call(r), r.pathname = Dt.call(r), r.search = Lt.call(r), r.searchParams = jt.call(r), r.hash = Pt.call(r))
                                },
                                Et = xt.prototype,
                                Tt = function() {
                                    var t = E(this),
                                        e = t.scheme,
                                        n = t.username,
                                        r = t.password,
                                        i = t.host,
                                        o = t.port,
                                        a = t.path,
                                        s = t.query,
                                        u = t.fragment,
                                        l = e + ":";
                                    return null !== i ? (l += "//", Y(t) && (l += n + (r ? ":" + r : "") + "@"), l += q(i), null !== o && (l += ":" + o)) : "file" == e && (l += "//"), l += t.cannotBeABaseURL ? a[0] : a.length ? "/" + a.join("/") : "", null !== s && (l += "?" + s), null !== u && (l += "#" + u), l
                                },
                                Ct = function() {
                                    var t = E(this),
                                        e = t.scheme,
                                        n = t.port;
                                    if ("blob" == e) try { return new URL(e.path[0]).origin } catch (t) { return "null" }
                                    return "file" != e && V(t) ? e + "://" + q(t.host) + (null !== n ? ":" + n : "") : "null"
                                },
                                St = function() { return E(this).scheme + ":" },
                                kt = function() { return E(this).username },
                                At = function() { return E(this).password },
                                It = function() {
                                    var t = E(this),
                                        e = t.host,
                                        n = t.port;
                                    return null === e ? "" : null === n ? q(e) : q(e) + ":" + n
                                },
                                Ot = function() { var t = E(this).host; return null === t ? "" : q(t) },
                                Nt = function() { var t = E(this).port; return null === t ? "" : String(t) },
                                Dt = function() {
                                    var t = E(this),
                                        e = t.path;
                                    return t.cannotBeABaseURL ? e[0] : e.length ? "/" + e.join("/") : ""
                                },
                                Lt = function() { var t = E(this).query; return t ? "?" + t : "" },
                                jt = function() { return E(this).searchParams },
                                Pt = function() { var t = E(this).fragment; return t ? "#" + t : "" },
                                Rt = function(t, e) { return { get: t, set: e, configurable: !0, enumerable: !0 } };
                            if (o && u(Et, {
                                    href: Rt(Tt, (function(t) {
                                        var e = E(this),
                                            n = String(t),
                                            r = wt(e, n);
                                        if (r) throw TypeError(r);
                                        w(e.searchParams).updateSearchParams(e.query)
                                    })),
                                    origin: Rt(Ct),
                                    protocol: Rt(St, (function(t) {
                                        var e = E(this);
                                        wt(e, String(t) + ":", tt)
                                    })),
                                    username: Rt(kt, (function(t) {
                                        var e = E(this),
                                            n = d(String(t));
                                        if (!X(e)) { e.username = ""; for (var r = 0; r < n.length; r++) e.username += Q(n[r], W) }
                                    })),
                                    password: Rt(At, (function(t) {
                                        var e = E(this),
                                            n = d(String(t));
                                        if (!X(e)) { e.password = ""; for (var r = 0; r < n.length; r++) e.password += Q(n[r], W) }
                                    })),
                                    host: Rt(It, (function(t) {
                                        var e = E(this);
                                        e.cannotBeABaseURL || wt(e, String(t), ct)
                                    })),
                                    hostname: Rt(Ot, (function(t) {
                                        var e = E(this);
                                        e.cannotBeABaseURL || wt(e, String(t), ft)
                                    })),
                                    port: Rt(Nt, (function(t) {
                                        var e = E(this);
                                        X(e) || ("" == (t = String(t)) ? e.port = null : wt(e, t, ht))
                                    })),
                                    pathname: Rt(Dt, (function(t) {
                                        var e = E(this);
                                        e.cannotBeABaseURL || (e.path = [], wt(e, t + "", gt))
                                    })),
                                    search: Rt(Lt, (function(t) { var e = E(this); "" == (t = String(t)) ? e.query = null: ("?" == t.charAt(0) && (t = t.slice(1)), e.query = "", wt(e, t, bt)), w(e.searchParams).updateSearchParams(e.query) })),
                                    searchParams: Rt(jt),
                                    hash: Rt(Pt, (function(t) { var e = E(this); "" != (t = String(t)) ? ("#" == t.charAt(0) && (t = t.slice(1)), e.fragment = "", wt(e, t, _t)) : e.fragment = null }))
                                }), l(Et, "toJSON", (function() { return Tt.call(this) }), { enumerable: !0 }), l(Et, "toString", (function() { return Tt.call(this) }), { enumerable: !0 }), b) {
                                var Ft = b.createObjectURL,
                                    Mt = b.revokeObjectURL;
                                Ft && l(xt, "createObjectURL", (function(t) { return Ft.apply(b, arguments) })), Mt && l(xt, "revokeObjectURL", (function(t) { return Mt.apply(b, arguments) }))
                            }
                            g(xt, "URL"), i({ global: !0, forced: !a, sham: !o }, { URL: xt })
                        }
                    },
                    e = {};

                function n(r) { if (e[r]) return e[r].exports; var i = e[r] = { exports: {} }; return t[r](i, i.exports, n), i.exports }
                n.d = function(t, e) { for (var r in e) n.o(e, r) && !n.o(t, r) && Object.defineProperty(t, r, { enumerable: !0, get: e[r] }) }, n.g = function() { if ("object" == typeof globalThis) return globalThis; try { return this || new Function("return this")() } catch (t) { if ("object" == typeof window) return window } }(), n.o = function(t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, n.r = function(t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) };
                var r = {};
                return function() {
                    "use strict";

                    function t(t, n) {
                        var r;
                        if ("undefined" == typeof Symbol || null == t[Symbol.iterator]) {
                            if (Array.isArray(t) || (r = function(t, n) { if (t) { if ("string" == typeof t) return e(t, n); var r = Object.prototype.toString.call(t).slice(8, -1); return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? e(t, n) : void 0 } }(t)) || n && t && "number" == typeof t.length) {
                                r && (t = r);
                                var i = 0,
                                    o = function() {};
                                return { s: o, n: function() { return i >= t.length ? { done: !0 } : { done: !1, value: t[i++] } }, e: function(t) { throw t }, f: o }
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                        }
                        var a, s = !0,
                            u = !1;
                        return { s: function() { r = t[Symbol.iterator]() }, n: function() { var t = r.next(); return s = t.done, t }, e: function(t) { u = !0, a = t }, f: function() { try { s || null == r.return || r.return() } finally { if (u) throw a } } }
                    }

                    function e(t, e) {
                        (null == e || e > t.length) && (e = t.length);
                        for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                        return r
                    }

                    function i(t, e) {
                        for (var n = 0; n < e.length; n++) {
                            var r = e[n];
                            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
                        }
                    }
                    n.r(r), n.d(r, { Dropzone: function() { return _ }, default: function() { return C } }), n(2222), n(7327), n(2772), n(6992), n(1249), n(7042), n(561), n(8264), n(8309), n(489), n(1539), n(4916), n(9714), n(8783), n(4723), n(5306), n(3123), n(3210), n(2472), n(2990), n(8927), n(3105), n(5035), n(4345), n(7174), n(2846), n(4731), n(7209), n(6319), n(8867), n(7789), n(3739), n(9368), n(4483), n(2056), n(3462), n(678), n(7462), n(3824), n(5021), n(2974), n(5016), n(4747), n(3948), n(285);
                    var o = function() {
                        function e() {! function(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") }(this, e) }
                        var n, r, o;
                        return n = e, (r = [{ key: "on", value: function(t, e) { return this._callbacks = this._callbacks || {}, this._callbacks[t] || (this._callbacks[t] = []), this._callbacks[t].push(e), this } }, {
                            key: "emit",
                            value: function(e) {
                                this._callbacks = this._callbacks || {};
                                for (var n = this._callbacks[e], r = arguments.length, i = new Array(r > 1 ? r - 1 : 0), o = 1; o < r; o++) i[o - 1] = arguments[o];
                                if (n) {
                                    var a, s = t(n, !0);
                                    try {
                                        for (s.s(); !(a = s.n()).done;) {
                                            var u = a.value;
                                            u.apply(this, i)
                                        }
                                    } catch (t) { s.e(t) } finally { s.f() }
                                }
                                return this.element && this.element.dispatchEvent(this.makeEvent("dropzone:" + e, { args: i })), this
                            }
                        }, { key: "makeEvent", value: function(t, e) { var n = { bubbles: !0, cancelable: !0, detail: e }; if ("function" == typeof window.CustomEvent) return new CustomEvent(t, n); var r = document.createEvent("CustomEvent"); return r.initCustomEvent(t, n.bubbles, n.cancelable, n.detail), r } }, { key: "off", value: function(t, e) { if (!this._callbacks || 0 === arguments.length) return this._callbacks = {}, this; var n = this._callbacks[t]; if (!n) return this; if (1 === arguments.length) return delete this._callbacks[t], this; for (var r = 0; r < n.length; r++) { var i = n[r]; if (i === e) { n.splice(r, 1); break } } return this } }]) && i(n.prototype, r), o && i(n, o), e
                    }();

                    function a(t, e) {
                        var n;
                        if ("undefined" == typeof Symbol || null == t[Symbol.iterator]) {
                            if (Array.isArray(t) || (n = function(t, e) { if (t) { if ("string" == typeof t) return s(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? s(t, e) : void 0 } }(t)) || e && t && "number" == typeof t.length) {
                                n && (t = n);
                                var r = 0,
                                    i = function() {};
                                return { s: i, n: function() { return r >= t.length ? { done: !0 } : { done: !1, value: t[r++] } }, e: function(t) { throw t }, f: i }
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                        }
                        var o, a = !0,
                            u = !1;
                        return { s: function() { n = t[Symbol.iterator]() }, n: function() { var t = n.next(); return a = t.done, t }, e: function(t) { u = !0, o = t }, f: function() { try { a || null == n.return || n.return() } finally { if (u) throw o } } }
                    }

                    function s(t, e) {
                        (null == e || e > t.length) && (e = t.length);
                        for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                        return r
                    }
                    var u = {
                        url: null,
                        method: "post",
                        withCredentials: !1,
                        timeout: null,
                        parallelUploads: 2,
                        uploadMultiple: !1,
                        chunking: !1,
                        forceChunking: !1,
                        chunkSize: 2e6,
                        parallelChunkUploads: !1,
                        retryChunks: !1,
                        retryChunksLimit: 3,
                        maxFilesize: 256,
                        paramName: "file",
                        createImageThumbnails: !0,
                        maxThumbnailFilesize: 10,
                        thumbnailWidth: 120,
                        thumbnailHeight: 120,
                        thumbnailMethod: "crop",
                        resizeWidth: null,
                        resizeHeight: null,
                        resizeMimeType: null,
                        resizeQuality: .8,
                        resizeMethod: "contain",
                        filesizeBase: 1e3,
                        maxFiles: null,
                        headers: null,
                        clickable: !0,
                        ignoreHiddenFiles: !0,
                        acceptedFiles: null,
                        acceptedMimeTypes: null,
                        autoProcessQueue: !0,
                        autoQueue: !0,
                        addRemoveLinks: !1,
                        previewsContainer: null,
                        disablePreviews: !1,
                        hiddenInputContainer: "body",
                        capture: null,
                        renameFilename: null,
                        renameFile: null,
                        forceFallback: !1,
                        dictDefaultMessage: "Drop files here to upload",
                        dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
                        dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
                        dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
                        dictInvalidFileType: "You can't upload files of this type.",
                        dictResponseError: "Server responded with {{statusCode}} code.",
                        dictCancelUpload: "Cancel upload",
                        dictUploadCanceled: "Upload canceled.",
                        dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
                        dictRemoveFile: "Remove file",
                        dictRemoveFileConfirmation: null,
                        dictMaxFilesExceeded: "You can not upload any more files.",
                        dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" },
                        init: function() {},
                        params: function(t, e, n) { if (n) return { dzuuid: n.file.upload.uuid, dzchunkindex: n.index, dztotalfilesize: n.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: n.file.upload.totalChunkCount, dzchunkbyteoffset: n.index * this.options.chunkSize } },
                        accept: function(t, e) { return e() },
                        chunksUploaded: function(t, e) { e() },
                        fallback: function() {
                            var t;
                            this.element.className = "".concat(this.element.className, " dz-browser-not-supported");
                            var e, n = a(this.element.getElementsByTagName("div"), !0);
                            try { for (n.s(); !(e = n.n()).done;) { var r = e.value; if (/(^| )dz-message($| )/.test(r.className)) { t = r, r.className = "dz-message"; break } } } catch (t) { n.e(t) } finally { n.f() }
                            t || (t = _.createElement('<div class="dz-message"><span></span></div>'), this.element.appendChild(t));
                            var i = t.getElementsByTagName("span")[0];
                            return i && (null != i.textContent ? i.textContent = this.options.dictFallbackMessage : null != i.innerText && (i.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm())
                        },
                        resize: function(t, e, n, r) {
                            var i = { srcX: 0, srcY: 0, srcWidth: t.width, srcHeight: t.height },
                                o = t.width / t.height;
                            null == e && null == n ? (e = i.srcWidth, n = i.srcHeight) : null == e ? e = n * o : null == n && (n = e / o);
                            var a = (e = Math.min(e, i.srcWidth)) / (n = Math.min(n, i.srcHeight));
                            if (i.srcWidth > e || i.srcHeight > n)
                                if ("crop" === r) o > a ? (i.srcHeight = t.height, i.srcWidth = i.srcHeight * a) : (i.srcWidth = t.width, i.srcHeight = i.srcWidth / a);
                                else {
                                    if ("contain" !== r) throw new Error("Unknown resizeMethod '".concat(r, "'"));
                                    o > a ? n = e / o : e = n * o
                                }
                            return i.srcX = (t.width - i.srcWidth) / 2, i.srcY = (t.height - i.srcHeight) / 2, i.trgWidth = e, i.trgHeight = n, i
                        },
                        transformFile: function(t, e) { return (this.options.resizeWidth || this.options.resizeHeight) && t.type.match(/image.*/) ? this.resizeImage(t, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, e) : e(t) },
                        previewTemplate: '<div class="dz-preview dz-file-preview"> <div class="dz-image"><img data-dz-thumbnail/></div> <div class="dz-details"> <div class="dz-size"><span data-dz-size></span></div> <div class="dz-filename"><span data-dz-name></span></div> </div> <div class="dz-progress"> <span class="dz-upload" data-dz-uploadprogress></span> </div> <div class="dz-error-message"><span data-dz-errormessage></span></div> <div class="dz-success-mark"> <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <title>Check</title> <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF"></path> </g> </svg> </div> <div class="dz-error-mark"> <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <title>Error</title> <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475"> <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z"></path> </g> </g> </svg> </div> </div> ',
                        drop: function(t) { return this.element.classList.remove("dz-drag-hover") },
                        dragstart: function(t) {},
                        dragend: function(t) { return this.element.classList.remove("dz-drag-hover") },
                        dragenter: function(t) { return this.element.classList.add("dz-drag-hover") },
                        dragover: function(t) { return this.element.classList.add("dz-drag-hover") },
                        dragleave: function(t) { return this.element.classList.remove("dz-drag-hover") },
                        paste: function(t) {},
                        reset: function() { return this.element.classList.remove("dz-started") },
                        addedfile: function(t) {
                            var e = this;
                            if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer && !this.options.disablePreviews) {
                                t.previewElement = _.createElement(this.options.previewTemplate.trim()), t.previewTemplate = t.previewElement, this.previewsContainer.appendChild(t.previewElement);
                                var n, r = a(t.previewElement.querySelectorAll("[data-dz-name]"), !0);
                                try {
                                    for (r.s(); !(n = r.n()).done;) {
                                        var i = n.value;
                                        i.textContent = t.name
                                    }
                                } catch (t) { r.e(t) } finally { r.f() }
                                var o, s = a(t.previewElement.querySelectorAll("[data-dz-size]"), !0);
                                try { for (s.s(); !(o = s.n()).done;)(i = o.value).innerHTML = this.filesize(t.size) } catch (t) { s.e(t) } finally { s.f() }
                                this.options.addRemoveLinks && (t._removeLink = _.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>'.concat(this.options.dictRemoveFile, "</a>")), t.previewElement.appendChild(t._removeLink));
                                var u, l = function(n) { return n.preventDefault(), n.stopPropagation(), t.status === _.UPLOADING ? _.confirm(e.options.dictCancelUploadConfirmation, (function() { return e.removeFile(t) })) : e.options.dictRemoveFileConfirmation ? _.confirm(e.options.dictRemoveFileConfirmation, (function() { return e.removeFile(t) })) : e.removeFile(t) },
                                    c = a(t.previewElement.querySelectorAll("[data-dz-remove]"), !0);
                                try { for (c.s(); !(u = c.n()).done;) u.value.addEventListener("click", l) } catch (t) { c.e(t) } finally { c.f() }
                            }
                        },
                        removedfile: function(t) { return null != t.previewElement && null != t.previewElement.parentNode && t.previewElement.parentNode.removeChild(t.previewElement), this._updateMaxFilesReachedClass() },
                        thumbnail: function(t, e) {
                            if (t.previewElement) {
                                t.previewElement.classList.remove("dz-file-preview");
                                var n, r = a(t.previewElement.querySelectorAll("[data-dz-thumbnail]"), !0);
                                try {
                                    for (r.s(); !(n = r.n()).done;) {
                                        var i = n.value;
                                        i.alt = t.name, i.src = e
                                    }
                                } catch (t) { r.e(t) } finally { r.f() }
                                return setTimeout((function() { return t.previewElement.classList.add("dz-image-preview") }), 1)
                            }
                        },
                        error: function(t, e) { if (t.previewElement) { t.previewElement.classList.add("dz-error"), "string" != typeof e && e.error && (e = e.error); var n, r = a(t.previewElement.querySelectorAll("[data-dz-errormessage]"), !0); try { for (r.s(); !(n = r.n()).done;) n.value.textContent = e } catch (t) { r.e(t) } finally { r.f() } } },
                        errormultiple: function() {},
                        processing: function(t) { if (t.previewElement && (t.previewElement.classList.add("dz-processing"), t._removeLink)) return t._removeLink.innerHTML = this.options.dictCancelUpload },
                        processingmultiple: function() {},
                        uploadprogress: function(t, e, n) { if (t.previewElement) { var r, i = a(t.previewElement.querySelectorAll("[data-dz-uploadprogress]"), !0); try { for (i.s(); !(r = i.n()).done;) { var o = r.value; "PROGRESS" === o.nodeName ? o.value = e : o.style.width = "".concat(e, "%") } } catch (t) { i.e(t) } finally { i.f() } } },
                        totaluploadprogress: function() {},
                        sending: function() {},
                        sendingmultiple: function() {},
                        success: function(t) { if (t.previewElement) return t.previewElement.classList.add("dz-success") },
                        successmultiple: function() {},
                        canceled: function(t) { return this.emit("error", t, this.options.dictUploadCanceled) },
                        canceledmultiple: function() {},
                        complete: function(t) { if (t._removeLink && (t._removeLink.innerHTML = this.options.dictRemoveFile), t.previewElement) return t.previewElement.classList.add("dz-complete") },
                        completemultiple: function() {},
                        maxfilesexceeded: function() {},
                        maxfilesreached: function() {},
                        queuecomplete: function() {},
                        addedfiles: function() {}
                    };

                    function l(t) { return (l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) { return typeof t } : function(t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(t) }

                    function c(t, e) {
                        var n;
                        if ("undefined" == typeof Symbol || null == t[Symbol.iterator]) {
                            if (Array.isArray(t) || (n = function(t, e) { if (t) { if ("string" == typeof t) return f(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? f(t, e) : void 0 } }(t)) || e && t && "number" == typeof t.length) {
                                n && (t = n);
                                var r = 0,
                                    i = function() {};
                                return { s: i, n: function() { return r >= t.length ? { done: !0 } : { done: !1, value: t[r++] } }, e: function(t) { throw t }, f: i }
                            }
                            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                        }
                        var o, a = !0,
                            s = !1;
                        return { s: function() { n = t[Symbol.iterator]() }, n: function() { var t = n.next(); return a = t.done, t }, e: function(t) { s = !0, o = t }, f: function() { try { a || null == n.return || n.return() } finally { if (s) throw o } } }
                    }

                    function f(t, e) {
                        (null == e || e > t.length) && (e = t.length);
                        for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                        return r
                    }

                    function h(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") }

                    function d(t, e) {
                        for (var n = 0; n < e.length; n++) {
                            var r = e[n];
                            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
                        }
                    }

                    function p(t, e, n) { return e && d(t.prototype, e), n && d(t, n), t }

                    function v(t, e) { return (v = Object.setPrototypeOf || function(t, e) { return t.__proto__ = e, t })(t, e) }

                    function g(t) {
                        var e = function() { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0 } catch (t) { return !1 } }();
                        return function() {
                            var n, r = b(t);
                            if (e) {
                                var i = b(this).constructor;
                                n = Reflect.construct(r, arguments, i)
                            } else n = r.apply(this, arguments);
                            return m(this, n)
                        }
                    }

                    function m(t, e) { return !e || "object" !== l(e) && "function" != typeof e ? y(t) : e }

                    function y(t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t }

                    function b(t) { return (b = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) { return t.__proto__ || Object.getPrototypeOf(t) })(t) }
                    var _ = function(t) {
                        ! function(t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), e && v(t, e)
                        }(n, t);
                        var e = g(n);

                        function n(t, r) {
                            var i, o, a;
                            if (h(this, n), (i = e.call(this)).element = t, i.version = n.version, i.clickableElements = [], i.listeners = [], i.files = [], "string" == typeof i.element && (i.element = document.querySelector(i.element)), !i.element || null == i.element.nodeType) throw new Error("Invalid dropzone element.");
                            if (i.element.dropzone) throw new Error("Dropzone already attached.");
                            n.instances.push(y(i)), i.element.dropzone = y(i);
                            var s = null != (a = n.optionsForElement(i.element)) ? a : {};
                            if (i.options = n.extend({}, u, s, null != r ? r : {}), i.options.previewTemplate = i.options.previewTemplate.replace(/\n*/g, ""), i.options.forceFallback || !n.isBrowserSupported()) return m(i, i.options.fallback.call(y(i)));
                            if (null == i.options.url && (i.options.url = i.element.getAttribute("action")), !i.options.url) throw new Error("No URL provided.");
                            if (i.options.acceptedFiles && i.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
                            if (i.options.uploadMultiple && i.options.chunking) throw new Error("You cannot set both: uploadMultiple and chunking.");
                            return i.options.acceptedMimeTypes && (i.options.acceptedFiles = i.options.acceptedMimeTypes, delete i.options.acceptedMimeTypes), null != i.options.renameFilename && (i.options.renameFile = function(t) { return i.options.renameFilename.call(y(i), t.name, t) }), "string" == typeof i.options.method && (i.options.method = i.options.method.toUpperCase()), (o = i.getExistingFallback()) && o.parentNode && o.parentNode.removeChild(o), !1 !== i.options.previewsContainer && (i.options.previewsContainer ? i.previewsContainer = n.getElement(i.options.previewsContainer, "previewsContainer") : i.previewsContainer = i.element), i.options.clickable && (!0 === i.options.clickable ? i.clickableElements = [i.element] : i.clickableElements = n.getElements(i.options.clickable, "clickable")), i.init(), i
                        }
                        return p(n, [{ key: "getAcceptedFiles", value: function() { return this.files.filter((function(t) { return t.accepted })).map((function(t) { return t })) } }, { key: "getRejectedFiles", value: function() { return this.files.filter((function(t) { return !t.accepted })).map((function(t) { return t })) } }, { key: "getFilesWithStatus", value: function(t) { return this.files.filter((function(e) { return e.status === t })).map((function(t) { return t })) } }, { key: "getQueuedFiles", value: function() { return this.getFilesWithStatus(n.QUEUED) } }, { key: "getUploadingFiles", value: function() { return this.getFilesWithStatus(n.UPLOADING) } }, { key: "getAddedFiles", value: function() { return this.getFilesWithStatus(n.ADDED) } }, { key: "getActiveFiles", value: function() { return this.files.filter((function(t) { return t.status === n.UPLOADING || t.status === n.QUEUED })).map((function(t) { return t })) } }, {
                            key: "init",
                            value: function() {
                                var t = this;
                                "form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(n.createElement('<div class="dz-default dz-message"><button class="dz-button" type="button">'.concat(this.options.dictDefaultMessage, "</button></div>"))), this.clickableElements.length && function e() {
                                    t.hiddenFileInput && t.hiddenFileInput.parentNode.removeChild(t.hiddenFileInput), t.hiddenFileInput = document.createElement("input"), t.hiddenFileInput.setAttribute("type", "file"), (null === t.options.maxFiles || t.options.maxFiles > 1) && t.hiddenFileInput.setAttribute("multiple", "multiple"), t.hiddenFileInput.className = "dz-hidden-input", null !== t.options.acceptedFiles && t.hiddenFileInput.setAttribute("accept", t.options.acceptedFiles), null !== t.options.capture && t.hiddenFileInput.setAttribute("capture", t.options.capture), t.hiddenFileInput.setAttribute("tabindex", "-1"), t.hiddenFileInput.style.visibility = "hidden", t.hiddenFileInput.style.position = "absolute", t.hiddenFileInput.style.top = "0", t.hiddenFileInput.style.left = "0", t.hiddenFileInput.style.height = "0", t.hiddenFileInput.style.width = "0", n.getElement(t.options.hiddenInputContainer, "hiddenInputContainer").appendChild(t.hiddenFileInput), t.hiddenFileInput.addEventListener("change", (function() {
                                        var n = t.hiddenFileInput.files;
                                        if (n.length) {
                                            var r, i = c(n, !0);
                                            try {
                                                for (i.s(); !(r = i.n()).done;) {
                                                    var o = r.value;
                                                    t.addFile(o)
                                                }
                                            } catch (t) { i.e(t) } finally { i.f() }
                                        }
                                        t.emit("addedfiles", n), e()
                                    }))
                                }(), this.URL = null !== window.URL ? window.URL : window.webkitURL;
                                var e, r = c(this.events, !0);
                                try {
                                    for (r.s(); !(e = r.n()).done;) {
                                        var i = e.value;
                                        this.on(i, this.options[i])
                                    }
                                } catch (t) { r.e(t) } finally { r.f() }
                                this.on("uploadprogress", (function() { return t.updateTotalUploadProgress() })), this.on("removedfile", (function() { return t.updateTotalUploadProgress() })), this.on("canceled", (function(e) { return t.emit("complete", e) })), this.on("complete", (function(e) { if (0 === t.getAddedFiles().length && 0 === t.getUploadingFiles().length && 0 === t.getQueuedFiles().length) return setTimeout((function() { return t.emit("queuecomplete") }), 0) }));
                                var o = function(t) {
                                    if (function(t) {
                                            if (t.dataTransfer.types)
                                                for (var e = 0; e < t.dataTransfer.types.length; e++)
                                                    if ("Files" === t.dataTransfer.types[e]) return !0;
                                            return !1
                                        }(t)) return t.stopPropagation(), t.preventDefault ? t.preventDefault() : t.returnValue = !1
                                };
                                return this.listeners = [{ element: this.element, events: { dragstart: function(e) { return t.emit("dragstart", e) }, dragenter: function(e) { return o(e), t.emit("dragenter", e) }, dragover: function(e) { var n; try { n = e.dataTransfer.effectAllowed } catch (t) {} return e.dataTransfer.dropEffect = "move" === n || "linkMove" === n ? "move" : "copy", o(e), t.emit("dragover", e) }, dragleave: function(e) { return t.emit("dragleave", e) }, drop: function(e) { return o(e), t.drop(e) }, dragend: function(e) { return t.emit("dragend", e) } } }], this.clickableElements.forEach((function(e) { return t.listeners.push({ element: e, events: { click: function(r) { return (e !== t.element || r.target === t.element || n.elementInside(r.target, t.element.querySelector(".dz-message"))) && t.hiddenFileInput.click(), !0 } } }) })), this.enable(), this.options.init.call(this)
                            }
                        }, { key: "destroy", value: function() { return this.disable(), this.removeAllFiles(!0), (null != this.hiddenFileInput ? this.hiddenFileInput.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, n.instances.splice(n.instances.indexOf(this), 1) } }, {
                            key: "updateTotalUploadProgress",
                            value: function() {
                                var t, e = 0,
                                    n = 0;
                                if (this.getActiveFiles().length) {
                                    var r, i = c(this.getActiveFiles(), !0);
                                    try {
                                        for (i.s(); !(r = i.n()).done;) {
                                            var o = r.value;
                                            e += o.upload.bytesSent, n += o.upload.total
                                        }
                                    } catch (t) { i.e(t) } finally { i.f() }
                                    t = 100 * e / n
                                } else t = 100;
                                return this.emit("totaluploadprogress", t, n, e)
                            }
                        }, { key: "_getParamName", value: function(t) { return "function" == typeof this.options.paramName ? this.options.paramName(t) : "".concat(this.options.paramName).concat(this.options.uploadMultiple ? "[".concat(t, "]") : "") } }, { key: "_renameFile", value: function(t) { return "function" != typeof this.options.renameFile ? t.name : this.options.renameFile(t) } }, {
                            key: "getFallbackForm",
                            value: function() {
                                var t, e;
                                if (t = this.getExistingFallback()) return t;
                                var r = '<div class="dz-fallback">';
                                this.options.dictFallbackText && (r += "<p>".concat(this.options.dictFallbackText, "</p>")), r += '<input type="file" name="'.concat(this._getParamName(0), '" ').concat(this.options.uploadMultiple ? 'multiple="multiple"' : void 0, ' /><input type="submit" value="Upload!"></div>');
                                var i = n.createElement(r);
                                return "FORM" !== this.element.tagName ? (e = n.createElement('<form action="'.concat(this.options.url, '" enctype="multipart/form-data" method="').concat(this.options.method, '"></form>'))).appendChild(i) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != e ? e : i
                            }
                        }, { key: "getExistingFallback", value: function() { for (var t = function(t) { var e, n = c(t, !0); try { for (n.s(); !(e = n.n()).done;) { var r = e.value; if (/(^| )fallback($| )/.test(r.className)) return r } } catch (t) { n.e(t) } finally { n.f() } }, e = 0, n = ["div", "form"]; e < n.length; e++) { var r, i = n[e]; if (r = t(this.element.getElementsByTagName(i))) return r } } }, {
                            key: "setupEventListeners",
                            value: function() {
                                return this.listeners.map((function(t) {
                                    return function() {
                                        var e = [];
                                        for (var n in t.events) {
                                            var r = t.events[n];
                                            e.push(t.element.addEventListener(n, r, !1))
                                        }
                                        return e
                                    }()
                                }))
                            }
                        }, {
                            key: "removeEventListeners",
                            value: function() {
                                return this.listeners.map((function(t) {
                                    return function() {
                                        var e = [];
                                        for (var n in t.events) {
                                            var r = t.events[n];
                                            e.push(t.element.removeEventListener(n, r, !1))
                                        }
                                        return e
                                    }()
                                }))
                            }
                        }, { key: "disable", value: function() { var t = this; return this.clickableElements.forEach((function(t) { return t.classList.remove("dz-clickable") })), this.removeEventListeners(), this.disabled = !0, this.files.map((function(e) { return t.cancelUpload(e) })) } }, { key: "enable", value: function() { return delete this.disabled, this.clickableElements.forEach((function(t) { return t.classList.add("dz-clickable") })), this.setupEventListeners() } }, {
                            key: "filesize",
                            value: function(t) {
                                var e = 0,
                                    n = "b";
                                if (t > 0) {
                                    for (var r = ["tb", "gb", "mb", "kb", "b"], i = 0; i < r.length; i++) { var o = r[i]; if (t >= Math.pow(this.options.filesizeBase, 4 - i) / 10) { e = t / Math.pow(this.options.filesizeBase, 4 - i), n = o; break } }
                                    e = Math.round(10 * e) / 10
                                }
                                return "<strong>".concat(e, "</strong> ").concat(this.options.dictFileSizeUnits[n])
                            }
                        }, { key: "_updateMaxFilesReachedClass", value: function() { return null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached") } }, {
                            key: "drop",
                            value: function(t) {
                                if (t.dataTransfer) {
                                    this.emit("drop", t);
                                    for (var e = [], n = 0; n < t.dataTransfer.files.length; n++) e[n] = t.dataTransfer.files[n];
                                    if (e.length) {
                                        var r = t.dataTransfer.items;
                                        r && r.length && null != r[0].webkitGetAsEntry ? this._addFilesFromItems(r) : this.handleFiles(e)
                                    }
                                    this.emit("addedfiles", e)
                                }
                            }
                        }, {
                            key: "paste",
                            value: function(t) {
                                if (null != (e = null != t ? t.clipboardData : void 0, n = function(t) { return t.items }, null != e ? n(e) : void 0)) {
                                    var e, n;
                                    this.emit("paste", t);
                                    var r = t.clipboardData.items;
                                    return r.length ? this._addFilesFromItems(r) : void 0
                                }
                            }
                        }, {
                            key: "handleFiles",
                            value: function(t) {
                                var e, n = c(t, !0);
                                try {
                                    for (n.s(); !(e = n.n()).done;) {
                                        var r = e.value;
                                        this.addFile(r)
                                    }
                                } catch (t) { n.e(t) } finally { n.f() }
                            }
                        }, {
                            key: "_addFilesFromItems",
                            value: function(t) {
                                var e = this;
                                return function() {
                                    var n, r = [],
                                        i = c(t, !0);
                                    try {
                                        for (i.s(); !(n = i.n()).done;) {
                                            var o, a = n.value;
                                            null != a.webkitGetAsEntry && (o = a.webkitGetAsEntry()) ? o.isFile ? r.push(e.addFile(a.getAsFile())) : o.isDirectory ? r.push(e._addFilesFromDirectory(o, o.name)) : r.push(void 0) : null == a.getAsFile || null != a.kind && "file" !== a.kind ? r.push(void 0) : r.push(e.addFile(a.getAsFile()))
                                        }
                                    } catch (t) { i.e(t) } finally { i.f() }
                                    return r
                                }()
                            }
                        }, {
                            key: "_addFilesFromDirectory",
                            value: function(t, e) {
                                var n = this,
                                    r = t.createReader(),
                                    i = function(t) { return e = console, n = "log", r = function(e) { return e.log(t) }, null != e && "function" == typeof e[n] ? r(e, n) : void 0; var e, n, r };
                                return function t() {
                                    return r.readEntries((function(r) {
                                        if (r.length > 0) {
                                            var i, o = c(r, !0);
                                            try {
                                                for (o.s(); !(i = o.n()).done;) {
                                                    var a = i.value;
                                                    a.isFile ? a.file((function(t) { if (!n.options.ignoreHiddenFiles || "." !== t.name.substring(0, 1)) return t.fullPath = "".concat(e, "/").concat(t.name), n.addFile(t) })) : a.isDirectory && n._addFilesFromDirectory(a, "".concat(e, "/").concat(a.name))
                                                }
                                            } catch (t) { o.e(t) } finally { o.f() }
                                            t()
                                        }
                                        return null
                                    }), i)
                                }()
                            }
                        }, { key: "accept", value: function(t, e) { this.options.maxFilesize && t.size > 1024 * this.options.maxFilesize * 1024 ? e(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(t.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : n.isValidFile(t, this.options.acceptedFiles) ? null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (e(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", t)) : this.options.accept.call(this, t, e) : e(this.options.dictInvalidFileType) } }, {
                            key: "addFile",
                            value: function(t) {
                                var e = this;
                                t.upload = { uuid: n.uuidv4(), progress: 0, total: t.size, bytesSent: 0, filename: this._renameFile(t) }, this.files.push(t), t.status = n.ADDED, this.emit("addedfile", t), this._enqueueThumbnail(t), this.accept(t, (function(n) { n ? (t.accepted = !1, e._errorProcessing([t], n)) : (t.accepted = !0, e.options.autoQueue && e.enqueueFile(t)), e._updateMaxFilesReachedClass() }))
                            }
                        }, {
                            key: "enqueueFiles",
                            value: function(t) {
                                var e, n = c(t, !0);
                                try {
                                    for (n.s(); !(e = n.n()).done;) {
                                        var r = e.value;
                                        this.enqueueFile(r)
                                    }
                                } catch (t) { n.e(t) } finally { n.f() }
                                return null
                            }
                        }, { key: "enqueueFile", value: function(t) { var e = this; if (t.status !== n.ADDED || !0 !== t.accepted) throw new Error("This file can't be queued because it has already been processed or was rejected."); if (t.status = n.QUEUED, this.options.autoProcessQueue) return setTimeout((function() { return e.processQueue() }), 0) } }, { key: "_enqueueThumbnail", value: function(t) { var e = this; if (this.options.createImageThumbnails && t.type.match(/image.*/) && t.size <= 1024 * this.options.maxThumbnailFilesize * 1024) return this._thumbnailQueue.push(t), setTimeout((function() { return e._processThumbnailQueue() }), 0) } }, { key: "_processThumbnailQueue", value: function() { var t = this; if (!this._processingThumbnail && 0 !== this._thumbnailQueue.length) { this._processingThumbnail = !0; var e = this._thumbnailQueue.shift(); return this.createThumbnail(e, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, !0, (function(n) { return t.emit("thumbnail", e, n), t._processingThumbnail = !1, t._processThumbnailQueue() })) } } }, { key: "removeFile", value: function(t) { if (t.status === n.UPLOADING && this.cancelUpload(t), this.files = w(this.files, t), this.emit("removedfile", t), 0 === this.files.length) return this.emit("reset") } }, {
                            key: "removeAllFiles",
                            value: function(t) {
                                null == t && (t = !1);
                                var e, r = c(this.files.slice(), !0);
                                try {
                                    for (r.s(); !(e = r.n()).done;) {
                                        var i = e.value;
                                        (i.status !== n.UPLOADING || t) && this.removeFile(i)
                                    }
                                } catch (t) { r.e(t) } finally { r.f() }
                                return null
                            }
                        }, {
                            key: "resizeImage",
                            value: function(t, e, r, i, o) {
                                var a = this;
                                return this.createThumbnail(t, e, r, i, !0, (function(e, r) {
                                    if (null == r) return o(t);
                                    var i = a.options.resizeMimeType;
                                    null == i && (i = t.type);
                                    var s = r.toDataURL(i, a.options.resizeQuality);
                                    return "image/jpeg" !== i && "image/jpg" !== i || (s = T.restore(t.dataURL, s)), o(n.dataURItoBlob(s))
                                }))
                            }
                        }, {
                            key: "createThumbnail",
                            value: function(t, e, n, r, i, o) {
                                var a = this,
                                    s = new FileReader;
                                s.onload = function() { t.dataURL = s.result, "image/svg+xml" !== t.type ? a.createThumbnailFromUrl(t, e, n, r, i, o) : null != o && o(s.result) }, s.readAsDataURL(t)
                            }
                        }, {
                            key: "displayExistingFile",
                            value: function(t, e, n, r) {
                                var i = this,
                                    o = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                                if (this.emit("addedfile", t), this.emit("complete", t), o) {
                                    var a = function(e) { i.emit("thumbnail", t, e), n && n() };
                                    t.dataURL = e, this.createThumbnailFromUrl(t, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, a, r)
                                } else this.emit("thumbnail", t, e), n && n()
                            }
                        }, {
                            key: "createThumbnailFromUrl",
                            value: function(t, e, n, r, i, o, a) {
                                var s = this,
                                    u = document.createElement("img");
                                return a && (u.crossOrigin = a), i = "from-image" != getComputedStyle(document.body).imageOrientation && i, u.onload = function() {
                                    var a = function(t) { return t(1) };
                                    return "undefined" != typeof EXIF && null !== EXIF && i && (a = function(t) { return EXIF.getData(u, (function() { return t(EXIF.getTag(this, "Orientation")) })) }), a((function(i) {
                                        t.width = u.width, t.height = u.height;
                                        var a = s.options.resize.call(s, t, e, n, r),
                                            l = document.createElement("canvas"),
                                            c = l.getContext("2d");
                                        switch (l.width = a.trgWidth, l.height = a.trgHeight, i > 4 && (l.width = a.trgHeight, l.height = a.trgWidth), i) {
                                            case 2:
                                                c.translate(l.width, 0), c.scale(-1, 1);
                                                break;
                                            case 3:
                                                c.translate(l.width, l.height), c.rotate(Math.PI);
                                                break;
                                            case 4:
                                                c.translate(0, l.height), c.scale(1, -1);
                                                break;
                                            case 5:
                                                c.rotate(.5 * Math.PI), c.scale(1, -1);
                                                break;
                                            case 6:
                                                c.rotate(.5 * Math.PI), c.translate(0, -l.width);
                                                break;
                                            case 7:
                                                c.rotate(.5 * Math.PI), c.translate(l.height, -l.width), c.scale(-1, 1);
                                                break;
                                            case 8:
                                                c.rotate(-.5 * Math.PI), c.translate(-l.height, 0)
                                        }
                                        E(c, u, null != a.srcX ? a.srcX : 0, null != a.srcY ? a.srcY : 0, a.srcWidth, a.srcHeight, null != a.trgX ? a.trgX : 0, null != a.trgY ? a.trgY : 0, a.trgWidth, a.trgHeight);
                                        var f = l.toDataURL("image/png");
                                        if (null != o) return o(f, l)
                                    }))
                                }, null != o && (u.onerror = o), u.src = t.dataURL
                            }
                        }, {
                            key: "processQueue",
                            value: function() {
                                var t = this.options.parallelUploads,
                                    e = this.getUploadingFiles().length,
                                    n = e;
                                if (!(e >= t)) {
                                    var r = this.getQueuedFiles();
                                    if (r.length > 0) {
                                        if (this.options.uploadMultiple) return this.processFiles(r.slice(0, t - e));
                                        for (; n < t;) {
                                            if (!r.length) return;
                                            this.processFile(r.shift()), n++
                                        }
                                    }
                                }
                            }
                        }, { key: "processFile", value: function(t) { return this.processFiles([t]) } }, {
                            key: "processFiles",
                            value: function(t) {
                                var e, r = c(t, !0);
                                try {
                                    for (r.s(); !(e = r.n()).done;) {
                                        var i = e.value;
                                        i.processing = !0, i.status = n.UPLOADING, this.emit("processing", i)
                                    }
                                } catch (t) { r.e(t) } finally { r.f() }
                                return this.options.uploadMultiple && this.emit("processingmultiple", t), this.uploadFiles(t)
                            }
                        }, { key: "_getFilesWithXhr", value: function(t) { return this.files.filter((function(e) { return e.xhr === t })).map((function(t) { return t })) } }, {
                            key: "cancelUpload",
                            value: function(t) {
                                if (t.status === n.UPLOADING) {
                                    var e, r = this._getFilesWithXhr(t.xhr),
                                        i = c(r, !0);
                                    try { for (i.s(); !(e = i.n()).done;) e.value.status = n.CANCELED } catch (t) { i.e(t) } finally { i.f() }
                                    void 0 !== t.xhr && t.xhr.abort();
                                    var o, a = c(r, !0);
                                    try {
                                        for (a.s(); !(o = a.n()).done;) {
                                            var s = o.value;
                                            this.emit("canceled", s)
                                        }
                                    } catch (t) { a.e(t) } finally { a.f() }
                                    this.options.uploadMultiple && this.emit("canceledmultiple", r)
                                } else t.status !== n.ADDED && t.status !== n.QUEUED || (t.status = n.CANCELED, this.emit("canceled", t), this.options.uploadMultiple && this.emit("canceledmultiple", [t]));
                                if (this.options.autoProcessQueue) return this.processQueue()
                            }
                        }, { key: "resolveOption", value: function(t) { if ("function" == typeof t) { for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++) n[r - 1] = arguments[r]; return t.apply(this, n) } return t } }, { key: "uploadFile", value: function(t) { return this.uploadFiles([t]) } }, {
                            key: "uploadFiles",
                            value: function(t) {
                                var e = this;
                                this._transformFiles(t, (function(r) {
                                    if (e.options.chunking) {
                                        var i = r[0];
                                        t[0].upload.chunked = e.options.chunking && (e.options.forceChunking || i.size > e.options.chunkSize), t[0].upload.totalChunkCount = Math.ceil(i.size / e.options.chunkSize)
                                    }
                                    if (t[0].upload.chunked) {
                                        var o = t[0],
                                            a = r[0];
                                        o.upload.chunks = [];
                                        var s = function() {
                                            for (var r = 0; void 0 !== o.upload.chunks[r];) r++;
                                            if (!(r >= o.upload.totalChunkCount)) {
                                                var i = r * e.options.chunkSize,
                                                    s = Math.min(i + e.options.chunkSize, a.size),
                                                    u = { name: e._getParamName(0), data: a.webkitSlice ? a.webkitSlice(i, s) : a.slice(i, s), filename: o.upload.filename, chunkIndex: r };
                                                o.upload.chunks[r] = { file: o, index: r, dataBlock: u, status: n.UPLOADING, progress: 0, retries: 0 }, e._uploadData(t, [u])
                                            }
                                        };
                                        if (o.upload.finishedChunkUpload = function(r, i) {
                                                var a = !0;
                                                r.status = n.SUCCESS, r.dataBlock = null, r.xhr = null;
                                                for (var u = 0; u < o.upload.totalChunkCount; u++) {
                                                    if (void 0 === o.upload.chunks[u]) return s();
                                                    o.upload.chunks[u].status !== n.SUCCESS && (a = !1)
                                                }
                                                a && e.options.chunksUploaded(o, (function() { e._finished(t, i, null) }))
                                            }, e.options.parallelChunkUploads)
                                            for (var u = 0; u < o.upload.totalChunkCount; u++) s();
                                        else s()
                                    } else {
                                        for (var l = [], c = 0; c < t.length; c++) l[c] = { name: e._getParamName(c), data: r[c], filename: t[c].upload.filename };
                                        e._uploadData(t, l)
                                    }
                                }))
                            }
                        }, {
                            key: "_getChunk",
                            value: function(t, e) {
                                for (var n = 0; n < t.upload.totalChunkCount; n++)
                                    if (void 0 !== t.upload.chunks[n] && t.upload.chunks[n].xhr === e) return t.upload.chunks[n]
                            }
                        }, {
                            key: "_uploadData",
                            value: function(t, e) {
                                var r, i = this,
                                    o = new XMLHttpRequest,
                                    a = c(t, !0);
                                try { for (a.s(); !(r = a.n()).done;) r.value.xhr = o } catch (t) { a.e(t) } finally { a.f() }
                                t[0].upload.chunked && (t[0].upload.chunks[e[0].chunkIndex].xhr = o);
                                var s = this.resolveOption(this.options.method, t),
                                    u = this.resolveOption(this.options.url, t);
                                o.open(s, u, !0), this.resolveOption(this.options.timeout, t) && (o.timeout = this.resolveOption(this.options.timeout, t)), o.withCredentials = !!this.options.withCredentials, o.onload = function(e) { i._finishedUploading(t, o, e) }, o.ontimeout = function() { i._handleUploadError(t, o, "Request timedout after ".concat(i.options.timeout / 1e3, " seconds")) }, o.onerror = function() { i._handleUploadError(t, o) }, (null != o.upload ? o.upload : o).onprogress = function(e) { return i._updateFilesUploadProgress(t, o, e) };
                                var l = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" };
                                for (var f in this.options.headers && n.extend(l, this.options.headers), l) {
                                    var h = l[f];
                                    h && o.setRequestHeader(f, h)
                                }
                                var d = new FormData;
                                if (this.options.params) {
                                    var p = this.options.params;
                                    for (var v in "function" == typeof p && (p = p.call(this, t, o, t[0].upload.chunked ? this._getChunk(t[0], o) : null)), p) {
                                        var g = p[v];
                                        if (Array.isArray(g))
                                            for (var m = 0; m < g.length; m++) d.append(v, g[m]);
                                        else d.append(v, g)
                                    }
                                }
                                var y, b = c(t, !0);
                                try {
                                    for (b.s(); !(y = b.n()).done;) {
                                        var _ = y.value;
                                        this.emit("sending", _, o, d)
                                    }
                                } catch (t) { b.e(t) } finally { b.f() }
                                this.options.uploadMultiple && this.emit("sendingmultiple", t, o, d), this._addFormElementData(d);
                                for (var w = 0; w < e.length; w++) {
                                    var x = e[w];
                                    d.append(x.name, x.data, x.filename)
                                }
                                this.submitRequest(o, d, t)
                            }
                        }, { key: "_transformFiles", value: function(t, e) { for (var n = this, r = [], i = 0, o = function(o) { n.options.transformFile.call(n, t[o], (function(n) { r[o] = n, ++i === t.length && e(r) })) }, a = 0; a < t.length; a++) o(a) } }, {
                            key: "_addFormElementData",
                            value: function(t) {
                                if ("FORM" === this.element.tagName) {
                                    var e, n = c(this.element.querySelectorAll("input, textarea, select, button"), !0);
                                    try {
                                        for (n.s(); !(e = n.n()).done;) {
                                            var r = e.value,
                                                i = r.getAttribute("name"),
                                                o = r.getAttribute("type");
                                            if (o && (o = o.toLowerCase()), null != i)
                                                if ("SELECT" === r.tagName && r.hasAttribute("multiple")) {
                                                    var a, s = c(r.options, !0);
                                                    try {
                                                        for (s.s(); !(a = s.n()).done;) {
                                                            var u = a.value;
                                                            u.selected && t.append(i, u.value)
                                                        }
                                                    } catch (t) { s.e(t) } finally { s.f() }
                                                } else(!o || "checkbox" !== o && "radio" !== o || r.checked) && t.append(i, r.value)
                                        }
                                    } catch (t) { n.e(t) } finally { n.f() }
                                }
                            }
                        }, {
                            key: "_updateFilesUploadProgress",
                            value: function(t, e, n) {
                                if (t[0].upload.chunked) {
                                    var r = t[0],
                                        i = this._getChunk(r, e);
                                    n ? (i.progress = 100 * n.loaded / n.total, i.total = n.total, i.bytesSent = n.loaded) : (i.progress = 100, i.bytesSent = i.total), r.upload.progress = 0, r.upload.total = 0, r.upload.bytesSent = 0;
                                    for (var o = 0; o < r.upload.totalChunkCount; o++) r.upload.chunks[o] && void 0 !== r.upload.chunks[o].progress && (r.upload.progress += r.upload.chunks[o].progress, r.upload.total += r.upload.chunks[o].total, r.upload.bytesSent += r.upload.chunks[o].bytesSent);
                                    r.upload.progress = r.upload.progress / r.upload.totalChunkCount, this.emit("uploadprogress", r, r.upload.progress, r.upload.bytesSent)
                                } else {
                                    var a, s = c(t, !0);
                                    try {
                                        for (s.s(); !(a = s.n()).done;) {
                                            var u = a.value;
                                            u.upload.total && u.upload.bytesSent && u.upload.bytesSent == u.upload.total || (n ? (u.upload.progress = 100 * n.loaded / n.total, u.upload.total = n.total, u.upload.bytesSent = n.loaded) : (u.upload.progress = 100, u.upload.bytesSent = u.upload.total), this.emit("uploadprogress", u, u.upload.progress, u.upload.bytesSent))
                                        }
                                    } catch (t) { s.e(t) } finally { s.f() }
                                }
                            }
                        }, {
                            key: "_finishedUploading",
                            value: function(t, e, r) {
                                var i;
                                if (t[0].status !== n.CANCELED && 4 === e.readyState) {
                                    if ("arraybuffer" !== e.responseType && "blob" !== e.responseType && (i = e.responseText, e.getResponseHeader("content-type") && ~e.getResponseHeader("content-type").indexOf("application/json"))) try { i = JSON.parse(i) } catch (t) { r = t, i = "Invalid JSON response from server." }
                                    this._updateFilesUploadProgress(t, e), 200 <= e.status && e.status < 300 ? t[0].upload.chunked ? t[0].upload.finishedChunkUpload(this._getChunk(t[0], e), i) : this._finished(t, i, r) : this._handleUploadError(t, e, i)
                                }
                            }
                        }, {
                            key: "_handleUploadError",
                            value: function(t, e, r) {
                                if (t[0].status !== n.CANCELED) {
                                    if (t[0].upload.chunked && this.options.retryChunks) {
                                        var i = this._getChunk(t[0], e);
                                        if (i.retries++ < this.options.retryChunksLimit) return void this._uploadData(t, [i.dataBlock]);
                                        console.warn("Retried this chunk too often. Giving up.")
                                    }
                                    this._errorProcessing(t, r || this.options.dictResponseError.replace("{{statusCode}}", e.status), e)
                                }
                            }
                        }, { key: "submitRequest", value: function(t, e, n) { 1 == t.readyState ? t.send(e) : console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.") } }, {
                            key: "_finished",
                            value: function(t, e, r) {
                                var i, o = c(t, !0);
                                try {
                                    for (o.s(); !(i = o.n()).done;) {
                                        var a = i.value;
                                        a.status = n.SUCCESS, this.emit("success", a, e, r), this.emit("complete", a)
                                    }
                                } catch (t) { o.e(t) } finally { o.f() }
                                if (this.options.uploadMultiple && (this.emit("successmultiple", t, e, r), this.emit("completemultiple", t)), this.options.autoProcessQueue) return this.processQueue()
                            }
                        }, {
                            key: "_errorProcessing",
                            value: function(t, e, r) {
                                var i, o = c(t, !0);
                                try {
                                    for (o.s(); !(i = o.n()).done;) {
                                        var a = i.value;
                                        a.status = n.ERROR, this.emit("error", a, e, r), this.emit("complete", a)
                                    }
                                } catch (t) { o.e(t) } finally { o.f() }
                                if (this.options.uploadMultiple && (this.emit("errormultiple", t, e, r), this.emit("completemultiple", t)), this.options.autoProcessQueue) return this.processQueue()
                            }
                        }], [{ key: "initClass", value: function() { this.prototype.Emitter = o, this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"], this.prototype._thumbnailQueue = [], this.prototype._processingThumbnail = !1 } }, {
                            key: "extend",
                            value: function(t) {
                                for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++) n[r - 1] = arguments[r];
                                for (var i = 0, o = n; i < o.length; i++) {
                                    var a = o[i];
                                    for (var s in a) {
                                        var u = a[s];
                                        t[s] = u
                                    }
                                }
                                return t
                            }
                        }, { key: "uuidv4", value: function() { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(t) { var e = 16 * Math.random() | 0; return ("x" === t ? e : 3 & e | 8).toString(16) })) } }]), n
                    }(o);
                    _.initClass(), _.version = "5.9.3", _.options = {}, _.optionsForElement = function(t) { return t.getAttribute("id") ? _.options[x(t.getAttribute("id"))] : void 0 }, _.instances = [], _.forElement = function(t) { if ("string" == typeof t && (t = document.querySelector(t)), null == (null != t ? t.dropzone : void 0)) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone."); return t.dropzone }, _.autoDiscover = !0, _.discover = function() {
                        var t;
                        if (document.querySelectorAll) t = document.querySelectorAll(".dropzone");
                        else {
                            t = [];
                            var e = function(e) {
                                return function() {
                                    var n, r = [],
                                        i = c(e, !0);
                                    try { for (i.s(); !(n = i.n()).done;) { var o = n.value; /(^| )dropzone($| )/.test(o.className) ? r.push(t.push(o)) : r.push(void 0) } } catch (t) { i.e(t) } finally { i.f() }
                                    return r
                                }()
                            };
                            e(document.getElementsByTagName("div")), e(document.getElementsByTagName("form"))
                        }
                        return function() {
                            var e, n = [],
                                r = c(t, !0);
                            try { for (r.s(); !(e = r.n()).done;) { var i = e.value;!1 !== _.optionsForElement(i) ? n.push(new _(i)) : n.push(void 0) } } catch (t) { r.e(t) } finally { r.f() }
                            return n
                        }()
                    }, _.blockedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i], _.isBrowserSupported = function() {
                        var t = !0;
                        if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector)
                            if ("classList" in document.createElement("a")) { void 0 !== _.blacklistedBrowsers && (_.blockedBrowsers = _.blacklistedBrowsers); var e, n = c(_.blockedBrowsers, !0); try { for (n.s(); !(e = n.n()).done;) e.value.test(navigator.userAgent) && (t = !1) } catch (t) { n.e(t) } finally { n.f() } } else t = !1;
                        else t = !1;
                        return t
                    }, _.dataURItoBlob = function(t) { for (var e = atob(t.split(",")[1]), n = t.split(",")[0].split(":")[1].split(";")[0], r = new ArrayBuffer(e.length), i = new Uint8Array(r), o = 0, a = e.length, s = 0 <= a; s ? o <= a : o >= a; s ? o++ : o--) i[o] = e.charCodeAt(o); return new Blob([r], { type: n }) };
                    var w = function(t, e) { return t.filter((function(t) { return t !== e })).map((function(t) { return t })) },
                        x = function(t) { return t.replace(/[\-_](\w)/g, (function(t) { return t.charAt(1).toUpperCase() })) };
                    _.createElement = function(t) { var e = document.createElement("div"); return e.innerHTML = t, e.childNodes[0] }, _.elementInside = function(t, e) {
                        if (t === e) return !0;
                        for (; t = t.parentNode;)
                            if (t === e) return !0;
                        return !1
                    }, _.getElement = function(t, e) { var n; if ("string" == typeof t ? n = document.querySelector(t) : null != t.nodeType && (n = t), null == n) throw new Error("Invalid `".concat(e, "` option provided. Please provide a CSS selector or a plain HTML element.")); return n }, _.getElements = function(t, e) { var n, r; if (t instanceof Array) { r = []; try { var i, o = c(t, !0); try { for (o.s(); !(i = o.n()).done;) n = i.value, r.push(this.getElement(n, e)) } catch (t) { o.e(t) } finally { o.f() } } catch (t) { r = null } } else if ("string" == typeof t) { r = []; var a, s = c(document.querySelectorAll(t), !0); try { for (s.s(); !(a = s.n()).done;) n = a.value, r.push(n) } catch (t) { s.e(t) } finally { s.f() } } else null != t.nodeType && (r = [t]); if (null == r || !r.length) throw new Error("Invalid `".concat(e, "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.")); return r }, _.confirm = function(t, e, n) { return window.confirm(t) ? e() : null != n ? n() : void 0 }, _.isValidFile = function(t, e) {
                        if (!e) return !0;
                        e = e.split(",");
                        var n, r = t.type,
                            i = r.replace(/\/.*$/, ""),
                            o = c(e, !0);
                        try { for (o.s(); !(n = o.n()).done;) { var a = n.value; if ("." === (a = a.trim()).charAt(0)) { if (-1 !== t.name.toLowerCase().indexOf(a.toLowerCase(), t.name.length - a.length)) return !0 } else if (/\/\*$/.test(a)) { if (i === a.replace(/\/.*$/, "")) return !0 } else if (r === a) return !0 } } catch (t) { o.e(t) } finally { o.f() }
                        return !1
                    }, "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function(t) { return this.each((function() { return new _(this, t) })) }), _.ADDED = "added", _.QUEUED = "queued", _.ACCEPTED = _.QUEUED, _.UPLOADING = "uploading", _.PROCESSING = _.UPLOADING, _.CANCELED = "canceled", _.ERROR = "error", _.SUCCESS = "success";
                    var E = function(t, e, n, r, i, o, a, s, u, l) {
                            var c = function(t) {
                                t.naturalWidth;
                                var e = t.naturalHeight,
                                    n = document.createElement("canvas");
                                n.width = 1, n.height = e;
                                var r = n.getContext("2d");
                                r.drawImage(t, 0, 0);
                                for (var i = r.getImageData(1, 0, 1, e).data, o = 0, a = e, s = e; s > o;) 0 === i[4 * (s - 1) + 3] ? a = s : o = s, s = a + o >> 1;
                                var u = s / e;
                                return 0 === u ? 1 : u
                            }(e);
                            return t.drawImage(e, n, r, i, o, a, s, u, l / c)
                        },
                        T = function() {
                            function t() { h(this, t) }
                            return p(t, null, [{ key: "initClass", value: function() { this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" } }, { key: "encode64", value: function(t) { for (var e = "", n = void 0, r = void 0, i = "", o = void 0, a = void 0, s = void 0, u = "", l = 0; o = (n = t[l++]) >> 2, a = (3 & n) << 4 | (r = t[l++]) >> 4, s = (15 & r) << 2 | (i = t[l++]) >> 6, u = 63 & i, isNaN(r) ? s = u = 64 : isNaN(i) && (u = 64), e = e + this.KEY_STR.charAt(o) + this.KEY_STR.charAt(a) + this.KEY_STR.charAt(s) + this.KEY_STR.charAt(u), n = r = i = "", o = a = s = u = "", l < t.length;); return e } }, {
                                key: "restore",
                                value: function(t, e) {
                                    if (!t.match("data:image/jpeg;base64,")) return e;
                                    var n = this.decode64(t.replace("data:image/jpeg;base64,", "")),
                                        r = this.slice2Segments(n),
                                        i = this.exifManipulation(e, r);
                                    return "data:image/jpeg;base64,".concat(this.encode64(i))
                                }
                            }, {
                                key: "exifManipulation",
                                value: function(t, e) {
                                    var n = this.getExifArray(e),
                                        r = this.insertExif(t, n);
                                    return new Uint8Array(r)
                                }
                            }, {
                                key: "getExifArray",
                                value: function(t) {
                                    for (var e = void 0, n = 0; n < t.length;) {
                                        if (255 === (e = t[n])[0] & 225 === e[1]) return e;
                                        n++
                                    }
                                    return []
                                }
                            }, {
                                key: "insertExif",
                                value: function(t, e) {
                                    var n = t.replace("data:image/jpeg;base64,", ""),
                                        r = this.decode64(n),
                                        i = r.indexOf(255, 3),
                                        o = r.slice(0, i),
                                        a = r.slice(i),
                                        s = o;
                                    return s = (s = s.concat(e)).concat(a)
                                }
                            }, {
                                key: "slice2Segments",
                                value: function(t) {
                                    for (var e = 0, n = []; !(255 === t[e] & 218 === t[e + 1]);) {
                                        if (255 === t[e] & 216 === t[e + 1]) e += 2;
                                        else {
                                            var r = e + (256 * t[e + 2] + t[e + 3]) + 2,
                                                i = t.slice(e, r);
                                            n.push(i), e = r
                                        }
                                        if (e > t.length) break
                                    }
                                    return n
                                }
                            }, {
                                key: "decode64",
                                value: function(t) {
                                    var e = void 0,
                                        n = void 0,
                                        r = "",
                                        i = void 0,
                                        o = void 0,
                                        a = "",
                                        s = 0,
                                        u = [];
                                    for (/[^A-Za-z0-9\+\/\=]/g.exec(t) && console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""); e = this.KEY_STR.indexOf(t.charAt(s++)) << 2 | (i = this.KEY_STR.indexOf(t.charAt(s++))) >> 4, n = (15 & i) << 4 | (o = this.KEY_STR.indexOf(t.charAt(s++))) >> 2, r = (3 & o) << 6 | (a = this.KEY_STR.indexOf(t.charAt(s++))), u.push(e), 64 !== o && u.push(n), 64 !== a && u.push(r), e = n = r = "", i = o = a = "", s < t.length;);
                                    return u
                                }
                            }]), t
                        }();
                    T.initClass(), _._autoDiscoverFunction = function() { if (_.autoDiscover) return _.discover() },
                        function(t, e) {
                            var n = !1,
                                r = !0,
                                i = t.document,
                                o = i.documentElement,
                                a = i.addEventListener ? "addEventListener" : "attachEvent",
                                s = i.addEventListener ? "removeEventListener" : "detachEvent",
                                u = i.addEventListener ? "" : "on",
                                l = function r(o) { if ("readystatechange" !== o.type || "complete" === i.readyState) return ("load" === o.type ? t : i)[s](u + o.type, r, !1), !n && (n = !0) ? e.call(t, o.type || o) : void 0 };
                            if ("complete" !== i.readyState) {
                                if (i.createEventObject && o.doScroll) {
                                    try { r = !t.frameElement } catch (t) {}
                                    r && function t() { try { o.doScroll("left") } catch (e) { return void setTimeout(t, 50) } return l("poll") }()
                                }
                                i[a](u + "DOMContentLoaded", l, !1), i[a](u + "readystatechange", l, !1), t[a](u + "load", l, !1)
                            }
                        }(window, _._autoDiscoverFunction), window.Dropzone = _;
                    var C = _
                }(), r
            }()
        }, t.exports = r()
    },
    endd: function(t, e, n) {
        "use strict";

        function r(t) { this.message = t }
        r.prototype.toString = function() { return "Cancel" + (this.message ? ": " + this.message : "") }, r.prototype.__CANCEL__ = !0, t.exports = r
    },
    eqyj: function(t, e, n) {
        "use strict";
        var r = n("xTJ+");
        t.exports = r.isStandardBrowserEnv() ? {
            write: function(t, e, n, i, o, a) {
                var s = [];
                s.push(t + "=" + encodeURIComponent(e)), r.isNumber(n) && s.push("expires=" + new Date(n).toGMTString()), r.isString(i) && s.push("path=" + i), r.isString(o) && s.push("domain=" + o), !0 === a && s.push("secure"), document.cookie = s.join("; ")
            },
            read: function(t) { var e = document.cookie.match(new RegExp("(^|;\\s*)(" + t + ")=([^;]*)")); return e ? decodeURIComponent(e[3]) : null },
            remove: function(t) { this.write(t, "", Date.now() - 864e5) }
        } : { write: function() {}, read: function() { return null }, remove: function() {} }
    },
    fPeS: function(t, e, n) {
        var r, i;
        ! function() {
            "use strict";
            void 0 === (i = "function" == typeof(r = ["jquery", "./data", "./disable-selection", "./focusable", "./form", "./ie", "./keycode", "./labels", "./jquery-patch.js", "./plugin", "./safe-active-element", "./safe-blur", "./scroll-parent", "./tabbable", "./unique-id", "./version"]) ? r.call(e, n, e, t) : r) || (t.exports = i)
        }()
    },
    g7np: function(t, e, n) {
        "use strict";
        var r = n("2SVd"),
            i = n("5oMp");
        t.exports = function(t, e) { return t && !r(e) ? i(t, e) : e }
    },
    hIuj: function(t, e, n) {
        "use strict";
        var r = n("SgzI"),
            i = {};
        ["object", "boolean", "number", "function", "string", "symbol"].forEach((function(t, e) { i[t] = function(n) { return typeof n === t || "a" + (e < 1 ? "n " : " ") + t } }));
        var o = {},
            a = r.version.split(".");

        function s(t, e) { for (var n = e ? e.split(".") : a, r = t.split("."), i = 0; i < 3; i++) { if (n[i] > r[i]) return !0; if (n[i] < r[i]) return !1 } return !1 }
        i.transitional = function(t, e, n) {
            var i = e && s(e);

            function a(t, e) { return "[Axios v" + r.version + "] Transitional option '" + t + "'" + e + (n ? ". " + n : "") }
            return function(n, r, s) { if (!1 === t) throw new Error(a(r, " has been removed in " + e)); return i && !o[r] && (o[r] = !0, console.warn(a(r, " has been deprecated since v" + e + " and will be removed in the near future"))), !t || t(n, r, s) }
        }, t.exports = {
            isOlderVersion: s,
            assertOptions: function(t, e, n) {
                if ("object" != typeof t) throw new TypeError("options must be an object");
                for (var r = Object.keys(t), i = r.length; i-- > 0;) {
                    var o = r[i],
                        a = e[o];
                    if (a) {
                        var s = t[o],
                            u = void 0 === s || a(s, o, t);
                        if (!0 !== u) throw new TypeError("option " + o + " must be " + u)
                    } else if (!0 !== n) throw Error("Unknown option " + o)
                }
            },
            validators: i
        }
    },
    iGnl: function(t, e, n) {
        var r, i, o;
        ! function(a) {
            "use strict";
            i = [n("EVdn"), n("NHgk"), n("Qwlt"), n("MIQu")], void 0 === (o = "function" == typeof(r = function(t) {
                var e = !1;
                return t(document).on("mouseup", (function() { e = !1 })), t.widget("ui.mouse", {
                    version: "1.13.2",
                    options: { cancel: "input, textarea, button, select, option", distance: 1, delay: 0 },
                    _mouseInit: function() {
                        var e = this;
                        this.element.on("mousedown." + this.widgetName, (function(t) { return e._mouseDown(t) })).on("click." + this.widgetName, (function(n) { if (!0 === t.data(n.target, e.widgetName + ".preventClickEvent")) return t.removeData(n.target, e.widgetName + ".preventClickEvent"), n.stopImmediatePropagation(), !1 })), this.started = !1
                    },
                    _mouseDestroy: function() { this.element.off("." + this.widgetName), this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate) },
                    _mouseDown: function(n) {
                        if (!e) {
                            this._mouseMoved = !1, this._mouseStarted && this._mouseUp(n), this._mouseDownEvent = n;
                            var r = this,
                                i = 1 === n.which,
                                o = !("string" != typeof this.options.cancel || !n.target.nodeName) && t(n.target).closest(this.options.cancel).length;
                            return !(i && !o && this._mouseCapture(n)) || (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout((function() { r.mouseDelayMet = !0 }), this.options.delay)), this._mouseDistanceMet(n) && this._mouseDelayMet(n) && (this._mouseStarted = !1 !== this._mouseStart(n), !this._mouseStarted) ? (n.preventDefault(), !0) : (!0 === t.data(n.target, this.widgetName + ".preventClickEvent") && t.removeData(n.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function(t) { return r._mouseMove(t) }, this._mouseUpDelegate = function(t) { return r._mouseUp(t) }, this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate), n.preventDefault(), e = !0, !0))
                        }
                    },
                    _mouseMove: function(e) {
                        if (this._mouseMoved) {
                            if (t.ui.ie && (!document.documentMode || document.documentMode < 9) && !e.button) return this._mouseUp(e);
                            if (!e.which)
                                if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0;
                                else if (!this.ignoreMissingWhich) return this._mouseUp(e)
                        }
                        return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, e), this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted)
                    },
                    _mouseUp: function(n) { this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, n.target === this._mouseDownEvent.target && t.data(n.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(n)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, e = !1, n.preventDefault() },
                    _mouseDistanceMet: function(t) { return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance },
                    _mouseDelayMet: function() { return this.mouseDelayMet },
                    _mouseStart: function() {},
                    _mouseDrag: function() {},
                    _mouseStop: function() {},
                    _mouseCapture: function() { return !0 }
                })
            }) ? r.apply(e, i) : r) || (t.exports = o)
        }()
    },
    "jfS+": function(t, e, n) {
        "use strict";
        var r = n("endd");

        function i(t) {
            if ("function" != typeof t) throw new TypeError("executor must be a function.");
            var e;
            this.promise = new Promise((function(t) { e = t }));
            var n = this;
            t((function(t) { n.reason || (n.reason = new r(t), e(n.reason)) }))
        }
        i.prototype.throwIfRequested = function() { if (this.reason) throw this.reason }, i.source = function() { var t; return { token: new i((function(e) { t = e })), cancel: t } }, t.exports = i
    },
    tQ2B: function(t, e, n) {
        "use strict";
        var r = n("xTJ+"),
            i = n("Rn+g"),
            o = n("eqyj"),
            a = n("MLWZ"),
            s = n("g7np"),
            u = n("w0Vi"),
            l = n("OTTw"),
            c = n("LYNF");
        t.exports = function(t) {
            return new Promise((function(e, n) {
                var f = t.data,
                    h = t.headers,
                    d = t.responseType;
                r.isFormData(f) && delete h["Content-Type"];
                var p = new XMLHttpRequest;
                if (t.auth) {
                    var v = t.auth.username || "",
                        g = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "";
                    h.Authorization = "Basic " + btoa(v + ":" + g)
                }
                var m = s(t.baseURL, t.url);

                function y() {
                    if (p) {
                        var r = "getAllResponseHeaders" in p ? u(p.getAllResponseHeaders()) : null,
                            o = { data: d && "text" !== d && "json" !== d ? p.response : p.responseText, status: p.status, statusText: p.statusText, headers: r, config: t, request: p };
                        i(e, n, o), p = null
                    }
                }
                if (p.open(t.method.toUpperCase(), a(m, t.params, t.paramsSerializer), !0), p.timeout = t.timeout, "onloadend" in p ? p.onloadend = y : p.onreadystatechange = function() { p && 4 === p.readyState && (0 !== p.status || p.responseURL && 0 === p.responseURL.indexOf("file:")) && setTimeout(y) }, p.onabort = function() { p && (n(c("Request aborted", t, "ECONNABORTED", p)), p = null) }, p.onerror = function() { n(c("Network Error", t, null, p)), p = null }, p.ontimeout = function() {
                        var e = "timeout of " + t.timeout + "ms exceeded";
                        t.timeoutErrorMessage && (e = t.timeoutErrorMessage), n(c(e, t, t.transitional && t.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", p)), p = null
                    }, r.isStandardBrowserEnv()) {
                    var b = (t.withCredentials || l(m)) && t.xsrfCookieName ? o.read(t.xsrfCookieName) : void 0;
                    b && (h[t.xsrfHeaderName] = b)
                }
                "setRequestHeader" in p && r.forEach(h, (function(t, e) { void 0 === f && "content-type" === e.toLowerCase() ? delete h[e] : p.setRequestHeader(e, t) })), r.isUndefined(t.withCredentials) || (p.withCredentials = !!t.withCredentials), d && "json" !== d && (p.responseType = t.responseType), "function" == typeof t.onDownloadProgress && p.addEventListener("progress", t.onDownloadProgress), "function" == typeof t.onUploadProgress && p.upload && p.upload.addEventListener("progress", t.onUploadProgress), t.cancelToken && t.cancelToken.promise.then((function(t) { p && (p.abort(), n(t), p = null) })), f || (f = null), p.send(f)
            }))
        }
    },
    ulXM: function(t, e) {},
    vDqi: function(t, e, n) { t.exports = n("zuR4") },
    w0Vi: function(t, e, n) {
        "use strict";
        var r = n("xTJ+"),
            i = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
        t.exports = function(t) {
            var e, n, o, a = {};
            return t ? (r.forEach(t.split("\n"), (function(t) {
                if (o = t.indexOf(":"), e = r.trim(t.substr(0, o)).toLowerCase(), n = r.trim(t.substr(o + 1)), e) {
                    if (a[e] && i.indexOf(e) >= 0) return;
                    a[e] = "set-cookie" === e ? (a[e] ? a[e] : []).concat([n]) : a[e] ? a[e] + ", " + n : n
                }
            })), a) : a
        }
    },
    xAGQ: function(t, e, n) {
        "use strict";
        var r = n("xTJ+"),
            i = n("JEQr");
        t.exports = function(t, e, n) { var o = this || i; return r.forEach(n, (function(n) { t = n.call(o, t, e) })), t }
    },
    "xTJ+": function(t, e, n) {
        "use strict";
        var r = n("HSsa"),
            i = Object.prototype.toString;

        function o(t) { return "[object Array]" === i.call(t) }

        function a(t) { return void 0 === t }

        function s(t) { return null !== t && "object" == typeof t }

        function u(t) { if ("[object Object]" !== i.call(t)) return !1; var e = Object.getPrototypeOf(t); return null === e || e === Object.prototype }

        function l(t) { return "[object Function]" === i.call(t) }

        function c(t, e) {
            if (null != t)
                if ("object" != typeof t && (t = [t]), o(t))
                    for (var n = 0, r = t.length; n < r; n++) e.call(null, t[n], n, t);
                else
                    for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && e.call(null, t[i], i, t)
        }
        t.exports = {
            isArray: o,
            isArrayBuffer: function(t) { return "[object ArrayBuffer]" === i.call(t) },
            isBuffer: function(t) { return null !== t && !a(t) && null !== t.constructor && !a(t.constructor) && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t) },
            isFormData: function(t) { return "undefined" != typeof FormData && t instanceof FormData },
            isArrayBufferView: function(t) { return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer && t.buffer instanceof ArrayBuffer },
            isString: function(t) { return "string" == typeof t },
            isNumber: function(t) { return "number" == typeof t },
            isObject: s,
            isPlainObject: u,
            isUndefined: a,
            isDate: function(t) { return "[object Date]" === i.call(t) },
            isFile: function(t) { return "[object File]" === i.call(t) },
            isBlob: function(t) { return "[object Blob]" === i.call(t) },
            isFunction: l,
            isStream: function(t) { return s(t) && l(t.pipe) },
            isURLSearchParams: function(t) { return "undefined" != typeof URLSearchParams && t instanceof URLSearchParams },
            isStandardBrowserEnv: function() { return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && ("undefined" != typeof window && "undefined" != typeof document) },
            forEach: c,
            merge: function t() {
                var e = {};

                function n(n, r) { u(e[r]) && u(n) ? e[r] = t(e[r], n) : u(n) ? e[r] = t({}, n) : o(n) ? e[r] = n.slice() : e[r] = n }
                for (var r = 0, i = arguments.length; r < i; r++) c(arguments[r], n);
                return e
            },
            extend: function(t, e, n) { return c(e, (function(e, i) { t[i] = n && "function" == typeof e ? r(e, n) : e })), t },
            trim: function(t) { return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "") },
            stripBOM: function(t) { return 65279 === t.charCodeAt(0) && (t = t.slice(1)), t }
        }
    },
    yK9s: function(t, e, n) {
        "use strict";
        var r = n("xTJ+");
        t.exports = function(t, e) { r.forEach(t, (function(n, r) { r !== e && r.toUpperCase() === e.toUpperCase() && (t[e] = n, delete t[r]) })) }
    },
    yLpj: function(t, e) {
        var n;
        n = function() { return this }();
        try { n = n || new Function("return this")() } catch (t) { "object" == typeof window && (n = window) }
        t.exports = n
    },
    zuR4: function(t, e, n) {
        "use strict";
        var r = n("xTJ+"),
            i = n("HSsa"),
            o = n("CgaS"),
            a = n("SntB");

        function s(t) {
            var e = new o(t),
                n = i(o.prototype.request, e);
            return r.extend(n, o.prototype, e), r.extend(n, e), n
        }
        var u = s(n("JEQr"));
        u.Axios = o, u.create = function(t) { return s(a(u.defaults, t)) }, u.Cancel = n("endd"), u.CancelToken = n("jfS+"), u.isCancel = n("Lmem"), u.all = function(t) { return Promise.all(t) }, u.spread = n("DfZB"), u.isAxiosError = n("XwJu"), t.exports = u, t.exports.default = u
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvc2Nyb2xsLXBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL2Rpc3QvZXNtL3BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvaWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL3NvcnRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvanMvYm9vdHN0cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJvcHpvbmUvZGlzdC9kcm9wem9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS91aS93aWRnZXRzL21vdXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidXJsIiwidGVzdCIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInJlcGxhY2UiLCJmYWN0b3J5IiwiJCIsImZuIiwic2Nyb2xsUGFyZW50IiwiaW5jbHVkZUhpZGRlbiIsInBvc2l0aW9uIiwidGhpcyIsImNzcyIsImV4Y2x1ZGVTdGF0aWNQYXJlbnQiLCJvdmVyZmxvd1JlZ2V4IiwicGFyZW50cyIsImZpbHRlciIsInBhcmVudCIsImVxIiwibGVuZ3RoIiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiaXNCcm93c2VyIiwid2luZG93IiwibmF2aWdhdG9yIiwidGltZW91dER1cmF0aW9uIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImRlYm91bmNlIiwiUHJvbWlzZSIsImNhbGxlZCIsInJlc29sdmUiLCJ0aGVuIiwic2NoZWR1bGVkIiwic2V0VGltZW91dCIsImlzRnVuY3Rpb24iLCJmdW5jdGlvblRvQ2hlY2siLCJ0b1N0cmluZyIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImVsZW1lbnQiLCJub2RlVHlwZSIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFBhcmVudE5vZGUiLCJub2RlTmFtZSIsInBhcmVudE5vZGUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZ2V0UmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZSIsInJlZmVyZW5jZU5vZGUiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImlzSUUxMCIsImlzSUUiLCJ2ZXJzaW9uIiwiZ2V0T2Zmc2V0UGFyZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRSb290Iiwibm9kZSIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwib3JkZXIiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJzdGFydCIsImVuZCIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiY29udGFpbnMiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInNpZGUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJ1cHBlclNpZGUiLCJodG1sIiwic2Nyb2xsaW5nRWxlbWVudCIsImluY2x1ZGVTY3JvbGwiLCJyZWN0Iiwic3VidHJhY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibW9kaWZpZXIiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwicGFyc2VGbG9hdCIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiTWF0aCIsIm1heCIsInBhcnNlSW50IiwiZ2V0V2luZG93U2l6ZXMiLCJoZWlnaHQiLCJ3aWR0aCIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib2JqIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzb3VyY2UiLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImUiLCJyZXN1bHQiLCJzaXplcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaG9yaXpTY3JvbGxiYXIiLCJvZmZzZXRXaWR0aCIsInZlcnRTY3JvbGxiYXIiLCJvZmZzZXRIZWlnaHQiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJjaGlsZHJlbiIsImZpeGVkUG9zaXRpb24iLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJwYXJlbnRSZWN0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0IiwiaXNGaXhlZCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZWwiLCJnZXRCb3VuZGFyaWVzIiwicG9wcGVyIiwicGFkZGluZyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllcyIsImJvdW5kYXJpZXNOb2RlIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiZ2V0QXJlYSIsIl9yZWYiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwia2V5cyIsIm1hcCIsImFyZWEiLCJzb3J0IiwiYSIsImIiLCJmaWx0ZXJlZEFyZWFzIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsInNwbGl0IiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsInN0YXRlIiwiY29tbW9uT2Zmc2V0UGFyZW50IiwiZ2V0T3V0ZXJTaXplcyIsIngiLCJtYXJnaW5Cb3R0b20iLCJ5IiwibWFyZ2luUmlnaHQiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImhhc2giLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiZmluZCIsImFyciIsImNoZWNrIiwiQXJyYXkiLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJkYXRhIiwiZW5kcyIsInNsaWNlIiwicHJvcCIsImZpbmRJbmRleCIsImN1ciIsIm1hdGNoIiwiZm9yRWFjaCIsImNvbnNvbGUiLCJ3YXJuIiwiZW5hYmxlZCIsInVwZGF0ZSIsImlzRGVzdHJveWVkIiwiYXJyb3dTdHlsZXMiLCJhdHRyaWJ1dGVzIiwiZmxpcHBlZCIsIm9wdGlvbnMiLCJwb3NpdGlvbkZpeGVkIiwiZmxpcCIsIm9yaWdpbmFsUGxhY2VtZW50IiwiaXNDcmVhdGVkIiwib25VcGRhdGUiLCJvbkNyZWF0ZSIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJwcmVmaXgiLCJ0b0NoZWNrIiwic3R5bGUiLCJkZXN0cm95IiwicmVtb3ZlQXR0cmlidXRlIiwid2lsbENoYW5nZSIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInJlbW92ZU9uRGVzdHJveSIsInJlbW92ZUNoaWxkIiwiZ2V0V2luZG93Iiwic2V0dXBFdmVudExpc3RlbmVycyIsInVwZGF0ZUJvdW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiZXZlbnQiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJwdXNoIiwiZXZlbnRzRW5hYmxlZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwic2NoZWR1bGVVcGRhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsImluZGV4IiwiY29uY2F0IiwicmV2ZXJzZSIsIkJFSEFWSU9SUyIsInBhcnNlT2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJ0cmltIiwiZGl2aWRlciIsInNlYXJjaCIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwic3RyIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwic2hpZnQiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInRyYW5zZm9ybSIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJtaW4iLCJrZWVwVG9nZXRoZXIiLCJmbG9vciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJ0b0xvd2VyQ2FzZSIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJzdGVwIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb25CeVJlZiIsImZsaXBWYXJpYXRpb25zIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBWYXJpYXRpb25zQnlDb250ZW50IiwiZmxpcHBlZFZhcmlhdGlvbiIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsIm5vUm91bmQiLCJ2IiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsImludmVydFRvcCIsImludmVydExlZnQiLCJhcHBseVN0eWxlIiwic2V0QXR0cmlidXRlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiUG9wcGVyIiwiX3RoaXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJqcXVlcnkiLCJVdGlscyIsImdsb2JhbCIsIlBvcHBlclV0aWxzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJhcmdzIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsInV0aWxzIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiaGFuZGxlcnMiLCJ1c2UiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0IiwiaWQiLCJoIiwiYnVpbGRVUkwiLCJkaXNwYXRjaFJlcXVlc3QiLCJtZXJnZUNvbmZpZyIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiZGVmYXVsdHMiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJjb25maWciLCJtZXRob2QiLCJ0cmFuc2l0aW9uYWwiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJwcm9taXNlIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJlcnJvciIsInJlamVjdCIsImdldFVyaSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJleHRlbmQiLCJleHByIiwicHNldWRvcyIsImNyZWF0ZVBzZXVkbyIsImRhdGFOYW1lIiwiZWxlbSIsInciLCJub0dsb2JhbCIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpdGVtIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiaW5pdCIsImlzQXJyYXlMaWtlIiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiZmlyc3QiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImoiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJpdGVyYXRvciIsIl9pIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5wdXQiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsImZhaWwiLCJDYWxsYmFja3MiLCJfIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsImZpcmluZ0luZGV4IiwiZmlyZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJzZXQiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsImVyciIsInNhZmVBY3RpdmVFbGVtZW50IiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwibWVhc3VyZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsInNjcm9sbGJveFNpemVCdWdneSIsIm1hcmdpbiIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsImZ4IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJhbmltYXRlZCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJ0aGlzQXJnIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsImVuaGFuY2VFcnJvciIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaXNVbmRlZmluZWQiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImlzRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc09iamVjdCIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImlzU3RyaW5nIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5U2FmZWx5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJzdHJpY3RKU09OUGFyc2luZyIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwicmVxdWlyZSIsImF4aW9zIiwiRHJvcHpvbmUiLCJfX0NBTkNFTF9fIiwiRlVOQ19FUlJPUl9URVhUIiwiUExBQ0VIT0xERVIiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW1TdGFydCIsInJlV2hpdGVzcGFjZSIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiZnJlZVBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImFycmF5QWdncmVnYXRvciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJwcmVkaWNhdGUiLCJhcnJheUZpbHRlciIsInJlc0luZGV4IiwiYXJyYXlJbmNsdWRlcyIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjb21wYXJhdG9yIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJiYXNlVGltZXMiLCJiYXNlVHJpbSIsInRyaW1tZWRFbmRJbmRleCIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJjYWNoZUhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImNvdW50SG9sZGVycyIsInBsYWNlaG9sZGVyIiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsIm1hcFRvQXJyYXkiLCJzaXplIiwib3ZlckFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwidW5pY29kZVRvQXJyYXkiLCJhc2NpaVRvQXJyYXkiLCJ1bmVzY2FwZUh0bWxDaGFyIiwicnVuSW5Db250ZXh0IiwicGljayIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsIm9iamVjdENyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsIm5hdGl2ZUZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsIm51bWJlciIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImJhc2VHZXQiLCJwYXRoIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsImJhc2VTb3J0QnkiLCJvYmpDcml0ZXJpYSIsImNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiTUFYX0FSUkFZX0xFTkdUSCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyTGVuZ3RoIiwiYXJyU3RhY2tlZCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJvbGRBcnJheSIsInNob3J0T3V0IiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJhbmQiLCJtZW1vaXplIiwibWVtb2l6ZUNhcHBlZCIsInF1b3RlIiwic3ViU3RyaW5nIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZmluZExhc3RJbmRleCIsImludGVyc2VjdGlvbiIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwic29ydEJ5IiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwibHQiLCJsdGUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnRCeSIsImludm9rZSIsIm9taXQiLCJDTE9ORV9ERUVQX0ZMQUciLCJiYXNlUGljayIsInBpY2tCeSIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGUiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbUVuZCIsInRyaW1TdGFydCIsIm9taXNzaW9uIiwic3Vic3RyaW5nIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsImVhY2hSaWdodCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiaXNSaWdodCIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0Iiwid3JhcHBlZCIsInRvSlNPTiIsIndpZGdldFV1aWQiLCJ3aWRnZXRIYXNPd25Qcm9wZXJ0eSIsIndpZGdldFNsaWNlIiwid2lkZ2V0IiwiZXhpc3RpbmdDb25zdHJ1Y3RvciIsImJhc2VQcm90b3R5cGUiLCJwcm94aWVkUHJvdG90eXBlIiwiZnVsbE5hbWUiLCJXaWRnZXQiLCJfY3JlYXRlV2lkZ2V0IiwiX3Byb3RvIiwiX2NoaWxkQ29uc3RydWN0b3JzIiwiX3N1cGVyIiwiX3N1cGVyQXBwbHkiLCJfX3N1cGVyIiwiX19zdXBlckFwcGx5Iiwid2lkZ2V0RXZlbnRQcmVmaXgiLCJ3aWRnZXROYW1lIiwid2lkZ2V0RnVsbE5hbWUiLCJjaGlsZCIsImNoaWxkUHJvdG90eXBlIiwiYnJpZGdlIiwiaW5wdXRJbmRleCIsImlucHV0TGVuZ3RoIiwiaXNNZXRob2RDYWxsIiwibWV0aG9kVmFsdWUiLCJfaW5pdCIsImRlZmF1bHRFbGVtZW50IiwidXVpZCIsImV2ZW50TmFtZXNwYWNlIiwiYmluZGluZ3MiLCJob3ZlcmFibGUiLCJmb2N1c2FibGUiLCJjbGFzc2VzRWxlbWVudExvb2t1cCIsIl9vbiIsIl9nZXRDcmVhdGVPcHRpb25zIiwiX2NyZWF0ZSIsIl9zZXRPcHRpb25EaXNhYmxlZCIsIl90cmlnZ2VyIiwiX2dldENyZWF0ZUV2ZW50RGF0YSIsIl9kZXN0cm95IiwiX3JlbW92ZUNsYXNzIiwiY3VyT3B0aW9uIiwiX3NldE9wdGlvbnMiLCJfc2V0T3B0aW9uIiwiX3NldE9wdGlvbkNsYXNzZXMiLCJjbGFzc0tleSIsImN1cnJlbnRFbGVtZW50cyIsIl9jbGFzc2VzIiwiX3RvZ2dsZUNsYXNzIiwiZW5hYmxlIiwiZnVsbCIsImJpbmRSZW1vdmVFdmVudCIsIm5vZGVzVG9CaW5kIiwicHJvY2Vzc0NsYXNzU3RyaW5nIiwiY2hlY2tPcHRpb24iLCJfdW50cmFja0NsYXNzZXNFbGVtZW50IiwiX29mZiIsIl9hZGRDbGFzcyIsInN1cHByZXNzRGlzYWJsZWRDaGVjayIsImRlbGVnYXRlRWxlbWVudCIsImhhbmRsZXJQcm94eSIsImV2ZW50TmFtZSIsIl9kZWxheSIsIl9ob3ZlcmFibGUiLCJfZm9jdXNhYmxlIiwiZm9jdXNvdXQiLCJkZWZhdWx0RWZmZWN0IiwiaGFzT3B0aW9ucyIsImVmZmVjdCIsImVmZmVjdE5hbWUiLCJlZmZlY3RzIiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsInVpIiwiaWUiLCJtb3VzZSIsImNvbm5lY3RXaXRoIiwiY29udGFpbm1lbnQiLCJjdXJzb3IiLCJjdXJzb3JBdCIsImRyb3BPbkVtcHR5IiwiZm9yY2VQbGFjZWhvbGRlclNpemUiLCJmb3JjZUhlbHBlclNpemUiLCJncmlkIiwiaGVscGVyIiwiaXRlbXMiLCJyZXZlcnQiLCJzY3JvbGwiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNjcm9sbFNwZWVkIiwidG9sZXJhbmNlIiwiekluZGV4IiwiYWN0aXZhdGUiLCJiZWZvcmVTdG9wIiwiY2hhbmdlIiwiZGVhY3RpdmF0ZSIsIm91dCIsInJlY2VpdmUiLCJfaXNPdmVyQXhpcyIsIl9pc0Zsb2F0aW5nIiwiY29udGFpbmVyQ2FjaGUiLCJyZWZyZXNoIiwiX21vdXNlSW5pdCIsIl9zZXRIYW5kbGVDbGFzc05hbWUiLCJfbW91c2VEZXN0cm95IiwiX21vdXNlQ2FwdHVyZSIsIm92ZXJyaWRlSGFuZGxlIiwiY3VycmVudEl0ZW0iLCJ2YWxpZEhhbmRsZSIsInJldmVydGluZyIsIl9yZWZyZXNoSXRlbXMiLCJfcmVtb3ZlQ3VycmVudHNGcm9tSXRlbXMiLCJfbW91c2VTdGFydCIsIm5vQWN0aXZhdGlvbiIsImN1cnJlbnRDb250YWluZXIiLCJyZWZyZXNoUG9zaXRpb25zIiwiX2NyZWF0ZUhlbHBlciIsIl9jYWNoZUhlbHBlclByb3BvcnRpb25zIiwiX2NhY2hlTWFyZ2lucyIsIm1hcmdpbnMiLCJfZ2V0UmVsYXRpdmVPZmZzZXQiLCJjc3NQb3NpdGlvbiIsIl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyIiwiZG9tUG9zaXRpb24iLCJfY3JlYXRlUGxhY2Vob2xkZXIiLCJfZ2V0UGFyZW50T2Zmc2V0IiwiX3NldENvbnRhaW5tZW50Iiwic3RvcmVkQ3Vyc29yIiwic3RvcmVkU3R5bGVzaGVldCIsIl9zdG9yZWRaSW5kZXgiLCJfc3RvcmVkT3BhY2l0eSIsInRhZ05hbWUiLCJvdmVyZmxvd09mZnNldCIsIl91aUhhc2giLCJfcHJlc2VydmVIZWxwZXJQcm9wb3J0aW9ucyIsImNvbnRhaW5lcnMiLCJkZG1hbmFnZXIiLCJkcm9wQmVoYXZpb3VyIiwicHJlcGFyZU9mZnNldHMiLCJkcmFnZ2luZyIsIm9yaWdpbmFsUG9zaXRpb24iLCJfZ2VuZXJhdGVQb3NpdGlvbiIsIm9yaWdpbmFsUGFnZVgiLCJvcmlnaW5hbFBhZ2VZIiwibGFzdFBvc2l0aW9uQWJzIiwicG9zaXRpb25BYnMiLCJfY29udmVydFBvc2l0aW9uVG8iLCJfbW91c2VEcmFnIiwiX3Njcm9sbCIsInNjcm9sbGVkIiwiaXRlbUVsZW1lbnQiLCJfcmVmcmVzaEl0ZW1Qb3NpdGlvbnMiLCJkcmFnRGlyZWN0aW9uIiwidmVydGljYWwiLCJfZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uIiwiaG9yaXpvbnRhbCIsIl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbiIsIl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIiLCJkaXJlY3Rpb24iLCJfaW50ZXJzZWN0c1dpdGhTaWRlcyIsIl9yZWFycmFuZ2UiLCJfY29udGFjdENvbnRhaW5lcnMiLCJkcmFnIiwiX21vdXNlU3RvcCIsIm5vUHJvcGFnYXRpb24iLCJfY2xlYXIiLCJfbW91c2VVcCIsIl9zdG9yZWRDU1MiLCJfbm9GaW5hbFNvcnQiLCJfZ2V0SXRlbXNBc2pRdWVyeSIsImNvbm5lY3RlZCIsInJlcyIsImF0dHJpYnV0ZSIsImV4cHJlc3Npb24iLCJfaW50ZXJzZWN0c1dpdGgiLCJ4MSIsIngyIiwiaGVscGVyUHJvcG9ydGlvbnMiLCJ5MSIsInkyIiwiZHlDbGljayIsImR4Q2xpY2siLCJpc092ZXJFbGVtZW50SGVpZ2h0IiwiaXNPdmVyRWxlbWVudFdpZHRoIiwiaXNPdmVyRWxlbWVudCIsImZvcmNlUG9pbnRlckZvckNvbnRhaW5lcnMiLCJ2ZXJ0aWNhbERpcmVjdGlvbiIsImhvcml6b250YWxEaXJlY3Rpb24iLCJpc092ZXJCb3R0b21IYWxmIiwiaXNPdmVyUmlnaHRIYWxmIiwiX2Nvbm5lY3RXaXRoIiwiaW5zdCIsInF1ZXJpZXMiLCJhZGRJdGVtcyIsInRhcmdldERhdGEiLCJfcXVlcmllcyIsInF1ZXJpZXNMZW5ndGgiLCJ0b2xlcmFuY2VFbGVtZW50Iiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiY3VzdG9tIiwicmVmcmVzaENvbnRhaW5lcnMiLCJfY3JlYXRlVHJQbGFjZWhvbGRlciIsInNvdXJjZVRyIiwidGFyZ2V0VHIiLCJkaXN0IiwiaXRlbVdpdGhMZWFzdERpc3RhbmNlIiwicG9zUHJvcGVydHkiLCJzaXplUHJvcGVydHkiLCJuZWFyQm90dG9tIiwiaW5uZXJtb3N0Q29udGFpbmVyIiwiaW5uZXJtb3N0SW5kZXgiLCJhYnMiLCJwbyIsImNlIiwiY28iLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxXaWR0aCIsIm1vZCIsInNjcm9sbElzUm9vdE5vZGUiLCJoYXJkUmVmcmVzaCIsImRlbGF5ZWRUcmlnZ2VycyIsImRlbGF5RXZlbnQiLCJmcm9tT3V0c2lkZSIsImNhbmNlbEhlbHBlclJlbW92YWwiLCJfaW5zdCIsInNlbmRlciIsImlzQXhpb3NFcnJvciIsImRlc2NyaXB0aW9uIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwiY3JlYXRlRXJyb3IiLCJfaW50ZXJvcERlZmF1bHRMZWdhY3kiLCIkX19kZWZhdWx0IiwiUG9wcGVyX19kZWZhdWx0IiwiX2RlZmluZVByb3BlcnRpZXMiLCJfY3JlYXRlQ2xhc3MiLCJfc2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsIlV0aWwiLCJUUkFOU0lUSU9OX0VORCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiZ2V0VUlEIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImhyZWZBdHRyIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwicmVmbG93Iiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwiQm9vbGVhbiIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWdUeXBlcyIsImV4cGVjdGVkVHlwZXMiLCJ2YWx1ZVR5cGUiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsIlNoYWRvd1Jvb3QiLCJqUXVlcnlEZXRlY3Rpb24iLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsIkpRVUVSWV9OT19DT05GTElDVCRhIiwiQWxlcnQiLCJfZWxlbWVudCIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJfcmVtb3ZlRWxlbWVudCIsImRpc3Bvc2UiLCJjbG9zZUV2ZW50IiwiX2Rlc3Ryb3lFbGVtZW50IiwiX2pRdWVyeUludGVyZmFjZSIsIiRlbGVtZW50IiwiX2hhbmRsZURpc21pc3MiLCJhbGVydEluc3RhbmNlIiwiSlFVRVJZX05PX0NPTkZMSUNUJDkiLCJCdXR0b24iLCJzaG91bGRBdm9pZFRyaWdnZXJDaGFuZ2UiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImNsYXNzTGlzdCIsImhhc0F0dHJpYnV0ZSIsImF2b2lkVHJpZ2dlckNoYW5nZSIsImluaXRpYWxCdXR0b24iLCJpbnB1dEJ0biIsIl9sZW4iLCJfYnV0dG9uIiwiTkFNRSQ4IiwiRVZFTlRfS0VZJDgiLCJKUVVFUllfTk9fQ09ORkxJQ1QkOCIsIkRlZmF1bHQkNyIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsInRvdWNoIiwiRGVmYXVsdFR5cGUkNyIsIlBvaW50ZXJUeXBlIiwiVE9VQ0giLCJQRU4iLCJDYXJvdXNlbCIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsInRvdWNoU3RhcnRYIiwidG91Y2hEZWx0YVgiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl90b3VjaFN1cHBvcnRlZCIsIm1heFRvdWNoUG9pbnRzIiwiX3BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwiX3VwZGF0ZUludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJfaGFuZGxlU3dpcGUiLCJhYnNEZWx0YXgiLCJfdGhpczIiLCJfa2V5ZG93biIsIl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwiX3RoaXMzIiwibW92ZSIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXRlbUluZGV4IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJzbGlkZUV2ZW50IiwiZnJvbSIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwiaW5kaWNhdG9ycyIsIm5leHRJbmRpY2F0b3IiLCJlbGVtZW50SW50ZXJ2YWwiLCJkZWZhdWx0SW50ZXJ2YWwiLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiX3RoaXM0IiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwic2xpZEV2ZW50IiwiQ0xBU1NfTkFNRV9BQ1RJVkUkMiIsInJpZGUiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsInNsaWRlSW5kZXgiLCJjYXJvdXNlbHMiLCIkY2Fyb3VzZWwiLCJOQU1FJDciLCJKUVVFUllfTk9fQ09ORkxJQ1QkNyIsIkRlZmF1bHQkNiIsIkRlZmF1bHRUeXBlJDYiLCJDb2xsYXBzZSIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidG9nZ2xlTGlzdCIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJhY3RpdmVzIiwiYWN0aXZlc0RhdGEiLCJzdGFydEV2ZW50IiwiX2dldERpbWVuc2lvbiIsInNldFRyYW5zaXRpb25pbmciLCJzY3JvbGxTaXplIiwiQ0xBU1NfTkFNRV9DT0xMQVBTRSIsInRyaWdnZXJBcnJheUxlbmd0aCIsImlzVHJhbnNpdGlvbmluZyIsIl9nZXRUYXJnZXRGcm9tRWxlbWVudCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsIiR0cmlnZ2VyIiwiJHRhcmdldCIsIk5BTUUkNiIsIkpRVUVSWV9OT19DT05GTElDVCQ2IiwiUkVHRVhQX0tFWURPV04iLCJBUlJPV19VUF9LRVlDT0RFIiwiRGVmYXVsdCQ1IiwiYm91bmRhcnkiLCJwb3BwZXJDb25maWciLCJEZWZhdWx0VHlwZSQ1IiwiRHJvcGRvd24iLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiaXNBY3RpdmUiLCJfY2xlYXJNZW51cyIsInVzZVBvcHBlciIsInNob3dFdmVudCIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiaGlkZUV2ZW50IiwiRGVmYXVsdCIsIkRlZmF1bHRUeXBlIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsIl9nZXRPZmZzZXQiLCJ0b2dnbGVzIiwiY2xpY2tFdmVudCIsImRyb3Bkb3duTWVudSIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJFVkVOVF9DTElDS19EQVRBX0FQSSQyIiwiSlFVRVJZX05PX0NPTkZMSUNUJDUiLCJEZWZhdWx0JDQiLCJiYWNrZHJvcCIsIkRlZmF1bHRUeXBlJDQiLCJNb2RhbCIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwidHJhbnNpdGlvbiIsIl9oaWRlTW9kYWwiLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uIiwiaGlkZUV2ZW50UHJldmVudGVkIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwibW9kYWxUcmFuc2l0aW9uRHVyYXRpb24iLCJtb2RhbEJvZHkiLCJFTEVNRU5UX05PREUiLCJfZW5mb3JjZUZvY3VzIiwic2hvd25FdmVudCIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90aGlzNSIsIl90aGlzNiIsIl90aGlzNyIsIl90aGlzOCIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiX3RoaXM5IiwiYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24iLCJjYWxsYmFja1JlbW92ZSIsIl9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiX2dldFNjcm9sbGJhcldpZHRoIiwiX3RoaXMxMCIsImZpeGVkQ29udGVudCIsInN0aWNreUNvbnRlbnQiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJhY3R1YWxNYXJnaW4iLCJjYWxjdWxhdGVkTWFyZ2luIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJfdGhpczExIiwidXJpQXR0cnMiLCJEZWZhdWx0V2hpdGVsaXN0IiwiYnIiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaW1nIiwibGkiLCJvbCIsInByZSIsInNtYWxsIiwic3BhbiIsInN1YiIsInN1cCIsInN0cm9uZyIsInUiLCJ1bCIsIlNBRkVfVVJMX1BBVFRFUk4iLCJEQVRBX1VSTF9QQVRURVJOIiwic2FuaXRpemVIdG1sIiwidW5zYWZlSHRtbCIsIndoaXRlTGlzdCIsInNhbml0aXplRm4iLCJjcmVhdGVkRG9jdW1lbnQiLCJ3aGl0ZWxpc3RLZXlzIiwiX2xvb3AiLCJlbE5hbWUiLCJhdHRyaWJ1dGVMaXN0Iiwid2hpdGVsaXN0ZWRBdHRyaWJ1dGVzIiwiYWxsb3dlZEF0dHJpYnV0ZUxpc3QiLCJhdHRyTmFtZSIsInJlZ0V4cCIsImF0dHJSZWdleCIsImFsbG93ZWRBdHRyaWJ1dGUiLCJOQU1FJDQiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNCIsIkJTQ0xTX1BSRUZJWF9SRUdFWCQxIiwiRElTQUxMT1dFRF9BVFRSSUJVVEVTIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJEZWZhdWx0JDMiLCJmYWxsYmFja1BsYWNlbWVudCIsImN1c3RvbUNsYXNzIiwic2FuaXRpemUiLCJEZWZhdWx0VHlwZSQzIiwiRXZlbnQkMSIsIkhJREUiLCJISURERU4iLCJTSE9XIiwiU0hPV04iLCJJTlNFUlRFRCIsIkNMSUNLIiwiRk9DVVNJTiIsIkZPQ1VTT1VUIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUb29sdGlwIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIkRBVEFfS0VZIiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiRVZFTlRfS0VZIiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJpc1dpdGhDb250ZW50Iiwic2hhZG93Um9vdCIsImlzSW5UaGVEb20iLCJ0aXBJZCIsIk5BTUUiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiX2dldENvbnRhaW5lciIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwiQ0xBU1NfUFJFRklYJDEiLCJzZXRFbGVtZW50Q29udGVudCIsIkNMQVNTX05BTUVfRkFERSQzIiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsImRhdGFBdHRyaWJ1dGVzIiwiJHRpcCIsInRhYkNsYXNzIiwicG9wcGVyRGF0YSIsImluaXRDb25maWdBbmltYXRpb24iLCJOQU1FJDMiLCJKUVVFUllfTk9fQ09ORkxJQ1QkMyIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsIkRlZmF1bHQkMiIsIkRlZmF1bHRUeXBlJDIiLCJQb3BvdmVyIiwiX1Rvb2x0aXAiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfZ2V0Q29udGVudCIsIkNMQVNTX1BSRUZJWCIsIkNMQVNTX05BTUVfRkFERSQyIiwiTkFNRSQyIiwiSlFVRVJZX05PX0NPTkZMSUNUJDIiLCJEZWZhdWx0JDEiLCJEZWZhdWx0VHlwZSQxIiwiU2Nyb2xsU3B5IiwiX3Njcm9sbEVsZW1lbnQiLCJfb2Zmc2V0cyIsIl90YXJnZXRzIiwiX2FjdGl2ZVRhcmdldCIsIl9zY3JvbGxIZWlnaHQiLCJfcHJvY2VzcyIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsIl9nZXRPZmZzZXRIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCIkbGluayIsIlNFTEVDVE9SX05BVl9MSU5LUyIsInNjcm9sbFNweXMiLCIkc3B5IiwiSlFVRVJZX05PX0NPTkZMSUNUJDEiLCJUYWIiLCJsaXN0RWxlbWVudCIsIml0ZW1TZWxlY3RvciIsImhpZGRlbkV2ZW50IiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJkcm9wZG93blRvZ2dsZUxpc3QiLCIkdGhpcyIsIkpRVUVSWV9OT19DT05GTElDVCIsImF1dG9oaWRlIiwiVG9hc3QiLCJfY2xlYXJUaW1lb3V0IiwiX2Nsb3NlIiwiU2Nyb2xsc3B5IiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJkaXJlY3RNZXJnZUtleXMiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY2FuY2VsVG9rZW4iLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwicGF5bG9hZCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCIzMDk5IiwiaXQiLCI2MDc3IiwiX191bnVzZWRfd2VicGFja19leHBvcnRzIiwid2VsbEtub3duU3ltYm9sIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiZiIsIjE1MzAiLCJTIiwidW5pY29kZSIsIjU3ODciLCI5NjcwIiwiNDAxOSIsIjI2MCIsIk5BVElWRV9BUlJBWV9CVUZGRVIiLCJERVNDUklQVE9SUyIsImNsYXNzb2YiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsIkludDhBcnJheSIsIkludDhBcnJheVByb3RvdHlwZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUiLCJUeXBlZEFycmF5IiwiVHlwZWRBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsImlzUHJvdG90eXBlT2YiLCJUT19TVFJJTkdfVEFHIiwiVFlQRURfQVJSQVlfVEFHIiwiTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyIsIm9wZXJhIiwiVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIkJpZ0ludDY0QXJyYXkiLCJCaWdVaW50NjRBcnJheSIsImtsYXNzIiwiYVR5cGVkQXJyYXkiLCJhVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiQyIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXhwb3J0VHlwZWRBcnJheU1ldGhvZCIsIktFWSIsImZvcmNlZCIsImV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QiLCJpc1ZpZXciLCIzMzMxIiwicmVkZWZpbmVBbGwiLCJmYWlscyIsImFuSW5zdGFuY2UiLCJ0b0luZGV4IiwiSUVFRTc1NCIsImdldE93blByb3BlcnR5TmFtZXMiLCJhcnJheUZpbGwiLCJzZXRUb1N0cmluZ1RhZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwic2V0SW50ZXJuYWxTdGF0ZSIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiJERhdGFWaWV3UHJvdG90eXBlIiwiUmFuZ2VFcnJvciIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImFkZEdldHRlciIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJzdG9yZSIsImJ5dGVzIiwiY29udmVyc2lvbiIsIk5hTiIsIkFycmF5QnVmZmVyUHJvdG90eXBlIiwidGVzdFZpZXciLCJuYXRpdmVTZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiMTA0OCIsInRvT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwiY29weVdpdGhpbiIsIk8iLCJpbmMiLCIxMjg1IiwiYXJndW1lbnRzTGVuZ3RoIiwiZW5kUG9zIiwiODUzMyIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJjYWxsYmFja2ZuIiwiODQ1NyIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiYXJyYXlMaWtlIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCIxMzE4IiwidG9JbmRleGVkT2JqZWN0IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIyMDkyIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX09VVCIsIk5PX0hPTEVTIiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwiZmlsdGVyT3V0IiwiNjU4MyIsIm5hdGl2ZUxhc3RJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIkZPUkNFRCIsInNlYXJjaEVsZW1lbnQiLCIxMTk0IiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImZvbyIsIjkzNDEiLCIzNjcxIiwiYUZ1bmN0aW9uIiwiSVNfUklHSFQiLCJtZW1vIiwiNTQxNyIsIm9yaWdpbmFsQXJyYXkiLCIzNDExIiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiRU5UUklFUyIsIjcwNzIiLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsIml0ZXJhdG9yV2l0aFJldHVybiIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiNDMyNiIsIjY0OCIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsIjk5MjAiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiODU0NCIsIkYiLCI0OTk0IiwiSXRlcmF0b3JQcm90b3R5cGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJJdGVyYXRvcnMiLCJyZXR1cm5UaGlzIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIjg4ODAiLCI5MTE0IiwiYml0bWFwIiwiNjEzNSIsInRvUHJpbWl0aXZlIiwicHJvcGVydHlLZXkiLCI2NTQiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSVNfUFVSRSIsIkl0ZXJhdG9yc0NvcmUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCI5NzgxIiwiMzE3IiwiRVhJU1RTIiwiODMyNCIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiODExMyIsImdldEJ1aWx0SW4iLCI3MzkyIiwidjgiLCI3NDgiLCIyMTA5Iiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsInNoYW0iLCI3MjkzIiwiNzAwNyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFUExBQ0UiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJmbGFncyIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwiOTk3NCIsIjUwMDUiLCIxMjQ2IiwiODU1NCIsIjY0NyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlbWVudCIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2FwdHVyZSIsIjc4NTQiLCJnbG9iYWxUaGlzIiwiZyIsIjY2NTYiLCIzNTAxIiwiNDkwIiwiNDY2NCIsIjExNzkiLCJwb3ciLCJsb2ciLCJMTjIiLCJtYW50aXNzYUxlbmd0aCIsImV4cG9uZW50IiwibWFudGlzc2EiLCJleHBvbmVudExlbmd0aCIsImVNYXgiLCJlQmlhcyIsInJ0Iiwic2lnbiIsIm5CaXRzIiwiODM2MSIsIjk1ODciLCJkdW1teSIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCIyNzg4IiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCI5OTA5IiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiNzY1OSIsIjMxNTciLCI0NzA1IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwiMTExIiwiMTkxMyIsIjc4NTAiLCJNQVRDSCIsIjkyMTIiLCJyZXR1cm5NZXRob2QiLCIzMzgzIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIk5FV19JVEVSQVRPUl9QUk9UT1RZUEUiLCI3NDk3IiwiMTMzIiwiNTkwIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiODUzNiIsIjE1NzQiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJuYXRpdmVBc3NpZ24iLCJBIiwiQiIsIlQiLCIzMCIsImFjdGl2ZVhEb2N1bWVudCIsImVudW1CdWdLZXlzIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwiY29udGVudFdpbmRvdyIsIlByb3BlcnRpZXMiLCI2MDQ4IiwiMzA3MCIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiSUU4X0RPTV9ERUZJTkUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIlAiLCJBdHRyaWJ1dGVzIiwiMTIzNiIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIjgwMDYiLCJpbnRlcm5hbE9iamVjdEtleXMiLCI1MTgxIiwiOTUxOCIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIjYzMjQiLCJuYW1lcyIsIjE5NTYiLCI1Mjk2IiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwiNzY3NCIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiMjg4IiwiMzg4NyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCI4NTciLCIyMjQ4IiwiMTMyMCIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCI3NjUxIiwiUiIsIjIyNjEiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsIjcwNjYiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwiMjk5OSIsIlJFIiwiNDQ4OCIsIjM1MDUiLCI2MzQwIiwiQ09OU1RSVUNUT1JfTkFNRSIsIjgwMDMiLCJUQUciLCI2MjAwIiwiNTQ2NSIsIjIzMDkiLCJjb3B5cmlnaHQiLCI2NzA3IiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiODcxMCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJDT05WRVJUX1RPX1NUUklORyIsImNvZGVBdCIsIjMxOTciLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiT1ZFUkZMT1dfRVJST1IiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiayIsImJhc2VNaW51c1RNaW4iLCJvdXRwdXQiLCJ1Y3MyZGVjb2RlIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxIiwicU1pbnVzVCIsImJhc2VNaW51c1QiLCJsYWJlbCIsImVuY29kZWQiLCJsYWJlbHMiLCI2MDkxIiwid2hpdGVzcGFjZXMiLCIzMTExIiwibHRyaW0iLCIxNDAwIiwiaW50ZWdlciIsIjcwNjciLCI1NjU2IiwiOTk1OCIsIjc0NjYiLCI3OTA4IiwiNDU5MCIsInRvUG9zaXRpdmVJbnRlZ2VyIiwiQllURVMiLCIzMDAyIiwiNzU5MyIsIlBSRUZFUlJFRF9TVFJJTkciLCIxNjk0IiwiOTg0MyIsIlRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMiLCJBcnJheUJ1ZmZlclZpZXdDb3JlIiwiQXJyYXlCdWZmZXJNb2R1bGUiLCJ0b09mZnNldCIsInR5cGVkQXJyYXlGcm9tIiwic2V0U3BlY2llcyIsImluaGVyaXRJZlJlcXVpcmVkIiwiZnJvbUxpc3QiLCJpc1R5cGVkQXJyYXlJbmRleCIsIndyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cmFwcGVkRGVmaW5lUHJvcGVydHkiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlIiwiZXhwb3J0ZWQiLCJhZGRFbGVtZW50IiwidHlwZWRBcnJheU9mZnNldCIsIiRsZW5ndGgiLCIkbGVuIiwiMzgzMiIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsIjMwNzQiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCI3MzIxIiwiOTcxMSIsInBvc3RmaXgiLCIzMzA3IiwiTkFUSVZFX1NZTUJPTCIsIjUxMTIiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCIxMzYxIiwiODI2NCIsImFycmF5QnVmZmVyTW9kdWxlIiwiMjIyMiIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJzcHJlYWRhYmxlIiwiRSIsIjczMjciLCIkZmlsdGVyIiwiMjc3MiIsIiRpbmRleE9mIiwibmF0aXZlSW5kZXhPZiIsIjY5OTIiLCJhZGRUb1Vuc2NvcGFibGVzIiwiZGVmaW5lSXRlcmF0b3IiLCJpdGVyYXRlZCIsImtpbmQiLCJBcmd1bWVudHMiLCIxMjQ5IiwiJG1hcCIsIjcwNDIiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwibmF0aXZlU2xpY2UiLCJmaW4iLCI1NjEiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJhY3R1YWxTdGFydCIsIjgzMDkiLCJGdW5jdGlvblByb3RvdHlwZSIsIkZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmciLCJuYW1lUkUiLCI0ODkiLCJuYXRpdmVHZXRQcm90b3R5cGVPZiIsIjE1MzkiLCI0OTE2IiwiOTcxNCIsIlJlZ0V4cFByb3RvdHlwZSIsIm5hdGl2ZVRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsInJmIiwiODc4MyIsInBvaW50IiwiNDcyMyIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIm5hdGl2ZU1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiNTMwNiIsImdldFN1YnN0aXR1dGlvbiIsIlVOU0FGRV9TVUJTVElUVVRFIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJyZXBsYWNlciIsImZ1bmN0aW9uYWxSZXBsYWNlIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJyZXBsYWNlckFyZ3MiLCIzMTIzIiwiY2FsbFJlZ0V4cEV4ZWMiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW0iLCJsYXN0TGVuZ3RoIiwibGFzdExhc3RJbmRleCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsInoiLCIzMjEwIiwiJHRyaW0iLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwiMjk5MCIsIiRjb3B5V2l0aGluIiwiODkyNyIsIiRldmVyeSIsIjMxMDUiLCIkZmlsbCIsIjUwMzUiLCJmcm9tU3BlY2llc0FuZExpc3QiLCI3MTc0IiwiJGZpbmRJbmRleCIsIjQzNDUiLCIkZmluZCIsIjI4NDYiLCI0NzMxIiwiJGluY2x1ZGVzIiwiNzIwOSIsIjYzMTkiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwibmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCJ0eXBlZEFycmF5VmFsdWVzIiwiODg2NyIsIiRqb2luIiwiNzc4OSIsIiRsYXN0SW5kZXhPZiIsIjM3MzkiLCI0NDgzIiwiJHJlZHVjZVJpZ2h0IiwiOTM2OCIsIiRyZWR1Y2UiLCIyMDU2IiwibWlkZGxlIiwiMzQ2MiIsIjY3OCIsIiRzbGljZSIsIjc0NjIiLCIkc29tZSIsIjM4MjQiLCIkc29ydCIsImNvbXBhcmVmbiIsIjUwMjEiLCJiZWdpbiIsImJlZ2luSW5kZXgiLCJCWVRFU19QRVJfRUxFTUVOVCIsIjI5NzQiLCIkdG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRPX0xPQ0FMRV9TVFJJTkdfQlVHIiwiNTAxNiIsIlVpbnQ4QXJyYXlQcm90b3R5cGUiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlKb2luIiwiSVNfTk9UX0FSUkFZX01FVEhPRCIsIjI0NzIiLCJjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCI0NzQ3IiwiRE9NSXRlcmFibGVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCIzOTQ4IiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsIjE2MzciLCJVU0VfTkFUSVZFX1VSTCIsImdldEl0ZXJhdG9yIiwiJGZldGNoIiwiSGVhZGVycyIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUiLCJVUkxfU0VBUkNIX1BBUkFNUyIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJwZXJjZW50RGVjb2RlIiwic2VxdWVuY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJkZXNlcmlhbGl6ZSIsInBhcnNlU2VhcmNoUGFyYW1zIiwicXVlcnkiLCJ1cGRhdGVTZWFyY2hQYXJhbXMiLCJ2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCIsInBhc3NlZCIsInJlcXVpcmVkIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciIsImVudHJ5SXRlcmF0b3IiLCJlbnRyeU5leHQiLCJ1cGRhdGVVUkwiLCJVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUiLCJmb3VuZCIsImVudHJpZXNJbmRleCIsInNsaWNlSW5kZXgiLCJmZXRjaCIsImdldFN0YXRlIiwiMjg1IiwiRU9GIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsIk5hdGl2ZVVSTCIsImdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUiLCJnZXRJbnRlcm5hbFVSTFN0YXRlIiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJwYXJzZUhvc3QiLCJjb2RlUG9pbnRzIiwicGFyc2VJUHY2IiwiaXNTcGVjaWFsIiwicGFyc2VJUHY0IiwicGVyY2VudEVuY29kZSIsIkMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQiLCJwYXJ0c0xlbmd0aCIsIm51bWJlcnMiLCJwYXJ0IiwiaXB2NCIsIm51bWJlcnNTZWVuIiwiaXB2NFBpZWNlIiwic3dhcHMiLCJhZGRyZXNzIiwicGllY2VJbmRleCIsImNvbXByZXNzIiwicG9pbnRlciIsImNoYXIiLCJzZXJpYWxpemVIb3N0IiwiaWdub3JlMCIsImlwdjYiLCJtYXhJbmRleCIsImN1cnJTdGFydCIsImN1cnJMZW5ndGgiLCJmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSIsImZyYWdtZW50UGVyY2VudEVuY29kZVNldCIsInBhdGhQZXJjZW50RW5jb2RlU2V0IiwidXNlcmluZm9QZXJjZW50RW5jb2RlU2V0Iiwic3BlY2lhbFNjaGVtZXMiLCJmdHAiLCJodHRwIiwiaHR0cHMiLCJ3cyIsIndzcyIsInNjaGVtZSIsImluY2x1ZGVzQ3JlZGVudGlhbHMiLCJjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJub3JtYWxpemVkIiwic3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciIsInRoaXJkIiwic2hvcnRlblVSTHNQYXRoIiwicGF0aFNpemUiLCJpc1NpbmdsZURvdCIsInNlZ21lbnQiLCJTQ0hFTUVfU1RBUlQiLCJTQ0hFTUUiLCJOT19TQ0hFTUUiLCJTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSIsIlBBVEhfT1JfQVVUSE9SSVRZIiwiUkVMQVRJVkUiLCJSRUxBVElWRV9TTEFTSCIsIlNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMiLCJTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyIsIkFVVEhPUklUWSIsIkhPU1QiLCJIT1NUTkFNRSIsIlBPUlQiLCJGSUxFIiwiRklMRV9TTEFTSCIsIkZJTEVfSE9TVCIsIlBBVEhfU1RBUlQiLCJQQVRIIiwiQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCIsIlFVRVJZIiwiRlJBR01FTlQiLCJwYXJzZVVSTCIsInN0YXRlT3ZlcnJpZGUiLCJidWZmZXJDb2RlUG9pbnRzIiwiZmFpbHVyZSIsInNlZW5BdCIsInNlZW5CcmFja2V0Iiwic2VlblBhc3N3b3JkVG9rZW4iLCJjb2RlUG9pbnQiLCJlbmNvZGVkQ29kZVBvaW50cyIsIlVSTENvbnN0cnVjdG9yIiwiYmFzZVN0YXRlIiwidXJsU3RyaW5nIiwic2VhcmNoUGFyYW1zU3RhdGUiLCJzZXJpYWxpemVVUkwiLCJvcmlnaW4iLCJnZXRPcmlnaW4iLCJnZXRQcm90b2NvbCIsImdldFVzZXJuYW1lIiwiZ2V0UGFzc3dvcmQiLCJnZXRIb3N0IiwiZ2V0SG9zdG5hbWUiLCJnZXRQb3J0IiwiZ2V0UGF0aG5hbWUiLCJnZXRTZWFyY2giLCJnZXRTZWFyY2hQYXJhbXMiLCJnZXRIYXNoIiwiVVJMUHJvdG90eXBlIiwiYWNjZXNzb3JEZXNjcmlwdG9yIiwibmF0aXZlQ3JlYXRlT2JqZWN0VVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibmF0aXZlUmV2b2tlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiYmxvYiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImRlZmluaXRpb24iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJhbGxvd0FycmF5TGlrZSIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX2UiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwiX2UyIiwicmV0dXJuIiwiYXJyMiIsImRyb3B6b25lX2Rpc3QiLCJFbWl0dGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NhbGxiYWNrcyIsImNhbGxiYWNrcyIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiZGlzcGF0Y2hFdmVudCIsIm1ha2VFdmVudCIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJvcHRpb25zX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJvcHRpb25zX2FycmF5TGlrZVRvQXJyYXkiLCJvcHRpb25zX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwic3JjX29wdGlvbnMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwYXJhbGxlbFVwbG9hZHMiLCJ1cGxvYWRNdWx0aXBsZSIsImNodW5raW5nIiwiZm9yY2VDaHVua2luZyIsImNodW5rU2l6ZSIsInBhcmFsbGVsQ2h1bmtVcGxvYWRzIiwicmV0cnlDaHVua3MiLCJyZXRyeUNodW5rc0xpbWl0IiwibWF4RmlsZXNpemUiLCJwYXJhbU5hbWUiLCJjcmVhdGVJbWFnZVRodW1ibmFpbHMiLCJtYXhUaHVtYm5haWxGaWxlc2l6ZSIsInRodW1ibmFpbFdpZHRoIiwidGh1bWJuYWlsSGVpZ2h0IiwidGh1bWJuYWlsTWV0aG9kIiwicmVzaXplV2lkdGgiLCJyZXNpemVIZWlnaHQiLCJyZXNpemVNaW1lVHlwZSIsInJlc2l6ZVF1YWxpdHkiLCJyZXNpemVNZXRob2QiLCJmaWxlc2l6ZUJhc2UiLCJtYXhGaWxlcyIsImNsaWNrYWJsZSIsImlnbm9yZUhpZGRlbkZpbGVzIiwiYWNjZXB0ZWRGaWxlcyIsImFjY2VwdGVkTWltZVR5cGVzIiwiYXV0b1Byb2Nlc3NRdWV1ZSIsImF1dG9RdWV1ZSIsImFkZFJlbW92ZUxpbmtzIiwicHJldmlld3NDb250YWluZXIiLCJkaXNhYmxlUHJldmlld3MiLCJoaWRkZW5JbnB1dENvbnRhaW5lciIsInJlbmFtZUZpbGVuYW1lIiwicmVuYW1lRmlsZSIsImZvcmNlRmFsbGJhY2siLCJkaWN0RGVmYXVsdE1lc3NhZ2UiLCJkaWN0RmFsbGJhY2tNZXNzYWdlIiwiZGljdEZhbGxiYWNrVGV4dCIsImRpY3RGaWxlVG9vQmlnIiwiZGljdEludmFsaWRGaWxlVHlwZSIsImRpY3RSZXNwb25zZUVycm9yIiwiZGljdENhbmNlbFVwbG9hZCIsImRpY3RVcGxvYWRDYW5jZWxlZCIsImRpY3RDYW5jZWxVcGxvYWRDb25maXJtYXRpb24iLCJkaWN0UmVtb3ZlRmlsZSIsImRpY3RSZW1vdmVGaWxlQ29uZmlybWF0aW9uIiwiZGljdE1heEZpbGVzRXhjZWVkZWQiLCJkaWN0RmlsZVNpemVVbml0cyIsInRiIiwiZ2IiLCJtYiIsImtiIiwiZmlsZXMiLCJkenV1aWQiLCJ1cGxvYWQiLCJkemNodW5raW5kZXgiLCJkenRvdGFsZmlsZXNpemUiLCJkemNodW5rc2l6ZSIsImR6dG90YWxjaHVua2NvdW50IiwidG90YWxDaHVua0NvdW50IiwiZHpjaHVua2J5dGVvZmZzZXQiLCJhY2NlcHQiLCJjaHVua3NVcGxvYWRlZCIsImZhbGxiYWNrIiwibWVzc2FnZUVsZW1lbnQiLCJpbm5lclRleHQiLCJnZXRGYWxsYmFja0Zvcm0iLCJyZXNpemUiLCJpbmZvIiwic3JjWCIsInNyY1kiLCJzcmNXaWR0aCIsInNyY0hlaWdodCIsInNyY1JhdGlvIiwidHJnUmF0aW8iLCJ0cmdXaWR0aCIsInRyZ0hlaWdodCIsInRyYW5zZm9ybUZpbGUiLCJyZXNpemVJbWFnZSIsInByZXZpZXdUZW1wbGF0ZSIsImRyYWdzdGFydCIsImRyYWdlbmQiLCJkcmFnZW50ZXIiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsInBhc3RlIiwiYWRkZWRmaWxlIiwicHJldmlld0VsZW1lbnQiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsImZpbGVzaXplIiwiX3JlbW92ZUxpbmsiLCJfc3RlcDQiLCJyZW1vdmVGaWxlRXZlbnQiLCJVUExPQURJTkciLCJjb25maXJtIiwicmVtb3ZlRmlsZSIsIl9pdGVyYXRvcjQiLCJyZW1vdmVkZmlsZSIsIl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcyIsInRodW1ibmFpbCIsImRhdGFVcmwiLCJfc3RlcDUiLCJfaXRlcmF0b3I1IiwidGh1bWJuYWlsRWxlbWVudCIsImFsdCIsIl9zdGVwNiIsIl9pdGVyYXRvcjYiLCJlcnJvcm11bHRpcGxlIiwicHJvY2Vzc2luZyIsInByb2Nlc3NpbmdtdWx0aXBsZSIsInVwbG9hZHByb2dyZXNzIiwiYnl0ZXNTZW50IiwiX3N0ZXA3IiwiX2l0ZXJhdG9yNyIsInRvdGFsdXBsb2FkcHJvZ3Jlc3MiLCJzZW5kaW5nIiwic2VuZGluZ211bHRpcGxlIiwic3VjY2Vzc211bHRpcGxlIiwiY2FuY2VsZWQiLCJjYW5jZWxlZG11bHRpcGxlIiwiY29tcGxldGVtdWx0aXBsZSIsIm1heGZpbGVzZXhjZWVkZWQiLCJtYXhmaWxlc3JlYWNoZWQiLCJxdWV1ZWNvbXBsZXRlIiwiYWRkZWRmaWxlcyIsIl90eXBlb2YiLCJkcm9wem9uZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiZHJvcHpvbmVfYXJyYXlMaWtlVG9BcnJheSIsImRyb3B6b25lX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiZHJvcHpvbmVfY2xhc3NDYWxsQ2hlY2siLCJkcm9wem9uZV9kZWZpbmVQcm9wZXJ0aWVzIiwiZHJvcHpvbmVfY3JlYXRlQ2xhc3MiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJQcm94eSIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX0VtaXR0ZXIiLCJfaW5oZXJpdHMiLCJjbGlja2FibGVFbGVtZW50cyIsImRyb3B6b25lIiwiaW5zdGFuY2VzIiwiZWxlbWVudE9wdGlvbnMiLCJvcHRpb25zRm9yRWxlbWVudCIsImlzQnJvd3NlclN1cHBvcnRlZCIsImdldEV4aXN0aW5nRmFsbGJhY2siLCJnZXRFbGVtZW50IiwiZ2V0RWxlbWVudHMiLCJhY2NlcHRlZCIsImdldEZpbGVzV2l0aFN0YXR1cyIsIlFVRVVFRCIsIkFEREVEIiwic2V0dXBIaWRkZW5GaWxlSW5wdXQiLCJoaWRkZW5GaWxlSW5wdXQiLCJhZGRGaWxlIiwid2Via2l0VVJMIiwidXBkYXRlVG90YWxVcGxvYWRQcm9ncmVzcyIsImdldEFkZGVkRmlsZXMiLCJnZXRVcGxvYWRpbmdGaWxlcyIsImdldFF1ZXVlZEZpbGVzIiwiZGF0YVRyYW5zZmVyIiwiY29udGFpbnNGaWxlcyIsImVmY3QiLCJlZmZlY3RBbGxvd2VkIiwiZHJvcEVmZmVjdCIsImNsaWNrYWJsZUVsZW1lbnQiLCJlbGVtZW50SW5zaWRlIiwicmVtb3ZlQWxsRmlsZXMiLCJ0b3RhbFVwbG9hZFByb2dyZXNzIiwidG90YWxCeXRlc1NlbnQiLCJ0b3RhbEJ5dGVzIiwiZ2V0QWN0aXZlRmlsZXMiLCJ0b3RhbCIsImV4aXN0aW5nRmFsbGJhY2siLCJmb3JtIiwiZmllbGRzU3RyaW5nIiwiX2dldFBhcmFtTmFtZSIsImZpZWxkcyIsImdldEZhbGxiYWNrIiwiX2FyciIsImVsZW1lbnRMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsVXBsb2FkIiwic2VsZWN0ZWRTaXplIiwic2VsZWN0ZWRVbml0IiwidW5pdHMiLCJnZXRBY2NlcHRlZEZpbGVzIiwid2Via2l0R2V0QXNFbnRyeSIsIl9hZGRGaWxlc0Zyb21JdGVtcyIsImhhbmRsZUZpbGVzIiwiY2xpcGJvYXJkRGF0YSIsImdldEFzRmlsZSIsImlzRGlyZWN0b3J5IiwiX2FkZEZpbGVzRnJvbURpcmVjdG9yeSIsImRpcmVjdG9yeSIsImRpclJlYWRlciIsImNyZWF0ZVJlYWRlciIsImVycm9ySGFuZGxlciIsInJlYWRFbnRyaWVzIiwiZnVsbFBhdGgiLCJpc1ZhbGlkRmlsZSIsInV1aWR2NCIsImZpbGVuYW1lIiwiX3JlbmFtZUZpbGUiLCJfZW5xdWV1ZVRodW1ibmFpbCIsIl9lcnJvclByb2Nlc3NpbmciLCJlbnF1ZXVlRmlsZSIsIl9zdGVwOCIsIl9pdGVyYXRvcjgiLCJwcm9jZXNzUXVldWUiLCJfdGh1bWJuYWlsUXVldWUiLCJfcHJvY2Vzc1RodW1ibmFpbFF1ZXVlIiwiX3Byb2Nlc3NpbmdUaHVtYm5haWwiLCJjcmVhdGVUaHVtYm5haWwiLCJjYW5jZWxJZk5lY2Vzc2FyeSIsIl9zdGVwOSIsIl9pdGVyYXRvcjkiLCJjYW52YXMiLCJyZXNpemVkRGF0YVVSTCIsInRvRGF0YVVSTCIsIkV4aWZSZXN0b3JlIiwicmVzdG9yZSIsImRhdGFVUkwiLCJkYXRhVVJJdG9CbG9iIiwiZml4T3JpZW50YXRpb24iLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsImNyZWF0ZVRodW1ibmFpbEZyb21VcmwiLCJyZWFkQXNEYXRhVVJMIiwibW9ja0ZpbGUiLCJpbWFnZVVybCIsImNyb3NzT3JpZ2luIiwiX3RoaXMxMiIsInJlc2l6ZVRodW1ibmFpbCIsIm9uRG9uZSIsIl90aGlzMTMiLCJsb2FkRXhpZiIsIkVYSUYiLCJvcmllbnRhdGlvbiIsInJlc2l6ZUluZm8iLCJjdHgiLCJnZXRDb250ZXh0IiwidHJhbnNsYXRlIiwicm90YXRlIiwiZHJhd0ltYWdlSU9TRml4IiwidHJnWCIsInRyZ1kiLCJwcm9jZXNzaW5nTGVuZ3RoIiwicXVldWVkRmlsZXMiLCJwcm9jZXNzRmlsZXMiLCJwcm9jZXNzRmlsZSIsIl9zdGVwMTAiLCJfaXRlcmF0b3IxMCIsInVwbG9hZEZpbGVzIiwiX3N0ZXAxMSIsImdyb3VwZWRGaWxlcyIsIl9nZXRGaWxlc1dpdGhYaHIiLCJfaXRlcmF0b3IxMSIsIkNBTkNFTEVEIiwiX3N0ZXAxMiIsIl9pdGVyYXRvcjEyIiwiX2dyb3VwZWRGaWxlIiwiX3RoaXMxNCIsIl90cmFuc2Zvcm1GaWxlcyIsInRyYW5zZm9ybWVkRmlsZXMiLCJ0cmFuc2Zvcm1lZEZpbGUiLCJjaHVua2VkIiwiX3RyYW5zZm9ybWVkRmlsZSIsImNodW5rcyIsImhhbmRsZU5leHRDaHVuayIsImNodW5rSW5kZXgiLCJkYXRhQmxvY2siLCJ3ZWJraXRTbGljZSIsInJldHJpZXMiLCJfdXBsb2FkRGF0YSIsImZpbmlzaGVkQ2h1bmtVcGxvYWQiLCJhbGxGaW5pc2hlZCIsIlNVQ0NFU1MiLCJfZmluaXNoZWQiLCJkYXRhQmxvY2tzIiwiX2kyIiwiX3N0ZXAxMyIsIl90aGlzMTUiLCJfaXRlcmF0b3IxMyIsInJlc29sdmVPcHRpb24iLCJfZmluaXNoZWRVcGxvYWRpbmciLCJfaGFuZGxlVXBsb2FkRXJyb3IiLCJvbnByb2dyZXNzIiwiX3VwZGF0ZUZpbGVzVXBsb2FkUHJvZ3Jlc3MiLCJBY2NlcHQiLCJoZWFkZXJOYW1lIiwiaGVhZGVyVmFsdWUiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYWRkaXRpb25hbFBhcmFtcyIsIl9nZXRDaHVuayIsIl9zdGVwMTQiLCJfaXRlcmF0b3IxNCIsIl9maWxlIiwiX2FkZEZvcm1FbGVtZW50RGF0YSIsIl9pMyIsInN1Ym1pdFJlcXVlc3QiLCJfdGhpczE2IiwiZG9uZUNvdW50ZXIiLCJfc3RlcDE1IiwiX2l0ZXJhdG9yMTUiLCJpbnB1dE5hbWUiLCJpbnB1dFR5cGUiLCJfc3RlcDE2IiwiX2l0ZXJhdG9yMTYiLCJfZmlsZTIiLCJsb2FkZWQiLCJfc3RlcDE3IiwiX2l0ZXJhdG9yMTciLCJfc3RlcDE4IiwiX2l0ZXJhdG9yMTgiLCJfc3RlcDE5IiwiX2l0ZXJhdG9yMTkiLCJFUlJPUiIsIl9sZW4yIiwib2JqZWN0cyIsIl9rZXkyIiwiX2k0IiwiX29iamVjdHMiLCJpbml0Q2xhc3MiLCJjYW1lbGl6ZSIsImZvckVsZW1lbnQiLCJhdXRvRGlzY292ZXIiLCJkaXNjb3ZlciIsImRyb3B6b25lcyIsImNoZWNrRWxlbWVudHMiLCJfc3RlcDIwIiwiX2l0ZXJhdG9yMjAiLCJfc3RlcDIxIiwiX2l0ZXJhdG9yMjEiLCJibG9ja2VkQnJvd3NlcnMiLCJjYXBhYmxlQnJvd3NlciIsIkZpbGUiLCJCbG9iIiwiYmxhY2tsaXN0ZWRCcm93c2VycyIsIl9zdGVwMjIiLCJfaXRlcmF0b3IyMiIsImRhdGFVUkkiLCJieXRlU3RyaW5nIiwiYXRvYiIsIm1pbWVTdHJpbmciLCJhYiIsImlhIiwiYXNjIiwicmVqZWN0ZWRJdGVtIiwiX3N0ZXAyMyIsIl9pdGVyYXRvcjIzIiwiX3N0ZXAyNCIsIl9pdGVyYXRvcjI0IiwicXVlc3Rpb24iLCJfc3RlcDI1IiwiYmFzZU1pbWVUeXBlIiwiX2l0ZXJhdG9yMjUiLCJ2YWxpZFR5cGUiLCJBQ0NFUFRFRCIsIlBST0NFU1NJTkciLCJzeCIsInN5Iiwic3ciLCJzaCIsImR4IiwiZHkiLCJkdyIsImRoIiwidmVydFNxdWFzaFJhdGlvIiwibmF0dXJhbFdpZHRoIiwiaWgiLCJuYXR1cmFsSGVpZ2h0IiwiZHJhd0ltYWdlIiwiZ2V0SW1hZ2VEYXRhIiwiZXkiLCJweSIsInJhdGlvIiwiZGV0ZWN0VmVydGljYWxTcXVhc2giLCJLRVlfU1RSIiwiY2hyMSIsImNocjIiLCJjaHIzIiwiZW5jMSIsImVuYzIiLCJlbmMzIiwiZW5jNCIsIm9yaWdGaWxlQmFzZTY0IiwicmVzaXplZEZpbGVCYXNlNjQiLCJyYXdJbWFnZSIsImRlY29kZTY0Iiwic2VnbWVudHMiLCJzbGljZTJTZWdtZW50cyIsImV4aWZNYW5pcHVsYXRpb24iLCJlbmNvZGU2NCIsImV4aWZBcnJheSIsImdldEV4aWZBcnJheSIsIm5ld0ltYWdlQXJyYXkiLCJpbnNlcnRFeGlmIiwic2VnIiwiaW1hZ2VEYXRhIiwiYnVmIiwic2VwYXJhdGVQb2ludCIsIm1hZSIsImF0byIsInJhd0ltYWdlQXJyYXkiLCJlbmRQb2ludCIsIl9hdXRvRGlzY292ZXJGdW5jdGlvbiIsInJlbSIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZnJhbWVFbGVtZW50IiwicG9sbCIsImNvbnRlbnRMb2FkZWQiLCJDYW5jZWwiLCJleHBpcmVzIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJyZWFkIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwicGtnIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJjdXJyZW50VmVyQXJyIiwiaXNPbGRlclZlcnNpb24iLCJ0aGFuVmVyc2lvbiIsInBrZ1ZlcnNpb25BcnIiLCJkZXN0VmVyIiwiaXNEZXByZWNhdGVkIiwiZm9ybWF0TWVzc2FnZSIsImRlc2MiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJtb3VzZUhhbmRsZWQiLCJkaXN0YW5jZSIsIl9tb3VzZURvd24iLCJzdGFydGVkIiwiX21vdXNlTW92ZURlbGVnYXRlIiwiX21vdXNlVXBEZWxlZ2F0ZSIsIl9tb3VzZU1vdmVkIiwiX21vdXNlU3RhcnRlZCIsIl9tb3VzZURvd25FdmVudCIsImJ0bklzTGVmdCIsImVsSXNDYW5jZWwiLCJtb3VzZURlbGF5TWV0IiwiX21vdXNlRGVsYXlUaW1lciIsIl9tb3VzZURpc3RhbmNlTWV0IiwiX21vdXNlRGVsYXlNZXQiLCJfbW91c2VNb3ZlIiwiaWdub3JlTWlzc2luZ1doaWNoIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJyZXF1ZXN0RGF0YSIsImF1dGgiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIm9ubG9hZGVuZCIsInJlc3BvbnNlVVJMIiwidGltZW91dEVycm9yTWVzc2FnZSIsInhzcmZWYWx1ZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJpZ25vcmVEdXBsaWNhdGVPZiIsImxpbmUiLCJzdWJzdHIiLCJwcm9kdWN0Iiwic3RyaXBCT00iLCJub3JtYWxpemVkTmFtZSIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImFsbCIsInByb21pc2VzIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IjthQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksSUFJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEcsaUdDMUVyRGhDLEVBQU9ELFFBQVUsU0FBdUJrQyxHQUl0QyxNQUFPLGdDQUFnQ0MsS0FBS0QsSyxvQ0NIOUNqQyxFQUFPRCxRQUFVLFNBQXFCb0MsRUFBU0MsR0FDN0MsT0FBT0EsRUFDSEQsRUFBUUUsUUFBUSxPQUFRLElBQU0sSUFBTUQsRUFBWUMsUUFBUSxPQUFRLElBQ2hFRixJLHVCQ1pOLFdBY0EsU0FBWUcsR0FDWCxhQUtDLEVBQVEsQ0FBRSxVQUFVLGdCQUFzQiwwQkFBUCxFQU1oQyxTQUFVQyxHQUdmLE9BQU9BLEVBQUVDLEdBQUdDLGFBQWUsU0FBVUMsR0FDcEMsSUFBSUMsRUFBV0MsS0FBS0MsSUFBSyxZQUN4QkMsRUFBbUMsYUFBYkgsRUFDdEJJLEVBQWdCTCxFQUFnQix1QkFBeUIsZ0JBQ3pERCxFQUFlRyxLQUFLSSxVQUFVQyxRQUFRLFdBQ3JDLElBQUlDLEVBQVNYLEVBQUdLLE1BQ2hCLFFBQUtFLEdBQW9ELFdBQTdCSSxFQUFPTCxJQUFLLGNBR2pDRSxFQUFjYixLQUFNZ0IsRUFBT0wsSUFBSyxZQUFlSyxFQUFPTCxJQUFLLGNBQ2pFSyxFQUFPTCxJQUFLLGtCQUNWTSxHQUFJLEdBRVQsTUFBb0IsVUFBYlIsR0FBeUJGLEVBQWFXLE9BRTVDWCxFQURBRixFQUFHSyxLQUFNLEdBQUlTLGVBQWlCQyxhQXZCWSwrQkFONUMsSSxvQ0NkQSxtQkF3QkEsSUFBSUMsRUFBOEIsb0JBQVhDLFFBQThDLG9CQUFiRixVQUFpRCxvQkFBZEcsVUFFdkZDLEVBQWtCLFdBRXBCLElBREEsSUFBSUMsRUFBd0IsQ0FBQyxPQUFRLFVBQVcsV0FDdkMxRCxFQUFJLEVBQUdBLEVBQUkwRCxFQUFzQlAsT0FBUW5ELEdBQUssRUFDckQsR0FBSXNELEdBQWFFLFVBQVVHLFVBQVVDLFFBQVFGLEVBQXNCMUQsS0FBTyxFQUN4RSxPQUFPLEVBR1gsT0FBTyxFQVBhLEdBcUN0QixJQVdJNkQsRUFYcUJQLEdBQWFDLE9BQU9PLFFBM0I3QyxTQUEyQnZCLEdBQ3pCLElBQUl3QixHQUFTLEVBQ2IsT0FBTyxXQUNEQSxJQUdKQSxHQUFTLEVBQ1RSLE9BQU9PLFFBQVFFLFVBQVVDLE1BQUssV0FDNUJGLEdBQVMsRUFDVHhCLFVBS04sU0FBc0JBLEdBQ3BCLElBQUkyQixHQUFZLEVBQ2hCLE9BQU8sV0FDQUEsSUFDSEEsR0FBWSxFQUNaQyxZQUFXLFdBQ1RELEdBQVksRUFDWjNCLE1BQ0NrQixNQXlCVCxTQUFTVyxFQUFXQyxHQUVsQixPQUFPQSxHQUE4RCxzQkFEdkQsR0FDb0JDLFNBQVNuRSxLQUFLa0UsR0FVbEQsU0FBU0UsRUFBeUJDLEVBQVM3QyxHQUN6QyxHQUF5QixJQUFyQjZDLEVBQVFDLFNBQ1YsTUFBTyxHQUdULElBQ0k3QixFQURTNEIsRUFBUXBCLGNBQWNzQixZQUNsQkMsaUJBQWlCSCxFQUFTLE1BQzNDLE9BQU83QyxFQUFXaUIsRUFBSWpCLEdBQVlpQixFQVVwQyxTQUFTZ0MsRUFBY0osR0FDckIsTUFBeUIsU0FBckJBLEVBQVFLLFNBQ0hMLEVBRUZBLEVBQVFNLFlBQWNOLEVBQVFPLEtBVXZDLFNBQVNDLEVBQWdCUixHQUV2QixJQUFLQSxFQUNILE9BQU9uQixTQUFTNEIsS0FHbEIsT0FBUVQsRUFBUUssVUFDZCxJQUFLLE9BQ0wsSUFBSyxPQUNILE9BQU9MLEVBQVFwQixjQUFjNkIsS0FDL0IsSUFBSyxZQUNILE9BQU9ULEVBQVFTLEtBS25CLElBQUlDLEVBQXdCWCxFQUF5QkMsR0FDakRXLEVBQVdELEVBQXNCQyxTQUNqQ0MsRUFBWUYsRUFBc0JFLFVBQ2xDQyxFQUFZSCxFQUFzQkcsVUFFdEMsTUFBSSx3QkFBd0JwRCxLQUFLa0QsRUFBV0UsRUFBWUQsR0FDL0NaLEVBR0ZRLEVBQWdCSixFQUFjSixJQVV2QyxTQUFTYyxFQUFpQkMsR0FDeEIsT0FBT0EsR0FBYUEsRUFBVUMsY0FBZ0JELEVBQVVDLGNBQWdCRCxFQUcxRSxJQUFJRSxFQUFTbkMsTUFBZ0JDLE9BQU9tQyx1QkFBd0JyQyxTQUFTc0MsY0FDakVDLEVBQVN0QyxHQUFhLFVBQVVyQixLQUFLdUIsVUFBVUcsV0FTbkQsU0FBU2tDLEVBQUtDLEdBQ1osT0FBZ0IsS0FBWkEsRUFDS0wsRUFFTyxLQUFaSyxFQUNLRixFQUVGSCxHQUFVRyxFQVVuQixTQUFTRyxFQUFnQnZCLEdBQ3ZCLElBQUtBLEVBQ0gsT0FBT25CLFNBQVMyQyxnQkFRbEIsSUFMQSxJQUFJQyxFQUFpQkosRUFBSyxJQUFNeEMsU0FBUzRCLEtBQU8sS0FHNUNpQixFQUFlMUIsRUFBUTBCLGNBQWdCLEtBRXBDQSxJQUFpQkQsR0FBa0J6QixFQUFRMkIsb0JBQ2hERCxHQUFnQjFCLEVBQVVBLEVBQVEyQixvQkFBb0JELGFBR3hELElBQUlyQixFQUFXcUIsR0FBZ0JBLEVBQWFyQixTQUU1QyxPQUFLQSxHQUF5QixTQUFiQSxHQUFvQyxTQUFiQSxHQU1zQixJQUExRCxDQUFDLEtBQU0sS0FBTSxTQUFTakIsUUFBUXNDLEVBQWFyQixXQUEyRSxXQUF2RE4sRUFBeUIyQixFQUFjLFlBQ2pHSCxFQUFnQkcsR0FHbEJBLEVBVEUxQixFQUFVQSxFQUFRcEIsY0FBYzRDLGdCQUFrQjNDLFNBQVMyQyxnQkE0QnRFLFNBQVNJLEVBQVFDLEdBQ2YsT0FBd0IsT0FBcEJBLEVBQUt2QixXQUNBc0IsRUFBUUMsRUFBS3ZCLFlBR2Z1QixFQVdULFNBQVNDLEVBQXVCQyxFQUFVQyxHQUV4QyxLQUFLRCxHQUFhQSxFQUFTOUIsVUFBYStCLEdBQWFBLEVBQVMvQixVQUM1RCxPQUFPcEIsU0FBUzJDLGdCQUlsQixJQUFJUyxFQUFRRixFQUFTRyx3QkFBd0JGLEdBQVlHLEtBQUtDLDRCQUMxREMsRUFBUUosRUFBUUYsRUFBV0MsRUFDM0JNLEVBQU1MLEVBQVFELEVBQVdELEVBR3pCUSxFQUFRMUQsU0FBUzJELGNBQ3JCRCxFQUFNRSxTQUFTSixFQUFPLEdBQ3RCRSxFQUFNRyxPQUFPSixFQUFLLEdBQ2xCLElBL0N5QnRDLEVBQ3JCSyxFQThDQXNDLEVBQTBCSixFQUFNSSx3QkFJcEMsR0FBSVosSUFBYVksR0FBMkJYLElBQWFXLEdBQTJCTixFQUFNTyxTQUFTTixHQUNqRyxNQWpEZSxVQUZiakMsR0FEcUJMLEVBb0REMkMsR0FuRER0QyxXQUtILFNBQWJBLEdBQXVCa0IsRUFBZ0J2QixFQUFRNkMscUJBQXVCN0MsRUFrRHBFdUIsRUFBZ0JvQixHQUhkQSxFQU9YLElBQUlHLEVBQWVsQixFQUFRRyxHQUMzQixPQUFJZSxFQUFhdkMsS0FDUnVCLEVBQXVCZ0IsRUFBYXZDLEtBQU15QixHQUUxQ0YsRUFBdUJDLEVBQVVILEVBQVFJLEdBQVV6QixNQVk5RCxTQUFTd0MsRUFBVS9DLEdBQ2pCLElBQUlnRCxFQUFPQyxVQUFVdEUsT0FBUyxRQUFzQnVFLElBQWpCRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssTUFFM0VFLEVBQXFCLFFBQVRILEVBQWlCLFlBQWMsYUFDM0MzQyxFQUFXTCxFQUFRSyxTQUV2QixHQUFpQixTQUFiQSxHQUFvQyxTQUFiQSxFQUFxQixDQUM5QyxJQUFJK0MsRUFBT3BELEVBQVFwQixjQUFjNEMsZ0JBQzdCNkIsRUFBbUJyRCxFQUFRcEIsY0FBY3lFLGtCQUFvQkQsRUFDakUsT0FBT0MsRUFBaUJGLEdBRzFCLE9BQU9uRCxFQUFRbUQsR0FZakIsU0FBU0csRUFBY0MsRUFBTXZELEdBQzNCLElBQUl3RCxFQUFXUCxVQUFVdEUsT0FBUyxRQUFzQnVFLElBQWpCRCxVQUFVLElBQW1CQSxVQUFVLEdBRTFFUSxFQUFZVixFQUFVL0MsRUFBUyxPQUMvQjBELEVBQWFYLEVBQVUvQyxFQUFTLFFBQ2hDMkQsRUFBV0gsR0FBWSxFQUFJLEVBSy9CLE9BSkFELEVBQUtLLEtBQU9ILEVBQVlFLEVBQ3hCSixFQUFLTSxRQUFVSixFQUFZRSxFQUMzQkosRUFBS08sTUFBUUosRUFBYUMsRUFDMUJKLEVBQUtRLE9BQVNMLEVBQWFDLEVBQ3BCSixFQWFULFNBQVNTLEVBQWVDLEVBQVFDLEdBQzlCLElBQUlDLEVBQWlCLE1BQVRELEVBQWUsT0FBUyxNQUNoQ0UsRUFBa0IsU0FBVkQsRUFBbUIsUUFBVSxTQUV6QyxPQUFPRSxXQUFXSixFQUFPLFNBQVdFLEVBQVEsVUFBWUUsV0FBV0osRUFBTyxTQUFXRyxFQUFRLFVBRy9GLFNBQVNFLEVBQVFKLEVBQU16RCxFQUFNMkMsRUFBTW1CLEdBQ2pDLE9BQU9DLEtBQUtDLElBQUloRSxFQUFLLFNBQVd5RCxHQUFPekQsRUFBSyxTQUFXeUQsR0FBT2QsRUFBSyxTQUFXYyxHQUFPZCxFQUFLLFNBQVdjLEdBQU9kLEVBQUssU0FBV2MsR0FBTzdDLEVBQUssSUFBTXFELFNBQVN0QixFQUFLLFNBQVdjLElBQVNRLFNBQVNILEVBQWMsVUFBcUIsV0FBVEwsRUFBb0IsTUFBUSxVQUFZUSxTQUFTSCxFQUFjLFVBQXFCLFdBQVRMLEVBQW9CLFNBQVcsV0FBYSxHQUc1VSxTQUFTUyxFQUFlOUYsR0FDdEIsSUFBSTRCLEVBQU81QixFQUFTNEIsS0FDaEIyQyxFQUFPdkUsRUFBUzJDLGdCQUNoQitDLEVBQWdCbEQsRUFBSyxLQUFPbEIsaUJBQWlCaUQsR0FFakQsTUFBTyxDQUNMd0IsT0FBUU4sRUFBUSxTQUFVN0QsRUFBTTJDLEVBQU1tQixHQUN0Q00sTUFBT1AsRUFBUSxRQUFTN0QsRUFBTTJDLEVBQU1tQixJQUl4QyxJQUFJTyxFQUFpQixTQUFVQyxFQUFVQyxHQUN2QyxLQUFNRCxhQUFvQkMsR0FDeEIsTUFBTSxJQUFJQyxVQUFVLHNDQUlwQkMsRUFBYyxXQUNoQixTQUFTQyxFQUFpQkMsRUFBUUMsR0FDaEMsSUFBSyxJQUFJN0osRUFBSSxFQUFHQSxFQUFJNkosRUFBTTFHLE9BQVFuRCxJQUFLLENBQ3JDLElBQUk4SixFQUFhRCxFQUFNN0osR0FDdkI4SixFQUFXbEosV0FBYWtKLEVBQVdsSixhQUFjLEVBQ2pEa0osRUFBV0MsY0FBZSxFQUN0QixVQUFXRCxJQUFZQSxFQUFXRSxVQUFXLEdBQ2pEdEosT0FBT0MsZUFBZWlKLEVBQVFFLEVBQVd2SSxJQUFLdUksSUFJbEQsT0FBTyxTQUFVTixFQUFhUyxFQUFZQyxHQUd4QyxPQUZJRCxHQUFZTixFQUFpQkgsRUFBWTVILFVBQVdxSSxHQUNwREMsR0FBYVAsRUFBaUJILEVBQWFVLEdBQ3hDVixHQWRPLEdBc0JkN0ksRUFBaUIsU0FBVXdKLEVBQUs1SSxFQUFLTixHQVl2QyxPQVhJTSxLQUFPNEksRUFDVHpKLE9BQU9DLGVBQWV3SixFQUFLNUksRUFBSyxDQUM5Qk4sTUFBT0EsRUFDUEwsWUFBWSxFQUNabUosY0FBYyxFQUNkQyxVQUFVLElBR1pHLEVBQUk1SSxHQUFPTixFQUdOa0osR0FHTEMsRUFBVzFKLE9BQU8ySixRQUFVLFNBQVVULEdBQ3hDLElBQUssSUFBSTVKLEVBQUksRUFBR0EsRUFBSXlILFVBQVV0RSxPQUFRbkQsSUFBSyxDQUN6QyxJQUFJc0ssRUFBUzdDLFVBQVV6SCxHQUV2QixJQUFLLElBQUl1QixLQUFPK0ksRUFDVjVKLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS21LLEVBQVEvSSxLQUMvQ3FJLEVBQU9ySSxHQUFPK0ksRUFBTy9JLElBSzNCLE9BQU9xSSxHQVVULFNBQVNXLEVBQWNDLEdBQ3JCLE9BQU9KLEVBQVMsR0FBSUksRUFBUyxDQUMzQmpDLE1BQU9pQyxFQUFRbEMsS0FBT2tDLEVBQVFuQixNQUM5QmhCLE9BQVFtQyxFQUFRcEMsSUFBTW9DLEVBQVFwQixTQVdsQyxTQUFTcUIsRUFBc0JqRyxHQUM3QixJQUFJdUQsRUFBTyxHQUtYLElBQ0UsR0FBSWxDLEVBQUssSUFBSyxDQUNaa0MsRUFBT3ZELEVBQVFpRyx3QkFDZixJQUFJeEMsRUFBWVYsRUFBVS9DLEVBQVMsT0FDL0IwRCxFQUFhWCxFQUFVL0MsRUFBUyxRQUNwQ3VELEVBQUtLLEtBQU9ILEVBQ1pGLEVBQUtPLE1BQVFKLEVBQ2JILEVBQUtNLFFBQVVKLEVBQ2ZGLEVBQUtRLE9BQVNMLE9BRWRILEVBQU92RCxFQUFRaUcsd0JBRWpCLE1BQU9DLElBRVQsSUFBSUMsRUFBUyxDQUNYckMsS0FBTVAsRUFBS08sS0FDWEYsSUFBS0wsRUFBS0ssSUFDVmlCLE1BQU90QixFQUFLUSxNQUFRUixFQUFLTyxLQUN6QmMsT0FBUXJCLEVBQUtNLE9BQVNOLEVBQUtLLEtBSXpCd0MsRUFBNkIsU0FBckJwRyxFQUFRSyxTQUFzQnNFLEVBQWUzRSxFQUFRcEIsZUFBaUIsR0FDOUVpRyxFQUFRdUIsRUFBTXZCLE9BQVM3RSxFQUFRcUcsYUFBZUYsRUFBT3RCLE1BQ3JERCxFQUFTd0IsRUFBTXhCLFFBQVU1RSxFQUFRc0csY0FBZ0JILEVBQU92QixPQUV4RDJCLEVBQWlCdkcsRUFBUXdHLFlBQWMzQixFQUN2QzRCLEVBQWdCekcsRUFBUTBHLGFBQWU5QixFQUkzQyxHQUFJMkIsR0FBa0JFLEVBQWUsQ0FDbkMsSUFBSXhDLEVBQVNsRSxFQUF5QkMsR0FDdEN1RyxHQUFrQnZDLEVBQWVDLEVBQVEsS0FDekN3QyxHQUFpQnpDLEVBQWVDLEVBQVEsS0FFeENrQyxFQUFPdEIsT0FBUzBCLEVBQ2hCSixFQUFPdkIsUUFBVTZCLEVBR25CLE9BQU9WLEVBQWNJLEdBR3ZCLFNBQVNRLEVBQXFDQyxFQUFVbkksR0FDdEQsSUFBSW9JLEVBQWdCNUQsVUFBVXRFLE9BQVMsUUFBc0J1RSxJQUFqQkQsVUFBVSxJQUFtQkEsVUFBVSxHQUUvRTdCLEVBQVNDLEVBQUssSUFDZHlGLEVBQTZCLFNBQXBCckksRUFBTzRCLFNBQ2hCMEcsRUFBZWQsRUFBc0JXLEdBQ3JDSSxFQUFhZixFQUFzQnhILEdBQ25DVCxFQUFld0MsRUFBZ0JvRyxHQUUvQjNDLEVBQVNsRSxFQUF5QnRCLEdBQ2xDd0ksRUFBaUI1QyxXQUFXSixFQUFPZ0QsZ0JBQ25DQyxFQUFrQjdDLFdBQVdKLEVBQU9pRCxpQkFHcENMLEdBQWlCQyxJQUNuQkUsRUFBV3BELElBQU1ZLEtBQUtDLElBQUl1QyxFQUFXcEQsSUFBSyxHQUMxQ29ELEVBQVdsRCxLQUFPVSxLQUFLQyxJQUFJdUMsRUFBV2xELEtBQU0sSUFFOUMsSUFBSWtDLEVBQVVELEVBQWMsQ0FDMUJuQyxJQUFLbUQsRUFBYW5ELElBQU1vRCxFQUFXcEQsSUFBTXFELEVBQ3pDbkQsS0FBTWlELEVBQWFqRCxLQUFPa0QsRUFBV2xELEtBQU9vRCxFQUM1Q3JDLE1BQU9rQyxFQUFhbEMsTUFDcEJELE9BQVFtQyxFQUFhbkMsU0FTdkIsR0FQQW9CLEVBQVFtQixVQUFZLEVBQ3BCbkIsRUFBUW9CLFdBQWEsR0FNaEJoRyxHQUFVMEYsRUFBUSxDQUNyQixJQUFJSyxFQUFZOUMsV0FBV0osRUFBT2tELFdBQzlCQyxFQUFhL0MsV0FBV0osRUFBT21ELFlBRW5DcEIsRUFBUXBDLEtBQU9xRCxFQUFpQkUsRUFDaENuQixFQUFRbkMsUUFBVW9ELEVBQWlCRSxFQUNuQ25CLEVBQVFsQyxNQUFRb0QsRUFBa0JFLEVBQ2xDcEIsRUFBUWpDLE9BQVNtRCxFQUFrQkUsRUFHbkNwQixFQUFRbUIsVUFBWUEsRUFDcEJuQixFQUFRb0IsV0FBYUEsRUFPdkIsT0FKSWhHLElBQVd5RixFQUFnQnBJLEVBQU9tRSxTQUFTNUUsR0FBZ0JTLElBQVdULEdBQTBDLFNBQTFCQSxFQUFhcUMsWUFDckcyRixFQUFVMUMsRUFBYzBDLEVBQVN2SCxJQUc1QnVILEVBR1QsU0FBU3FCLEVBQThDckgsR0FDckQsSUFBSXNILEVBQWdCckUsVUFBVXRFLE9BQVMsUUFBc0J1RSxJQUFqQkQsVUFBVSxJQUFtQkEsVUFBVSxHQUUvRUcsRUFBT3BELEVBQVFwQixjQUFjNEMsZ0JBQzdCK0YsRUFBaUJaLEVBQXFDM0csRUFBU29ELEdBQy9EeUIsRUFBUUwsS0FBS0MsSUFBSXJCLEVBQUtpRCxZQUFhdEgsT0FBT3lJLFlBQWMsR0FDeEQ1QyxFQUFTSixLQUFLQyxJQUFJckIsRUFBS2tELGFBQWN2SCxPQUFPMEksYUFBZSxHQUUzRGhFLEVBQWE2RCxFQUFrQyxFQUFsQnZFLEVBQVVLLEdBQ3ZDTSxFQUFjNEQsRUFBMEMsRUFBMUJ2RSxFQUFVSyxFQUFNLFFBRTlDc0UsRUFBUyxDQUNYOUQsSUFBS0gsRUFBWThELEVBQWUzRCxJQUFNMkQsRUFBZUosVUFDckRyRCxLQUFNSixFQUFhNkQsRUFBZXpELEtBQU95RCxFQUFlSCxXQUN4RHZDLE1BQU9BLEVBQ1BELE9BQVFBLEdBR1YsT0FBT21CLEVBQWMyQixHQVd2QixTQUFTQyxFQUFRM0gsR0FDZixJQUFJSyxFQUFXTCxFQUFRSyxTQUN2QixHQUFpQixTQUFiQSxHQUFvQyxTQUFiQSxFQUN6QixPQUFPLEVBRVQsR0FBc0QsVUFBbEROLEVBQXlCQyxFQUFTLFlBQ3BDLE9BQU8sRUFFVCxJQUFJTSxFQUFhRixFQUFjSixHQUMvQixRQUFLTSxHQUdFcUgsRUFBUXJILEdBV2pCLFNBQVNzSCxFQUE2QjVILEdBRXBDLElBQUtBLElBQVlBLEVBQVE2SCxlQUFpQnhHLElBQ3hDLE9BQU94QyxTQUFTMkMsZ0JBR2xCLElBREEsSUFBSXNHLEVBQUs5SCxFQUFRNkgsY0FDVkMsR0FBb0QsU0FBOUMvSCxFQUF5QitILEVBQUksY0FDeENBLEVBQUtBLEVBQUdELGNBRVYsT0FBT0MsR0FBTWpKLFNBQVMyQyxnQkFjeEIsU0FBU3VHLEVBQWNDLEVBQVFqSCxFQUFXa0gsRUFBU0MsR0FDakQsSUFBSXJCLEVBQWdCNUQsVUFBVXRFLE9BQVMsUUFBc0J1RSxJQUFqQkQsVUFBVSxJQUFtQkEsVUFBVSxHQUkvRWtGLEVBQWEsQ0FBRXZFLElBQUssRUFBR0UsS0FBTSxHQUM3QnBDLEVBQWVtRixFQUFnQmUsRUFBNkJJLEdBQVVsRyxFQUF1QmtHLEVBQVFsSCxFQUFpQkMsSUFHMUgsR0FBMEIsYUFBdEJtSCxFQUNGQyxFQUFhZCxFQUE4QzNGLEVBQWNtRixPQUNwRSxDQUVMLElBQUl1QixPQUFpQixFQUNLLGlCQUF0QkYsRUFFOEIsVUFEaENFLEVBQWlCNUgsRUFBZ0JKLEVBQWNXLEtBQzVCVixXQUNqQitILEVBQWlCSixFQUFPcEosY0FBYzRDLGlCQUd4QzRHLEVBRCtCLFdBQXRCRixFQUNRRixFQUFPcEosY0FBYzRDLGdCQUVyQjBHLEVBR25CLElBQUlsQyxFQUFVVyxFQUFxQ3lCLEVBQWdCMUcsRUFBY21GLEdBR2pGLEdBQWdDLFNBQTVCdUIsRUFBZS9ILFVBQXdCc0gsRUFBUWpHLEdBV2pEeUcsRUFBYW5DLE1BWG1ELENBQ2hFLElBQUlxQyxFQUFrQjFELEVBQWVxRCxFQUFPcEosZUFDeENnRyxFQUFTeUQsRUFBZ0J6RCxPQUN6QkMsRUFBUXdELEVBQWdCeEQsTUFFNUJzRCxFQUFXdkUsS0FBT29DLEVBQVFwQyxJQUFNb0MsRUFBUW1CLFVBQ3hDZ0IsRUFBV3RFLE9BQVNlLEVBQVNvQixFQUFRcEMsSUFDckN1RSxFQUFXckUsTUFBUWtDLEVBQVFsQyxLQUFPa0MsRUFBUW9CLFdBQzFDZSxFQUFXcEUsTUFBUWMsRUFBUW1CLEVBQVFsQyxNQVN2QyxJQUFJd0UsRUFBcUMsaUJBRHpDTCxFQUFVQSxHQUFXLEdBT3JCLE9BTEFFLEVBQVdyRSxNQUFRd0UsRUFBa0JMLEVBQVVBLEVBQVFuRSxNQUFRLEVBQy9EcUUsRUFBV3ZFLEtBQU8wRSxFQUFrQkwsRUFBVUEsRUFBUXJFLEtBQU8sRUFDN0R1RSxFQUFXcEUsT0FBU3VFLEVBQWtCTCxFQUFVQSxFQUFRbEUsT0FBUyxFQUNqRW9FLEVBQVd0RSxRQUFVeUUsRUFBa0JMLEVBQVVBLEVBQVFwRSxRQUFVLEVBRTVEc0UsRUFHVCxTQUFTSSxFQUFRQyxHQUlmLE9BSFlBLEVBQUszRCxNQUNKMkQsRUFBSzVELE9BY3BCLFNBQVM2RCxFQUFxQkMsRUFBV0MsRUFBU1gsRUFBUWpILEVBQVdtSCxHQUNuRSxJQUFJRCxFQUFVaEYsVUFBVXRFLE9BQVMsUUFBc0J1RSxJQUFqQkQsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBRWxGLElBQW1DLElBQS9CeUYsRUFBVXRKLFFBQVEsUUFDcEIsT0FBT3NKLEVBR1QsSUFBSVAsRUFBYUosRUFBY0MsRUFBUWpILEVBQVdrSCxFQUFTQyxHQUV2RFUsRUFBUSxDQUNWaEYsSUFBSyxDQUNIaUIsTUFBT3NELEVBQVd0RCxNQUNsQkQsT0FBUStELEVBQVEvRSxJQUFNdUUsRUFBV3ZFLEtBRW5DRyxNQUFPLENBQ0xjLE1BQU9zRCxFQUFXcEUsTUFBUTRFLEVBQVE1RSxNQUNsQ2EsT0FBUXVELEVBQVd2RCxRQUVyQmYsT0FBUSxDQUNOZ0IsTUFBT3NELEVBQVd0RCxNQUNsQkQsT0FBUXVELEVBQVd0RSxPQUFTOEUsRUFBUTlFLFFBRXRDQyxLQUFNLENBQ0plLE1BQU84RCxFQUFRN0UsS0FBT3FFLEVBQVdyRSxLQUNqQ2MsT0FBUXVELEVBQVd2RCxTQUluQmlFLEVBQWMzTSxPQUFPNE0sS0FBS0YsR0FBT0csS0FBSSxTQUFVaE0sR0FDakQsT0FBTzZJLEVBQVMsQ0FDZDdJLElBQUtBLEdBQ0o2TCxFQUFNN0wsR0FBTSxDQUNiaU0sS0FBTVQsRUFBUUssRUFBTTdMLFNBRXJCa00sTUFBSyxTQUFVQyxFQUFHQyxHQUNuQixPQUFPQSxFQUFFSCxLQUFPRSxFQUFFRixRQUdoQkksRUFBZ0JQLEVBQVlySyxRQUFPLFNBQVU2SyxHQUMvQyxJQUFJeEUsRUFBUXdFLEVBQU14RSxNQUNkRCxFQUFTeUUsRUFBTXpFLE9BQ25CLE9BQU9DLEdBQVNtRCxFQUFPM0IsYUFBZXpCLEdBQVVvRCxFQUFPMUIsZ0JBR3JEZ0QsRUFBb0JGLEVBQWN6SyxPQUFTLEVBQUl5SyxFQUFjLEdBQUdyTSxJQUFNOEwsRUFBWSxHQUFHOUwsSUFFckZ3TSxFQUFZYixFQUFVYyxNQUFNLEtBQUssR0FFckMsT0FBT0YsR0FBcUJDLEVBQVksSUFBTUEsRUFBWSxJQWE1RCxTQUFTRSxFQUFvQkMsRUFBTzFCLEVBQVFqSCxHQUMxQyxJQUFJOEYsRUFBZ0I1RCxVQUFVdEUsT0FBUyxRQUFzQnVFLElBQWpCRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssS0FFcEYwRyxFQUFxQjlDLEVBQWdCZSxFQUE2QkksR0FBVWxHLEVBQXVCa0csRUFBUWxILEVBQWlCQyxJQUNoSSxPQUFPNEYsRUFBcUM1RixFQUFXNEksRUFBb0I5QyxHQVU3RSxTQUFTK0MsRUFBYzVKLEdBQ3JCLElBQ0lpRSxFQURTakUsRUFBUXBCLGNBQWNzQixZQUNmQyxpQkFBaUJILEdBQ2pDNkosRUFBSXhGLFdBQVdKLEVBQU9rRCxXQUFhLEdBQUs5QyxXQUFXSixFQUFPNkYsY0FBZ0IsR0FDMUVDLEVBQUkxRixXQUFXSixFQUFPbUQsWUFBYyxHQUFLL0MsV0FBV0osRUFBTytGLGFBQWUsR0FLOUUsTUFKYSxDQUNYbkYsTUFBTzdFLEVBQVF3RyxZQUFjdUQsRUFDN0JuRixPQUFRNUUsRUFBUTBHLGFBQWVtRCxHQVluQyxTQUFTSSxFQUFxQnZCLEdBQzVCLElBQUl3QixFQUFPLENBQUVwRyxLQUFNLFFBQVNDLE1BQU8sT0FBUUYsT0FBUSxNQUFPRCxJQUFLLFVBQy9ELE9BQU84RSxFQUFVOUssUUFBUSwwQkFBMEIsU0FBVXVNLEdBQzNELE9BQU9ELEVBQUtDLE1BY2hCLFNBQVNDLEVBQWlCcEMsRUFBUXFDLEVBQWtCM0IsR0FDbERBLEVBQVlBLEVBQVVjLE1BQU0sS0FBSyxHQUdqQyxJQUFJYyxFQUFhVixFQUFjNUIsR0FHM0J1QyxFQUFnQixDQUNsQjFGLE1BQU95RixFQUFXekYsTUFDbEJELE9BQVEwRixFQUFXMUYsUUFJakI0RixHQUFvRCxJQUExQyxDQUFDLFFBQVMsUUFBUXBMLFFBQVFzSixHQUNwQytCLEVBQVdELEVBQVUsTUFBUSxPQUM3QkUsRUFBZ0JGLEVBQVUsT0FBUyxNQUNuQ0csRUFBY0gsRUFBVSxTQUFXLFFBQ25DSSxFQUF3QkosRUFBcUIsUUFBWCxTQVN0QyxPQVBBRCxFQUFjRSxHQUFZSixFQUFpQkksR0FBWUosRUFBaUJNLEdBQWUsRUFBSUwsRUFBV0ssR0FBZSxFQUVuSEosRUFBY0csR0FEWmhDLElBQWNnQyxFQUNlTCxFQUFpQkssR0FBaUJKLEVBQVdNLEdBRTdDUCxFQUFpQkosRUFBcUJTLElBR2hFSCxFQVlULFNBQVNNLEVBQUtDLEVBQUtDLEdBRWpCLE9BQUlDLE1BQU01TixVQUFVeU4sS0FDWEMsRUFBSUQsS0FBS0UsR0FJWEQsRUFBSXRNLE9BQU91TSxHQUFPLEdBcUMzQixTQUFTRSxFQUFhQyxFQUFXQyxFQUFNQyxHQW9CckMsWUFuQjhCbEksSUFBVGtJLEVBQXFCRixFQUFZQSxFQUFVRyxNQUFNLEVBMUJ4RSxTQUFtQlAsRUFBS1EsRUFBTTdPLEdBRTVCLEdBQUl1TyxNQUFNNU4sVUFBVW1PLFVBQ2xCLE9BQU9ULEVBQUlTLFdBQVUsU0FBVUMsR0FDN0IsT0FBT0EsRUFBSUYsS0FBVTdPLEtBS3pCLElBQUlnUCxFQUFRWixFQUFLQyxHQUFLLFNBQVVuRixHQUM5QixPQUFPQSxFQUFJMkYsS0FBVTdPLEtBRXZCLE9BQU9xTyxFQUFJMUwsUUFBUXFNLEdBY3NERixDQUFVTCxFQUFXLE9BQVFFLEtBRXZGTSxTQUFRLFNBQVUvSCxHQUMzQkEsRUFBbUIsVUFFckJnSSxRQUFRQyxLQUFLLHlEQUVmLElBQUk3TixFQUFLNEYsRUFBbUIsVUFBS0EsRUFBUzVGLEdBQ3RDNEYsRUFBU2tJLFNBQVdqTSxFQUFXN0IsS0FJakNvTixFQUFLbkYsUUFBUWdDLE9BQVNqQyxFQUFjb0YsRUFBS25GLFFBQVFnQyxRQUNqRG1ELEVBQUtuRixRQUFRakYsVUFBWWdGLEVBQWNvRixFQUFLbkYsUUFBUWpGLFdBRXBEb0ssRUFBT3BOLEVBQUdvTixFQUFNeEgsT0FJYndILEVBVVQsU0FBU1csSUFFUCxJQUFJM04sS0FBS3VMLE1BQU1xQyxZQUFmLENBSUEsSUFBSVosRUFBTyxDQUNUcEcsU0FBVTVHLEtBQ1Y4RixPQUFRLEdBQ1IrSCxZQUFhLEdBQ2JDLFdBQVksR0FDWkMsU0FBUyxFQUNUbEcsUUFBUyxJQUlYbUYsRUFBS25GLFFBQVFqRixVQUFZMEksRUFBb0J0TCxLQUFLdUwsTUFBT3ZMLEtBQUs2SixPQUFRN0osS0FBSzRDLFVBQVc1QyxLQUFLZ08sUUFBUUMsZUFLbkdqQixFQUFLekMsVUFBWUQsRUFBcUJ0SyxLQUFLZ08sUUFBUXpELFVBQVd5QyxFQUFLbkYsUUFBUWpGLFVBQVc1QyxLQUFLNkosT0FBUTdKLEtBQUs0QyxVQUFXNUMsS0FBS2dPLFFBQVFqQixVQUFVbUIsS0FBS25FLGtCQUFtQi9KLEtBQUtnTyxRQUFRakIsVUFBVW1CLEtBQUtwRSxTQUc5TGtELEVBQUttQixrQkFBb0JuQixFQUFLekMsVUFFOUJ5QyxFQUFLaUIsY0FBZ0JqTyxLQUFLZ08sUUFBUUMsY0FHbENqQixFQUFLbkYsUUFBUWdDLE9BQVNvQyxFQUFpQmpNLEtBQUs2SixPQUFRbUQsRUFBS25GLFFBQVFqRixVQUFXb0ssRUFBS3pDLFdBRWpGeUMsRUFBS25GLFFBQVFnQyxPQUFPOUosU0FBV0MsS0FBS2dPLFFBQVFDLGNBQWdCLFFBQVUsV0FHdEVqQixFQUFPRixFQUFhOU0sS0FBSytNLFVBQVdDLEdBSS9CaE4sS0FBS3VMLE1BQU02QyxVQUlkcE8sS0FBS2dPLFFBQVFLLFNBQVNyQixJQUh0QmhOLEtBQUt1TCxNQUFNNkMsV0FBWSxFQUN2QnBPLEtBQUtnTyxRQUFRTSxTQUFTdEIsS0FZMUIsU0FBU3VCLEVBQWtCeEIsRUFBV3lCLEdBQ3BDLE9BQU96QixFQUFVMEIsTUFBSyxTQUFVcEUsR0FDOUIsSUFBSXpNLEVBQU95TSxFQUFLek0sS0FFaEIsT0FEY3lNLEVBQUtxRCxTQUNEOVAsSUFBUzRRLEtBVy9CLFNBQVNFLEVBQXlCMVAsR0FJaEMsSUFIQSxJQUFJMlAsRUFBVyxFQUFDLEVBQU8sS0FBTSxTQUFVLE1BQU8sS0FDMUNDLEVBQVk1UCxFQUFTNlAsT0FBTyxHQUFHQyxjQUFnQjlQLEVBQVNrTyxNQUFNLEdBRXpEN1AsRUFBSSxFQUFHQSxFQUFJc1IsRUFBU25PLE9BQVFuRCxJQUFLLENBQ3hDLElBQUkwUixFQUFTSixFQUFTdFIsR0FDbEIyUixFQUFVRCxFQUFTLEdBQUtBLEVBQVNILEVBQVk1UCxFQUNqRCxRQUE0QyxJQUFqQzBCLFNBQVM0QixLQUFLMk0sTUFBTUQsR0FDN0IsT0FBT0EsRUFHWCxPQUFPLEtBUVQsU0FBU0UsSUFzQlAsT0FyQkFsUCxLQUFLdUwsTUFBTXFDLGFBQWMsRUFHckJXLEVBQWtCdk8sS0FBSytNLFVBQVcsZ0JBQ3BDL00sS0FBSzZKLE9BQU9zRixnQkFBZ0IsZUFDNUJuUCxLQUFLNkosT0FBT29GLE1BQU1sUCxTQUFXLEdBQzdCQyxLQUFLNkosT0FBT29GLE1BQU14SixJQUFNLEdBQ3hCekYsS0FBSzZKLE9BQU9vRixNQUFNdEosS0FBTyxHQUN6QjNGLEtBQUs2SixPQUFPb0YsTUFBTXJKLE1BQVEsR0FDMUI1RixLQUFLNkosT0FBT29GLE1BQU12SixPQUFTLEdBQzNCMUYsS0FBSzZKLE9BQU9vRixNQUFNRyxXQUFhLEdBQy9CcFAsS0FBSzZKLE9BQU9vRixNQUFNUCxFQUF5QixjQUFnQixJQUc3RDFPLEtBQUtxUCx3QkFJRHJQLEtBQUtnTyxRQUFRc0IsaUJBQ2Z0UCxLQUFLNkosT0FBTzFILFdBQVdvTixZQUFZdlAsS0FBSzZKLFFBRW5DN0osS0FRVCxTQUFTd1AsRUFBVTNOLEdBQ2pCLElBQUlwQixFQUFnQm9CLEVBQVFwQixjQUM1QixPQUFPQSxFQUFnQkEsRUFBY3NCLFlBQWNuQixPQW9CckQsU0FBUzZPLEVBQW9CN00sRUFBV29MLEVBQVN6QyxFQUFPbUUsR0FFdERuRSxFQUFNbUUsWUFBY0EsRUFDcEJGLEVBQVU1TSxHQUFXK00saUJBQWlCLFNBQVVwRSxFQUFNbUUsWUFBYSxDQUFFRSxTQUFTLElBRzlFLElBQUlDLEVBQWdCeE4sRUFBZ0JPLEdBS3BDLE9BNUJGLFNBQVNrTixFQUFzQmpRLEVBQWNrUSxFQUFPQyxFQUFVQyxHQUM1RCxJQUFJQyxFQUFtQyxTQUExQnJRLEVBQWFxQyxTQUN0QitFLEVBQVNpSixFQUFTclEsRUFBYVksY0FBY3NCLFlBQWNsQyxFQUMvRG9ILEVBQU8wSSxpQkFBaUJJLEVBQU9DLEVBQVUsQ0FBRUosU0FBUyxJQUUvQ00sR0FDSEosRUFBc0J6TixFQUFnQjRFLEVBQU85RSxZQUFhNE4sRUFBT0MsRUFBVUMsR0FFN0VBLEVBQWNFLEtBQUtsSixHQWdCbkI2SSxDQUFzQkQsRUFBZSxTQUFVdEUsRUFBTW1FLFlBQWFuRSxFQUFNMEUsZUFDeEUxRSxFQUFNc0UsY0FBZ0JBLEVBQ3RCdEUsRUFBTTZFLGVBQWdCLEVBRWY3RSxFQVNULFNBQVM4RSxJQUNGclEsS0FBS3VMLE1BQU02RSxnQkFDZHBRLEtBQUt1TCxNQUFRa0UsRUFBb0J6UCxLQUFLNEMsVUFBVzVDLEtBQUtnTyxRQUFTaE8sS0FBS3VMLE1BQU92TCxLQUFLc1EsaUJBa0NwRixTQUFTakIsSUF4QlQsSUFBOEJ6TSxFQUFXMkksRUF5Qm5DdkwsS0FBS3VMLE1BQU02RSxnQkFDYkcscUJBQXFCdlEsS0FBS3NRLGdCQUMxQnRRLEtBQUt1TCxPQTNCcUIzSSxFQTJCUTVDLEtBQUs0QyxVQTNCRjJJLEVBMkJhdkwsS0FBS3VMLE1BekJ6RGlFLEVBQVU1TSxHQUFXNE4sb0JBQW9CLFNBQVVqRixFQUFNbUUsYUFHekRuRSxFQUFNMEUsY0FBYzFDLFNBQVEsU0FBVXRHLEdBQ3BDQSxFQUFPdUosb0JBQW9CLFNBQVVqRixFQUFNbUUsZ0JBSTdDbkUsRUFBTW1FLFlBQWMsS0FDcEJuRSxFQUFNMEUsY0FBZ0IsR0FDdEIxRSxFQUFNc0UsY0FBZ0IsS0FDdEJ0RSxFQUFNNkUsZUFBZ0IsRUFDZjdFLElBd0JULFNBQVNrRixFQUFVM1IsR0FDakIsTUFBYSxLQUFOQSxJQUFhNFIsTUFBTXhLLFdBQVdwSCxLQUFPNlIsU0FBUzdSLEdBV3ZELFNBQVM4UixFQUFVL08sRUFBU2lFLEdBQzFCL0gsT0FBTzRNLEtBQUs3RSxHQUFReUgsU0FBUSxTQUFVSixHQUNwQyxJQUFJMEQsRUFBTyxJQUVrRSxJQUF6RSxDQUFDLFFBQVMsU0FBVSxNQUFPLFFBQVMsU0FBVSxRQUFRNVAsUUFBUWtNLElBQWdCc0QsRUFBVTNLLEVBQU9xSCxNQUNqRzBELEVBQU8sTUFFVGhQLEVBQVFvTixNQUFNOUIsR0FBUXJILEVBQU9xSCxHQUFRMEQsS0FnSXpDLElBQUlDLEVBQVluUSxHQUFhLFdBQVdyQixLQUFLdUIsVUFBVUcsV0E4R3ZELFNBQVMrUCxFQUFtQmhFLEVBQVdpRSxFQUFnQkMsR0FDckQsSUFBSUMsRUFBYXhFLEVBQUtLLEdBQVcsU0FBVTFDLEdBRXpDLE9BRFdBLEVBQUt6TSxPQUNBb1QsS0FHZEcsSUFBZUQsR0FBY25FLEVBQVUwQixNQUFLLFNBQVVqSixHQUN4RCxPQUFPQSxFQUFTNUgsT0FBU3FULEdBQWlCekwsRUFBU2tJLFNBQVdsSSxFQUFTMUIsTUFBUW9OLEVBQVdwTixTQUc1RixJQUFLcU4sRUFBWSxDQUNmLElBQUlDLEVBQWMsSUFBTUosRUFBaUIsSUFDckNLLEVBQVksSUFBTUosRUFBZ0IsSUFDdEN6RCxRQUFRQyxLQUFLNEQsRUFBWSw0QkFBOEJELEVBQWMsNERBQThEQSxFQUFjLEtBRW5KLE9BQU9ELEVBb0lULElBQUlHLEVBQWEsQ0FBQyxhQUFjLE9BQVEsV0FBWSxZQUFhLE1BQU8sVUFBVyxjQUFlLFFBQVMsWUFBYSxhQUFjLFNBQVUsZUFBZ0IsV0FBWSxPQUFRLGNBR2hMQyxFQUFrQkQsRUFBV3BFLE1BQU0sR0FZdkMsU0FBU3NFLEdBQVVqSCxHQUNqQixJQUFJa0gsRUFBVTNNLFVBQVV0RSxPQUFTLFFBQXNCdUUsSUFBakJELFVBQVUsSUFBbUJBLFVBQVUsR0FFekU0TSxFQUFRSCxFQUFnQnRRLFFBQVFzSixHQUNoQ29DLEVBQU00RSxFQUFnQnJFLE1BQU13RSxFQUFRLEdBQUdDLE9BQU9KLEVBQWdCckUsTUFBTSxFQUFHd0UsSUFDM0UsT0FBT0QsRUFBVTlFLEVBQUlpRixVQUFZakYsRUFHbkMsSUFBSWtGLEdBQ0ksT0FESkEsR0FFUyxZQUZUQSxHQUdnQixtQkFpTXBCLFNBQVNDLEdBQVl2SSxFQUFRNkMsRUFBZUYsRUFBa0I2RixHQUM1RCxJQUFJbEssRUFBVSxDQUFDLEVBQUcsR0FLZG1LLEdBQTBELElBQTlDLENBQUMsUUFBUyxRQUFRL1EsUUFBUThRLEdBSXRDRSxFQUFZMUksRUFBTzhCLE1BQU0sV0FBV1QsS0FBSSxTQUFVc0gsR0FDcEQsT0FBT0EsRUFBS0MsVUFLVkMsRUFBVUgsRUFBVWhSLFFBQVF5TCxFQUFLdUYsR0FBVyxTQUFVQyxHQUN4RCxPQUFnQyxJQUF6QkEsRUFBS0csT0FBTyxZQUdqQkosRUFBVUcsS0FBaUQsSUFBckNILEVBQVVHLEdBQVNuUixRQUFRLE1BQ25EdU0sUUFBUUMsS0FBSyxnRkFLZixJQUFJNkUsRUFBYSxjQUNiQyxHQUFtQixJQUFiSCxFQUFpQixDQUFDSCxFQUFVL0UsTUFBTSxFQUFHa0YsR0FBU1QsT0FBTyxDQUFDTSxFQUFVRyxHQUFTL0csTUFBTWlILEdBQVksS0FBTSxDQUFDTCxFQUFVRyxHQUFTL0csTUFBTWlILEdBQVksSUFBSVgsT0FBT00sRUFBVS9FLE1BQU1rRixFQUFVLEtBQU8sQ0FBQ0gsR0FxQzlMLE9BbENBTSxFQUFNQSxFQUFJM0gsS0FBSSxTQUFVNEgsRUFBSWQsR0FFMUIsSUFBSWxGLEdBQXlCLElBQVZrRixHQUFlTSxFQUFZQSxHQUFhLFNBQVcsUUFDbEVTLEdBQW9CLEVBQ3hCLE9BQU9ELEVBR05FLFFBQU8sU0FBVTNILEVBQUdDLEdBQ25CLE1BQXdCLEtBQXBCRCxFQUFFQSxFQUFFdkssT0FBUyxLQUF3QyxJQUEzQixDQUFDLElBQUssS0FBS1MsUUFBUStKLElBQy9DRCxFQUFFQSxFQUFFdkssT0FBUyxHQUFLd0ssRUFDbEJ5SCxHQUFvQixFQUNiMUgsR0FDRTBILEdBQ1QxSCxFQUFFQSxFQUFFdkssT0FBUyxJQUFNd0ssRUFDbkJ5SCxHQUFvQixFQUNiMUgsR0FFQUEsRUFBRTRHLE9BQU8zRyxLQUVqQixJQUVGSixLQUFJLFNBQVUrSCxHQUNiLE9BeEdOLFNBQWlCQSxFQUFLbkcsRUFBYUosRUFBZUYsR0FFaEQsSUFBSWIsRUFBUXNILEVBQUlyRixNQUFNLDZCQUNsQmhQLEdBQVMrTSxFQUFNLEdBQ2Z3RixFQUFPeEYsRUFBTSxHQUdqQixJQUFLL00sRUFDSCxPQUFPcVUsRUFHVCxHQUEwQixJQUF0QjlCLEVBQUs1UCxRQUFRLEtBQVksQ0FDM0IsSUFBSVksT0FBVSxFQUNkLE9BQVFnUCxHQUNOLElBQUssS0FDSGhQLEVBQVV1SyxFQUNWLE1BQ0YsSUFBSyxJQUNMLElBQUssS0FDTCxRQUNFdkssRUFBVXFLLEVBSWQsT0FEV3RFLEVBQWMvRixHQUNiMkssR0FBZSxJQUFNbE8sRUFDNUIsR0FBYSxPQUFUdVMsR0FBMEIsT0FBVEEsRUFBZSxDQVF6QyxPQUxhLE9BQVRBLEVBQ0t4SyxLQUFLQyxJQUFJNUYsU0FBUzJDLGdCQUFnQjhFLGFBQWN2SCxPQUFPMEksYUFBZSxHQUV0RWpELEtBQUtDLElBQUk1RixTQUFTMkMsZ0JBQWdCNkUsWUFBYXRILE9BQU95SSxZQUFjLElBRS9ELElBQU0vSyxFQUlwQixPQUFPQSxFQW1FRXNVLENBQVFELEVBQUtuRyxFQUFhSixFQUFlRixVQUtoRHFCLFNBQVEsU0FBVWlGLEVBQUlkLEdBQ3hCYyxFQUFHakYsU0FBUSxTQUFVMkUsRUFBTVcsR0FDckJwQyxFQUFVeUIsS0FDWnJLLEVBQVE2SixJQUFVUSxHQUEyQixNQUFuQk0sRUFBR0ssRUFBUyxJQUFjLEVBQUksVUFJdkRoTCxFQTJPVCxJQWtXSWlMLEdBQVcsQ0FLYnZJLFVBQVcsU0FNWDBELGVBQWUsRUFNZm1DLGVBQWUsRUFPZmQsaUJBQWlCLEVBUWpCaEIsU0FBVSxhQVVWRCxTQUFVLGFBT1Z0QixVQW5aYyxDQVNkZ0csTUFBTyxDQUVMalAsTUFBTyxJQUVQNEosU0FBUyxFQUVUOU4sR0E5SEosU0FBZW9OLEdBQ2IsSUFBSXpDLEVBQVl5QyxFQUFLekMsVUFDakJ3SCxFQUFnQnhILEVBQVVjLE1BQU0sS0FBSyxHQUNyQzJILEVBQWlCekksRUFBVWMsTUFBTSxLQUFLLEdBRzFDLEdBQUkySCxFQUFnQixDQUNsQixJQUFJQyxFQUFnQmpHLEVBQUtuRixRQUNyQmpGLEVBQVlxUSxFQUFjclEsVUFDMUJpSCxFQUFTb0osRUFBY3BKLE9BRXZCcUosR0FBMkQsSUFBOUMsQ0FBQyxTQUFVLE9BQU9qUyxRQUFROFEsR0FDdkNsTixFQUFPcU8sRUFBYSxPQUFTLE1BQzdCMUcsRUFBYzBHLEVBQWEsUUFBVSxTQUVyQ0MsRUFBZSxDQUNqQmpQLE1BQU9sRyxFQUFlLEdBQUk2RyxFQUFNakMsRUFBVWlDLElBQzFDVixJQUFLbkcsRUFBZSxHQUFJNkcsRUFBTWpDLEVBQVVpQyxHQUFRakMsRUFBVTRKLEdBQWUzQyxFQUFPMkMsS0FHbEZRLEVBQUtuRixRQUFRZ0MsT0FBU3BDLEVBQVMsR0FBSW9DLEVBQVFzSixFQUFhSCxJQUcxRCxPQUFPaEcsSUFnSlB6RCxPQUFRLENBRU56RixNQUFPLElBRVA0SixTQUFTLEVBRVQ5TixHQTdSSixTQUFnQm9OLEVBQU0zQyxHQUNwQixJQUFJZCxFQUFTYyxFQUFLZCxPQUNkZ0IsRUFBWXlDLEVBQUt6QyxVQUNqQjBJLEVBQWdCakcsRUFBS25GLFFBQ3JCZ0MsRUFBU29KLEVBQWNwSixPQUN2QmpILEVBQVlxUSxFQUFjclEsVUFFMUJtUCxFQUFnQnhILEVBQVVjLE1BQU0sS0FBSyxHQUVyQ3hELE9BQVUsRUFzQmQsT0FwQkVBLEVBREU0SSxHQUFXbEgsR0FDSCxFQUFFQSxFQUFRLEdBRVZ1SSxHQUFZdkksRUFBUU0sRUFBUWpILEVBQVdtUCxHQUc3QixTQUFsQkEsR0FDRmxJLEVBQU9wRSxLQUFPb0MsRUFBUSxHQUN0QmdDLEVBQU9sRSxNQUFRa0MsRUFBUSxJQUNJLFVBQWxCa0ssR0FDVGxJLEVBQU9wRSxLQUFPb0MsRUFBUSxHQUN0QmdDLEVBQU9sRSxNQUFRa0MsRUFBUSxJQUNJLFFBQWxCa0ssR0FDVGxJLEVBQU9sRSxNQUFRa0MsRUFBUSxHQUN2QmdDLEVBQU9wRSxLQUFPb0MsRUFBUSxJQUNLLFdBQWxCa0ssSUFDVGxJLEVBQU9sRSxNQUFRa0MsRUFBUSxHQUN2QmdDLEVBQU9wRSxLQUFPb0MsRUFBUSxJQUd4Qm1GLEVBQUtuRCxPQUFTQSxFQUNQbUQsR0FrUUx6RCxPQUFRLEdBb0JWNkosZ0JBQWlCLENBRWZ0UCxNQUFPLElBRVA0SixTQUFTLEVBRVQ5TixHQWxSSixTQUF5Qm9OLEVBQU1nQixHQUM3QixJQUFJakUsRUFBb0JpRSxFQUFRakUsbUJBQXFCM0csRUFBZ0I0SixFQUFLcEcsU0FBU2lELFFBSy9FbUQsRUFBS3BHLFNBQVNoRSxZQUFjbUgsSUFDOUJBLEVBQW9CM0csRUFBZ0IyRyxJQU10QyxJQUFJc0osRUFBZ0IzRSxFQUF5QixhQUN6QzRFLEVBQWV0RyxFQUFLcEcsU0FBU2lELE9BQU9vRixNQUNwQ3hKLEVBQU02TixFQUFhN04sSUFDbkJFLEVBQU8yTixFQUFhM04sS0FDcEI0TixFQUFZRCxFQUFhRCxHQUU3QkMsRUFBYTdOLElBQU0sR0FDbkI2TixFQUFhM04sS0FBTyxHQUNwQjJOLEVBQWFELEdBQWlCLEdBRTlCLElBQUlySixFQUFhSixFQUFjb0QsRUFBS3BHLFNBQVNpRCxPQUFRbUQsRUFBS3BHLFNBQVNoRSxVQUFXb0wsRUFBUWxFLFFBQVNDLEVBQW1CaUQsRUFBS2lCLGVBSXZIcUYsRUFBYTdOLElBQU1BLEVBQ25CNk4sRUFBYTNOLEtBQU9BLEVBQ3BCMk4sRUFBYUQsR0FBaUJFLEVBRTlCdkYsRUFBUWhFLFdBQWFBLEVBRXJCLElBQUlsRyxFQUFRa0ssRUFBUXdGLFNBQ2hCM0osRUFBU21ELEVBQUtuRixRQUFRZ0MsT0FFdEIrQyxFQUFRLENBQ1Y2RyxRQUFTLFNBQWlCbEosR0FDeEIsSUFBSWpNLEVBQVF1TCxFQUFPVSxHQUluQixPQUhJVixFQUFPVSxHQUFhUCxFQUFXTyxLQUFleUQsRUFBUTBGLHNCQUN4RHBWLEVBQVErSCxLQUFLQyxJQUFJdUQsRUFBT1UsR0FBWVAsRUFBV08sS0FFMUN2TSxFQUFlLEdBQUl1TSxFQUFXak0sSUFFdkNxVixVQUFXLFNBQW1CcEosR0FDNUIsSUFBSStCLEVBQXlCLFVBQWQvQixFQUF3QixPQUFTLE1BQzVDak0sRUFBUXVMLEVBQU95QyxHQUluQixPQUhJekMsRUFBT1UsR0FBYVAsRUFBV08sS0FBZXlELEVBQVEwRixzQkFDeERwVixFQUFRK0gsS0FBS3VOLElBQUkvSixFQUFPeUMsR0FBV3RDLEVBQVdPLElBQTRCLFVBQWRBLEVBQXdCVixFQUFPbkQsTUFBUW1ELEVBQU9wRCxVQUVyR3pJLEVBQWUsR0FBSXNPLEVBQVVoTyxLQVd4QyxPQVBBd0YsRUFBTXlKLFNBQVEsU0FBVWhELEdBQ3RCLElBQUkxRixHQUErQyxJQUF4QyxDQUFDLE9BQVEsT0FBTzVELFFBQVFzSixHQUFvQixVQUFZLFlBQ25FVixFQUFTcEMsRUFBUyxHQUFJb0MsRUFBUStDLEVBQU0vSCxHQUFNMEYsT0FHNUN5QyxFQUFLbkYsUUFBUWdDLE9BQVNBLEVBRWZtRCxHQTJOTHdHLFNBQVUsQ0FBQyxPQUFRLFFBQVMsTUFBTyxVQU9uQzFKLFFBQVMsRUFNVEMsa0JBQW1CLGdCQVlyQjhKLGFBQWMsQ0FFWi9QLE1BQU8sSUFFUDRKLFNBQVMsRUFFVDlOLEdBbGdCSixTQUFzQm9OLEdBQ3BCLElBQUlpRyxFQUFnQmpHLEVBQUtuRixRQUNyQmdDLEVBQVNvSixFQUFjcEosT0FDdkJqSCxFQUFZcVEsRUFBY3JRLFVBRTFCMkgsRUFBWXlDLEVBQUt6QyxVQUFVYyxNQUFNLEtBQUssR0FDdEN5SSxFQUFRek4sS0FBS3lOLE1BQ2JaLEdBQXVELElBQTFDLENBQUMsTUFBTyxVQUFValMsUUFBUXNKLEdBQ3ZDMUYsRUFBT3FPLEVBQWEsUUFBVSxTQUM5QmEsRUFBU2IsRUFBYSxPQUFTLE1BQy9CMUcsRUFBYzBHLEVBQWEsUUFBVSxTQVN6QyxPQVBJckosRUFBT2hGLEdBQVFpUCxFQUFNbFIsRUFBVW1SLE1BQ2pDL0csRUFBS25GLFFBQVFnQyxPQUFPa0ssR0FBVUQsRUFBTWxSLEVBQVVtUixJQUFXbEssRUFBTzJDLElBRTlEM0MsRUFBT2tLLEdBQVVELEVBQU1sUixFQUFVaUMsTUFDbkNtSSxFQUFLbkYsUUFBUWdDLE9BQU9rSyxHQUFVRCxFQUFNbFIsRUFBVWlDLEtBR3pDbUksSUE0ZlBnSCxNQUFPLENBRUxsUSxNQUFPLElBRVA0SixTQUFTLEVBRVQ5TixHQXB4QkosU0FBZW9OLEVBQU1nQixHQUNuQixJQUFJaUcsRUFHSixJQUFLbEQsRUFBbUIvRCxFQUFLcEcsU0FBU21HLFVBQVcsUUFBUyxnQkFDeEQsT0FBT0MsRUFHVCxJQUFJa0gsRUFBZWxHLEVBQVFuTSxRQUczQixHQUE0QixpQkFBakJxUyxHQUlULEtBSEFBLEVBQWVsSCxFQUFLcEcsU0FBU2lELE9BQU9zSyxjQUFjRCxJQUloRCxPQUFPbEgsT0FLVCxJQUFLQSxFQUFLcEcsU0FBU2lELE9BQU9wRixTQUFTeVAsR0FFakMsT0FEQTFHLFFBQVFDLEtBQUssaUVBQ05ULEVBSVgsSUFBSXpDLEVBQVl5QyxFQUFLekMsVUFBVWMsTUFBTSxLQUFLLEdBQ3RDNEgsRUFBZ0JqRyxFQUFLbkYsUUFDckJnQyxFQUFTb0osRUFBY3BKLE9BQ3ZCakgsRUFBWXFRLEVBQWNyUSxVQUUxQnNRLEdBQXVELElBQTFDLENBQUMsT0FBUSxTQUFTalMsUUFBUXNKLEdBRXZDNkosRUFBTWxCLEVBQWEsU0FBVyxRQUM5Qm1CLEVBQWtCbkIsRUFBYSxNQUFRLE9BQ3ZDck8sRUFBT3dQLEVBQWdCQyxjQUN2QkMsRUFBVXJCLEVBQWEsT0FBUyxNQUNoQ2EsRUFBU2IsRUFBYSxTQUFXLFFBQ2pDc0IsRUFBbUIvSSxFQUFjeUksR0FBY0UsR0FRL0N4UixFQUFVbVIsR0FBVVMsRUFBbUIzSyxFQUFPaEYsS0FDaERtSSxFQUFLbkYsUUFBUWdDLE9BQU9oRixJQUFTZ0YsRUFBT2hGLElBQVNqQyxFQUFVbVIsR0FBVVMsSUFHL0Q1UixFQUFVaUMsR0FBUTJQLEVBQW1CM0ssRUFBT2tLLEtBQzlDL0csRUFBS25GLFFBQVFnQyxPQUFPaEYsSUFBU2pDLEVBQVVpQyxHQUFRMlAsRUFBbUIzSyxFQUFPa0ssSUFFM0UvRyxFQUFLbkYsUUFBUWdDLE9BQVNqQyxFQUFjb0YsRUFBS25GLFFBQVFnQyxRQUdqRCxJQUFJNEssRUFBUzdSLEVBQVVpQyxHQUFRakMsRUFBVXdSLEdBQU8sRUFBSUksRUFBbUIsRUFJbkV2VSxFQUFNMkIsRUFBeUJvTCxFQUFLcEcsU0FBU2lELFFBQzdDNkssRUFBbUJ4TyxXQUFXakcsRUFBSSxTQUFXb1UsSUFDN0NNLEVBQW1Cek8sV0FBV2pHLEVBQUksU0FBV29VLEVBQWtCLFVBQy9ETyxFQUFZSCxFQUFTekgsRUFBS25GLFFBQVFnQyxPQUFPaEYsR0FBUTZQLEVBQW1CQyxFQVF4RSxPQUxBQyxFQUFZdk8sS0FBS0MsSUFBSUQsS0FBS3VOLElBQUkvSixFQUFPdUssR0FBT0ksRUFBa0JJLEdBQVksR0FFMUU1SCxFQUFLa0gsYUFBZUEsRUFDcEJsSCxFQUFLbkYsUUFBUW1NLE9BQW1DaFcsRUFBMUJpVyxFQUFzQixHQUF3Q3BQLEVBQU13QixLQUFLd08sTUFBTUQsSUFBYTVXLEVBQWVpVyxFQUFxQk0sRUFBUyxJQUFLTixHQUU3SmpILEdBOHNCTG5MLFFBQVMsYUFjWHFNLEtBQU0sQ0FFSnBLLE1BQU8sSUFFUDRKLFNBQVMsRUFFVDlOLEdBNW9CSixTQUFjb04sRUFBTWdCLEdBRWxCLEdBQUlPLEVBQWtCdkIsRUFBS3BHLFNBQVNtRyxVQUFXLFNBQzdDLE9BQU9DLEVBR1QsR0FBSUEsRUFBS2UsU0FBV2YsRUFBS3pDLFlBQWN5QyxFQUFLbUIsa0JBRTFDLE9BQU9uQixFQUdULElBQUloRCxFQUFhSixFQUFjb0QsRUFBS3BHLFNBQVNpRCxPQUFRbUQsRUFBS3BHLFNBQVNoRSxVQUFXb0wsRUFBUWxFLFFBQVNrRSxFQUFRakUsa0JBQW1CaUQsRUFBS2lCLGVBRTNIMUQsRUFBWXlDLEVBQUt6QyxVQUFVYyxNQUFNLEtBQUssR0FDdEN5SixFQUFvQmhKLEVBQXFCdkIsR0FDekNhLEVBQVk0QixFQUFLekMsVUFBVWMsTUFBTSxLQUFLLElBQU0sR0FFNUMwSixFQUFZLEdBRWhCLE9BQVEvRyxFQUFRZ0gsVUFDZCxLQUFLbkQsR0FDSGtELEVBQVksQ0FBQ3hLLEVBQVd1SyxHQUN4QixNQUNGLEtBQUtqRCxHQUNIa0QsRUFBWXZELEdBQVVqSCxHQUN0QixNQUNGLEtBQUtzSCxHQUNIa0QsRUFBWXZELEdBQVVqSCxHQUFXLEdBQ2pDLE1BQ0YsUUFDRXdLLEVBQVkvRyxFQUFRZ0gsU0F5RHhCLE9BdERBRCxFQUFVeEgsU0FBUSxTQUFVMEgsRUFBTXZELEdBQ2hDLEdBQUluSCxJQUFjMEssR0FBUUYsRUFBVXZVLFNBQVdrUixFQUFRLEVBQ3JELE9BQU8xRSxFQUdUekMsRUFBWXlDLEVBQUt6QyxVQUFVYyxNQUFNLEtBQUssR0FDdEN5SixFQUFvQmhKLEVBQXFCdkIsR0FFekMsSUFBSTZCLEVBQWdCWSxFQUFLbkYsUUFBUWdDLE9BQzdCcUwsRUFBYWxJLEVBQUtuRixRQUFRakYsVUFHMUJrUixFQUFRek4sS0FBS3lOLE1BQ2JxQixFQUE0QixTQUFkNUssR0FBd0J1SixFQUFNMUgsRUFBY3hHLE9BQVNrTyxFQUFNb0IsRUFBV3ZQLE9BQXVCLFVBQWQ0RSxHQUF5QnVKLEVBQU0xSCxFQUFjekcsTUFBUW1PLEVBQU1vQixFQUFXdFAsUUFBd0IsUUFBZDJFLEdBQXVCdUosRUFBTTFILEVBQWMxRyxRQUFVb08sRUFBTW9CLEVBQVd6UCxNQUFzQixXQUFkOEUsR0FBMEJ1SixFQUFNMUgsRUFBYzNHLEtBQU9xTyxFQUFNb0IsRUFBV3hQLFFBRWpVMFAsRUFBZ0J0QixFQUFNMUgsRUFBY3pHLE1BQVFtTyxFQUFNOUosRUFBV3JFLE1BQzdEMFAsRUFBaUJ2QixFQUFNMUgsRUFBY3hHLE9BQVNrTyxFQUFNOUosRUFBV3BFLE9BQy9EMFAsRUFBZXhCLEVBQU0xSCxFQUFjM0csS0FBT3FPLEVBQU05SixFQUFXdkUsS0FDM0Q4UCxFQUFrQnpCLEVBQU0xSCxFQUFjMUcsUUFBVW9PLEVBQU05SixFQUFXdEUsUUFFakU4UCxFQUFvQyxTQUFkakwsR0FBd0I2SyxHQUErQixVQUFkN0ssR0FBeUI4SyxHQUFnQyxRQUFkOUssR0FBdUIrSyxHQUE4QixXQUFkL0ssR0FBMEJnTCxFQUczS3JDLEdBQXVELElBQTFDLENBQUMsTUFBTyxVQUFValMsUUFBUXNKLEdBR3ZDa0wsSUFBMEJ6SCxFQUFRMEgsaUJBQW1CeEMsR0FBNEIsVUFBZDlILEdBQXlCZ0ssR0FBaUJsQyxHQUE0QixRQUFkOUgsR0FBdUJpSyxJQUFtQm5DLEdBQTRCLFVBQWQ5SCxHQUF5QmtLLElBQWlCcEMsR0FBNEIsUUFBZDlILEdBQXVCbUssR0FHbFFJLElBQThCM0gsRUFBUTRILDBCQUE0QjFDLEdBQTRCLFVBQWQ5SCxHQUF5QmlLLEdBQWtCbkMsR0FBNEIsUUFBZDlILEdBQXVCZ0ssSUFBa0JsQyxHQUE0QixVQUFkOUgsR0FBeUJtSyxJQUFvQnJDLEdBQTRCLFFBQWQ5SCxHQUF1QmtLLEdBRWxSTyxFQUFtQkosR0FBeUJFLEdBRTVDUixHQUFlSyxHQUF1QkssS0FFeEM3SSxFQUFLZSxTQUFVLEdBRVhvSCxHQUFlSyxLQUNqQmpMLEVBQVl3SyxFQUFVckQsRUFBUSxJQUc1Qm1FLElBQ0Z6SyxFQXZKUixTQUE4QkEsR0FDNUIsTUFBa0IsUUFBZEEsRUFDSyxRQUNnQixVQUFkQSxFQUNGLE1BRUZBLEVBaUpXMEssQ0FBcUIxSyxJQUduQzRCLEVBQUt6QyxVQUFZQSxHQUFhYSxFQUFZLElBQU1BLEVBQVksSUFJNUQ0QixFQUFLbkYsUUFBUWdDLE9BQVNwQyxFQUFTLEdBQUl1RixFQUFLbkYsUUFBUWdDLE9BQVFvQyxFQUFpQmUsRUFBS3BHLFNBQVNpRCxPQUFRbUQsRUFBS25GLFFBQVFqRixVQUFXb0ssRUFBS3pDLFlBRTVIeUMsRUFBT0YsRUFBYUUsRUFBS3BHLFNBQVNtRyxVQUFXQyxFQUFNLFlBR2hEQSxHQTRqQkxnSSxTQUFVLE9BS1ZsTCxRQUFTLEVBT1RDLGtCQUFtQixXQVFuQjJMLGdCQUFnQixFQVFoQkUseUJBQXlCLEdBVTNCRyxNQUFPLENBRUxqUyxNQUFPLElBRVA0SixTQUFTLEVBRVQ5TixHQXJRSixTQUFlb04sR0FDYixJQUFJekMsRUFBWXlDLEVBQUt6QyxVQUNqQndILEVBQWdCeEgsRUFBVWMsTUFBTSxLQUFLLEdBQ3JDNEgsRUFBZ0JqRyxFQUFLbkYsUUFDckJnQyxFQUFTb0osRUFBY3BKLE9BQ3ZCakgsRUFBWXFRLEVBQWNyUSxVQUUxQnlKLEdBQXdELElBQTlDLENBQUMsT0FBUSxTQUFTcEwsUUFBUThRLEdBRXBDaUUsR0FBNkQsSUFBNUMsQ0FBQyxNQUFPLFFBQVEvVSxRQUFROFEsR0FPN0MsT0FMQWxJLEVBQU93QyxFQUFVLE9BQVMsT0FBU3pKLEVBQVVtUCxJQUFrQmlFLEVBQWlCbk0sRUFBT3dDLEVBQVUsUUFBVSxVQUFZLEdBRXZIVyxFQUFLekMsVUFBWXVCLEVBQXFCdkIsR0FDdEN5QyxFQUFLbkYsUUFBUWdDLE9BQVNqQyxFQUFjaUMsR0FFN0JtRCxJQWtRUGlKLEtBQU0sQ0FFSm5TLE1BQU8sSUFFUDRKLFNBQVMsRUFFVDlOLEdBOVRKLFNBQWNvTixHQUNaLElBQUsrRCxFQUFtQi9ELEVBQUtwRyxTQUFTbUcsVUFBVyxPQUFRLG1CQUN2RCxPQUFPQyxFQUdULElBQUl4QyxFQUFVd0MsRUFBS25GLFFBQVFqRixVQUN2QnNULEVBQVF4SixFQUFLTSxFQUFLcEcsU0FBU21HLFdBQVcsU0FBVXZILEdBQ2xELE1BQXlCLG9CQUFsQkEsRUFBUzVILFFBQ2ZvTSxXQUVILEdBQUlRLEVBQVE5RSxPQUFTd1EsRUFBTXpRLEtBQU8rRSxFQUFRN0UsS0FBT3VRLEVBQU10USxPQUFTNEUsRUFBUS9FLElBQU15USxFQUFNeFEsUUFBVThFLEVBQVE1RSxNQUFRc1EsRUFBTXZRLEtBQU0sQ0FFeEgsSUFBa0IsSUFBZHFILEVBQUtpSixLQUNQLE9BQU9qSixFQUdUQSxFQUFLaUosTUFBTyxFQUNaakosRUFBS2MsV0FBVyx1QkFBeUIsT0FDcEMsQ0FFTCxJQUFrQixJQUFkZCxFQUFLaUosS0FDUCxPQUFPakosRUFHVEEsRUFBS2lKLE1BQU8sRUFDWmpKLEVBQUtjLFdBQVcsd0JBQXlCLEVBRzNDLE9BQU9kLElBb1RQbUosYUFBYyxDQUVaclMsTUFBTyxJQUVQNEosU0FBUyxFQUVUOU4sR0F0Z0NKLFNBQXNCb04sRUFBTWdCLEdBQzFCLElBQUl0QyxFQUFJc0MsRUFBUXRDLEVBQ1pFLEVBQUlvQyxFQUFRcEMsRUFDWi9CLEVBQVNtRCxFQUFLbkYsUUFBUWdDLE9BSXRCdU0sRUFBOEIxSixFQUFLTSxFQUFLcEcsU0FBU21HLFdBQVcsU0FBVXZILEdBQ3hFLE1BQXlCLGVBQWxCQSxFQUFTNUgsUUFDZnlZLHFCQUNpQ3RSLElBQWhDcVIsR0FDRjVJLFFBQVFDLEtBQUssaUlBRWYsSUFBSTRJLE9BQWtEdFIsSUFBaENxUixFQUE0Q0EsRUFBOEJwSSxFQUFRcUksZ0JBRXBHOVMsRUFBZUgsRUFBZ0I0SixFQUFLcEcsU0FBU2lELFFBQzdDeU0sRUFBbUJ4TyxFQUFzQnZFLEdBR3pDdUMsRUFBUyxDQUNYL0YsU0FBVThKLEVBQU85SixVQUdmOEgsRUE5RE4sU0FBMkJtRixFQUFNdUosR0FDL0IsSUFBSXRELEVBQWdCakcsRUFBS25GLFFBQ3JCZ0MsRUFBU29KLEVBQWNwSixPQUN2QmpILEVBQVlxUSxFQUFjclEsVUFDMUJpUyxFQUFReE8sS0FBS3dPLE1BQ2JmLEVBQVF6TixLQUFLeU4sTUFFYjBDLEVBQVUsU0FBaUJDLEdBQzdCLE9BQU9BLEdBR0xDLEVBQWlCN0IsRUFBTWpTLEVBQVU4RCxPQUNqQ2lRLEVBQWM5QixFQUFNaEwsRUFBT25ELE9BRTNCd00sR0FBNEQsSUFBL0MsQ0FBQyxPQUFRLFNBQVNqUyxRQUFRK0wsRUFBS3pDLFdBQzVDcU0sR0FBK0MsSUFBakM1SixFQUFLekMsVUFBVXRKLFFBQVEsS0FJckM0VixFQUF1Qk4sRUFBd0JyRCxHQUFjMEQsR0FIM0NGLEVBQWlCLEdBQU1DLEVBQWMsRUFHdUM5QixFQUFRZixFQUFqRTBDLEVBQ3JDTSxFQUFxQlAsRUFBd0IxQixFQUFWMkIsRUFFdkMsTUFBTyxDQUNMN1EsS0FBTWtSLEVBTldILEVBQWlCLEdBQU0sR0FBS0MsRUFBYyxHQUFNLElBTXRCQyxHQUFlTCxFQUFjMU0sRUFBT2xFLEtBQU8sRUFBSWtFLEVBQU9sRSxNQUNqR0YsSUFBS3FSLEVBQWtCak4sRUFBT3BFLEtBQzlCQyxPQUFRb1IsRUFBa0JqTixFQUFPbkUsUUFDakNFLE1BQU9pUixFQUFvQmhOLEVBQU9qRSxRQW9DdEJtUixDQUFrQi9KLEVBQU1wTSxPQUFPb1csaUJBQW1CLElBQU1sRyxHQUVsRTlLLEVBQWMsV0FBTjBGLEVBQWlCLE1BQVEsU0FDakN6RixFQUFjLFVBQU4yRixFQUFnQixPQUFTLFFBS2pDcUwsRUFBbUJ2SSxFQUF5QixhQVc1Qy9JLE9BQU8sRUFDUEYsT0FBTSxFQXFCVixHQWhCSUEsRUFKVSxXQUFWTyxFQUc0QixTQUExQnpDLEVBQWFyQixVQUNScUIsRUFBYTRFLGFBQWVOLEVBQVFuQyxRQUVwQzRRLEVBQWlCN1AsT0FBU29CLEVBQVFuQyxPQUdyQ21DLEVBQVFwQyxJQUlaRSxFQUZVLFVBQVZNLEVBQzRCLFNBQTFCMUMsRUFBYXJCLFVBQ1BxQixFQUFhMkUsWUFBY0wsRUFBUWpDLE9BRW5DMFEsRUFBaUI1UCxNQUFRbUIsRUFBUWpDLE1BR3BDaUMsRUFBUWxDLEtBRWIwUSxHQUFtQlksRUFDckJuUixFQUFPbVIsR0FBb0IsZUFBaUJ0UixFQUFPLE9BQVNGLEVBQU0sU0FDbEVLLEVBQU9FLEdBQVMsRUFDaEJGLEVBQU9HLEdBQVMsRUFDaEJILEVBQU9zSixXQUFhLGdCQUNmLENBRUwsSUFBSThILEVBQXNCLFdBQVZsUixHQUFzQixFQUFJLEVBQ3RDbVIsRUFBdUIsVUFBVmxSLEdBQXFCLEVBQUksRUFDMUNILEVBQU9FLEdBQVNQLEVBQU15UixFQUN0QnBSLEVBQU9HLEdBQVNOLEVBQU93UixFQUN2QnJSLEVBQU9zSixXQUFhcEosRUFBUSxLQUFPQyxFQUlyQyxJQUFJNkgsRUFBYSxDQUNmLGNBQWVkLEVBQUt6QyxXQVF0QixPQUpBeUMsRUFBS2MsV0FBYXJHLEVBQVMsR0FBSXFHLEVBQVlkLEVBQUtjLFlBQ2hEZCxFQUFLbEgsT0FBUzJCLEVBQVMsR0FBSTNCLEVBQVFrSCxFQUFLbEgsUUFDeENrSCxFQUFLYSxZQUFjcEcsRUFBUyxHQUFJdUYsRUFBS25GLFFBQVFtTSxNQUFPaEgsRUFBS2EsYUFFbERiLEdBbzdCTHFKLGlCQUFpQixFQU1qQjNLLEVBQUcsU0FNSEUsRUFBRyxTQWtCTHdMLFdBQVksQ0FFVnRULE1BQU8sSUFFUDRKLFNBQVMsRUFFVDlOLEdBenBDSixTQUFvQm9OLEdBcEJwQixJQUF1Qm5MLEVBQVNpTSxFQW9DOUIsT0FYQThDLEVBQVU1RCxFQUFLcEcsU0FBU2lELE9BQVFtRCxFQUFLbEgsUUF6QmhCakUsRUE2QlBtTCxFQUFLcEcsU0FBU2lELE9BN0JFaUUsRUE2Qk1kLEVBQUtjLFdBNUJ6Qy9QLE9BQU80TSxLQUFLbUQsR0FBWVAsU0FBUSxTQUFVSixJQUUxQixJQURGVyxFQUFXWCxHQUVyQnRMLEVBQVF3VixhQUFhbEssRUFBTVcsRUFBV1gsSUFFdEN0TCxFQUFRc04sZ0JBQWdCaEMsTUEwQnhCSCxFQUFLa0gsY0FBZ0JuVyxPQUFPNE0sS0FBS3FDLEVBQUthLGFBQWFyTixRQUNyRG9RLEVBQVU1RCxFQUFLa0gsYUFBY2xILEVBQUthLGFBRzdCYixHQTJvQ0xzSyxPQTluQ0osU0FBMEIxVSxFQUFXaUgsRUFBUW1FLEVBQVN1SixFQUFpQmhNLEdBRXJFLElBQUlXLEVBQW1CWixFQUFvQkMsRUFBTzFCLEVBQVFqSCxFQUFXb0wsRUFBUUMsZUFLekUxRCxFQUFZRCxFQUFxQjBELEVBQVF6RCxVQUFXMkIsRUFBa0JyQyxFQUFRakgsRUFBV29MLEVBQVFqQixVQUFVbUIsS0FBS25FLGtCQUFtQmlFLEVBQVFqQixVQUFVbUIsS0FBS3BFLFNBUTlKLE9BTkFELEVBQU93TixhQUFhLGNBQWU5TSxHQUluQ3FHLEVBQVUvRyxFQUFRLENBQUU5SixTQUFVaU8sRUFBUUMsY0FBZ0IsUUFBVSxhQUV6REQsR0FzbkNMcUkscUJBQWlCdFIsS0F1R2pCeVMsR0FBUyxXQVNYLFNBQVNBLEVBQU81VSxFQUFXaUgsR0FDekIsSUFBSTROLEVBQVF6WCxLQUVSZ08sRUFBVWxKLFVBQVV0RSxPQUFTLFFBQXNCdUUsSUFBakJELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUNsRjZCLEVBQWUzRyxLQUFNd1gsR0FFckJ4WCxLQUFLc1EsZUFBaUIsV0FDcEIsT0FBT29ILHNCQUFzQkQsRUFBTTlKLFNBSXJDM04sS0FBSzJOLE9BQVN6TSxFQUFTbEIsS0FBSzJOLE9BQU85TyxLQUFLbUIsT0FHeENBLEtBQUtnTyxRQUFVdkcsRUFBUyxHQUFJK1AsRUFBTzFFLFNBQVU5RSxHQUc3Q2hPLEtBQUt1TCxNQUFRLENBQ1hxQyxhQUFhLEVBQ2JRLFdBQVcsRUFDWDZCLGNBQWUsSUFJakJqUSxLQUFLNEMsVUFBWUEsR0FBYUEsRUFBVStVLE9BQVMvVSxFQUFVLEdBQUtBLEVBQ2hFNUMsS0FBSzZKLE9BQVNBLEdBQVVBLEVBQU84TixPQUFTOU4sRUFBTyxHQUFLQSxFQUdwRDdKLEtBQUtnTyxRQUFRakIsVUFBWSxHQUN6QmhQLE9BQU80TSxLQUFLbEQsRUFBUyxHQUFJK1AsRUFBTzFFLFNBQVMvRixVQUFXaUIsRUFBUWpCLFlBQVlRLFNBQVEsU0FBVTNQLEdBQ3hGNlosRUFBTXpKLFFBQVFqQixVQUFVblAsR0FBUTZKLEVBQVMsR0FBSStQLEVBQU8xRSxTQUFTL0YsVUFBVW5QLElBQVMsR0FBSW9RLEVBQVFqQixVQUFZaUIsRUFBUWpCLFVBQVVuUCxHQUFRLE9BSXBJb0MsS0FBSytNLFVBQVloUCxPQUFPNE0sS0FBSzNLLEtBQUtnTyxRQUFRakIsV0FBV25DLEtBQUksU0FBVWhOLEdBQ2pFLE9BQU82SixFQUFTLENBQ2Q3SixLQUFNQSxHQUNMNlosRUFBTXpKLFFBQVFqQixVQUFVblAsT0FHNUJrTixNQUFLLFNBQVVDLEVBQUdDLEdBQ2pCLE9BQU9ELEVBQUVqSCxNQUFRa0gsRUFBRWxILFNBT3JCOUQsS0FBSytNLFVBQVVRLFNBQVEsU0FBVWdLLEdBQzNCQSxFQUFnQjdKLFNBQVdqTSxFQUFXOFYsRUFBZ0JELFNBQ3hEQyxFQUFnQkQsT0FBT0csRUFBTTdVLFVBQVc2VSxFQUFNNU4sT0FBUTROLEVBQU16SixRQUFTdUosRUFBaUJFLEVBQU1sTSxVQUtoR3ZMLEtBQUsyTixTQUVMLElBQUl5QyxFQUFnQnBRLEtBQUtnTyxRQUFRb0MsY0FDN0JBLEdBRUZwUSxLQUFLcVEsdUJBR1ByUSxLQUFLdUwsTUFBTTZFLGNBQWdCQSxFQXFEN0IsT0E5Q0FySixFQUFZeVEsRUFBUSxDQUFDLENBQ25CNVksSUFBSyxTQUNMTixNQUFPLFdBQ0wsT0FBT3FQLEVBQU9uUSxLQUFLd0MsUUFFcEIsQ0FDRHBCLElBQUssVUFDTE4sTUFBTyxXQUNMLE9BQU80USxFQUFRMVIsS0FBS3dDLFFBRXJCLENBQ0RwQixJQUFLLHVCQUNMTixNQUFPLFdBQ0wsT0FBTytSLEVBQXFCN1MsS0FBS3dDLFFBRWxDLENBQ0RwQixJQUFLLHdCQUNMTixNQUFPLFdBQ0wsT0FBTytRLEVBQXNCN1IsS0FBS3dDLFVBNEIvQndYLEVBN0hJLEdBcUpiQSxHQUFPSSxPQUEyQixvQkFBWGhYLE9BQXlCQSxPQUFTaVgsR0FBUUMsWUFDakVOLEdBQU9sRyxXQUFhQSxFQUNwQmtHLEdBQU8xRSxTQUFXQSxHQUVILGMsMkNDcmpGZixJQU9JaUYsRUFDQUMsRUFSQUMsRUFBVTdhLEVBQU9ELFFBQVUsR0FVL0IsU0FBUythLElBQ0wsTUFBTSxJQUFJQyxNQUFNLG1DQUVwQixTQUFTQyxJQUNMLE1BQU0sSUFBSUQsTUFBTSxxQ0FzQnBCLFNBQVNFLEVBQVdDLEdBQ2hCLEdBQUlQLElBQXFCdlcsV0FFckIsT0FBT0EsV0FBVzhXLEVBQUssR0FHM0IsSUFBS1AsSUFBcUJHLElBQXFCSCxJQUFxQnZXLFdBRWhFLE9BREF1VyxFQUFtQnZXLFdBQ1pBLFdBQVc4VyxFQUFLLEdBRTNCLElBRUksT0FBT1AsRUFBaUJPLEVBQUssR0FDL0IsTUFBTXZRLEdBQ0osSUFFSSxPQUFPZ1EsRUFBaUJ2YSxLQUFLLEtBQU04YSxFQUFLLEdBQzFDLE1BQU12USxHQUVKLE9BQU9nUSxFQUFpQnZhLEtBQUt3QyxLQUFNc1ksRUFBSyxNQXZDbkQsV0FDRyxJQUVRUCxFQURzQixtQkFBZnZXLFdBQ1lBLFdBRUEwVyxFQUV6QixNQUFPblEsR0FDTGdRLEVBQW1CRyxFQUV2QixJQUVRRixFQUR3QixtQkFBakJPLGFBQ2NBLGFBRUFILEVBRTNCLE1BQU9yUSxHQUNMaVEsRUFBcUJJLEdBakI3QixHQXdFQSxJQUVJSSxFQUZBQyxFQUFRLEdBQ1JDLEdBQVcsRUFFWEMsR0FBYyxFQUVsQixTQUFTQyxJQUNBRixHQUFhRixJQUdsQkUsR0FBVyxFQUNQRixFQUFhaFksT0FDYmlZLEVBQVFELEVBQWE3RyxPQUFPOEcsR0FFNUJFLEdBQWMsRUFFZEYsRUFBTWpZLFFBQ05xWSxLQUlSLFNBQVNBLElBQ0wsSUFBSUgsRUFBSixDQUdBLElBQUlJLEVBQVVULEVBQVdPLEdBQ3pCRixHQUFXLEVBR1gsSUFEQSxJQUFJdEUsRUFBTXFFLEVBQU1qWSxPQUNWNFQsR0FBSyxDQUdQLElBRkFvRSxFQUFlQyxFQUNmQSxFQUFRLEtBQ0NFLEVBQWF2RSxHQUNkb0UsR0FDQUEsRUFBYUcsR0FBWUksTUFHakNKLEdBQWMsRUFDZHZFLEVBQU1xRSxFQUFNalksT0FFaEJnWSxFQUFlLEtBQ2ZFLEdBQVcsRUFuRWYsU0FBeUJNLEdBQ3JCLEdBQUloQixJQUF1Qk8sYUFFdkIsT0FBT0EsYUFBYVMsR0FHeEIsSUFBS2hCLElBQXVCSSxJQUF3QkosSUFBdUJPLGFBRXZFLE9BREFQLEVBQXFCTyxhQUNkQSxhQUFhUyxHQUV4QixJQUVXaEIsRUFBbUJnQixHQUM1QixNQUFPalIsR0FDTCxJQUVJLE9BQU9pUSxFQUFtQnhhLEtBQUssS0FBTXdiLEdBQ3ZDLE1BQU9qUixHQUdMLE9BQU9pUSxFQUFtQnhhLEtBQUt3QyxLQUFNZ1osS0FnRDdDQyxDQUFnQkgsSUFpQnBCLFNBQVNJLEVBQUtaLEVBQUthLEdBQ2ZuWixLQUFLc1ksSUFBTUEsRUFDWHRZLEtBQUttWixNQUFRQSxFQVlqQixTQUFTQyxLQTVCVG5CLEVBQVFvQixTQUFXLFNBQVVmLEdBQ3pCLElBQUlnQixFQUFPLElBQUl6TSxNQUFNL0gsVUFBVXRFLE9BQVMsR0FDeEMsR0FBSXNFLFVBQVV0RSxPQUFTLEVBQ25CLElBQUssSUFBSW5ELEVBQUksRUFBR0EsRUFBSXlILFVBQVV0RSxPQUFRbkQsSUFDbENpYyxFQUFLamMsRUFBSSxHQUFLeUgsVUFBVXpILEdBR2hDb2IsRUFBTXRJLEtBQUssSUFBSStJLEVBQUtaLEVBQUtnQixJQUNKLElBQWpCYixFQUFNalksUUFBaUJrWSxHQUN2QkwsRUFBV1EsSUFTbkJLLEVBQUtqYSxVQUFVOFosSUFBTSxXQUNqQi9ZLEtBQUtzWSxJQUFJaUIsTUFBTSxLQUFNdlosS0FBS21aLFFBRTlCbEIsRUFBUXVCLE1BQVEsVUFDaEJ2QixFQUFRd0IsU0FBVSxFQUNsQnhCLEVBQVF5QixJQUFNLEdBQ2R6QixFQUFRMEIsS0FBTyxHQUNmMUIsRUFBUTlVLFFBQVUsR0FDbEI4VSxFQUFRMkIsU0FBVyxHQUluQjNCLEVBQVE0QixHQUFLVCxFQUNibkIsRUFBUTZCLFlBQWNWLEVBQ3RCbkIsRUFBUThCLEtBQU9YLEVBQ2ZuQixFQUFRK0IsSUFBTVosRUFDZG5CLEVBQVFnQyxlQUFpQmIsRUFDekJuQixFQUFRaUMsbUJBQXFCZCxFQUM3Qm5CLEVBQVFrQyxLQUFPZixFQUNmbkIsRUFBUW1DLGdCQUFrQmhCLEVBQzFCbkIsRUFBUW9DLG9CQUFzQmpCLEVBRTlCbkIsRUFBUXFDLFVBQVksU0FBVTFjLEdBQVEsTUFBTyxJQUU3Q3FhLEVBQVFzQyxRQUFVLFNBQVUzYyxHQUN4QixNQUFNLElBQUl1YSxNQUFNLHFDQUdwQkYsRUFBUXVDLElBQU0sV0FBYyxNQUFPLEtBQ25DdkMsRUFBUXdDLE1BQVEsU0FBVUMsR0FDdEIsTUFBTSxJQUFJdkMsTUFBTSxtQ0FFcEJGLEVBQVEwQyxNQUFRLFdBQWEsT0FBTyxJLG9DQ3JMcEMsSUFBSUMsRUFBUSxFQUFRLFFBRXBCLFNBQVNDLElBQ1A3YSxLQUFLOGEsU0FBVyxHQVdsQkQsRUFBbUI1YixVQUFVOGIsSUFBTSxTQUFhQyxFQUFXQyxFQUFVak4sR0FPbkUsT0FOQWhPLEtBQUs4YSxTQUFTM0ssS0FBSyxDQUNqQjZLLFVBQVdBLEVBQ1hDLFNBQVVBLEVBQ1ZDLGNBQWFsTixHQUFVQSxFQUFRa04sWUFDL0JDLFFBQVNuTixFQUFVQSxFQUFRbU4sUUFBVSxPQUVoQ25iLEtBQUs4YSxTQUFTdGEsT0FBUyxHQVFoQ3FhLEVBQW1CNWIsVUFBVW1jLE1BQVEsU0FBZUMsR0FDOUNyYixLQUFLOGEsU0FBU08sS0FDaEJyYixLQUFLOGEsU0FBU08sR0FBTSxPQVl4QlIsRUFBbUI1YixVQUFVc08sUUFBVSxTQUFpQjNOLEdBQ3REZ2IsRUFBTXJOLFFBQVF2TixLQUFLOGEsVUFBVSxTQUF3QlEsR0FDekMsT0FBTkEsR0FDRjFiLEVBQUcwYixPQUtUbGUsRUFBT0QsUUFBVTBkLEcsdURDbkRqQixJQUFJRCxFQUFRLEVBQVEsUUFDaEJXLEVBQVcsRUFBUSxRQUNuQlYsRUFBcUIsRUFBUSxRQUM3QlcsRUFBa0IsRUFBUSxRQUMxQkMsRUFBYyxFQUFRLFFBQ3RCQyxFQUFZLEVBQVEsUUFFcEJDLEVBQWFELEVBQVVDLFdBTTNCLFNBQVNDLEVBQU1DLEdBQ2I3YixLQUFLOGIsU0FBV0QsRUFDaEI3YixLQUFLK2IsYUFBZSxDQUNsQkMsUUFBUyxJQUFJbkIsRUFDYm9CLFNBQVUsSUFBSXBCLEdBU2xCZSxFQUFNM2MsVUFBVStjLFFBQVUsU0FBaUJFLEdBR25CLGlCQUFYQSxHQUNUQSxFQUFTcFgsVUFBVSxJQUFNLElBQ2xCekYsSUFBTXlGLFVBQVUsR0FFdkJvWCxFQUFTQSxHQUFVLElBR3JCQSxFQUFTVCxFQUFZemIsS0FBSzhiLFNBQVVJLElBR3pCQyxPQUNURCxFQUFPQyxPQUFTRCxFQUFPQyxPQUFPN0gsY0FDckJ0VSxLQUFLOGIsU0FBU0ssT0FDdkJELEVBQU9DLE9BQVNuYyxLQUFLOGIsU0FBU0ssT0FBTzdILGNBRXJDNEgsRUFBT0MsT0FBUyxNQUdsQixJQUFJQyxFQUFlRixFQUFPRSxrQkFFTHJYLElBQWpCcVgsR0FDRlYsRUFBVVcsY0FBY0QsRUFBYyxDQUNwQ0Usa0JBQW1CWCxFQUFXUyxhQUFhVCxFQUFXWSxRQUFTLFNBQy9EQyxrQkFBbUJiLEVBQVdTLGFBQWFULEVBQVdZLFFBQVMsU0FDL0RFLG9CQUFxQmQsRUFBV1MsYUFBYVQsRUFBV1ksUUFBUyxXQUNoRSxHQUlMLElBQUlHLEVBQTBCLEdBQzFCQyxHQUFpQyxFQUNyQzNjLEtBQUsrYixhQUFhQyxRQUFRek8sU0FBUSxTQUFvQ3FQLEdBQ2pDLG1CQUF4QkEsRUFBWXpCLFVBQTBELElBQWhDeUIsRUFBWXpCLFFBQVFlLEtBSXJFUyxFQUFpQ0EsR0FBa0NDLEVBQVkxQixZQUUvRXdCLEVBQXdCRyxRQUFRRCxFQUFZNUIsVUFBVzRCLEVBQVkzQixjQUdyRSxJQUtJNkIsRUFMQUMsRUFBMkIsR0FPL0IsR0FOQS9jLEtBQUsrYixhQUFhRSxTQUFTMU8sU0FBUSxTQUFrQ3FQLEdBQ25FRyxFQUF5QjVNLEtBQUt5TSxFQUFZNUIsVUFBVzRCLEVBQVkzQixjQUs5RDBCLEVBQWdDLENBQ25DLElBQUlLLEVBQVEsQ0FBQ3hCLE9BQWlCelcsR0FNOUIsSUFKQThILE1BQU01TixVQUFVNGQsUUFBUXRELE1BQU15RCxFQUFPTixHQUNyQ00sRUFBUUEsRUFBTXJMLE9BQU9vTCxHQUVyQkQsRUFBVTNiLFFBQVFFLFFBQVE2YSxHQUNuQmMsRUFBTXhjLFFBQ1hzYyxFQUFVQSxFQUFReGIsS0FBSzBiLEVBQU1qSyxRQUFTaUssRUFBTWpLLFNBRzlDLE9BQU8rSixFQUtULElBREEsSUFBSUcsRUFBWWYsRUFDVFEsRUFBd0JsYyxRQUFRLENBQ3JDLElBQUkwYyxFQUFjUixFQUF3QjNKLFFBQ3RDb0ssRUFBYVQsRUFBd0IzSixRQUN6QyxJQUNFa0ssRUFBWUMsRUFBWUQsR0FDeEIsTUFBT0csR0FDUEQsRUFBV0MsR0FDWCxPQUlKLElBQ0VOLEVBQVV0QixFQUFnQnlCLEdBQzFCLE1BQU9HLEdBQ1AsT0FBT2pjLFFBQVFrYyxPQUFPRCxHQUd4QixLQUFPTCxFQUF5QnZjLFFBQzlCc2MsRUFBVUEsRUFBUXhiLEtBQUt5YixFQUF5QmhLLFFBQVNnSyxFQUF5QmhLLFNBR3BGLE9BQU8rSixHQUdUbEIsRUFBTTNjLFVBQVVxZSxPQUFTLFNBQWdCcEIsR0FFdkMsT0FEQUEsRUFBU1QsRUFBWXpiLEtBQUs4YixTQUFVSSxHQUM3QlgsRUFBU1csRUFBTzdjLElBQUs2YyxFQUFPcUIsT0FBUXJCLEVBQU9zQixrQkFBa0IvZCxRQUFRLE1BQU8sS0FJckZtYixFQUFNck4sUUFBUSxDQUFDLFNBQVUsTUFBTyxPQUFRLFlBQVksU0FBNkI0TyxHQUUvRVAsRUFBTTNjLFVBQVVrZCxHQUFVLFNBQVM5YyxFQUFLNmMsR0FDdEMsT0FBT2xjLEtBQUtnYyxRQUFRUCxFQUFZUyxHQUFVLEdBQUksQ0FDNUNDLE9BQVFBLEVBQ1I5YyxJQUFLQSxFQUNMMk4sTUFBT2tQLEdBQVUsSUFBSWxQLFlBSzNCNE4sRUFBTXJOLFFBQVEsQ0FBQyxPQUFRLE1BQU8sVUFBVSxTQUErQjRPLEdBRXJFUCxFQUFNM2MsVUFBVWtkLEdBQVUsU0FBUzljLEVBQUsyTixFQUFNa1AsR0FDNUMsT0FBT2xjLEtBQUtnYyxRQUFRUCxFQUFZUyxHQUFVLEdBQUksQ0FDNUNDLE9BQVFBLEVBQ1I5YyxJQUFLQSxFQUNMMk4sS0FBTUEsU0FLWjVQLEVBQU9ELFFBQVV5ZSxHLHFCQ25KakIsV0FjQSxTQUFZbGMsR0FDWCxhQUtDLEVBQVEsQ0FBRSxVQUFVLGdCQUFzQiwwQkFBUCxFQU1oQyxTQUFVQyxHQUdmLE9BQU9BLEVBQUU4ZCxPQUFROWQsRUFBRStkLEtBQUtDLFFBQVMsQ0FDaEMzUSxLQUFNck4sRUFBRStkLEtBQUtFLGFBQ1pqZSxFQUFFK2QsS0FBS0UsY0FBYyxTQUFVQyxHQUM5QixPQUFPLFNBQVVDLEdBQ2hCLFFBQVNuZSxFQUFFcU4sS0FBTThRLEVBQU1ELE9BS3pCLFNBQVVDLEVBQU16Z0IsRUFBR2lRLEdBQ2xCLFFBQVMzTixFQUFFcU4sS0FBTThRLEVBQU14USxFQUFPLFNBbkJXLCtCQU41QyxJLGtDQ1FBbFEsRUFBT0QsUUFBVSxTQUFnQjZTLEdBQy9CLE9BQU8sU0FBY3JELEdBQ25CLE9BQU9xRCxFQUFTdUosTUFBTSxLQUFNNU0sTSxxQkN4QmhDLE9BYUEsU0FBWWtMLEVBQVFuWSxHQUVuQixhQUU2RCxpQkFBbkJ0QyxFQUFPRCxRQVNoREMsRUFBT0QsUUFBVTBhLEVBQU9uWCxTQUN2QmhCLEVBQVNtWSxHQUFRLEdBQ2pCLFNBQVVrRyxHQUNULElBQU1BLEVBQUVyZCxTQUNQLE1BQU0sSUFBSXlYLE1BQU8sNENBRWxCLE9BQU96WSxFQUFTcWUsSUFHbEJyZSxFQUFTbVksR0F0QlgsQ0EwQnVCLG9CQUFYalgsT0FBeUJBLE9BQVNaLE1BQU0sU0FBVVksRUFBUW9kLEdBTXRFLGFBRUEsSUFBSXJSLEVBQU0sR0FFTnNSLEVBQVdsZ0IsT0FBT21nQixlQUVsQmhSLEVBQVFQLEVBQUlPLE1BRVppUixFQUFPeFIsRUFBSXdSLEtBQU8sU0FBVWhGLEdBQy9CLE9BQU94TSxFQUFJd1IsS0FBSzNnQixLQUFNMmIsSUFDbkIsU0FBVUEsR0FDYixPQUFPeE0sRUFBSWdGLE9BQU80SCxNQUFPLEdBQUlKLElBSTFCaEosRUFBT3hELEVBQUl3RCxLQUVYbFAsRUFBVTBMLEVBQUkxTCxRQUVkbWQsRUFBYSxHQUViemMsRUFBV3ljLEVBQVd6YyxTQUV0QjBjLEVBQVNELEVBQVdsZixlQUVwQm9mLEVBQWFELEVBQU8xYyxTQUVwQjRjLEVBQXVCRCxFQUFXOWdCLEtBQU1PLFFBRXhDeWdCLEVBQVUsR0FFVi9jLEVBQWEsU0FBcUIrRixHQVNwQyxNQUFzQixtQkFBUkEsR0FBOEMsaUJBQWpCQSxFQUFJMUYsVUFDMUIsbUJBQWIwRixFQUFJaVgsTUFJVkMsRUFBVyxTQUFtQmxYLEdBQ2hDLE9BQWMsTUFBUEEsR0FBZUEsSUFBUUEsRUFBSTVHLFFBSWhDRixFQUFXRSxFQUFPRixTQUlqQmllLEVBQTRCLENBQy9CQyxNQUFNLEVBQ05DLEtBQUssRUFDTEMsT0FBTyxFQUNQQyxVQUFVLEdBR1gsU0FBU0MsRUFBU0MsRUFBTXZiLEVBQU13YixHQUc3QixJQUFJN2hCLEVBQUc4aEIsRUFDTkMsR0FIREYsRUFBTUEsR0FBT3hlLEdBR0MyZSxjQUFlLFVBRzdCLEdBREFELEVBQU9FLEtBQU9MLEVBQ1R2YixFQUNKLElBQU1yRyxLQUFLc2hCLEdBWVZRLEVBQU16YixFQUFNckcsSUFBT3FHLEVBQUs2YixjQUFnQjdiLEVBQUs2YixhQUFjbGlCLEtBRTFEK2hCLEVBQU8vSCxhQUFjaGEsRUFBRzhoQixHQUkzQkQsRUFBSU0sS0FBS0MsWUFBYUwsR0FBU2pkLFdBQVdvTixZQUFhNlAsR0FJekQsU0FBU00sRUFBUWxZLEdBQ2hCLE9BQVksTUFBUEEsRUFDR0EsRUFBTSxHQUlRLGlCQUFSQSxHQUFtQyxtQkFBUkEsRUFDeEM0VyxFQUFZemMsRUFBU25FLEtBQU1nSyxLQUFXLGdCQUMvQkEsRUFRVCxJQUlDbVksRUFBUyxTQUFVQyxFQUFVQyxHQUk1QixPQUFPLElBQUlGLEVBQU8vZixHQUFHa2dCLEtBQU1GLEVBQVVDLElBMFZ2QyxTQUFTRSxFQUFhdlksR0FNckIsSUFBSWhILElBQVdnSCxHQUFPLFdBQVlBLEdBQU9BLEVBQUloSCxPQUM1Q29lLEVBQU9jLEVBQVFsWSxHQUVoQixPQUFLL0YsRUFBWStGLEtBQVNrWCxFQUFVbFgsS0FJcEIsVUFBVG9YLEdBQStCLElBQVhwZSxHQUNSLGlCQUFYQSxHQUF1QkEsRUFBUyxHQUFPQSxFQUFTLEtBQU9nSCxHQXJXaEVtWSxFQUFPL2YsR0FBSytmLEVBQU8xZ0IsVUFBWSxDQUc5QjBZLE9BYlUsUUFlVnFJLFlBQWFMLEVBR2JuZixPQUFRLEVBRVJ5ZixRQUFTLFdBQ1IsT0FBTy9TLEVBQU0xUCxLQUFNd0MsT0FLcEI5QixJQUFLLFNBQVVnaUIsR0FHZCxPQUFZLE1BQVBBLEVBQ0doVCxFQUFNMVAsS0FBTXdDLE1BSWJrZ0IsRUFBTSxFQUFJbGdCLEtBQU1rZ0IsRUFBTWxnQixLQUFLUSxRQUFXUixLQUFNa2dCLElBS3BEQyxVQUFXLFNBQVVDLEdBR3BCLElBQUlDLEVBQU1WLEVBQU9XLE1BQU90Z0IsS0FBS2dnQixjQUFlSSxHQU01QyxPQUhBQyxFQUFJRSxXQUFhdmdCLEtBR1ZxZ0IsR0FJUkcsS0FBTSxTQUFVeFEsR0FDZixPQUFPMlAsRUFBT2EsS0FBTXhnQixLQUFNZ1EsSUFHM0JwRixJQUFLLFNBQVVvRixHQUNkLE9BQU9oUSxLQUFLbWdCLFVBQVdSLEVBQU8vVSxJQUFLNUssTUFBTSxTQUFVOGQsRUFBTXpnQixHQUN4RCxPQUFPMlMsRUFBU3hTLEtBQU1zZ0IsRUFBTXpnQixFQUFHeWdCLFFBSWpDNVEsTUFBTyxXQUNOLE9BQU9sTixLQUFLbWdCLFVBQVdqVCxFQUFNcU0sTUFBT3ZaLEtBQU04RSxhQUczQzJiLE1BQU8sV0FDTixPQUFPemdCLEtBQUtPLEdBQUksSUFHakJtZ0IsS0FBTSxXQUNMLE9BQU8xZ0IsS0FBS08sSUFBSyxJQUdsQm9nQixLQUFNLFdBQ0wsT0FBTzNnQixLQUFLbWdCLFVBQVdSLEVBQU9pQixLQUFNNWdCLE1BQU0sU0FBVTZnQixFQUFPeGpCLEdBQzFELE9BQVNBLEVBQUksR0FBTSxPQUlyQnlqQixJQUFLLFdBQ0osT0FBTzlnQixLQUFLbWdCLFVBQVdSLEVBQU9pQixLQUFNNWdCLE1BQU0sU0FBVTZnQixFQUFPeGpCLEdBQzFELE9BQU9BLEVBQUksT0FJYmtELEdBQUksU0FBVWxELEdBQ2IsSUFBSStXLEVBQU1wVSxLQUFLUSxPQUNkdWdCLEdBQUsxakIsR0FBTUEsRUFBSSxFQUFJK1csRUFBTSxHQUMxQixPQUFPcFUsS0FBS21nQixVQUFXWSxHQUFLLEdBQUtBLEVBQUkzTSxFQUFNLENBQUVwVSxLQUFNK2dCLElBQVEsS0FHNUQ1YyxJQUFLLFdBQ0osT0FBT25FLEtBQUt1Z0IsWUFBY3ZnQixLQUFLZ2dCLGVBS2hDN1AsS0FBTUEsRUFDTnJGLEtBQU02QixFQUFJN0IsS0FDVmtXLE9BQVFyVSxFQUFJcVUsUUFHYnJCLEVBQU9sQyxPQUFTa0MsRUFBTy9mLEdBQUc2ZCxPQUFTLFdBQ2xDLElBQUl6UCxFQUFTcFEsRUFBTWloQixFQUFLb0MsRUFBTUMsRUFBYUMsRUFDMUNsYSxFQUFTbkMsVUFBVyxJQUFPLEdBQzNCekgsRUFBSSxFQUNKbUQsRUFBU3NFLFVBQVV0RSxPQUNuQjRnQixHQUFPLEVBc0JSLElBbkJ1QixrQkFBWG5hLElBQ1htYSxFQUFPbmEsRUFHUEEsRUFBU25DLFVBQVd6SCxJQUFPLEdBQzNCQSxLQUlzQixpQkFBWDRKLEdBQXdCeEYsRUFBWXdGLEtBQy9DQSxFQUFTLElBSUw1SixJQUFNbUQsSUFDVnlHLEVBQVNqSCxLQUNUM0MsS0FHT0EsRUFBSW1ELEVBQVFuRCxJQUduQixHQUFxQyxPQUE5QjJRLEVBQVVsSixVQUFXekgsSUFHM0IsSUFBTU8sS0FBUW9RLEVBQ2JpVCxFQUFPalQsRUFBU3BRLEdBSUYsY0FBVEEsR0FBd0JxSixJQUFXZ2EsSUFLbkNHLEdBQVFILElBQVV0QixFQUFPMEIsY0FBZUosS0FDMUNDLEVBQWNyVSxNQUFNeVUsUUFBU0wsTUFDL0JwQyxFQUFNNVgsRUFBUXJKLEdBSWJ1akIsRUFESUQsSUFBZ0JyVSxNQUFNeVUsUUFBU3pDLEdBQzNCLEdBQ0lxQyxHQUFnQnZCLEVBQU8wQixjQUFleEMsR0FHMUNBLEVBRkEsR0FJVHFDLEdBQWMsRUFHZGphLEVBQVFySixHQUFTK2hCLEVBQU9sQyxPQUFRMkQsRUFBTUQsRUFBT0YsU0FHekJsYyxJQUFUa2MsSUFDWGhhLEVBQVFySixHQUFTcWpCLElBT3JCLE9BQU9oYSxHQUdSMFksRUFBT2xDLE9BQVEsQ0FHZDhELFFBQVMsVUFsTEMsUUFrTHNCbGIsS0FBS21iLFVBQVcvaEIsUUFBUyxNQUFPLElBR2hFZ2lCLFNBQVMsRUFFVHJFLE1BQU8sU0FBVXNFLEdBQ2hCLE1BQU0sSUFBSXZKLE1BQU91SixJQUdsQnRJLEtBQU0sYUFFTmlJLGNBQWUsU0FBVTdaLEdBQ3hCLElBQUltYSxFQUFPQyxFQUlYLFNBQU1wYSxHQUFnQyxvQkFBekI3RixFQUFTbkUsS0FBTWdLLFFBSTVCbWEsRUFBUTFELEVBQVV6VyxLQVNLLG1CQUR2Qm9hLEVBQU92RCxFQUFPN2dCLEtBQU1ta0IsRUFBTyxnQkFBbUJBLEVBQU0zQixjQUNmMUIsRUFBVzlnQixLQUFNb2tCLEtBQVdyRCxJQUdsRXNELGNBQWUsU0FBVXJhLEdBQ3hCLElBQUk1SixFQUVKLElBQU1BLEtBQVE0SixFQUNiLE9BQU8sRUFFUixPQUFPLEdBS1JzYSxXQUFZLFNBQVU3QyxFQUFNalIsRUFBU2tSLEdBQ3BDRixFQUFTQyxFQUFNLENBQUVILE1BQU85USxHQUFXQSxFQUFROFEsT0FBU0ksSUFHckRzQixLQUFNLFNBQVVoWixFQUFLd0ksR0FDcEIsSUFBSXhQLEVBQVFuRCxFQUFJLEVBRWhCLEdBQUswaUIsRUFBYXZZLEdBRWpCLElBREFoSCxFQUFTZ0gsRUFBSWhILE9BQ0xuRCxFQUFJbUQsSUFDcUMsSUFBM0N3UCxFQUFTeFMsS0FBTWdLLEVBQUtuSyxHQUFLQSxFQUFHbUssRUFBS25LLElBRG5CQSxVQU1wQixJQUFNQSxLQUFLbUssRUFDVixJQUFnRCxJQUEzQ3dJLEVBQVN4UyxLQUFNZ0ssRUFBS25LLEdBQUtBLEVBQUdtSyxFQUFLbkssSUFDckMsTUFLSCxPQUFPbUssR0FJUnVhLFVBQVcsU0FBVXBWLEVBQUtxVixHQUN6QixJQUFJM0IsRUFBTTJCLEdBQVcsR0FhckIsT0FYWSxNQUFQclYsSUFDQ29ULEVBQWFoaUIsT0FBUTRPLElBQ3pCZ1QsRUFBT1csTUFBT0QsRUFDRSxpQkFBUjFULEVBQ04sQ0FBRUEsR0FBUUEsR0FHWndELEVBQUszUyxLQUFNNmlCLEVBQUsxVCxJQUlYMFQsR0FHUjRCLFFBQVMsU0FBVW5FLEVBQU1uUixFQUFLdFAsR0FDN0IsT0FBYyxNQUFQc1AsR0FBZSxFQUFJMUwsRUFBUXpELEtBQU1tUCxFQUFLbVIsRUFBTXpnQixJQUtwRGlqQixNQUFPLFNBQVVHLEVBQU95QixHQUt2QixJQUpBLElBQUk5TixHQUFPOE4sRUFBTzFoQixPQUNqQnVnQixFQUFJLEVBQ0oxakIsRUFBSW9qQixFQUFNamdCLE9BRUh1Z0IsRUFBSTNNLEVBQUsyTSxJQUNoQk4sRUFBT3BqQixLQUFRNmtCLEVBQVFuQixHQUt4QixPQUZBTixFQUFNamdCLE9BQVNuRCxFQUVSb2pCLEdBR1JHLEtBQU0sU0FBVVIsRUFBT3BRLEVBQVVtUyxHQVNoQyxJQVJBLElBQ0NDLEVBQVUsR0FDVi9rQixFQUFJLEVBQ0ptRCxFQUFTNGYsRUFBTTVmLE9BQ2Y2aEIsR0FBa0JGLEVBSVg5a0IsRUFBSW1ELEVBQVFuRCxLQUNBMlMsRUFBVW9RLEVBQU8vaUIsR0FBS0EsS0FDaEJnbEIsR0FDeEJELEVBQVFqUyxLQUFNaVEsRUFBTy9pQixJQUl2QixPQUFPK2tCLEdBSVJ4WCxJQUFLLFNBQVV3VixFQUFPcFEsRUFBVXNTLEdBQy9CLElBQUk5aEIsRUFBUWxDLEVBQ1hqQixFQUFJLEVBQ0pnakIsRUFBTSxHQUdQLEdBQUtOLEVBQWFLLEdBRWpCLElBREE1ZixFQUFTNGYsRUFBTTVmLE9BQ1BuRCxFQUFJbUQsRUFBUW5ELElBR0wsT0FGZGlCLEVBQVEwUixFQUFVb1EsRUFBTy9pQixHQUFLQSxFQUFHaWxCLEtBR2hDakMsRUFBSWxRLEtBQU03UixRQU1aLElBQU1qQixLQUFLK2lCLEVBR0ksT0FGZDloQixFQUFRMFIsRUFBVW9RLEVBQU8vaUIsR0FBS0EsRUFBR2lsQixLQUdoQ2pDLEVBQUlsUSxLQUFNN1IsR0FNYixPQUFPNmYsRUFBTWtDLElBSWRrQyxLQUFNLEVBSU4vRCxRQUFTQSxJQUdhLG1CQUFYcGdCLFNBQ1h1aEIsRUFBTy9mLEdBQUl4QixPQUFPb2tCLFVBQWE3VixFQUFLdk8sT0FBT29rQixXQUk1QzdDLEVBQU9hLEtBQU0sdUVBQXVFblYsTUFBTyxNQUMxRixTQUFVb1gsRUFBSTdrQixHQUNid2dCLEVBQVksV0FBYXhnQixFQUFPLEtBQVFBLEVBQUswVyxpQkFtQi9DLElBQUlvTyxFQVdKLFNBQVk5aEIsR0FDWixJQUFJdkQsRUFDSG1oQixFQUNBbUUsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFHQUMsRUFDQTFpQixFQUNBMmlCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FwQixFQUNBM2QsRUFHQThjLEVBQVUsU0FBVyxFQUFJLElBQUlrQyxLQUM3QkMsRUFBZTlpQixFQUFPRixTQUN0QmlqQixFQUFVLEVBQ1ZDLEVBQU8sRUFDUEMsRUFBYUMsS0FDYkMsRUFBYUQsS0FDYkUsRUFBZ0JGLEtBQ2hCRyxFQUF5QkgsS0FDekJJLEVBQVksU0FBVW5aLEVBQUdDLEdBSXhCLE9BSEtELElBQU1DLElBQ1ZtWSxHQUFlLEdBRVQsR0FJUjlFLEVBQVMsR0FBT25mLGVBQ2hCeU4sRUFBTSxHQUNOd1gsRUFBTXhYLEVBQUl3WCxJQUNWQyxFQUFhelgsRUFBSXdELEtBQ2pCQSxFQUFPeEQsRUFBSXdELEtBQ1hqRCxFQUFRUCxFQUFJTyxNQUlaak0sRUFBVSxTQUFVb2pCLEVBQU12RyxHQUd6QixJQUZBLElBQUl6Z0IsRUFBSSxFQUNQK1csRUFBTWlRLEVBQUs3akIsT0FDSm5ELEVBQUkrVyxFQUFLL1csSUFDaEIsR0FBS2duQixFQUFNaG5CLEtBQVF5Z0IsRUFDbEIsT0FBT3pnQixFQUdULE9BQVEsR0FHVGluQixFQUFXLDZIQU1YQyxFQUFhLHNCQUdiQyxFQUFhLDBCQUE0QkQsRUFDeEMsMENBR0R6VyxFQUFhLE1BQVF5VyxFQUFhLEtBQU9DLEVBQWEsT0FBU0QsRUFHOUQsZ0JBQWtCQSxFQUlsQiwyREFBNkRDLEVBQWEsT0FDMUVELEVBQWEsT0FFZDVHLEVBQVUsS0FBTzZHLEVBQVAsd0ZBT29CMVcsRUFQcEIsZUFjVjJXLEVBQWMsSUFBSUMsT0FBUUgsRUFBYSxJQUFLLEtBQzVDSSxFQUFRLElBQUlELE9BQVEsSUFBTUgsRUFBYSw4QkFDdENBLEVBQWEsS0FBTSxLQUVwQkssRUFBUyxJQUFJRixPQUFRLElBQU1ILEVBQWEsS0FBT0EsRUFBYSxLQUM1RE0sRUFBZSxJQUFJSCxPQUFRLElBQU1ILEVBQWEsV0FBYUEsRUFBYSxJQUFNQSxFQUM3RSxLQUNETyxFQUFXLElBQUlKLE9BQVFILEVBQWEsTUFFcENRLEVBQVUsSUFBSUwsT0FBUS9HLEdBQ3RCcUgsRUFBYyxJQUFJTixPQUFRLElBQU1GLEVBQWEsS0FFN0NTLEVBQVksQ0FDWCxHQUFNLElBQUlQLE9BQVEsTUFBUUYsRUFBYSxLQUN2QyxNQUFTLElBQUlFLE9BQVEsUUFBVUYsRUFBYSxLQUM1QyxJQUFPLElBQUlFLE9BQVEsS0FBT0YsRUFBYSxTQUN2QyxLQUFRLElBQUlFLE9BQVEsSUFBTTVXLEdBQzFCLE9BQVUsSUFBSTRXLE9BQVEsSUFBTS9HLEdBQzVCLE1BQVMsSUFBSStHLE9BQVEseURBQ3BCSCxFQUFhLCtCQUFpQ0EsRUFBYSxjQUMzREEsRUFBYSxhQUFlQSxFQUFhLFNBQVUsS0FDcEQsS0FBUSxJQUFJRyxPQUFRLE9BQVNKLEVBQVcsS0FBTSxLQUk5QyxhQUFnQixJQUFJSSxPQUFRLElBQU1ILEVBQ2pDLG1EQUFxREEsRUFDckQsbUJBQXFCQSxFQUFhLG1CQUFvQixNQUd4RFcsRUFBUSxTQUNSQyxFQUFVLHNDQUNWQyxFQUFVLFNBRVZDLEVBQVUseUJBR1ZDLEVBQWEsbUNBRWJDLEdBQVcsT0FJWEMsR0FBWSxJQUFJZCxPQUFRLHVCQUF5QkgsRUFBYSx1QkFBd0IsS0FDdEZrQixHQUFZLFNBQVVDLEVBQVFDLEdBQzdCLElBQUlDLEVBQU8sS0FBT0YsRUFBT3hZLE1BQU8sR0FBTSxNQUV0QyxPQUFPeVksSUFTTkMsRUFBTyxFQUNOQyxPQUFPQyxhQUFjRixFQUFPLE9BQzVCQyxPQUFPQyxhQUFjRixHQUFRLEdBQUssTUFBZSxLQUFQQSxFQUFlLFNBSzVERyxHQUFhLHNEQUNiQyxHQUFhLFNBQVVDLEVBQUlDLEdBQzFCLE9BQUtBLEVBR1EsT0FBUEQsRUFDRyxJQUlEQSxFQUFHL1ksTUFBTyxHQUFJLEdBQU0sS0FDMUIrWSxFQUFHRSxXQUFZRixFQUFHemxCLE9BQVMsR0FBSW1CLFNBQVUsSUFBTyxJQUkzQyxLQUFPc2tCLEdBT2ZHLEdBQWdCLFdBQ2ZoRCxLQUdEaUQsR0FBcUJDLElBQ3BCLFNBQVV4SSxHQUNULE9BQXlCLElBQWxCQSxFQUFLeUksVUFBcUQsYUFBaEN6SSxFQUFLNWIsU0FBU29TLGdCQUVoRCxDQUFFb0csSUFBSyxhQUFjOEwsS0FBTSxXQUk3QixJQUNDclcsRUFBS29KLE1BQ0Y1TSxFQUFNTyxFQUFNMVAsS0FBTWttQixFQUFhK0MsWUFDakMvQyxFQUFhK0MsWUFNZDlaLEVBQUsrVyxFQUFhK0MsV0FBV2ptQixRQUFTc0IsU0FDckMsTUFBUWlHLEdBQ1RvSSxFQUFPLENBQUVvSixNQUFPNU0sRUFBSW5NLE9BR25CLFNBQVV5RyxFQUFReWYsR0FDakJ0QyxFQUFXN0ssTUFBT3RTLEVBQVFpRyxFQUFNMVAsS0FBTWtwQixLQUt2QyxTQUFVemYsRUFBUXlmLEdBS2pCLElBSkEsSUFBSTNGLEVBQUk5WixFQUFPekcsT0FDZG5ELEVBQUksRUFHSzRKLEVBQVE4WixLQUFRMkYsRUFBS3JwQixPQUMvQjRKLEVBQU96RyxPQUFTdWdCLEVBQUksSUFLdkIsU0FBUzJCLEdBQVE5QyxFQUFVQyxFQUFTbUMsRUFBUzJFLEdBQzVDLElBQUlscEIsRUFBR0osRUFBR3lnQixFQUFNOEksRUFBS3RaLEVBQU91WixFQUFRQyxFQUNuQ0MsRUFBYWxILEdBQVdBLEVBQVFwZixjQUdoQ3FCLEVBQVcrZCxFQUFVQSxFQUFRL2QsU0FBVyxFQUt6QyxHQUhBa2dCLEVBQVVBLEdBQVcsR0FHSSxpQkFBYnBDLElBQTBCQSxHQUN4QixJQUFiOWQsR0FBK0IsSUFBYkEsR0FBK0IsS0FBYkEsRUFFcEMsT0FBT2tnQixFQUlSLElBQU0yRSxJQUNMdkQsRUFBYXZELEdBQ2JBLEVBQVVBLEdBQVduZixFQUVoQjRpQixHQUFpQixDQUlyQixHQUFrQixLQUFieGhCLElBQXFCd0wsRUFBUWdZLEVBQVcwQixLQUFNcEgsSUFHbEQsR0FBT25pQixFQUFJNlAsRUFBTyxJQUdqQixHQUFrQixJQUFieEwsRUFBaUIsQ0FDckIsS0FBT2djLEVBQU8rQixFQUFRb0gsZUFBZ0J4cEIsSUFVckMsT0FBT3VrQixFQUxQLEdBQUtsRSxFQUFLekMsS0FBTzVkLEVBRWhCLE9BREF1a0IsRUFBUTdSLEtBQU0yTixHQUNQa0UsT0FZVCxHQUFLK0UsSUFBZ0JqSixFQUFPaUosRUFBV0UsZUFBZ0J4cEIsS0FDdERnSCxFQUFVb2IsRUFBUy9CLElBQ25CQSxFQUFLekMsS0FBTzVkLEVBR1osT0FEQXVrQixFQUFRN1IsS0FBTTJOLEdBQ1BrRSxNQUtILElBQUsxVSxFQUFPLEdBRWxCLE9BREE2QyxFQUFLb0osTUFBT3lJLEVBQVNuQyxFQUFRcUgscUJBQXNCdEgsSUFDNUNvQyxFQUdELElBQU92a0IsRUFBSTZQLEVBQU8sS0FBU2tSLEVBQVEySSx3QkFDekN0SCxFQUFRc0gsdUJBR1IsT0FEQWhYLEVBQUtvSixNQUFPeUksRUFBU25DLEVBQVFzSCx1QkFBd0IxcEIsSUFDOUN1a0IsRUFLVCxHQUFLeEQsRUFBUTRJLE1BQ1huRCxFQUF3QnJFLEVBQVcsUUFDakMyRCxJQUFjQSxFQUFVamtCLEtBQU1zZ0IsTUFJbEIsSUFBYjlkLEdBQXFELFdBQW5DK2QsRUFBUTNkLFNBQVNvUyxlQUErQixDQVlwRSxHQVZBd1MsRUFBY2xILEVBQ2RtSCxFQUFhbEgsRUFTSyxJQUFiL2QsSUFDRmdqQixFQUFTeGxCLEtBQU1zZ0IsSUFBY2lGLEVBQWF2bEIsS0FBTXNnQixJQUFlLENBcUJqRSxLQWxCQW1ILEVBQWF4QixHQUFTam1CLEtBQU1zZ0IsSUFBY3lILEdBQWF4SCxFQUFRMWQsYUFDOUQwZCxLQUltQkEsR0FBWXJCLEVBQVE4SSxTQUdoQ1YsRUFBTS9HLEVBQVFOLGFBQWMsT0FDbENxSCxFQUFNQSxFQUFJbm5CLFFBQVNzbUIsR0FBWUMsSUFFL0JuRyxFQUFReEksYUFBYyxLQUFRdVAsRUFBTXJGLElBTXRDbGtCLEdBREF3cEIsRUFBUy9ELEVBQVVsRCxJQUNScGYsT0FDSG5ELEtBQ1B3cEIsRUFBUXhwQixJQUFRdXBCLEVBQU0sSUFBTUEsRUFBTSxVQUFhLElBQzlDVyxHQUFZVixFQUFReHBCLElBRXRCeXBCLEVBQWNELEVBQU9XLEtBQU0sS0FHNUIsSUFJQyxPQUhBclgsRUFBS29KLE1BQU95SSxFQUNYK0UsRUFBV1UsaUJBQWtCWCxJQUV2QjlFLEVBQ04sTUFBUTBGLEdBQ1R6RCxFQUF3QnJFLEdBQVUsR0FDakMsUUFDSWdILElBQVFyRixHQUNaMUIsRUFBUTFRLGdCQUFpQixRQVE5QixPQUFPNlQsRUFBUXBELEVBQVNuZ0IsUUFBU2tsQixFQUFPLE1BQVE5RSxFQUFTbUMsRUFBUzJFLEdBU25FLFNBQVM3QyxLQUNSLElBQUluWixFQUFPLEdBWVgsT0FWQSxTQUFTZ2QsRUFBTy9vQixFQUFLTixHQVFwQixPQUxLcU0sRUFBS3dGLEtBQU12UixFQUFNLEtBQVErakIsRUFBS2lGLG9CQUczQkQsRUFBT2hkLEVBQUtvSSxTQUVYNFUsRUFBTy9vQixFQUFNLEtBQVFOLEdBU2hDLFNBQVN1cEIsR0FBY2pvQixHQUV0QixPQURBQSxFQUFJMmhCLElBQVksRUFDVDNoQixFQU9SLFNBQVNrb0IsR0FBUWxvQixHQUNoQixJQUFJK0osRUFBS2pKLEVBQVMyZSxjQUFlLFlBRWpDLElBQ0MsUUFBU3pmLEVBQUkrSixHQUNaLE1BQVE1QixHQUNULE9BQU8sRUFDTixRQUdJNEIsRUFBR3hILFlBQ1B3SCxFQUFHeEgsV0FBV29OLFlBQWE1RixHQUk1QkEsRUFBSyxNQVNQLFNBQVNvZSxHQUFXQyxFQUFPQyxHQUkxQixJQUhBLElBQUl0YixFQUFNcWIsRUFBTTNjLE1BQU8sS0FDdEJoTyxFQUFJc1AsRUFBSW5NLE9BRURuRCxLQUNQc2xCLEVBQUt1RixXQUFZdmIsRUFBS3RQLElBQVE0cUIsRUFVaEMsU0FBU0UsR0FBY3BkLEVBQUdDLEdBQ3pCLElBQUlxQyxFQUFNckMsR0FBS0QsRUFDZHFkLEVBQU8vYSxHQUFzQixJQUFmdEMsRUFBRWpKLFVBQWlDLElBQWZrSixFQUFFbEosVUFDbkNpSixFQUFFc2QsWUFBY3JkLEVBQUVxZCxZQUdwQixHQUFLRCxFQUNKLE9BQU9BLEVBSVIsR0FBSy9hLEVBQ0osS0FBVUEsRUFBTUEsRUFBSWliLGFBQ25CLEdBQUtqYixJQUFRckMsRUFDWixPQUFRLEVBS1gsT0FBT0QsRUFBSSxHQUFLLEVBT2pCLFNBQVN3ZCxHQUFtQjNKLEdBQzNCLE9BQU8sU0FBVWQsR0FFaEIsTUFBZ0IsVUFETEEsRUFBSzViLFNBQVNvUyxlQUNFd0osRUFBS2MsT0FBU0EsR0FRM0MsU0FBUzRKLEdBQW9CNUosR0FDNUIsT0FBTyxTQUFVZCxHQUNoQixJQUFJbGdCLEVBQU9rZ0IsRUFBSzViLFNBQVNvUyxjQUN6QixPQUFrQixVQUFUMVcsR0FBNkIsV0FBVEEsSUFBdUJrZ0IsRUFBS2MsT0FBU0EsR0FRcEUsU0FBUzZKLEdBQXNCbEMsR0FHOUIsT0FBTyxTQUFVekksR0FLaEIsTUFBSyxTQUFVQSxFQVNUQSxFQUFLM2IsYUFBZ0MsSUFBbEIyYixFQUFLeUksU0FHdkIsVUFBV3pJLEVBQ1YsVUFBV0EsRUFBSzNiLFdBQ2IyYixFQUFLM2IsV0FBV29rQixXQUFhQSxFQUU3QnpJLEVBQUt5SSxXQUFhQSxFQU1wQnpJLEVBQUs0SyxhQUFlbkMsR0FJMUJ6SSxFQUFLNEssY0FBZ0JuQyxHQUNyQkYsR0FBb0J2SSxLQUFXeUksRUFHMUJ6SSxFQUFLeUksV0FBYUEsRUFLZCxVQUFXekksR0FDZkEsRUFBS3lJLFdBQWFBLEdBWTVCLFNBQVNvQyxHQUF3Qi9vQixHQUNoQyxPQUFPaW9CLElBQWMsU0FBVWUsR0FFOUIsT0FEQUEsR0FBWUEsRUFDTGYsSUFBYyxTQUFVbEIsRUFBTXZFLEdBTXBDLElBTEEsSUFBSXJCLEVBQ0g4SCxFQUFlanBCLEVBQUksR0FBSSttQixFQUFLbm1CLE9BQVFvb0IsR0FDcEN2ckIsRUFBSXdyQixFQUFhcm9CLE9BR1ZuRCxLQUNGc3BCLEVBQVE1RixFQUFJOEgsRUFBY3hyQixNQUM5QnNwQixFQUFNNUYsS0FBU3FCLEVBQVNyQixHQUFNNEYsRUFBTTVGLFdBWXpDLFNBQVNzRyxHQUFheEgsR0FDckIsT0FBT0EsUUFBbUQsSUFBakNBLEVBQVFxSCxzQkFBd0NySCxFQWtyQzFFLElBQU14aUIsS0E5cUNObWhCLEVBQVVrRSxHQUFPbEUsUUFBVSxHQU8zQnFFLEVBQVFILEdBQU9HLE1BQVEsU0FBVS9FLEdBQ2hDLElBQUlnTCxFQUFZaEwsR0FBUUEsRUFBS2lMLGFBQzVCMUYsRUFBVXZGLElBQVVBLEVBQUtyZCxlQUFpQnFkLEdBQU96YSxnQkFLbEQsT0FBUTZoQixFQUFNNWxCLEtBQU13cEIsR0FBYXpGLEdBQVdBLEVBQVFuaEIsVUFBWSxTQVFqRWtoQixFQUFjVixHQUFPVSxZQUFjLFNBQVUxZixHQUM1QyxJQUFJc2xCLEVBQVlDLEVBQ2YvSixFQUFNeGIsRUFBT0EsRUFBS2pELGVBQWlCaUQsRUFBT2dnQixFQU8zQyxPQUFLeEUsR0FBT3hlLEdBQTZCLElBQWpCd2UsRUFBSXBkLFVBQW1Cb2QsRUFBSTdiLGlCQU1uRGdnQixHQURBM2lCLEVBQVd3ZSxHQUNRN2IsZ0JBQ25CaWdCLEdBQWtCVCxFQUFPbmlCLEdBUXBCZ2pCLEdBQWdCaGpCLElBQ2xCdW9CLEVBQVl2b0IsRUFBU3FCLGNBQWlCa25CLEVBQVV4akIsTUFBUXdqQixJQUdyREEsRUFBVXRaLGlCQUNkc1osRUFBVXRaLGlCQUFrQixTQUFVeVcsSUFBZSxHQUcxQzZDLEVBQVVDLGFBQ3JCRCxFQUFVQyxZQUFhLFdBQVk5QyxLQVNyQzVILEVBQVE4SSxNQUFRUSxJQUFRLFNBQVVuZSxHQUVqQyxPQURBMFosRUFBUTVELFlBQWE5VixHQUFLOFYsWUFBYS9lLEVBQVMyZSxjQUFlLGFBQ3pCLElBQXhCMVYsRUFBRzhkLG1CQUNmOWQsRUFBRzhkLGlCQUFrQix1QkFBd0JqbkIsVUFTaERnZSxFQUFRMVEsV0FBYWdhLElBQVEsU0FBVW5lLEdBRXRDLE9BREFBLEVBQUd3ZixVQUFZLEtBQ1B4ZixFQUFHNFYsYUFBYyxnQkFPMUJmLEVBQVEwSSxxQkFBdUJZLElBQVEsU0FBVW5lLEdBRWhELE9BREFBLEVBQUc4VixZQUFhL2UsRUFBUzBvQixjQUFlLE1BQ2hDemYsRUFBR3VkLHFCQUFzQixLQUFNMW1CLFVBSXhDZ2UsRUFBUTJJLHVCQUF5QjlCLEVBQVEvbEIsS0FBTW9CLEVBQVN5bUIsd0JBTXhEM0ksRUFBUTZLLFFBQVV2QixJQUFRLFNBQVVuZSxHQUVuQyxPQURBMFosRUFBUTVELFlBQWE5VixHQUFLMFIsR0FBS2tHLEdBQ3ZCN2dCLEVBQVM0b0Isb0JBQXNCNW9CLEVBQVM0b0Isa0JBQW1CL0gsR0FBVS9nQixVQUl6RWdlLEVBQVE2SyxTQUNaMUcsRUFBS3RpQixPQUFhLEdBQUksU0FBVWdiLEdBQy9CLElBQUlrTyxFQUFTbE8sRUFBRzViLFFBQVMrbEIsR0FBV0MsSUFDcEMsT0FBTyxTQUFVM0gsR0FDaEIsT0FBT0EsRUFBS3lCLGFBQWMsUUFBV2dLLElBR3ZDNUcsRUFBS2pXLEtBQVcsR0FBSSxTQUFVMk8sRUFBSXdFLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFRb0gsZ0JBQWtDM0QsRUFBaUIsQ0FDdEUsSUFBSXhGLEVBQU8rQixFQUFRb0gsZUFBZ0I1TCxHQUNuQyxPQUFPeUMsRUFBTyxDQUFFQSxHQUFTLE9BSTNCNkUsRUFBS3RpQixPQUFhLEdBQUssU0FBVWdiLEdBQ2hDLElBQUlrTyxFQUFTbE8sRUFBRzViLFFBQVMrbEIsR0FBV0MsSUFDcEMsT0FBTyxTQUFVM0gsR0FDaEIsSUFBSXBhLE9BQXdDLElBQTFCb2EsRUFBSzBMLGtCQUN0QjFMLEVBQUswTCxpQkFBa0IsTUFDeEIsT0FBTzlsQixHQUFRQSxFQUFLcEYsUUFBVWlyQixJQU1oQzVHLEVBQUtqVyxLQUFXLEdBQUksU0FBVTJPLEVBQUl3RSxHQUNqQyxRQUF1QyxJQUEzQkEsRUFBUW9ILGdCQUFrQzNELEVBQWlCLENBQ3RFLElBQUk1ZixFQUFNckcsRUFBRytpQixFQUNadEMsRUFBTytCLEVBQVFvSCxlQUFnQjVMLEdBRWhDLEdBQUt5QyxFQUFPLENBSVgsSUFEQXBhLEVBQU9vYSxFQUFLMEwsaUJBQWtCLFFBQ2pCOWxCLEVBQUtwRixRQUFVK2MsRUFDM0IsTUFBTyxDQUFFeUMsR0FNVixJQUZBc0MsRUFBUVAsRUFBUXlKLGtCQUFtQmpPLEdBQ25DaGUsRUFBSSxFQUNNeWdCLEVBQU9zQyxFQUFPL2lCLE1BRXZCLElBREFxRyxFQUFPb2EsRUFBSzBMLGlCQUFrQixRQUNqQjlsQixFQUFLcEYsUUFBVStjLEVBQzNCLE1BQU8sQ0FBRXlDLEdBS1osTUFBTyxNQU1WNkUsRUFBS2pXLEtBQVksSUFBSThSLEVBQVEwSSxxQkFDNUIsU0FBVXVDLEVBQUs1SixHQUNkLFlBQTZDLElBQWpDQSxFQUFRcUgscUJBQ1pySCxFQUFRcUgscUJBQXNCdUMsR0FHMUJqTCxFQUFRNEksSUFDWnZILEVBQVE0SCxpQkFBa0JnQyxRQUQzQixHQUtSLFNBQVVBLEVBQUs1SixHQUNkLElBQUkvQixFQUNINEwsRUFBTSxHQUNOcnNCLEVBQUksRUFHSjJrQixFQUFVbkMsRUFBUXFILHFCQUFzQnVDLEdBR3pDLEdBQWEsTUFBUkEsRUFBYyxDQUNsQixLQUFVM0wsRUFBT2tFLEVBQVMza0IsTUFDRixJQUFsQnlnQixFQUFLaGMsVUFDVDRuQixFQUFJdlosS0FBTTJOLEdBSVosT0FBTzRMLEVBRVIsT0FBTzFILEdBSVRXLEVBQUtqVyxLQUFjLE1BQUk4UixFQUFRMkksd0JBQTBCLFNBQVVnQyxFQUFXdEosR0FDN0UsUUFBK0MsSUFBbkNBLEVBQVFzSCx3QkFBMEM3RCxFQUM3RCxPQUFPekQsRUFBUXNILHVCQUF3QmdDLElBVXpDM0YsRUFBZ0IsR0FPaEJELEVBQVksSUFFTC9FLEVBQVE0SSxJQUFNL0IsRUFBUS9sQixLQUFNb0IsRUFBUyttQixxQkFJM0NLLElBQVEsU0FBVW5lLEdBRWpCLElBQUlnZ0IsRUFPSnRHLEVBQVE1RCxZQUFhOVYsR0FBS2lnQixVQUFZLFVBQVlySSxFQUFaLHFCQUNwQkEsRUFEb0Isa0VBUWpDNVgsRUFBRzhkLGlCQUFrQix3QkFBeUJqbkIsUUFDbEQraUIsRUFBVXBULEtBQU0sU0FBV29VLEVBQWEsZ0JBS25DNWEsRUFBRzhkLGlCQUFrQixjQUFlam5CLFFBQ3pDK2lCLEVBQVVwVCxLQUFNLE1BQVFvVSxFQUFhLGFBQWVELEVBQVcsS0FJMUQzYSxFQUFHOGQsaUJBQWtCLFFBQVVsRyxFQUFVLE1BQU8vZ0IsUUFDckQraUIsRUFBVXBULEtBQU0sT0FRakJ3WixFQUFRanBCLEVBQVMyZSxjQUFlLFVBQzFCaEksYUFBYyxPQUFRLElBQzVCMU4sRUFBRzhWLFlBQWFrSyxHQUNWaGdCLEVBQUc4ZCxpQkFBa0IsYUFBY2puQixRQUN4QytpQixFQUFVcFQsS0FBTSxNQUFRb1UsRUFBYSxRQUFVQSxFQUFhLEtBQzNEQSxFQUFhLGdCQU1UNWEsRUFBRzhkLGlCQUFrQixZQUFham5CLFFBQ3ZDK2lCLEVBQVVwVCxLQUFNLFlBTVh4RyxFQUFHOGQsaUJBQWtCLEtBQU9sRyxFQUFVLE1BQU8vZ0IsUUFDbEQraUIsRUFBVXBULEtBQU0sWUFLakJ4RyxFQUFHOGQsaUJBQWtCLFFBQ3JCbEUsRUFBVXBULEtBQU0sa0JBR2pCMlgsSUFBUSxTQUFVbmUsR0FDakJBLEVBQUdpZ0IsVUFBWSxvRkFLZixJQUFJRCxFQUFRanBCLEVBQVMyZSxjQUFlLFNBQ3BDc0ssRUFBTXRTLGFBQWMsT0FBUSxVQUM1QjFOLEVBQUc4VixZQUFha0ssR0FBUXRTLGFBQWMsT0FBUSxLQUl6QzFOLEVBQUc4ZCxpQkFBa0IsWUFBYWpuQixRQUN0QytpQixFQUFVcFQsS0FBTSxPQUFTb1UsRUFBYSxlQUtXLElBQTdDNWEsRUFBRzhkLGlCQUFrQixZQUFham5CLFFBQ3RDK2lCLEVBQVVwVCxLQUFNLFdBQVksYUFLN0JrVCxFQUFRNUQsWUFBYTlWLEdBQUs0YyxVQUFXLEVBQ2MsSUFBOUM1YyxFQUFHOGQsaUJBQWtCLGFBQWNqbkIsUUFDdkMraUIsRUFBVXBULEtBQU0sV0FBWSxhQUs3QnhHLEVBQUc4ZCxpQkFBa0IsUUFDckJsRSxFQUFVcFQsS0FBTSxhQUlYcU8sRUFBUXFMLGdCQUFrQnhFLEVBQVEvbEIsS0FBUThpQixFQUFVaUIsRUFBUWpCLFNBQ2xFaUIsRUFBUXlHLHVCQUNSekcsRUFBUTBHLG9CQUNSMUcsRUFBUTJHLGtCQUNSM0csRUFBUTRHLHFCQUVSbkMsSUFBUSxTQUFVbmUsR0FJakI2VSxFQUFRMEwsa0JBQW9COUgsRUFBUTVrQixLQUFNbU0sRUFBSSxLQUk5Q3lZLEVBQVE1a0IsS0FBTW1NLEVBQUksYUFDbEI2WixFQUFjclQsS0FBTSxLQUFNd04sTUFJNUI0RixFQUFZQSxFQUFVL2lCLFFBQVUsSUFBSWtrQixPQUFRbkIsRUFBVWlFLEtBQU0sTUFDNURoRSxFQUFnQkEsRUFBY2hqQixRQUFVLElBQUlra0IsT0FBUWxCLEVBQWNnRSxLQUFNLE1BSXhFd0IsRUFBYTNELEVBQVEvbEIsS0FBTStqQixFQUFRdGYseUJBS25DVSxFQUFXdWtCLEdBQWMzRCxFQUFRL2xCLEtBQU0rakIsRUFBUTVlLFVBQzlDLFNBQVVzRyxFQUFHQyxHQUNaLElBQUltZixFQUF1QixJQUFmcGYsRUFBRWpKLFNBQWlCaUosRUFBRTFILGdCQUFrQjBILEVBQ2xEcWYsRUFBTXBmLEdBQUtBLEVBQUU3SSxXQUNkLE9BQU80SSxJQUFNcWYsTUFBV0EsR0FBd0IsSUFBakJBLEVBQUl0b0IsWUFDbENxb0IsRUFBTTFsQixTQUNMMGxCLEVBQU0xbEIsU0FBVTJsQixHQUNoQnJmLEVBQUVoSCx5QkFBOEQsR0FBbkNnSCxFQUFFaEgsd0JBQXlCcW1CLE1BRzNELFNBQVVyZixFQUFHQyxHQUNaLEdBQUtBLEVBQ0osS0FBVUEsRUFBSUEsRUFBRTdJLFlBQ2YsR0FBSzZJLElBQU1ELEVBQ1YsT0FBTyxFQUlWLE9BQU8sR0FPVG1aLEVBQVk4RSxFQUNaLFNBQVVqZSxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQW1ZLEdBQWUsRUFDUixFQUlSLElBQUlrSCxHQUFXdGYsRUFBRWhILHlCQUEyQmlILEVBQUVqSCx3QkFDOUMsT0FBS3NtQixJQWdCVSxHQVBmQSxHQUFZdGYsRUFBRXRLLGVBQWlCc0ssS0FBU0MsRUFBRXZLLGVBQWlCdUssR0FDMURELEVBQUVoSCx3QkFBeUJpSCxHQUczQixLQUlHd1QsRUFBUThMLGNBQWdCdGYsRUFBRWpILHdCQUF5QmdILEtBQVFzZixFQU96RHRmLEdBQUtySyxHQUFZcUssRUFBRXRLLGVBQWlCaWpCLEdBQ3hDamYsRUFBVWlmLEVBQWMzWSxJQUNoQixFQU9KQyxHQUFLdEssR0FBWXNLLEVBQUV2SyxlQUFpQmlqQixHQUN4Q2pmLEVBQVVpZixFQUFjMVksR0FDakIsRUFJRGtZLEVBQ0pqaUIsRUFBU2lpQixFQUFXblksR0FBTTlKLEVBQVNpaUIsRUFBV2xZLEdBQ2hELEVBR2UsRUFBVnFmLEdBQWUsRUFBSSxJQUUzQixTQUFVdGYsRUFBR0MsR0FHWixHQUFLRCxJQUFNQyxFQUVWLE9BREFtWSxHQUFlLEVBQ1IsRUFHUixJQUFJOVYsRUFDSGhRLEVBQUksRUFDSmt0QixFQUFNeGYsRUFBRTVJLFdBQ1Jpb0IsRUFBTXBmLEVBQUU3SSxXQUNScW9CLEVBQUssQ0FBRXpmLEdBQ1AwZixFQUFLLENBQUV6ZixHQUdSLElBQU11ZixJQUFRSCxFQU1iLE9BQU9yZixHQUFLckssR0FBWSxFQUN2QnNLLEdBQUt0SyxFQUFXLEVBRWhCNnBCLEdBQU8sRUFDUEgsRUFBTSxFQUNObEgsRUFDRWppQixFQUFTaWlCLEVBQVduWSxHQUFNOUosRUFBU2lpQixFQUFXbFksR0FDaEQsRUFHSyxHQUFLdWYsSUFBUUgsRUFDbkIsT0FBT2pDLEdBQWNwZCxFQUFHQyxHQUt6QixJQURBcUMsRUFBTXRDLEVBQ0lzQyxFQUFNQSxFQUFJbEwsWUFDbkJxb0IsRUFBRzNOLFFBQVN4UCxHQUdiLElBREFBLEVBQU1yQyxFQUNJcUMsRUFBTUEsRUFBSWxMLFlBQ25Cc29CLEVBQUc1TixRQUFTeFAsR0FJYixLQUFRbWQsRUFBSW50QixLQUFRb3RCLEVBQUlwdEIsSUFDdkJBLElBR0QsT0FBT0EsRUFHTjhxQixHQUFjcUMsRUFBSW50QixHQUFLb3RCLEVBQUlwdEIsSUFPM0JtdEIsRUFBSW50QixJQUFPcW1CLEdBQWdCLEVBQzNCK0csRUFBSXB0QixJQUFPcW1CLEVBQWUsRUFFMUIsR0FHS2hqQixHQS9jQ0EsR0FrZFRnaUIsR0FBT04sUUFBVSxTQUFVMUUsRUFBTWdOLEdBQ2hDLE9BQU9oSSxHQUFRaEYsRUFBTSxLQUFNLEtBQU1nTixJQUdsQ2hJLEdBQU9tSCxnQkFBa0IsU0FBVS9MLEVBQU1KLEdBR3hDLEdBRkEwRixFQUFhdEYsR0FFUlUsRUFBUXFMLGlCQUFtQnZHLElBQzlCVyxFQUF3QnZHLEVBQU8sUUFDN0I4RixJQUFrQkEsRUFBY2xrQixLQUFNb2UsT0FDdEM2RixJQUFrQkEsRUFBVWprQixLQUFNb2UsSUFFckMsSUFDQyxJQUFJMkMsRUFBTStCLEVBQVE1a0IsS0FBTXNnQixFQUFNSixHQUc5QixHQUFLMkMsR0FBTzdCLEVBQVEwTCxtQkFJbkJwTSxFQUFLcGQsVUFBdUMsS0FBM0JvZCxFQUFLcGQsU0FBU29CLFNBQy9CLE9BQU91ZSxFQUVQLE1BQVF0WSxHQUNUa2MsRUFBd0J2RyxHQUFNLEdBSWhDLE9BQU9nRixHQUFRaEYsRUFBTWhkLEVBQVUsS0FBTSxDQUFFb2QsSUFBU3RkLE9BQVMsR0FHMURraUIsR0FBT2plLFNBQVcsU0FBVW9iLEVBQVMvQixHQVVwQyxPQUhPK0IsRUFBUXBmLGVBQWlCb2YsSUFBYW5mLEdBQzVDMGlCLEVBQWF2RCxHQUVQcGIsRUFBVW9iLEVBQVMvQixJQUczQjRFLEdBQU9pSSxLQUFPLFNBQVU3TSxFQUFNbGdCLElBT3RCa2dCLEVBQUtyZCxlQUFpQnFkLElBQVVwZCxHQUN0QzBpQixFQUFhdEYsR0FHZCxJQUFJbGUsRUFBSytpQixFQUFLdUYsV0FBWXRxQixFQUFLMFcsZUFHOUI2SyxFQUFNdmYsR0FBTXllLEVBQU83Z0IsS0FBTW1sQixFQUFLdUYsV0FBWXRxQixFQUFLMFcsZUFDOUMxVSxFQUFJa2UsRUFBTWxnQixHQUFPMGxCLFFBQ2pCdmUsRUFFRixZQUFlQSxJQUFSb2EsRUFDTkEsRUFDQVgsRUFBUTFRLGFBQWV3VixFQUN0QnhGLEVBQUt5QixhQUFjM2hCLElBQ2pCdWhCLEVBQU1yQixFQUFLMEwsaUJBQWtCNXJCLEtBQVl1aEIsRUFBSXlMLFVBQzlDekwsRUFBSTdnQixNQUNKLE1BR0pva0IsR0FBT2dELE9BQVMsU0FBVW1GLEdBQ3pCLE9BQVNBLEVBQU0sSUFBS3ByQixRQUFTc21CLEdBQVlDLEtBRzFDdEQsR0FBT3RGLE1BQVEsU0FBVXNFLEdBQ3hCLE1BQU0sSUFBSXZKLE1BQU8sMENBQTRDdUosSUFPOURnQixHQUFPb0ksV0FBYSxTQUFVOUksR0FDN0IsSUFBSWxFLEVBQ0hpTixFQUFhLEdBQ2JoSyxFQUFJLEVBQ0oxakIsRUFBSSxFQU9MLEdBSkE4bEIsR0FBZ0IzRSxFQUFRd00saUJBQ3hCOUgsR0FBYTFFLEVBQVF5TSxZQUFjakosRUFBUTlVLE1BQU8sR0FDbEQ4VSxFQUFRbFgsS0FBTW9aLEdBRVRmLEVBQWUsQ0FDbkIsS0FBVXJGLEVBQU9rRSxFQUFTM2tCLE1BQ3BCeWdCLElBQVNrRSxFQUFTM2tCLEtBQ3RCMGpCLEVBQUlnSyxFQUFXNWEsS0FBTTlTLElBR3ZCLEtBQVEwakIsS0FDUGlCLEVBQVFoQixPQUFRK0osRUFBWWhLLEdBQUssR0FRbkMsT0FGQW1DLEVBQVksS0FFTGxCLEdBT1JZLEVBQVVGLEdBQU9FLFFBQVUsU0FBVTlFLEdBQ3BDLElBQUlwYSxFQUNIMmMsRUFBTSxHQUNOaGpCLEVBQUksRUFDSnlFLEVBQVdnYyxFQUFLaGMsU0FFakIsR0FBTUEsR0FRQyxHQUFrQixJQUFiQSxHQUErQixJQUFiQSxHQUErQixLQUFiQSxFQUFrQixDQUlqRSxHQUFpQyxpQkFBckJnYyxFQUFLb04sWUFDaEIsT0FBT3BOLEVBQUtvTixZQUlaLElBQU1wTixFQUFPQSxFQUFLcU4sV0FBWXJOLEVBQU1BLEVBQU9BLEVBQUt3SyxZQUMvQ2pJLEdBQU91QyxFQUFTOUUsUUFHWixHQUFrQixJQUFiaGMsR0FBK0IsSUFBYkEsRUFDN0IsT0FBT2djLEVBQUtzTixlQW5CWixLQUFVMW5CLEVBQU9vYSxFQUFNemdCLE1BR3RCZ2pCLEdBQU91QyxFQUFTbGYsR0FxQmxCLE9BQU8yYyxJQUdSc0MsRUFBT0QsR0FBTzJJLFVBQVksQ0FHekJ6RCxZQUFhLEdBRWJoSyxhQUFjaUssR0FFZHZhLE1BQU8yWCxFQUVQaUQsV0FBWSxHQUVaeGIsS0FBTSxHQUVONGUsU0FBVSxDQUNULElBQUssQ0FBRTVRLElBQUssYUFBYytGLE9BQU8sR0FDakMsSUFBSyxDQUFFL0YsSUFBSyxjQUNaLElBQUssQ0FBRUEsSUFBSyxrQkFBbUIrRixPQUFPLEdBQ3RDLElBQUssQ0FBRS9GLElBQUssb0JBR2I2USxVQUFXLENBQ1YsS0FBUSxTQUFVamUsR0FXakIsT0FWQUEsRUFBTyxHQUFNQSxFQUFPLEdBQUk3TixRQUFTK2xCLEdBQVdDLElBRzVDblksRUFBTyxJQUFRQSxFQUFPLElBQU9BLEVBQU8sSUFDbkNBLEVBQU8sSUFBTyxJQUFLN04sUUFBUytsQixHQUFXQyxJQUVwQixPQUFmblksRUFBTyxLQUNYQSxFQUFPLEdBQU0sSUFBTUEsRUFBTyxHQUFNLEtBRzFCQSxFQUFNSixNQUFPLEVBQUcsSUFHeEIsTUFBUyxTQUFVSSxHQWlDbEIsT0FyQkFBLEVBQU8sR0FBTUEsRUFBTyxHQUFJZ0gsY0FFVSxRQUE3QmhILEVBQU8sR0FBSUosTUFBTyxFQUFHLElBR25CSSxFQUFPLElBQ1pvVixHQUFPdEYsTUFBTzlQLEVBQU8sSUFLdEJBLEVBQU8sS0FBU0EsRUFBTyxHQUN0QkEsRUFBTyxJQUFRQSxFQUFPLElBQU8sR0FDN0IsR0FBcUIsU0FBZkEsRUFBTyxJQUFpQyxRQUFmQSxFQUFPLEtBQ3ZDQSxFQUFPLEtBQVdBLEVBQU8sR0FBTUEsRUFBTyxJQUF3QixRQUFmQSxFQUFPLEtBRzNDQSxFQUFPLElBQ2xCb1YsR0FBT3RGLE1BQU85UCxFQUFPLElBR2ZBLEdBR1IsT0FBVSxTQUFVQSxHQUNuQixJQUFJa2UsRUFDSEMsR0FBWW5lLEVBQU8sSUFBT0EsRUFBTyxHQUVsQyxPQUFLMlgsRUFBbUIsTUFBRTNsQixLQUFNZ08sRUFBTyxJQUMvQixNQUlIQSxFQUFPLEdBQ1hBLEVBQU8sR0FBTUEsRUFBTyxJQUFPQSxFQUFPLElBQU8sR0FHOUJtZSxHQUFZMUcsRUFBUXpsQixLQUFNbXNCLEtBR25DRCxFQUFTMUksRUFBVTJJLEdBQVUsTUFHN0JELEVBQVNDLEVBQVN4cUIsUUFBUyxJQUFLd3FCLEVBQVNqckIsT0FBU2dyQixHQUFXQyxFQUFTanJCLFVBR3hFOE0sRUFBTyxHQUFNQSxFQUFPLEdBQUlKLE1BQU8sRUFBR3NlLEdBQ2xDbGUsRUFBTyxHQUFNbWUsRUFBU3ZlLE1BQU8sRUFBR3NlLElBSTFCbGUsRUFBTUosTUFBTyxFQUFHLE1BSXpCN00sT0FBUSxDQUVQLElBQU8sU0FBVXFyQixHQUNoQixJQUFJeHBCLEVBQVd3cEIsRUFBaUJqc0IsUUFBUytsQixHQUFXQyxJQUFZblIsY0FDaEUsTUFBNEIsTUFBckJvWCxFQUNOLFdBQ0MsT0FBTyxHQUVSLFNBQVU1TixHQUNULE9BQU9BLEVBQUs1YixVQUFZNGIsRUFBSzViLFNBQVNvUyxnQkFBa0JwUyxJQUkzRCxNQUFTLFNBQVVpbkIsR0FDbEIsSUFBSXdDLEVBQVU5SCxFQUFZc0YsRUFBWSxLQUV0QyxPQUFPd0MsSUFDSkEsRUFBVSxJQUFJakgsT0FBUSxNQUFRSCxFQUMvQixJQUFNNEUsRUFBWSxJQUFNNUUsRUFBYSxTQUFhVixFQUNqRHNGLEdBQVcsU0FBVXJMLEdBQ3BCLE9BQU82TixFQUFRcnNCLEtBQ1ksaUJBQW5Cd2UsRUFBS3FMLFdBQTBCckwsRUFBS3FMLGdCQUNkLElBQXRCckwsRUFBS3lCLGNBQ1h6QixFQUFLeUIsYUFBYyxVQUNwQixRQUtOLEtBQVEsU0FBVTNoQixFQUFNZ3VCLEVBQVVoZixHQUNqQyxPQUFPLFNBQVVrUixHQUNoQixJQUFJOVYsRUFBUzBhLEdBQU9pSSxLQUFNN00sRUFBTWxnQixHQUVoQyxPQUFlLE1BQVZvSyxFQUNnQixPQUFiNGpCLEdBRUZBLElBSU41akIsR0FBVSxHQUlVLE1BQWI0akIsRUFBbUI1akIsSUFBVzRFLEVBQ3ZCLE9BQWJnZixFQUFvQjVqQixJQUFXNEUsRUFDbEIsT0FBYmdmLEVBQW9CaGYsR0FBcUMsSUFBNUI1RSxFQUFPL0csUUFBUzJMLEdBQ2hDLE9BQWJnZixFQUFvQmhmLEdBQVM1RSxFQUFPL0csUUFBUzJMLElBQVcsRUFDM0MsT0FBYmdmLEVBQW9CaGYsR0FBUzVFLEVBQU9rRixPQUFRTixFQUFNcE0sVUFBYW9NLEVBQ2xELE9BQWJnZixHQUFzQixJQUFNNWpCLEVBQU92SSxRQUFTZ2xCLEVBQWEsS0FBUSxLQUFNeGpCLFFBQVMyTCxJQUFXLEVBQzlFLE9BQWJnZixJQUFvQjVqQixJQUFXNEUsR0FBUzVFLEVBQU9rRixNQUFPLEVBQUdOLEVBQU1wTSxPQUFTLEtBQVFvTSxFQUFRLFFBTzNGLE1BQVMsU0FBVWdTLEVBQU1pTixFQUFNQyxFQUFXckwsRUFBT0MsR0FDaEQsSUFBSXFMLEVBQWdDLFFBQXZCbk4sRUFBSzFSLE1BQU8sRUFBRyxHQUMzQjhlLEVBQStCLFNBQXJCcE4sRUFBSzFSLE9BQVEsR0FDdkIrZSxFQUFrQixZQUFUSixFQUVWLE9BQWlCLElBQVZwTCxHQUF3QixJQUFUQyxFQUdyQixTQUFVNUMsR0FDVCxRQUFTQSxFQUFLM2IsWUFHZixTQUFVMmIsRUFBTW9PLEVBQVVDLEdBQ3pCLElBQUl4RSxFQUFPeUUsRUFBYUMsRUFBWTNvQixFQUFNNG9CLEVBQVdwb0IsRUFDcER3VyxFQUFNcVIsSUFBV0MsRUFBVSxjQUFnQixrQkFDM0MxckIsRUFBU3dkLEVBQUszYixXQUNkdkUsRUFBT3F1QixHQUFVbk8sRUFBSzViLFNBQVNvUyxjQUMvQmlZLEdBQVlKLElBQVFGLEVBQ3BCN0QsR0FBTyxFQUVSLEdBQUs5bkIsRUFBUyxDQUdiLEdBQUt5ckIsRUFBUyxDQUNiLEtBQVFyUixHQUFNLENBRWIsSUFEQWhYLEVBQU9vYSxFQUNHcGEsRUFBT0EsRUFBTWdYLElBQ3RCLEdBQUt1UixFQUNKdm9CLEVBQUt4QixTQUFTb1MsZ0JBQWtCMVcsRUFDZCxJQUFsQjhGLEVBQUs1QixTQUVMLE9BQU8sRUFLVG9DLEVBQVF3VyxFQUFlLFNBQVRrRSxJQUFvQjFhLEdBQVMsY0FFNUMsT0FBTyxFQU1SLEdBSEFBLEVBQVEsQ0FBRThuQixFQUFVMXJCLEVBQU82cUIsV0FBYTdxQixFQUFPa3NCLFdBRzFDUixHQUFXTyxHQWtCZixJQUhBbkUsR0FEQWtFLEdBREEzRSxHQUhBeUUsR0FKQUMsR0FEQTNvQixFQUFPcEQsR0FDWWloQixLQUFlN2QsRUFBTTZkLEdBQVksS0FJMUI3ZCxFQUFLK29CLFlBQzVCSixFQUFZM29CLEVBQUsrb0IsVUFBYSxLQUVaN04sSUFBVSxJQUNaLEtBQVErRSxHQUFXZ0UsRUFBTyxLQUN6QkEsRUFBTyxHQUMzQmprQixFQUFPNG9CLEdBQWFoc0IsRUFBT21tQixXQUFZNkYsR0FFN0I1b0IsSUFBUzRvQixHQUFhNW9CLEdBQVFBLEVBQU1nWCxLQUczQzBOLEVBQU9rRSxFQUFZLElBQU9wb0IsRUFBTWlnQixPQUdsQyxHQUF1QixJQUFsQnpnQixFQUFLNUIsWUFBb0JzbUIsR0FBUTFrQixJQUFTb2EsRUFBTyxDQUNyRHNPLEVBQWF4TixHQUFTLENBQUUrRSxFQUFTMkksRUFBV2xFLEdBQzVDLFlBeUJGLEdBbEJLbUUsSUFhSm5FLEVBREFrRSxHQURBM0UsR0FIQXlFLEdBSkFDLEdBREEzb0IsRUFBT29hLEdBQ1l5RCxLQUFlN2QsRUFBTTZkLEdBQVksS0FJMUI3ZCxFQUFLK29CLFlBQzVCSixFQUFZM29CLEVBQUsrb0IsVUFBYSxLQUVaN04sSUFBVSxJQUNaLEtBQVErRSxHQUFXZ0UsRUFBTyxLQU1oQyxJQUFUUyxFQUdKLE1BQVUxa0IsSUFBUzRvQixHQUFhNW9CLEdBQVFBLEVBQU1nWCxLQUMzQzBOLEVBQU9rRSxFQUFZLElBQU9wb0IsRUFBTWlnQixVQUUzQjhILEVBQ052b0IsRUFBS3hCLFNBQVNvUyxnQkFBa0IxVyxFQUNkLElBQWxCOEYsRUFBSzVCLGNBQ0hzbUIsSUFHR21FLEtBTUpILEdBTEFDLEVBQWEzb0IsRUFBTTZkLEtBQ2hCN2QsRUFBTTZkLEdBQVksS0FJSzdkLEVBQUsrb0IsWUFDNUJKLEVBQVkzb0IsRUFBSytvQixVQUFhLEtBRXBCN04sR0FBUyxDQUFFK0UsRUFBU3lFLElBRzdCMWtCLElBQVNvYSxNQVVsQixPQURBc0ssR0FBUTFILEtBQ1FELEdBQVcySCxFQUFPM0gsR0FBVSxHQUFLMkgsRUFBTzNILEdBQVMsS0FLckUsT0FBVSxTQUFVaU0sRUFBUTlELEdBTTNCLElBQUl0UCxFQUNIMVosRUFBSytpQixFQUFLaEYsUUFBUytPLElBQVkvSixFQUFLZ0ssV0FBWUQsRUFBT3BZLGdCQUN0RG9PLEdBQU90RixNQUFPLHVCQUF5QnNQLEdBS3pDLE9BQUs5c0IsRUFBSTJoQixHQUNEM2hCLEVBQUlncEIsR0FJUGhwQixFQUFHWSxPQUFTLEdBQ2hCOFksRUFBTyxDQUFFb1QsRUFBUUEsRUFBUSxHQUFJOUQsR0FDdEJqRyxFQUFLZ0ssV0FBV3p0QixlQUFnQnd0QixFQUFPcFksZUFDN0N1VCxJQUFjLFNBQVVsQixFQUFNdkUsR0FJN0IsSUFIQSxJQUFJd0ssRUFDSDVnQixFQUFVcE0sRUFBSSttQixFQUFNaUMsR0FDcEJ2ckIsRUFBSTJPLEVBQVF4TCxPQUNMbkQsS0FFUHNwQixFQURBaUcsRUFBTTNyQixFQUFTMGxCLEVBQU0zYSxFQUFTM08sT0FDYitrQixFQUFTd0ssR0FBUTVnQixFQUFTM08sT0FHN0MsU0FBVXlnQixHQUNULE9BQU9sZSxFQUFJa2UsRUFBTSxFQUFHeEUsS0FJaEIxWixJQUlUK2QsUUFBUyxDQUdSLElBQU9rSyxJQUFjLFNBQVVqSSxHQUs5QixJQUFJK0osRUFBUSxHQUNYM0gsRUFBVSxHQUNWNkssRUFBVTlKLEVBQVNuRCxFQUFTbmdCLFFBQVNrbEIsRUFBTyxPQUU3QyxPQUFPa0ksRUFBU3RMLEdBQ2ZzRyxJQUFjLFNBQVVsQixFQUFNdkUsRUFBUzhKLEVBQVVDLEdBTWhELElBTEEsSUFBSXJPLEVBQ0hnUCxFQUFZRCxFQUFTbEcsRUFBTSxLQUFNd0YsRUFBSyxJQUN0Qzl1QixFQUFJc3BCLEVBQUtubUIsT0FHRm5ELE1BQ0F5Z0IsRUFBT2dQLEVBQVd6dkIsTUFDeEJzcEIsRUFBTXRwQixLQUFTK2tCLEVBQVMva0IsR0FBTXlnQixPQUlqQyxTQUFVQSxFQUFNb08sRUFBVUMsR0FNekIsT0FMQXhDLEVBQU8sR0FBTTdMLEVBQ2IrTyxFQUFTbEQsRUFBTyxLQUFNd0MsRUFBS25LLEdBRzNCMkgsRUFBTyxHQUFNLE1BQ0wzSCxFQUFRbUMsVUFJbkIsSUFBTzBELElBQWMsU0FBVWpJLEdBQzlCLE9BQU8sU0FBVTlCLEdBQ2hCLE9BQU80RSxHQUFROUMsRUFBVTlCLEdBQU90ZCxPQUFTLE1BSTNDLFNBQVlxbkIsSUFBYyxTQUFVdkksR0FFbkMsT0FEQUEsRUFBT0EsRUFBSzdmLFFBQVMrbEIsR0FBV0MsSUFDekIsU0FBVTNILEdBQ2hCLE9BQVNBLEVBQUtvTixhQUFldEksRUFBUzlFLElBQVM3YyxRQUFTcWUsSUFBVSxNQVdwRSxLQUFRdUksSUFBYyxTQUFVa0YsR0FPL0IsT0FKTS9ILEVBQVkxbEIsS0FBTXl0QixHQUFRLEtBQy9CckssR0FBT3RGLE1BQU8scUJBQXVCMlAsR0FFdENBLEVBQU9BLEVBQUt0dEIsUUFBUytsQixHQUFXQyxJQUFZblIsY0FDckMsU0FBVXdKLEdBQ2hCLElBQUlrUCxFQUNKLEdBQ0MsR0FBT0EsRUFBVzFKLEVBQ2pCeEYsRUFBS2lQLEtBQ0xqUCxFQUFLeUIsYUFBYyxhQUFnQnpCLEVBQUt5QixhQUFjLFFBR3RELE9BREF5TixFQUFXQSxFQUFTMVksaUJBQ0F5WSxHQUEyQyxJQUFuQ0MsRUFBUy9yQixRQUFTOHJCLEVBQU8sWUFFM0NqUCxFQUFPQSxFQUFLM2IsYUFBa0MsSUFBbEIyYixFQUFLaGMsVUFDN0MsT0FBTyxNQUtULE9BQVUsU0FBVWdjLEdBQ25CLElBQUkvUixFQUFPbkwsRUFBT3FzQixVQUFZcnNCLEVBQU9xc0IsU0FBU2xoQixLQUM5QyxPQUFPQSxHQUFRQSxFQUFLbUIsTUFBTyxLQUFRNFEsRUFBS3pDLElBR3pDLEtBQVEsU0FBVXlDLEdBQ2pCLE9BQU9BLElBQVN1RixHQUdqQixNQUFTLFNBQVV2RixHQUNsQixPQUFPQSxJQUFTcGQsRUFBU3dzQixpQkFDckJ4c0IsRUFBU3lzQixVQUFZenNCLEVBQVN5c0IsZ0JBQzdCclAsRUFBS2MsTUFBUWQsRUFBS3NQLE9BQVN0UCxFQUFLdVAsV0FJdEMsUUFBVzVFLElBQXNCLEdBQ2pDLFNBQVlBLElBQXNCLEdBRWxDLFFBQVcsU0FBVTNLLEdBSXBCLElBQUk1YixFQUFXNGIsRUFBSzViLFNBQVNvUyxjQUM3QixNQUFzQixVQUFicFMsS0FBMEI0YixFQUFLd1AsU0FDeEIsV0FBYnByQixLQUEyQjRiLEVBQUt5UCxVQUdwQyxTQUFZLFNBQVV6UCxHQVNyQixPQUxLQSxFQUFLM2IsWUFFVDJiLEVBQUszYixXQUFXcXJCLGVBR1EsSUFBbEIxUCxFQUFLeVAsVUFJYixNQUFTLFNBQVV6UCxHQU1sQixJQUFNQSxFQUFPQSxFQUFLcU4sV0FBWXJOLEVBQU1BLEVBQU9BLEVBQUt3SyxZQUMvQyxHQUFLeEssRUFBS2hjLFNBQVcsRUFDcEIsT0FBTyxFQUdULE9BQU8sR0FHUixPQUFVLFNBQVVnYyxHQUNuQixPQUFRNkUsRUFBS2hGLFFBQWlCLE1BQUdHLElBSWxDLE9BQVUsU0FBVUEsR0FDbkIsT0FBT3NILEVBQVE5bEIsS0FBTXdlLEVBQUs1YixXQUczQixNQUFTLFNBQVU0YixHQUNsQixPQUFPcUgsRUFBUTdsQixLQUFNd2UsRUFBSzViLFdBRzNCLE9BQVUsU0FBVTRiLEdBQ25CLElBQUlsZ0IsRUFBT2tnQixFQUFLNWIsU0FBU29TLGNBQ3pCLE1BQWdCLFVBQVQxVyxHQUFrQyxXQUFka2dCLEVBQUtjLE1BQThCLFdBQVRoaEIsR0FHdEQsS0FBUSxTQUFVa2dCLEdBQ2pCLElBQUk2TSxFQUNKLE1BQXVDLFVBQWhDN00sRUFBSzViLFNBQVNvUyxlQUNOLFNBQWR3SixFQUFLYyxPQUl1QyxPQUF4QytMLEVBQU83TSxFQUFLeUIsYUFBYyxVQUNOLFNBQXZCb0wsRUFBS3JXLGdCQUlSLE1BQVNxVSxJQUF3QixXQUNoQyxNQUFPLENBQUUsTUFHVixLQUFRQSxJQUF3QixTQUFVOEUsRUFBZWp0QixHQUN4RCxNQUFPLENBQUVBLEVBQVMsTUFHbkIsR0FBTW1vQixJQUF3QixTQUFVOEUsRUFBZWp0QixFQUFRb29CLEdBQzlELE1BQU8sQ0FBRUEsRUFBVyxFQUFJQSxFQUFXcG9CLEVBQVNvb0IsTUFHN0MsS0FBUUQsSUFBd0IsU0FBVUUsRUFBY3JvQixHQUV2RCxJQURBLElBQUluRCxFQUFJLEVBQ0FBLEVBQUltRCxFQUFRbkQsR0FBSyxFQUN4QndyQixFQUFhMVksS0FBTTlTLEdBRXBCLE9BQU93ckIsS0FHUixJQUFPRixJQUF3QixTQUFVRSxFQUFjcm9CLEdBRXRELElBREEsSUFBSW5ELEVBQUksRUFDQUEsRUFBSW1ELEVBQVFuRCxHQUFLLEVBQ3hCd3JCLEVBQWExWSxLQUFNOVMsR0FFcEIsT0FBT3dyQixLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWNyb0IsRUFBUW9vQixHQU03RCxJQUxBLElBQUl2ckIsRUFBSXVyQixFQUFXLEVBQ2xCQSxFQUFXcG9CLEVBQ1hvb0IsRUFBV3BvQixFQUNWQSxFQUNBb29CLElBQ1F2ckIsR0FBSyxHQUNkd3JCLEVBQWExWSxLQUFNOVMsR0FFcEIsT0FBT3dyQixLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWNyb0IsRUFBUW9vQixHQUU3RCxJQURBLElBQUl2ckIsRUFBSXVyQixFQUFXLEVBQUlBLEVBQVdwb0IsRUFBU29vQixJQUNqQ3ZyQixFQUFJbUQsR0FDYnFvQixFQUFhMVksS0FBTTlTLEdBRXBCLE9BQU93ckIsUUFLTGxMLFFBQWUsSUFBSWdGLEVBQUtoRixRQUFjLEdBR2hDLENBQUUrUCxPQUFPLEVBQU1DLFVBQVUsRUFBTUMsTUFBTSxFQUFNQyxVQUFVLEVBQU1DLE9BQU8sR0FDNUVuTCxFQUFLaEYsUUFBU3RnQixHQUFNa3JCLEdBQW1CbHJCLEdBRXhDLElBQU1BLElBQUssQ0FBRTB3QixRQUFRLEVBQU1DLE9BQU8sR0FDakNyTCxFQUFLaEYsUUFBU3RnQixHQUFNbXJCLEdBQW9CbnJCLEdBSXpDLFNBQVNzdkIsTUEwRVQsU0FBU3BGLEdBQVkwRyxHQUlwQixJQUhBLElBQUk1d0IsRUFBSSxFQUNQK1csRUFBTTZaLEVBQU96dEIsT0FDYm9mLEVBQVcsR0FDSnZpQixFQUFJK1csRUFBSy9XLElBQ2hCdWlCLEdBQVlxTyxFQUFRNXdCLEdBQUlpQixNQUV6QixPQUFPc2hCLEVBR1IsU0FBUzBHLEdBQWV1RyxFQUFTcUIsRUFBWUMsR0FDNUMsSUFBSXpULEVBQU13VCxFQUFXeFQsSUFDcEIwVCxFQUFPRixFQUFXMUgsS0FDbEI1bkIsRUFBTXd2QixHQUFRMVQsRUFDZDJULEVBQW1CRixHQUFnQixlQUFSdnZCLEVBQzNCMHZCLEVBQVcxSyxJQUVaLE9BQU9zSyxFQUFXek4sTUFHakIsU0FBVTNDLEVBQU0rQixFQUFTc00sR0FDeEIsS0FBVXJPLEVBQU9BLEVBQU1wRCxJQUN0QixHQUF1QixJQUFsQm9ELEVBQUtoYyxVQUFrQnVzQixFQUMzQixPQUFPeEIsRUFBUy9PLEVBQU0rQixFQUFTc00sR0FHakMsT0FBTyxHQUlSLFNBQVVyTyxFQUFNK0IsRUFBU3NNLEdBQ3hCLElBQUlvQyxFQUFVbkMsRUFBYUMsRUFDMUJtQyxFQUFXLENBQUU3SyxFQUFTMkssR0FHdkIsR0FBS25DLEdBQ0osS0FBVXJPLEVBQU9BLEVBQU1wRCxJQUN0QixJQUF1QixJQUFsQm9ELEVBQUtoYyxVQUFrQnVzQixJQUN0QnhCLEVBQVMvTyxFQUFNK0IsRUFBU3NNLEdBQzVCLE9BQU8sT0FLVixLQUFVck8sRUFBT0EsRUFBTXBELElBQ3RCLEdBQXVCLElBQWxCb0QsRUFBS2hjLFVBQWtCdXNCLEVBUTNCLEdBSEFqQyxHQUpBQyxFQUFhdk8sRUFBTXlELEtBQWV6RCxFQUFNeUQsR0FBWSxLQUkxQnpELEVBQUsyTyxZQUM1QkosRUFBWXZPLEVBQUsyTyxVQUFhLElBRTVCMkIsR0FBUUEsSUFBU3RRLEVBQUs1YixTQUFTb1MsY0FDbkN3SixFQUFPQSxFQUFNcEQsSUFBU29ELE1BQ2hCLEtBQU95USxFQUFXbkMsRUFBYXh0QixLQUNyQzJ2QixFQUFVLEtBQVE1SyxHQUFXNEssRUFBVSxLQUFRRCxFQUcvQyxPQUFTRSxFQUFVLEdBQU1ELEVBQVUsR0FPbkMsR0FIQW5DLEVBQWF4dEIsR0FBUTR2QixFQUdkQSxFQUFVLEdBQU0zQixFQUFTL08sRUFBTStCLEVBQVNzTSxHQUM5QyxPQUFPLEVBTVosT0FBTyxHQUlWLFNBQVNzQyxHQUFnQkMsR0FDeEIsT0FBT0EsRUFBU2x1QixPQUFTLEVBQ3hCLFNBQVVzZCxFQUFNK0IsRUFBU3NNLEdBRXhCLElBREEsSUFBSTl1QixFQUFJcXhCLEVBQVNsdUIsT0FDVG5ELEtBQ1AsSUFBTXF4QixFQUFVcnhCLEdBQUt5Z0IsRUFBTStCLEVBQVNzTSxHQUNuQyxPQUFPLEVBR1QsT0FBTyxHQUVSdUMsRUFBVSxHQVlaLFNBQVNDLEdBQVU3QixFQUFXbGlCLEVBQUt2SyxFQUFRd2YsRUFBU3NNLEdBT25ELElBTkEsSUFBSXJPLEVBQ0g4USxFQUFlLEdBQ2Z2eEIsRUFBSSxFQUNKK1csRUFBTTBZLEVBQVV0c0IsT0FDaEJxdUIsRUFBZ0IsTUFBUGprQixFQUVGdk4sRUFBSStXLEVBQUsvVyxLQUNUeWdCLEVBQU9nUCxFQUFXenZCLE1BQ2xCZ0QsSUFBVUEsRUFBUXlkLEVBQU0rQixFQUFTc00sS0FDdEN5QyxFQUFhemUsS0FBTTJOLEdBQ2QrUSxHQUNKamtCLEVBQUl1RixLQUFNOVMsS0FNZCxPQUFPdXhCLEVBR1IsU0FBU0UsR0FBWXZELEVBQVczTCxFQUFVaU4sRUFBU2tDLEVBQVlDLEVBQVlDLEdBTzFFLE9BTktGLElBQWVBLEVBQVl4TixLQUMvQndOLEVBQWFELEdBQVlDLElBRXJCQyxJQUFlQSxFQUFZek4sS0FDL0J5TixFQUFhRixHQUFZRSxFQUFZQyxJQUUvQnBILElBQWMsU0FBVWxCLEVBQU0zRSxFQUFTbkMsRUFBU3NNLEdBQ3RELElBQUkrQyxFQUFNN3hCLEVBQUd5Z0IsRUFDWnFSLEVBQVMsR0FDVEMsRUFBVSxHQUNWQyxFQUFjck4sRUFBUXhoQixPQUd0QjRmLEVBQVF1RyxHQTVDWCxTQUEyQi9HLEVBQVUwUCxFQUFVdE4sR0FHOUMsSUFGQSxJQUFJM2tCLEVBQUksRUFDUCtXLEVBQU1rYixFQUFTOXVCLE9BQ1JuRCxFQUFJK1csRUFBSy9XLElBQ2hCcWxCLEdBQVE5QyxFQUFVMFAsRUFBVWp5QixHQUFLMmtCLEdBRWxDLE9BQU9BLEVBc0NXdU4sQ0FDZjNQLEdBQVksSUFDWkMsRUFBUS9kLFNBQVcsQ0FBRStkLEdBQVlBLEVBQ2pDLElBSUQyUCxHQUFZakUsSUFBZTVFLEdBQVMvRyxFQUVuQ1EsRUFEQXVPLEdBQVV2TyxFQUFPK08sRUFBUTVELEVBQVcxTCxFQUFTc00sR0FHOUNzRCxFQUFhNUMsRUFHWm1DLElBQWdCckksRUFBTzRFLEVBQVk4RCxHQUFlTixHQUdqRCxHQUdBL00sRUFDRHdOLEVBUUYsR0FMSzNDLEdBQ0pBLEVBQVMyQyxFQUFXQyxFQUFZNVAsRUFBU3NNLEdBSXJDNEMsRUFNSixJQUxBRyxFQUFPUCxHQUFVYyxFQUFZTCxHQUM3QkwsRUFBWUcsRUFBTSxHQUFJclAsRUFBU3NNLEdBRy9COXVCLEVBQUk2eEIsRUFBSzF1QixPQUNEbkQsTUFDQXlnQixFQUFPb1IsRUFBTTd4QixNQUNuQm95QixFQUFZTCxFQUFTL3hCLE1BQVdteUIsRUFBV0osRUFBUy94QixJQUFReWdCLElBSy9ELEdBQUs2SSxHQUNKLEdBQUtxSSxHQUFjekQsRUFBWSxDQUM5QixHQUFLeUQsRUFBYSxDQUtqQixJQUZBRSxFQUFPLEdBQ1A3eEIsRUFBSW95QixFQUFXanZCLE9BQ1BuRCxNQUNBeWdCLEVBQU8yUixFQUFZcHlCLEtBR3pCNnhCLEVBQUsvZSxLQUFRcWYsRUFBV255QixHQUFNeWdCLEdBR2hDa1IsRUFBWSxLQUFRUyxFQUFhLEdBQU1QLEVBQU0vQyxHQUs5QyxJQURBOXVCLEVBQUlveUIsRUFBV2p2QixPQUNQbkQsTUFDQXlnQixFQUFPMlIsRUFBWXB5QixNQUN2QjZ4QixFQUFPRixFQUFhL3RCLEVBQVMwbEIsRUFBTTdJLEdBQVNxUixFQUFROXhCLEtBQVMsSUFFL0RzcEIsRUFBTXVJLEtBQVlsTixFQUFTa04sR0FBU3BSLFVBT3ZDMlIsRUFBYWQsR0FDWmMsSUFBZXpOLEVBQ2R5TixFQUFXek8sT0FBUXFPLEVBQWFJLEVBQVdqdkIsUUFDM0NpdkIsR0FFR1QsRUFDSkEsRUFBWSxLQUFNaE4sRUFBU3lOLEVBQVl0RCxHQUV2Q2hjLEVBQUtvSixNQUFPeUksRUFBU3lOLE1BTXpCLFNBQVNDLEdBQW1CekIsR0F5QjNCLElBeEJBLElBQUkwQixFQUFjOUMsRUFBUzlMLEVBQzFCM00sRUFBTTZaLEVBQU96dEIsT0FDYm92QixFQUFrQmpOLEVBQUsySSxTQUFVMkMsRUFBUSxHQUFJclAsTUFDN0NpUixFQUFtQkQsR0FBbUJqTixFQUFLMkksU0FBVSxLQUNyRGp1QixFQUFJdXlCLEVBQWtCLEVBQUksRUFHMUJFLEVBQWV4SixJQUFlLFNBQVV4SSxHQUN2QyxPQUFPQSxJQUFTNlIsSUFDZEUsR0FBa0IsR0FDckJFLEVBQWtCekosSUFBZSxTQUFVeEksR0FDMUMsT0FBTzdjLEVBQVMwdUIsRUFBYzdSLElBQVUsSUFDdEMrUixHQUFrQixHQUNyQm5CLEVBQVcsQ0FBRSxTQUFVNVEsRUFBTStCLEVBQVNzTSxHQUNyQyxJQUFJOUwsR0FBU3VQLElBQXFCekQsR0FBT3RNLElBQVlvRCxNQUNsRDBNLEVBQWU5UCxHQUFVL2QsU0FDMUJndUIsRUFBY2hTLEVBQU0rQixFQUFTc00sR0FDN0I0RCxFQUFpQmpTLEVBQU0rQixFQUFTc00sSUFJbEMsT0FEQXdELEVBQWUsS0FDUnRQLElBR0RoakIsRUFBSStXLEVBQUsvVyxJQUNoQixHQUFPd3ZCLEVBQVVsSyxFQUFLMkksU0FBVTJDLEVBQVE1d0IsR0FBSXVoQixNQUMzQzhQLEVBQVcsQ0FBRXBJLEdBQWVtSSxHQUFnQkMsR0FBWTdCLFFBQ2xELENBSU4sSUFIQUEsRUFBVWxLLEVBQUt0aUIsT0FBUTR0QixFQUFRNXdCLEdBQUl1aEIsTUFBT3JGLE1BQU8sS0FBTTBVLEVBQVE1d0IsR0FBSStrQixVQUdyRGIsR0FBWSxDQUl6QixJQURBUixJQUFNMWpCLEVBQ0UwakIsRUFBSTNNLElBQ051TyxFQUFLMkksU0FBVTJDLEVBQVFsTixHQUFJbkMsTUFEaEJtQyxLQUtqQixPQUFPK04sR0FDTnp4QixFQUFJLEdBQUtveEIsR0FBZ0JDLEdBQ3pCcnhCLEVBQUksR0FBS2txQixHQUdUMEcsRUFDRS9nQixNQUFPLEVBQUc3UCxFQUFJLEdBQ2RzVSxPQUFRLENBQUVyVCxNQUFnQyxNQUF6QjJ2QixFQUFRNXdCLEVBQUksR0FBSXVoQixLQUFlLElBQU0sTUFDdERuZixRQUFTa2xCLEVBQU8sTUFDbEJrSSxFQUNBeHZCLEVBQUkwakIsR0FBSzJPLEdBQW1CekIsRUFBTy9nQixNQUFPN1AsRUFBRzBqQixJQUM3Q0EsRUFBSTNNLEdBQU9zYixHQUFxQnpCLEVBQVNBLEVBQU8vZ0IsTUFBTzZULElBQ3ZEQSxFQUFJM00sR0FBT21ULEdBQVkwRyxJQUd6QlMsRUFBU3ZlLEtBQU0wYyxHQUlqQixPQUFPNEIsR0FBZ0JDLEdBb1R4QixPQXRwQkEvQixHQUFXMXRCLFVBQVkwakIsRUFBS3FOLFFBQVVyTixFQUFLaEYsUUFDM0NnRixFQUFLZ0ssV0FBYSxJQUFJQSxHQUV0QjdKLEVBQVdKLEdBQU9JLFNBQVcsU0FBVWxELEVBQVVxUSxHQUNoRCxJQUFJamtCLEVBQVNzQixFQUFPMmdCLEVBQVFyUCxFQUMzQnNSLEVBQU9ySixFQUFRc0osRUFDZkMsRUFBU3JNLEVBQVluRSxFQUFXLEtBRWpDLEdBQUt3USxFQUNKLE9BQU9ILEVBQVksRUFBSUcsRUFBT2xqQixNQUFPLEdBT3RDLElBSkFnakIsRUFBUXRRLEVBQ1JpSCxFQUFTLEdBQ1RzSixFQUFheE4sRUFBSzRJLFVBRVYyRSxHQUFRLENBMkJmLElBQU10UixLQXhCQTVTLEtBQWFzQixFQUFRc1gsRUFBT29DLEtBQU1rSixNQUNsQzVpQixJQUdKNGlCLEVBQVFBLEVBQU1oakIsTUFBT0ksRUFBTyxHQUFJOU0sU0FBWTB2QixHQUU3Q3JKLEVBQU8xVyxLQUFROGQsRUFBUyxLQUd6QmppQixHQUFVLEdBR0hzQixFQUFRdVgsRUFBYW1DLEtBQU1rSixNQUNqQ2xrQixFQUFVc0IsRUFBTXlGLFFBQ2hCa2IsRUFBTzlkLEtBQU0sQ0FDWjdSLE1BQU8wTixFQUdQNFMsS0FBTXRSLEVBQU8sR0FBSTdOLFFBQVNrbEIsRUFBTyxPQUVsQ3VMLEVBQVFBLEVBQU1oakIsTUFBT2xCLEVBQVF4TCxTQUloQm1pQixFQUFLdGlCLFNBQ1hpTixFQUFRMlgsRUFBV3JHLEdBQU9vSSxLQUFNa0osS0FBZ0JDLEVBQVl2UixNQUNoRXRSLEVBQVE2aUIsRUFBWXZSLEdBQVF0UixNQUM5QnRCLEVBQVVzQixFQUFNeUYsUUFDaEJrYixFQUFPOWQsS0FBTSxDQUNaN1IsTUFBTzBOLEVBQ1A0UyxLQUFNQSxFQUNOd0QsUUFBUzlVLElBRVY0aUIsRUFBUUEsRUFBTWhqQixNQUFPbEIsRUFBUXhMLFNBSS9CLElBQU13TCxFQUNMLE1BT0YsT0FBT2lrQixFQUNOQyxFQUFNMXZCLE9BQ04wdkIsRUFDQ3hOLEdBQU90RixNQUFPd0MsR0FHZG1FLEVBQVluRSxFQUFVaUgsR0FBUzNaLE1BQU8sSUE0WnpDNlYsRUFBVUwsR0FBT0ssUUFBVSxTQUFVbkQsRUFBVXRTLEdBQzlDLElBQUlqUSxFQUNIZ3pCLEVBQWMsR0FDZEMsRUFBa0IsR0FDbEJGLEVBQVNwTSxFQUFlcEUsRUFBVyxLQUVwQyxJQUFNd1EsRUFBUyxDQU9kLElBSk05aUIsSUFDTEEsRUFBUXdWLEVBQVVsRCxJQUVuQnZpQixFQUFJaVEsRUFBTTlNLE9BQ0ZuRCxNQUNQK3lCLEVBQVNWLEdBQW1CcGlCLEVBQU9qUSxLQUN0QmtrQixHQUNaOE8sRUFBWWxnQixLQUFNaWdCLEdBRWxCRSxFQUFnQm5nQixLQUFNaWdCLElBS3hCQSxFQUFTcE0sRUFDUnBFLEVBckpILFNBQW1DMFEsRUFBaUJELEdBQ25ELElBQUlFLEVBQVFGLEVBQVk3dkIsT0FBUyxFQUNoQ2d3QixFQUFZRixFQUFnQjl2QixPQUFTLEVBQ3JDaXdCLEVBQWUsU0FBVTlKLEVBQU05RyxFQUFTc00sRUFBS25LLEVBQVMwTyxHQUNyRCxJQUFJNVMsRUFBTWlELEVBQUc4TCxFQUNaOEQsRUFBZSxFQUNmdHpCLEVBQUksSUFDSnl2QixFQUFZbkcsR0FBUSxHQUNwQmlLLEVBQWEsR0FDYkMsRUFBZ0I1TixFQUdoQjdDLEVBQVF1RyxHQUFRNkosR0FBYTdOLEVBQUtqVyxLQUFZLElBQUcsSUFBS2drQixHQUd0REksRUFBa0JuTixHQUE0QixNQUFqQmtOLEVBQXdCLEVBQUl4cUIsS0FBS21iLFVBQVksR0FDMUVwTixFQUFNZ00sRUFBTTVmLE9BY2IsSUFaS2t3QixJQU1Kek4sRUFBbUJwRCxHQUFXbmYsR0FBWW1mLEdBQVc2USxHQU05Q3J6QixJQUFNK1csR0FBZ0MsT0FBdkIwSixFQUFPc0MsRUFBTy9pQixJQUFlQSxJQUFNLENBQ3pELEdBQUttekIsR0FBYTFTLEVBQU8sQ0FXeEIsSUFWQWlELEVBQUksRUFNRWxCLEdBQVcvQixFQUFLcmQsZUFBaUJDLElBQ3RDMGlCLEVBQWF0RixHQUNicU8sR0FBTzdJLEdBRUV1SixFQUFVeUQsRUFBaUJ2UCxNQUNwQyxHQUFLOEwsRUFBUy9PLEVBQU0rQixHQUFXbmYsRUFBVXlyQixHQUFRLENBQ2hEbkssRUFBUTdSLEtBQU0yTixHQUNkLE1BR0c0UyxJQUNKL00sRUFBVW1OLEdBS1BQLEtBR0d6UyxHQUFRK08sR0FBVy9PLElBQ3pCNlMsSUFJSWhLLEdBQ0ptRyxFQUFVM2MsS0FBTTJOLElBZ0JuQixHQVRBNlMsR0FBZ0J0ekIsRUFTWGt6QixHQUFTbHpCLElBQU1zekIsRUFBZSxDQUVsQyxJQURBNVAsRUFBSSxFQUNNOEwsRUFBVXdELEVBQWF0UCxNQUNoQzhMLEVBQVNDLEVBQVc4RCxFQUFZL1EsRUFBU3NNLEdBRzFDLEdBQUt4RixFQUFPLENBR1gsR0FBS2dLLEVBQWUsRUFDbkIsS0FBUXR6QixLQUNDeXZCLEVBQVd6dkIsSUFBT3V6QixFQUFZdnpCLEtBQ3JDdXpCLEVBQVl2ekIsR0FBTThtQixFQUFJM21CLEtBQU13a0IsSUFNL0I0TyxFQUFhakMsR0FBVWlDLEdBSXhCemdCLEVBQUtvSixNQUFPeUksRUFBUzRPLEdBR2hCRixJQUFjL0osR0FBUWlLLEVBQVdwd0IsT0FBUyxHQUM1Q213QixFQUFlTixFQUFZN3ZCLE9BQVcsR0FFeENraUIsR0FBT29JLFdBQVk5SSxHQVVyQixPQUxLME8sSUFDSi9NLEVBQVVtTixFQUNWN04sRUFBbUI0TixHQUdiL0QsR0FHVCxPQUFPeUQsRUFDTjFJLEdBQWM0SSxHQUNkQSxFQTRCQ00sQ0FBMEJULEVBQWlCRCxLQUlyQ3pRLFNBQVdBLEVBRW5CLE9BQU93USxHQVlScE4sRUFBU04sR0FBT00sT0FBUyxTQUFVcEQsRUFBVUMsRUFBU21DLEVBQVMyRSxHQUM5RCxJQUFJdHBCLEVBQUc0d0IsRUFBUStDLEVBQU9wUyxFQUFNbFMsRUFDM0J1a0IsRUFBK0IsbUJBQWJyUixHQUEyQkEsRUFDN0N0UyxHQUFTcVosR0FBUTdELEVBQVlsRCxFQUFXcVIsRUFBU3JSLFVBQVlBLEdBTTlELEdBSkFvQyxFQUFVQSxHQUFXLEdBSUMsSUFBakIxVSxFQUFNOU0sT0FBZSxDQUl6QixJQURBeXRCLEVBQVMzZ0IsRUFBTyxHQUFNQSxFQUFPLEdBQUlKLE1BQU8sSUFDNUIxTSxPQUFTLEdBQXNDLFFBQS9Cd3dCLEVBQVEvQyxFQUFRLElBQU1yUCxNQUM1QixJQUFyQmlCLEVBQVEvZCxVQUFrQndoQixHQUFrQlgsRUFBSzJJLFNBQVUyQyxFQUFRLEdBQUlyUCxNQUFTLENBSWhGLEtBRkFpQixHQUFZOEMsRUFBS2pXLEtBQVcsR0FBR3NrQixFQUFNNU8sUUFBUyxHQUM1QzNpQixRQUFTK2xCLEdBQVdDLElBQWE1RixJQUFhLElBQU0sSUFFckQsT0FBT21DLEVBR0lpUCxJQUNYcFIsRUFBVUEsRUFBUTFkLFlBR25CeWQsRUFBV0EsRUFBUzFTLE1BQU8rZ0IsRUFBT2xiLFFBQVF6VSxNQUFNa0MsUUFLakQsSUFEQW5ELEVBQUk0bkIsRUFBMEIsYUFBRTNsQixLQUFNc2dCLEdBQWEsRUFBSXFPLEVBQU96dEIsT0FDdERuRCxNQUNQMnpCLEVBQVEvQyxFQUFRNXdCLElBR1hzbEIsRUFBSzJJLFNBQVkxTSxFQUFPb1MsRUFBTXBTLFFBR25DLElBQU9sUyxFQUFPaVcsRUFBS2pXLEtBQU1rUyxNQUdqQitILEVBQU9qYSxFQUNic2tCLEVBQU01TyxRQUFTLEdBQUkzaUIsUUFBUytsQixHQUFXQyxJQUN2Q0YsR0FBU2ptQixLQUFNMnVCLEVBQVEsR0FBSXJQLE9BQVV5SSxHQUFheEgsRUFBUTFkLGFBQ3pEMGQsSUFDSSxDQUtMLEdBRkFvTyxFQUFPak4sT0FBUTNqQixFQUFHLEtBQ2xCdWlCLEVBQVcrRyxFQUFLbm1CLFFBQVUrbUIsR0FBWTBHLElBR3JDLE9BREE5ZCxFQUFLb0osTUFBT3lJLEVBQVMyRSxHQUNkM0UsRUFHUixPQWVKLE9BUEVpUCxHQUFZbE8sRUFBU25ELEVBQVV0UyxJQUNoQ3FaLEVBQ0E5RyxHQUNDeUQsRUFDRHRCLEdBQ0NuQyxHQUFXMEYsR0FBU2ptQixLQUFNc2dCLElBQWN5SCxHQUFheEgsRUFBUTFkLGFBQWdCMGQsR0FFeEVtQyxHQU1SeEQsRUFBUXlNLFdBQWExSixFQUFRbFcsTUFBTyxJQUFLUCxLQUFNb1osR0FBWXNELEtBQU0sTUFBU2pHLEVBSTFFL0MsRUFBUXdNLG1CQUFxQjdILEVBRzdCQyxJQUlBNUUsRUFBUThMLGFBQWV4QyxJQUFRLFNBQVVuZSxHQUd4QyxPQUE0RSxFQUFyRUEsRUFBRzVGLHdCQUF5QnJELEVBQVMyZSxjQUFlLGdCQU10RHlJLElBQVEsU0FBVW5lLEdBRXZCLE9BREFBLEVBQUdpZ0IsVUFBWSxtQkFDaUMsTUFBekNqZ0IsRUFBR3doQixXQUFXNUwsYUFBYyxZQUVuQ3dJLEdBQVcsMEJBQTBCLFNBQVVqSyxFQUFNbGdCLEVBQU1pbEIsR0FDMUQsSUFBTUEsRUFDTCxPQUFPL0UsRUFBS3lCLGFBQWMzaEIsRUFBNkIsU0FBdkJBLEVBQUswVyxjQUEyQixFQUFJLE1BT2pFa0ssRUFBUTFRLFlBQWVnYSxJQUFRLFNBQVVuZSxHQUc5QyxPQUZBQSxFQUFHaWdCLFVBQVksV0FDZmpnQixFQUFHd2hCLFdBQVc5VCxhQUFjLFFBQVMsSUFDWSxLQUExQzFOLEVBQUd3aEIsV0FBVzVMLGFBQWMsYUFFbkN3SSxHQUFXLFNBQVMsU0FBVWpLLEVBQU1vVCxFQUFPck8sR0FDMUMsSUFBTUEsR0FBeUMsVUFBaEMvRSxFQUFLNWIsU0FBU29TLGNBQzVCLE9BQU93SixFQUFLcVQsZ0JBT1RySixJQUFRLFNBQVVuZSxHQUN2QixPQUF3QyxNQUFqQ0EsRUFBRzRWLGFBQWMsZ0JBRXhCd0ksR0FBV3pELEdBQVUsU0FBVXhHLEVBQU1sZ0IsRUFBTWlsQixHQUMxQyxJQUFJMUQsRUFDSixJQUFNMEQsRUFDTCxPQUF3QixJQUFqQi9FLEVBQU1sZ0IsR0FBa0JBLEVBQUswVyxlQUNqQzZLLEVBQU1yQixFQUFLMEwsaUJBQWtCNXJCLEtBQVl1aEIsRUFBSXlMLFVBQzlDekwsRUFBSTdnQixNQUNKLFFBS0Vva0IsR0ExNEVQLENBNDRFSzloQixHQUlMK2UsRUFBT2pULEtBQU9nVyxFQUNkL0MsRUFBT2pDLEtBQU9nRixFQUFPMkksVUFHckIxTCxFQUFPakMsS0FBTSxLQUFRaUMsRUFBT2pDLEtBQUtDLFFBQ2pDZ0MsRUFBT21MLFdBQWFuTCxFQUFPeVIsT0FBUzFPLEVBQU9vSSxXQUMzQ25MLEVBQU9MLEtBQU9vRCxFQUFPRSxRQUNyQmpELEVBQU8wUixTQUFXM08sRUFBT0csTUFDekJsRCxFQUFPbGIsU0FBV2llLEVBQU9qZSxTQUN6QmtiLEVBQU8yUixlQUFpQjVPLEVBQU9nRCxPQUsvQixJQUFJaEwsRUFBTSxTQUFVb0QsRUFBTXBELEVBQUs2VyxHQUk5QixJQUhBLElBQUl2bEIsRUFBVSxHQUNid2xCLE9BQXFCenNCLElBQVZ3c0IsR0FFRnpULEVBQU9BLEVBQU1wRCxLQUE2QixJQUFsQm9ELEVBQUtoYyxVQUN0QyxHQUF1QixJQUFsQmdjLEVBQUtoYyxTQUFpQixDQUMxQixHQUFLMHZCLEdBQVk3UixFQUFRN0IsR0FBTzJULEdBQUlGLEdBQ25DLE1BRUR2bEIsRUFBUW1FLEtBQU0yTixHQUdoQixPQUFPOVIsR0FJSjBsQixFQUFXLFNBQVU1eUIsRUFBR2dmLEdBRzNCLElBRkEsSUFBSTlSLEVBQVUsR0FFTmxOLEVBQUdBLEVBQUlBLEVBQUV3cEIsWUFDSSxJQUFmeHBCLEVBQUVnRCxVQUFrQmhELElBQU1nZixHQUM5QjlSLEVBQVFtRSxLQUFNclIsR0FJaEIsT0FBT2tOLEdBSUoybEIsRUFBZ0JoUyxFQUFPakMsS0FBS3BRLE1BQU1za0IsYUFJdEMsU0FBUzF2QixFQUFVNGIsRUFBTWxnQixHQUV4QixPQUFPa2dCLEVBQUs1YixVQUFZNGIsRUFBSzViLFNBQVNvUyxnQkFBa0IxVyxFQUFLMFcsY0FHOUQsSUFBSXVkLEVBQWEsa0VBS2pCLFNBQVNDLEVBQVFwSCxFQUFVcUgsRUFBV0MsR0FDckMsT0FBS3Z3QixFQUFZc3dCLEdBQ1RwUyxFQUFPaUIsS0FBTThKLEdBQVUsU0FBVTVNLEVBQU16Z0IsR0FDN0MsUUFBUzAwQixFQUFVdjBCLEtBQU1zZ0IsRUFBTXpnQixFQUFHeWdCLEtBQVdrVSxLQUsxQ0QsRUFBVWp3QixTQUNQNmQsRUFBT2lCLEtBQU04SixHQUFVLFNBQVU1TSxHQUN2QyxPQUFTQSxJQUFTaVUsSUFBZ0JDLEtBS1YsaUJBQWRELEVBQ0pwUyxFQUFPaUIsS0FBTThKLEdBQVUsU0FBVTVNLEdBQ3ZDLE9BQVM3YyxFQUFRekQsS0FBTXUwQixFQUFXalUsSUFBVSxJQUFRa1UsS0FLL0NyUyxFQUFPdGYsT0FBUTB4QixFQUFXckgsRUFBVXNILEdBRzVDclMsRUFBT3RmLE9BQVMsU0FBVXFkLEVBQU0wQyxFQUFPNFIsR0FDdEMsSUFBSWxVLEVBQU9zQyxFQUFPLEdBTWxCLE9BSks0UixJQUNKdFUsRUFBTyxRQUFVQSxFQUFPLEtBR0gsSUFBakIwQyxFQUFNNWYsUUFBa0MsSUFBbEJzZCxFQUFLaGMsU0FDeEI2ZCxFQUFPalQsS0FBS21kLGdCQUFpQi9MLEVBQU1KLEdBQVMsQ0FBRUksR0FBUyxHQUd4RDZCLEVBQU9qVCxLQUFLMFYsUUFBUzFFLEVBQU1pQyxFQUFPaUIsS0FBTVIsR0FBTyxTQUFVdEMsR0FDL0QsT0FBeUIsSUFBbEJBLEVBQUtoYyxjQUlkNmQsRUFBTy9mLEdBQUc2ZCxPQUFRLENBQ2pCL1EsS0FBTSxTQUFVa1QsR0FDZixJQUFJdmlCLEVBQUdnakIsRUFDTmpNLEVBQU1wVSxLQUFLUSxPQUNYeXhCLEVBQU9qeUIsS0FFUixHQUF5QixpQkFBYjRmLEVBQ1gsT0FBTzVmLEtBQUttZ0IsVUFBV1IsRUFBUUMsR0FBV3ZmLFFBQVEsV0FDakQsSUFBTWhELEVBQUksRUFBR0EsRUFBSStXLEVBQUsvVyxJQUNyQixHQUFLc2lCLEVBQU9sYixTQUFVd3RCLEVBQU01MEIsR0FBSzJDLE1BQ2hDLE9BQU8sTUFRWCxJQUZBcWdCLEVBQU1yZ0IsS0FBS21nQixVQUFXLElBRWhCOWlCLEVBQUksRUFBR0EsRUFBSStXLEVBQUsvVyxJQUNyQnNpQixFQUFPalQsS0FBTWtULEVBQVVxUyxFQUFNNTBCLEdBQUtnakIsR0FHbkMsT0FBT2pNLEVBQU0sRUFBSXVMLEVBQU9tTCxXQUFZekssR0FBUUEsR0FFN0NoZ0IsT0FBUSxTQUFVdWYsR0FDakIsT0FBTzVmLEtBQUttZ0IsVUFBVzJSLEVBQVE5eEIsS0FBTTRmLEdBQVksSUFBSSxLQUV0RG9TLElBQUssU0FBVXBTLEdBQ2QsT0FBTzVmLEtBQUttZ0IsVUFBVzJSLEVBQVE5eEIsS0FBTTRmLEdBQVksSUFBSSxLQUV0RDZSLEdBQUksU0FBVTdSLEdBQ2IsUUFBU2tTLEVBQ1I5eEIsS0FJb0IsaUJBQWI0ZixHQUF5QitSLEVBQWNyeUIsS0FBTXNnQixHQUNuREQsRUFBUUMsR0FDUkEsR0FBWSxJQUNiLEdBQ0NwZixVQVNKLElBQUkweEIsRUFNSDVNLEVBQWEsdUNBRU4zRixFQUFPL2YsR0FBR2tnQixLQUFPLFNBQVVGLEVBQVVDLEVBQVNzUyxHQUNwRCxJQUFJN2tCLEVBQU93USxFQUdYLElBQU04QixFQUNMLE9BQU81ZixLQVFSLEdBSEFteUIsRUFBT0EsR0FBUUQsRUFHVSxpQkFBYnRTLEVBQXdCLENBYW5DLEtBUEN0UyxFQUxzQixNQUFsQnNTLEVBQVUsSUFDc0IsTUFBcENBLEVBQVVBLEVBQVNwZixPQUFTLElBQzVCb2YsRUFBU3BmLFFBQVUsRUFHWCxDQUFFLEtBQU1vZixFQUFVLE1BR2xCMEYsRUFBVzBCLEtBQU1wSCxNQUlWdFMsRUFBTyxJQUFRdVMsRUE2Q3hCLE9BQU1BLEdBQVdBLEVBQVFsSSxRQUN0QmtJLEdBQVdzUyxHQUFPemxCLEtBQU1rVCxHQUsxQjVmLEtBQUtnZ0IsWUFBYUgsR0FBVW5ULEtBQU1rVCxHQWhEekMsR0FBS3RTLEVBQU8sR0FBTSxDQVlqQixHQVhBdVMsRUFBVUEsYUFBbUJGLEVBQVNFLEVBQVMsR0FBTUEsRUFJckRGLEVBQU9XLE1BQU90Z0IsS0FBTTJmLEVBQU95UyxVQUMxQjlrQixFQUFPLEdBQ1B1UyxHQUFXQSxFQUFRL2QsU0FBVytkLEVBQVFwZixlQUFpQm9mLEVBQVVuZixHQUNqRSxJQUlJbXhCLEVBQVd2eUIsS0FBTWdPLEVBQU8sS0FBU3FTLEVBQU8wQixjQUFleEIsR0FDM0QsSUFBTXZTLEtBQVN1UyxFQUdUcGUsRUFBWXpCLEtBQU1zTixJQUN0QnROLEtBQU1zTixHQUFTdVMsRUFBU3ZTLElBSXhCdE4sS0FBSzJxQixLQUFNcmQsRUFBT3VTLEVBQVN2UyxJQUs5QixPQUFPdE4sS0FZUCxPQVJBOGQsRUFBT3BkLEVBQVN1bUIsZUFBZ0IzWixFQUFPLE9BS3RDdE4sS0FBTSxHQUFNOGQsRUFDWjlkLEtBQUtRLE9BQVMsR0FFUlIsS0FjSCxPQUFLNGYsRUFBUzlkLFVBQ3BCOUIsS0FBTSxHQUFNNGYsRUFDWjVmLEtBQUtRLE9BQVMsRUFDUFIsTUFJSXlCLEVBQVltZSxRQUNEN2EsSUFBZm90QixFQUFLRSxNQUNYRixFQUFLRSxNQUFPelMsR0FHWkEsRUFBVUQsR0FHTEEsRUFBT29DLFVBQVduQyxFQUFVNWYsUUFJaENmLFVBQVkwZ0IsRUFBTy9mLEdBR3hCc3lCLEVBQWF2UyxFQUFRamYsR0FHckIsSUFBSTR4QixFQUFlLGlDQUdsQkMsRUFBbUIsQ0FDbEI5cEIsVUFBVSxFQUNWK3BCLFVBQVUsRUFDVmhNLE1BQU0sRUFDTmlNLE1BQU0sR0FvRlIsU0FBU0MsRUFBU3JsQixFQUFLcU4sR0FDdEIsTUFBVXJOLEVBQU1BLEVBQUtxTixLQUE0QixJQUFqQnJOLEVBQUl2TCxXQUNwQyxPQUFPdUwsRUFuRlJzUyxFQUFPL2YsR0FBRzZkLE9BQVEsQ0FDakJrVixJQUFLLFNBQVUxckIsR0FDZCxJQUFJMnJCLEVBQVVqVCxFQUFRMVksRUFBUWpILE1BQzdCMUMsRUFBSXMxQixFQUFRcHlCLE9BRWIsT0FBT1IsS0FBS0ssUUFBUSxXQUVuQixJQURBLElBQUloRCxFQUFJLEVBQ0FBLEVBQUlDLEVBQUdELElBQ2QsR0FBS3NpQixFQUFPbGIsU0FBVXpFLEtBQU00eUIsRUFBU3YxQixJQUNwQyxPQUFPLE1BTVh3MUIsUUFBUyxTQUFVeEgsRUFBV3hMLEdBQzdCLElBQUl4UyxFQUNIaFEsRUFBSSxFQUNKQyxFQUFJMEMsS0FBS1EsT0FDVHdMLEVBQVUsR0FDVjRtQixFQUErQixpQkFBZHZILEdBQTBCMUwsRUFBUTBMLEdBR3BELElBQU1zRyxFQUFjcnlCLEtBQU0rckIsR0FDekIsS0FBUWh1QixFQUFJQyxFQUFHRCxJQUNkLElBQU1nUSxFQUFNck4sS0FBTTNDLEdBQUtnUSxHQUFPQSxJQUFRd1MsRUFBU3hTLEVBQU1BLEVBQUlsTCxXQUd4RCxHQUFLa0wsRUFBSXZMLFNBQVcsS0FBUTh3QixFQUMzQkEsRUFBUWxoQixNQUFPckUsSUFBUyxFQUdQLElBQWpCQSxFQUFJdkwsVUFDSDZkLEVBQU9qVCxLQUFLbWQsZ0JBQWlCeGMsRUFBS2dlLElBQWdCLENBRW5EcmYsRUFBUW1FLEtBQU05QyxHQUNkLE1BTUosT0FBT3JOLEtBQUttZ0IsVUFBV25VLEVBQVF4TCxPQUFTLEVBQUltZixFQUFPbUwsV0FBWTllLEdBQVlBLElBSTVFMEYsTUFBTyxTQUFVb00sR0FHaEIsT0FBTUEsRUFLZSxpQkFBVEEsRUFDSjdjLEVBQVF6RCxLQUFNbWlCLEVBQVE3QixHQUFROWQsS0FBTSxJQUlyQ2lCLEVBQVF6RCxLQUFNd0MsS0FHcEI4ZCxFQUFLbkcsT0FBU21HLEVBQU0sR0FBTUEsR0FaakI5ZCxLQUFNLElBQU9BLEtBQU0sR0FBSW1DLFdBQWVuQyxLQUFLeWdCLFFBQVFxUyxVQUFVdHlCLFFBQVUsR0FnQmxGdXlCLElBQUssU0FBVW5ULEVBQVVDLEdBQ3hCLE9BQU83ZixLQUFLbWdCLFVBQ1hSLEVBQU9tTCxXQUNObkwsRUFBT1csTUFBT3RnQixLQUFLOUIsTUFBT3loQixFQUFRQyxFQUFVQyxPQUsvQ21ULFFBQVMsU0FBVXBULEdBQ2xCLE9BQU81ZixLQUFLK3lCLElBQWlCLE1BQVpuVCxFQUNoQjVmLEtBQUt1Z0IsV0FBYXZnQixLQUFLdWdCLFdBQVdsZ0IsT0FBUXVmLE9BVTdDRCxFQUFPYSxLQUFNLENBQ1psZ0IsT0FBUSxTQUFVd2QsR0FDakIsSUFBSXhkLEVBQVN3ZCxFQUFLM2IsV0FDbEIsT0FBTzdCLEdBQThCLEtBQXBCQSxFQUFPd0IsU0FBa0J4QixFQUFTLE1BRXBERixRQUFTLFNBQVUwZCxHQUNsQixPQUFPcEQsRUFBS29ELEVBQU0sZUFFbkJtVixhQUFjLFNBQVVuVixFQUFNMkUsRUFBSThPLEdBQ2pDLE9BQU83VyxFQUFLb0QsRUFBTSxhQUFjeVQsSUFFakMvSyxLQUFNLFNBQVUxSSxHQUNmLE9BQU80VSxFQUFTNVUsRUFBTSxnQkFFdkIyVSxLQUFNLFNBQVUzVSxHQUNmLE9BQU80VSxFQUFTNVUsRUFBTSxvQkFFdkJvVixRQUFTLFNBQVVwVixHQUNsQixPQUFPcEQsRUFBS29ELEVBQU0sZ0JBRW5CZ1YsUUFBUyxTQUFVaFYsR0FDbEIsT0FBT3BELEVBQUtvRCxFQUFNLG9CQUVuQnFWLFVBQVcsU0FBVXJWLEVBQU0yRSxFQUFJOE8sR0FDOUIsT0FBTzdXLEVBQUtvRCxFQUFNLGNBQWV5VCxJQUVsQzZCLFVBQVcsU0FBVXRWLEVBQU0yRSxFQUFJOE8sR0FDOUIsT0FBTzdXLEVBQUtvRCxFQUFNLGtCQUFtQnlULElBRXRDRyxTQUFVLFNBQVU1VCxHQUNuQixPQUFPNFQsR0FBWTVULEVBQUszYixZQUFjLElBQUtncEIsV0FBWXJOLElBRXhEclYsU0FBVSxTQUFVcVYsR0FDbkIsT0FBTzRULEVBQVU1VCxFQUFLcU4sYUFFdkJxSCxTQUFVLFNBQVUxVSxHQUNuQixPQUE2QixNQUF4QkEsRUFBS3VWLGlCQUtUcFYsRUFBVUgsRUFBS3VWLGlCQUVSdlYsRUFBS3VWLGlCQU1SbnhCLEVBQVU0YixFQUFNLGNBQ3BCQSxFQUFPQSxFQUFLd1YsU0FBV3hWLEdBR2pCNkIsRUFBT1csTUFBTyxHQUFJeEMsRUFBSzJJLGdCQUU3QixTQUFVN29CLEVBQU1nQyxHQUNsQitmLEVBQU8vZixHQUFJaEMsR0FBUyxTQUFVMnpCLEVBQU8zUixHQUNwQyxJQUFJNVQsRUFBVTJULEVBQU8vVSxJQUFLNUssS0FBTUosRUFBSTJ4QixHQXVCcEMsTUFyQjBCLFVBQXJCM3pCLEVBQUtzUCxPQUFRLEtBQ2pCMFMsRUFBVzJSLEdBR1AzUixHQUFnQyxpQkFBYkEsSUFDdkI1VCxFQUFVMlQsRUFBT3RmLE9BQVF1ZixFQUFVNVQsSUFHL0JoTSxLQUFLUSxPQUFTLElBR1oreEIsRUFBa0IzMEIsSUFDdkIraEIsRUFBT21MLFdBQVk5ZSxHQUlmc21CLEVBQWFoekIsS0FBTTFCLElBQ3ZCb08sRUFBUTRGLFdBSUg1UixLQUFLbWdCLFVBQVduVSxPQUd6QixJQUFJdW5CLEVBQWdCLG9CQXNPcEIsU0FBU0MsRUFBVS9jLEdBQ2xCLE9BQU9BLEVBRVIsU0FBU2dkLEVBQVNDLEdBQ2pCLE1BQU1BLEVBR1AsU0FBU0MsRUFBWXIxQixFQUFPK0MsRUFBU2djLEVBQVF1VyxHQUM1QyxJQUFJelgsRUFFSixJQUdNN2QsR0FBU21ELEVBQWMwYSxFQUFTN2QsRUFBTXdlLFNBQzFDWCxFQUFPM2UsS0FBTWMsR0FBUXNsQixLQUFNdmlCLEdBQVV3eUIsS0FBTXhXLEdBR2hDL2UsR0FBU21ELEVBQWMwYSxFQUFTN2QsRUFBTWdELE1BQ2pENmEsRUFBTzNlLEtBQU1jLEVBQU8rQyxFQUFTZ2MsR0FRN0JoYyxFQUFRa1ksV0FBT3hVLEVBQVcsQ0FBRXpHLEdBQVE0TyxNQUFPMG1CLElBTTNDLE1BQVF0MUIsR0FJVCtlLEVBQU85RCxXQUFPeFUsRUFBVyxDQUFFekcsS0F2TzdCcWhCLEVBQU9tVSxVQUFZLFNBQVU5bEIsR0FJNUJBLEVBQTZCLGlCQUFaQSxFQWxDbEIsU0FBd0JBLEdBQ3ZCLElBQUlqUCxFQUFTLEdBSWIsT0FIQTRnQixFQUFPYSxLQUFNeFMsRUFBUVYsTUFBT2ltQixJQUFtQixJQUFJLFNBQVVRLEVBQUdDLEdBQy9EajFCLEVBQVFpMUIsSUFBUyxLQUVYajFCLEVBOEJOazFCLENBQWVqbUIsR0FDZjJSLEVBQU9sQyxPQUFRLEdBQUl6UCxHQUVwQixJQUNDa21CLEVBR0FDLEVBR0FDLEVBR0FDLEVBR0FoUSxFQUFPLEdBR1A1TCxFQUFRLEdBR1I2YixHQUFlLEVBR2ZDLEVBQU8sV0FRTixJQUxBRixFQUFTQSxHQUFVcm1CLEVBQVErTCxLQUkzQnFhLEVBQVFGLEdBQVMsRUFDVHpiLEVBQU1qWSxPQUFROHpCLEdBQWUsRUFFcEMsSUFEQUgsRUFBUzFiLEVBQU0xRixVQUNMdWhCLEVBQWNqUSxFQUFLN2pCLFNBR21DLElBQTFENmpCLEVBQU1pUSxHQUFjL2EsTUFBTzRhLEVBQVEsR0FBS0EsRUFBUSxLQUNwRG5tQixFQUFRd21CLGNBR1JGLEVBQWNqUSxFQUFLN2pCLE9BQ25CMnpCLEdBQVMsR0FNTm5tQixFQUFRbW1CLFNBQ2JBLEdBQVMsR0FHVkQsR0FBUyxFQUdKRyxJQUlIaFEsRUFESThQLEVBQ0csR0FJQSxLQU1WbEMsRUFBTyxDQUdOYyxJQUFLLFdBMkJKLE9BMUJLMU8sSUFHQzhQLElBQVdELElBQ2ZJLEVBQWNqUSxFQUFLN2pCLE9BQVMsRUFDNUJpWSxFQUFNdEksS0FBTWdrQixJQUdiLFNBQVdwQixFQUFLelosR0FDZnFHLEVBQU9hLEtBQU1sSCxHQUFNLFNBQVV5YSxFQUFHelIsR0FDMUI3Z0IsRUFBWTZnQixHQUNWdFUsRUFBUW9qQixRQUFXYSxFQUFLVSxJQUFLclEsSUFDbEMrQixFQUFLbFUsS0FBTW1TLEdBRURBLEdBQU9BLEVBQUk5aEIsUUFBNEIsV0FBbEJrZixFQUFRNEMsSUFHeEN5USxFQUFLelEsTUFUUixDQVlLeGQsV0FFQXF2QixJQUFXRCxHQUNmSyxLQUdLdjBCLE1BSVJ5MEIsT0FBUSxXQVlQLE9BWEE5VSxFQUFPYSxLQUFNMWIsV0FBVyxTQUFVaXZCLEVBQUd6UixHQUVwQyxJQURBLElBQUk1USxHQUNNQSxFQUFRaU8sRUFBT3NDLFFBQVNLLEVBQUsrQixFQUFNM1MsS0FBYSxHQUN6RDJTLEVBQUtyRCxPQUFRdFAsRUFBTyxHQUdmQSxHQUFTNGlCLEdBQ2JBLE9BSUl0MEIsTUFLUjJ5QixJQUFLLFNBQVUveUIsR0FDZCxPQUFPQSxFQUNOK2YsRUFBT3NDLFFBQVNyaUIsRUFBSXlrQixJQUFVLEVBQzlCQSxFQUFLN2pCLE9BQVMsR0FJaEJrMEIsTUFBTyxXQUlOLE9BSEtyUSxJQUNKQSxFQUFPLElBRURya0IsTUFNUjIwQixRQUFTLFdBR1IsT0FGQU4sRUFBUzViLEVBQVEsR0FDakI0TCxFQUFPOFAsRUFBUyxHQUNUbjBCLE1BRVJ1bUIsU0FBVSxXQUNULE9BQVFsQyxHQU1UdVEsS0FBTSxXQUtMLE9BSkFQLEVBQVM1YixFQUFRLEdBQ1gwYixHQUFXRCxJQUNoQjdQLEVBQU84UCxFQUFTLElBRVZuMEIsTUFFUnEwQixPQUFRLFdBQ1AsUUFBU0EsR0FJVlEsU0FBVSxTQUFVaFYsRUFBU3ZHLEdBUzVCLE9BUk0rYSxJQUVML2EsRUFBTyxDQUFFdUcsR0FEVHZHLEVBQU9BLEdBQVEsSUFDUXBNLE1BQVFvTSxFQUFLcE0sUUFBVW9NLEdBQzlDYixFQUFNdEksS0FBTW1KLEdBQ040YSxHQUNMSyxLQUdLdjBCLE1BSVJ1MEIsS0FBTSxXQUVMLE9BREF0QyxFQUFLNEMsU0FBVTcwQixLQUFNOEUsV0FDZDlFLE1BSVJvMEIsTUFBTyxXQUNOLFFBQVNBLElBSVosT0FBT25DLEdBNENSdFMsRUFBT2xDLE9BQVEsQ0FFZHFYLFNBQVUsU0FBVUMsR0FDbkIsSUFBSUMsRUFBUyxDQUlYLENBQUUsU0FBVSxXQUFZclYsRUFBT21VLFVBQVcsVUFDekNuVSxFQUFPbVUsVUFBVyxVQUFZLEdBQy9CLENBQUUsVUFBVyxPQUFRblUsRUFBT21VLFVBQVcsZUFDdENuVSxFQUFPbVUsVUFBVyxlQUFpQixFQUFHLFlBQ3ZDLENBQUUsU0FBVSxPQUFRblUsRUFBT21VLFVBQVcsZUFDckNuVSxFQUFPbVUsVUFBVyxlQUFpQixFQUFHLGFBRXhDdm9CLEVBQVEsVUFDUnVSLEVBQVUsQ0FDVHZSLE1BQU8sV0FDTixPQUFPQSxHQUVSMHBCLE9BQVEsV0FFUCxPQURBQyxFQUFTdFIsS0FBTTllLFdBQVkrdUIsS0FBTS91QixXQUMxQjlFLE1BRVIsTUFBUyxTQUFVSixHQUNsQixPQUFPa2QsRUFBUXhiLEtBQU0sS0FBTTFCLElBSTVCdTFCLEtBQU0sV0FDTCxJQUFJQyxFQUFNdHdCLFVBRVYsT0FBTzZhLEVBQU9tVixVQUFVLFNBQVVPLEdBQ2pDMVYsRUFBT2EsS0FBTXdVLEdBQVEsU0FBVXZTLEVBQUk2UyxHQUdsQyxJQUFJMTFCLEVBQUs2QixFQUFZMnpCLEVBQUtFLEVBQU8sTUFBV0YsRUFBS0UsRUFBTyxJQUt4REosRUFBVUksRUFBTyxLQUFPLFdBQ3ZCLElBQUlDLEVBQVczMUIsR0FBTUEsRUFBRzJaLE1BQU92WixLQUFNOEUsV0FDaEN5d0IsR0FBWTl6QixFQUFZOHpCLEVBQVN6WSxTQUNyQ3lZLEVBQVN6WSxVQUNQMFksU0FBVUgsRUFBU0ksUUFDbkI3UixLQUFNeVIsRUFBU2gwQixTQUNmd3lCLEtBQU13QixFQUFTaFksUUFFakJnWSxFQUFVQyxFQUFPLEdBQU0sUUFDdEJ0MUIsS0FDQUosRUFBSyxDQUFFMjFCLEdBQWF6d0IsaUJBS3hCc3dCLEVBQU0sUUFDSHRZLFdBRUx4YixLQUFNLFNBQVU0YixFQUFhQyxFQUFZdVksR0FDeEMsSUFBSUMsRUFBVyxFQUNmLFNBQVN0MEIsRUFBU3UwQixFQUFPVixFQUFVak4sRUFBUzROLEdBQzNDLE9BQU8sV0FDTixJQUFJQyxFQUFPOTFCLEtBQ1ZzWixFQUFPeFUsVUFDUGl4QixFQUFhLFdBQ1osSUFBSVIsRUFBVWowQixFQUtkLEtBQUtzMEIsRUFBUUQsR0FBYixDQVFBLElBSkFKLEVBQVd0TixFQUFRMU8sTUFBT3VjLEVBQU14YyxNQUlkNGIsRUFBU3BZLFVBQzFCLE1BQU0sSUFBSWhXLFVBQVcsNEJBT3RCeEYsRUFBT2kwQixJQUtnQixpQkFBYkEsR0FDWSxtQkFBYkEsSUFDUkEsRUFBU2owQixLQUdMRyxFQUFZSCxHQUdYdTBCLEVBQ0p2MEIsRUFBSzlELEtBQ0orM0IsRUFDQWwwQixFQUFTczBCLEVBQVVULEVBQVUxQixFQUFVcUMsR0FDdkN4MEIsRUFBU3MwQixFQUFVVCxFQUFVekIsRUFBU29DLEtBT3ZDRixJQUVBcjBCLEVBQUs5RCxLQUNKKzNCLEVBQ0FsMEIsRUFBU3MwQixFQUFVVCxFQUFVMUIsRUFBVXFDLEdBQ3ZDeDBCLEVBQVNzMEIsRUFBVVQsRUFBVXpCLEVBQVNvQyxHQUN0Q3gwQixFQUFTczBCLEVBQVVULEVBQVUxQixFQUM1QjBCLEVBQVNjLGVBU1AvTixJQUFZdUwsSUFDaEJzQyxPQUFPL3dCLEVBQ1B1VSxFQUFPLENBQUVpYyxLQUtSTSxHQUFXWCxFQUFTZSxhQUFlSCxFQUFNeGMsTUFLN0NyQixFQUFVNGQsRUFDVEUsRUFDQSxXQUNDLElBQ0NBLElBQ0MsTUFBUWh1QixHQUVKNFgsRUFBT21WLFNBQVNvQixlQUNwQnZXLEVBQU9tVixTQUFTb0IsY0FBZW51QixFQUM5QmtRLEVBQVFrZSxZQU1MUCxFQUFRLEdBQUtELElBSVoxTixJQUFZd0wsSUFDaEJxQyxPQUFPL3dCLEVBQ1B1VSxFQUFPLENBQUV2UixJQUdWbXRCLEVBQVNrQixXQUFZTixFQUFNeGMsTUFTM0JzYyxFQUNKM2QsS0FLSzBILEVBQU9tVixTQUFTdUIsZUFDcEJwZSxFQUFRa2UsV0FBYXhXLEVBQU9tVixTQUFTdUIsZ0JBRXRDejFCLEVBQU9ZLFdBQVl5VyxLQUt0QixPQUFPMEgsRUFBT21WLFVBQVUsU0FBVU8sR0FHakNMLEVBQVEsR0FBSyxHQUFJakMsSUFDaEIxeEIsRUFDQyxFQUNBZzBCLEVBQ0E1ekIsRUFBWWkwQixHQUNYQSxFQUNBbEMsRUFDRDZCLEVBQVNXLGFBS1hoQixFQUFRLEdBQUssR0FBSWpDLElBQ2hCMXhCLEVBQ0MsRUFDQWcwQixFQUNBNXpCLEVBQVl5YixHQUNYQSxFQUNBc1csSUFLSHdCLEVBQVEsR0FBSyxHQUFJakMsSUFDaEIxeEIsRUFDQyxFQUNBZzBCLEVBQ0E1ekIsRUFBWTBiLEdBQ1hBLEVBQ0FzVyxPQUdBM1csV0FLTEEsUUFBUyxTQUFVdFYsR0FDbEIsT0FBYyxNQUFQQSxFQUFjbVksRUFBT2xDLE9BQVFqVyxFQUFLc1YsR0FBWUEsSUFHdkRvWSxFQUFXLEdBa0VaLE9BL0RBdlYsRUFBT2EsS0FBTXdVLEdBQVEsU0FBVTMzQixFQUFHaTRCLEdBQ2pDLElBQUlqUixFQUFPaVIsRUFBTyxHQUNqQmdCLEVBQWNoQixFQUFPLEdBS3RCeFksRUFBU3dZLEVBQU8sSUFBUWpSLEVBQUswTyxJQUd4QnVELEdBQ0pqUyxFQUFLME8sS0FDSixXQUlDeG5CLEVBQVErcUIsSUFLVHRCLEVBQVEsRUFBSTMzQixHQUFLLEdBQUlzM0IsUUFJckJLLEVBQVEsRUFBSTMzQixHQUFLLEdBQUlzM0IsUUFHckJLLEVBQVEsR0FBSyxHQUFJSixLQUdqQkksRUFBUSxHQUFLLEdBQUlKLE1BT25CdlEsRUFBSzBPLElBQUt1QyxFQUFPLEdBQUlmLE1BS3JCVyxFQUFVSSxFQUFPLElBQVEsV0FFeEIsT0FEQUosRUFBVUksRUFBTyxHQUFNLFFBQVV0MUIsT0FBU2sxQixPQUFXbndCLEVBQVkvRSxLQUFNOEUsV0FDaEU5RSxNQU1SazFCLEVBQVVJLEVBQU8sR0FBTSxRQUFXalIsRUFBS3dRLFlBSXhDL1gsRUFBUUEsUUFBU29ZLEdBR1pILEdBQ0pBLEVBQUt2M0IsS0FBTTAzQixFQUFVQSxHQUlmQSxHQUlScUIsS0FBTSxTQUFVQyxHQUNmLElBR0NDLEVBQVkzeEIsVUFBVXRFLE9BR3RCbkQsRUFBSW81QixFQUdKQyxFQUFrQjdwQixNQUFPeFAsR0FDekJzNUIsRUFBZ0J6cEIsRUFBTTFQLEtBQU1zSCxXQUc1QjJPLEVBQVVrTSxFQUFPbVYsV0FHakI4QixFQUFhLFNBQVV2NUIsR0FDdEIsT0FBTyxTQUFVaUIsR0FDaEJvNEIsRUFBaUJyNUIsR0FBTTJDLEtBQ3ZCMjJCLEVBQWV0NUIsR0FBTXlILFVBQVV0RSxPQUFTLEVBQUkwTSxFQUFNMVAsS0FBTXNILFdBQWN4RyxJQUM1RG00QixHQUNUaGpCLEVBQVF3aUIsWUFBYVMsRUFBaUJDLEtBTTFDLEdBQUtGLEdBQWEsSUFDakI5QyxFQUFZNkMsRUFBYS9pQixFQUFRbVEsS0FBTWdULEVBQVl2NUIsSUFBTWdFLFFBQVNvUyxFQUFRNEosUUFDeEVvWixHQUd1QixZQUFwQmhqQixFQUFRbEksU0FDWjlKLEVBQVlrMUIsRUFBZXQ1QixJQUFPczVCLEVBQWV0NUIsR0FBSWlFLE9BRXJELE9BQU9tUyxFQUFRblMsT0FLakIsS0FBUWpFLEtBQ1BzMkIsRUFBWWdELEVBQWV0NUIsR0FBS3U1QixFQUFZdjVCLEdBQUtvVyxFQUFRNEosUUFHMUQsT0FBTzVKLEVBQVFxSixhQU9qQixJQUFJK1osRUFBYyx5REFFbEJsWCxFQUFPbVYsU0FBU29CLGNBQWdCLFNBQVU5WSxFQUFPMFosR0FJM0NsMkIsRUFBTzRNLFNBQVc1TSxFQUFPNE0sUUFBUUMsTUFBUTJQLEdBQVN5WixFQUFZdjNCLEtBQU04ZCxFQUFNeGYsT0FDOUVnRCxFQUFPNE0sUUFBUUMsS0FBTSw4QkFBZ0MyUCxFQUFNMlosUUFBUzNaLEVBQU0wWixNQUFPQSxJQU9uRm5YLEVBQU9xWCxlQUFpQixTQUFVNVosR0FDakN4YyxFQUFPWSxZQUFZLFdBQ2xCLE1BQU00YixNQVFSLElBQUk2WixFQUFZdFgsRUFBT21WLFdBa0R2QixTQUFTb0MsSUFDUngyQixFQUFTOFAsb0JBQXFCLG1CQUFvQjBtQixHQUNsRHQyQixFQUFPNFAsb0JBQXFCLE9BQVEwbUIsR0FDcEN2WCxFQUFPMFMsUUFuRFIxUyxFQUFPL2YsR0FBR3l5QixNQUFRLFNBQVV6eUIsR0FZM0IsT0FWQXEzQixFQUNFMzFCLEtBQU0xQixHQUtOdTNCLE9BQU8sU0FBVS9aLEdBQ2pCdUMsRUFBT3FYLGVBQWdCNVosTUFHbEJwZCxNQUdSMmYsRUFBT2xDLE9BQVEsQ0FHZGdFLFNBQVMsRUFJVDJWLFVBQVcsRUFHWC9FLE1BQU8sU0FBVWdGLEtBR0YsSUFBVEEsSUFBa0IxWCxFQUFPeVgsVUFBWXpYLEVBQU84QixXQUtqRDlCLEVBQU84QixTQUFVLEdBR0gsSUFBVDRWLEtBQW1CMVgsRUFBT3lYLFVBQVksR0FLM0NILEVBQVVoQixZQUFhdjFCLEVBQVUsQ0FBRWlmLFFBSXJDQSxFQUFPMFMsTUFBTS93QixLQUFPMjFCLEVBQVUzMUIsS0FhRCxhQUF4QlosRUFBUzQyQixZQUNhLFlBQXhCNTJCLEVBQVM0MkIsYUFBNkI1MkIsRUFBUzJDLGdCQUFnQmswQixTQUdqRTMyQixFQUFPWSxXQUFZbWUsRUFBTzBTLFFBSzFCM3hCLEVBQVNpUCxpQkFBa0IsbUJBQW9CdW5CLEdBRy9DdDJCLEVBQU8rTyxpQkFBa0IsT0FBUXVuQixJQVFsQyxJQUFJTSxFQUFTLFNBQVVwWCxFQUFPeGdCLEVBQUloQixFQUFLTixFQUFPbTVCLEVBQVdDLEVBQVVDLEdBQ2xFLElBQUl0NkIsRUFBSSxFQUNQK1csRUFBTWdNLEVBQU01ZixPQUNabzNCLEVBQWMsTUFBUGg1QixFQUdSLEdBQXVCLFdBQWxCOGdCLEVBQVE5Z0IsR0FFWixJQUFNdkIsS0FETm82QixHQUFZLEVBQ0Q3NEIsRUFDVjQ0QixFQUFRcFgsRUFBT3hnQixFQUFJdkMsRUFBR3VCLEVBQUt2QixJQUFLLEVBQU1xNkIsRUFBVUMsUUFJM0MsUUFBZTV5QixJQUFWekcsSUFDWG01QixHQUFZLEVBRU5oMkIsRUFBWW5ELEtBQ2pCcTVCLEdBQU0sR0FHRkMsSUFHQ0QsR0FDSi8zQixFQUFHcEMsS0FBTTRpQixFQUFPOWhCLEdBQ2hCc0IsRUFBSyxPQUlMZzRCLEVBQU9oNEIsRUFDUEEsRUFBSyxTQUFVa2UsRUFBTStaLEVBQU12NUIsR0FDMUIsT0FBT3M1QixFQUFLcDZCLEtBQU1taUIsRUFBUTdCLEdBQVF4ZixNQUtoQ3NCLEdBQ0osS0FBUXZDLEVBQUkrVyxFQUFLL1csSUFDaEJ1QyxFQUNDd2dCLEVBQU8vaUIsR0FBS3VCLEVBQUsrNEIsRUFDaEJyNUIsRUFDQUEsRUFBTWQsS0FBTTRpQixFQUFPL2lCLEdBQUtBLEVBQUd1QyxFQUFJd2dCLEVBQU8vaUIsR0FBS3VCLEtBTWhELE9BQUs2NEIsRUFDR3JYLEVBSUh3WCxFQUNHaDRCLEVBQUdwQyxLQUFNNGlCLEdBR1ZoTSxFQUFNeFUsRUFBSXdnQixFQUFPLEdBQUt4aEIsR0FBUTg0QixHQUtsQ0ksRUFBWSxRQUNmQyxFQUFhLFlBR2QsU0FBU0MsRUFBWUMsRUFBTUMsR0FDMUIsT0FBT0EsRUFBT3BwQixjQU1mLFNBQVNxcEIsRUFBV0MsR0FDbkIsT0FBT0EsRUFBTzM0QixRQUFTcTRCLEVBQVcsT0FBUXI0QixRQUFTczRCLEVBQVlDLEdBRWhFLElBQUlLLEVBQWEsU0FBVUMsR0FRMUIsT0FBMEIsSUFBbkJBLEVBQU14MkIsVUFBcUMsSUFBbkJ3MkIsRUFBTXgyQixZQUFzQncyQixFQUFNeDJCLFVBTWxFLFNBQVN5MkIsSUFDUnY0QixLQUFLdWhCLFFBQVU1QixFQUFPNEIsUUFBVWdYLEVBQUtDLE1BR3RDRCxFQUFLQyxJQUFNLEVBRVhELEVBQUt0NUIsVUFBWSxDQUVoQjBvQixNQUFPLFNBQVUyUSxHQUdoQixJQUFJaDZCLEVBQVFnNkIsRUFBT3Q0QixLQUFLdWhCLFNBNEJ4QixPQXpCTWpqQixJQUNMQSxFQUFRLEdBS0grNUIsRUFBWUMsS0FJWEEsRUFBTXgyQixTQUNWdzJCLEVBQU90NEIsS0FBS3VoQixTQUFZampCLEVBTXhCUCxPQUFPQyxlQUFnQnM2QixFQUFPdDRCLEtBQUt1aEIsUUFBUyxDQUMzQ2pqQixNQUFPQSxFQUNQOEksY0FBYyxNQU1YOUksR0FFUm02QixJQUFLLFNBQVVILEVBQU90ckIsRUFBTTFPLEdBQzNCLElBQUk2TyxFQUNId2EsRUFBUTNuQixLQUFLMm5CLE1BQU8yUSxHQUlyQixHQUFxQixpQkFBVHRyQixFQUNYMmEsRUFBT3dRLEVBQVduckIsSUFBVzFPLE9BTTdCLElBQU02TyxLQUFRSCxFQUNiMmEsRUFBT3dRLEVBQVdockIsSUFBV0gsRUFBTUcsR0FHckMsT0FBT3dhLEdBRVJ6cEIsSUFBSyxTQUFVbzZCLEVBQU8xNUIsR0FDckIsWUFBZW1HLElBQVJuRyxFQUNOb0IsS0FBSzJuQixNQUFPMlEsR0FHWkEsRUFBT3Q0QixLQUFLdWhCLFVBQWErVyxFQUFPdDRCLEtBQUt1aEIsU0FBVzRXLEVBQVd2NUIsS0FFN0Q0NEIsT0FBUSxTQUFVYyxFQUFPMTVCLEVBQUtOLEdBYTdCLFlBQWF5RyxJQUFSbkcsR0FDQ0EsR0FBc0IsaUJBQVJBLFFBQWdDbUcsSUFBVnpHLEVBRWxDMEIsS0FBSzlCLElBQUtvNkIsRUFBTzE1QixJQVN6Qm9CLEtBQUt5NEIsSUFBS0gsRUFBTzE1QixFQUFLTixRQUlMeUcsSUFBVnpHLEVBQXNCQSxFQUFRTSxJQUV0QzYxQixPQUFRLFNBQVU2RCxFQUFPMTVCLEdBQ3hCLElBQUl2QixFQUNIc3FCLEVBQVEyUSxFQUFPdDRCLEtBQUt1aEIsU0FFckIsUUFBZXhjLElBQVY0aUIsRUFBTCxDQUlBLFFBQWE1aUIsSUFBUm5HLEVBQW9CLENBa0J4QnZCLEdBWEN1QixFQUpJaU8sTUFBTXlVLFFBQVMxaUIsR0FJYkEsRUFBSWdNLElBQUt1dEIsSUFFZnY1QixFQUFNdTVCLEVBQVd2NUIsTUFJSitvQixFQUNaLENBQUUvb0IsR0FDQUEsRUFBSTBPLE1BQU9pbUIsSUFBbUIsSUFHMUIveUIsT0FFUixLQUFRbkQsWUFDQXNxQixFQUFPL29CLEVBQUt2QixVQUtSMEgsSUFBUm5HLEdBQXFCK2dCLEVBQU9rQyxjQUFlOEYsTUFNMUMyUSxFQUFNeDJCLFNBQ1Z3MkIsRUFBT3Q0QixLQUFLdWhCLGNBQVl4YyxTQUVqQnV6QixFQUFPdDRCLEtBQUt1aEIsWUFJdEJtWCxRQUFTLFNBQVVKLEdBQ2xCLElBQUkzUSxFQUFRMlEsRUFBT3Q0QixLQUFLdWhCLFNBQ3hCLFlBQWlCeGMsSUFBVjRpQixJQUF3QmhJLEVBQU9rQyxjQUFlOEYsS0FHdkQsSUFBSWdSLEVBQVcsSUFBSUosRUFFZkssRUFBVyxJQUFJTCxFQWNmTSxFQUFTLGdDQUNaQyxHQUFhLFNBMkJkLFNBQVNDLEdBQVVqYixFQUFNbGYsRUFBS29PLEdBQzdCLElBQUlwUCxFQUlKLFFBQWNtSCxJQUFUaUksR0FBd0MsSUFBbEI4USxFQUFLaGMsU0FJL0IsR0FIQWxFLEVBQU8sUUFBVWdCLEVBQUlhLFFBQVNxNUIsR0FBWSxPQUFReGtCLGNBRzdCLGlCQUZyQnRILEVBQU84USxFQUFLeUIsYUFBYzNoQixJQUVNLENBQy9CLElBQ0NvUCxFQXBDSixTQUFrQkEsR0FDakIsTUFBYyxTQUFUQSxHQUlTLFVBQVRBLElBSVMsU0FBVEEsRUFDRyxLQUlIQSxLQUFVQSxFQUFPLElBQ2JBLEVBR0o2ckIsRUFBT3Y1QixLQUFNME4sR0FDVmdzQixLQUFLQyxNQUFPanNCLEdBR2JBLEdBY0drc0IsQ0FBU2xzQixHQUNmLE1BQVFqRixJQUdWNndCLEVBQVNILElBQUszYSxFQUFNbGYsRUFBS29PLFFBRXpCQSxPQUFPakksRUFHVCxPQUFPaUksRUFHUjJTLEVBQU9sQyxPQUFRLENBQ2RpYixRQUFTLFNBQVU1YSxHQUNsQixPQUFPOGEsRUFBU0YsUUFBUzVhLElBQVU2YSxFQUFTRCxRQUFTNWEsSUFHdEQ5USxLQUFNLFNBQVU4USxFQUFNbGdCLEVBQU1vUCxHQUMzQixPQUFPNHJCLEVBQVNwQixPQUFRMVosRUFBTWxnQixFQUFNb1AsSUFHckNtc0IsV0FBWSxTQUFVcmIsRUFBTWxnQixHQUMzQmc3QixFQUFTbkUsT0FBUTNXLEVBQU1sZ0IsSUFLeEJ3N0IsTUFBTyxTQUFVdGIsRUFBTWxnQixFQUFNb1AsR0FDNUIsT0FBTzJyQixFQUFTbkIsT0FBUTFaLEVBQU1sZ0IsRUFBTW9QLElBR3JDcXNCLFlBQWEsU0FBVXZiLEVBQU1sZ0IsR0FDNUIrNkIsRUFBU2xFLE9BQVEzVyxFQUFNbGdCLE1BSXpCK2hCLEVBQU8vZixHQUFHNmQsT0FBUSxDQUNqQnpRLEtBQU0sU0FBVXBPLEVBQUtOLEdBQ3BCLElBQUlqQixFQUFHTyxFQUFNb1AsRUFDWjhRLEVBQU85ZCxLQUFNLEdBQ2Jnb0IsRUFBUWxLLEdBQVFBLEVBQUtoUSxXQUd0QixRQUFhL0ksSUFBUm5HLEVBQW9CLENBQ3hCLEdBQUtvQixLQUFLUSxTQUNUd00sRUFBTzRyQixFQUFTMTZCLElBQUs0ZixHQUVFLElBQWxCQSxFQUFLaGMsV0FBbUI2MkIsRUFBU3o2QixJQUFLNGYsRUFBTSxpQkFBbUIsQ0FFbkUsSUFEQXpnQixFQUFJMnFCLEVBQU14bkIsT0FDRm5ELEtBSUYycUIsRUFBTzNxQixJQUVzQixLQURqQ08sRUFBT29xQixFQUFPM3FCLEdBQUlPLE1BQ1JxRCxRQUFTLFdBQ2xCckQsRUFBT3U2QixFQUFXdjZCLEVBQUtzUCxNQUFPLElBQzlCNnJCLEdBQVVqYixFQUFNbGdCLEVBQU1vUCxFQUFNcFAsS0FJL0IrNkIsRUFBU0YsSUFBSzNhLEVBQU0sZ0JBQWdCLEdBSXRDLE9BQU85USxFQUlSLE1BQW9CLGlCQUFScE8sRUFDSm9CLEtBQUt3Z0IsTUFBTSxXQUNqQm9ZLEVBQVNILElBQUt6NEIsS0FBTXBCLE1BSWY0NEIsRUFBUXgzQixNQUFNLFNBQVUxQixHQUM5QixJQUFJME8sRUFPSixHQUFLOFEsUUFBa0IvWSxJQUFWekcsRUFLWixZQUFjeUcsS0FEZGlJLEVBQU80ckIsRUFBUzE2QixJQUFLNGYsRUFBTWxmLFVBUWJtRyxLQURkaUksRUFBTytyQixHQUFVamIsRUFBTWxmLElBTGZvTyxPQVdSLEVBSURoTixLQUFLd2dCLE1BQU0sV0FHVm9ZLEVBQVNILElBQUt6NEIsS0FBTXBCLEVBQUtOLFFBRXhCLEtBQU1BLEVBQU93RyxVQUFVdEUsT0FBUyxFQUFHLE1BQU0sSUFHN0MyNEIsV0FBWSxTQUFVdjZCLEdBQ3JCLE9BQU9vQixLQUFLd2dCLE1BQU0sV0FDakJvWSxFQUFTbkUsT0FBUXowQixLQUFNcEIsU0FNMUIrZ0IsRUFBT2xDLE9BQVEsQ0FDZGhGLE1BQU8sU0FBVXFGLEVBQU1jLEVBQU01UixHQUM1QixJQUFJeUwsRUFFSixHQUFLcUYsRUFZSixPQVhBYyxHQUFTQSxHQUFRLE1BQVMsUUFDMUJuRyxFQUFRa2dCLEVBQVN6NkIsSUFBSzRmLEVBQU1jLEdBR3ZCNVIsS0FDRXlMLEdBQVM1TCxNQUFNeVUsUUFBU3RVLEdBQzdCeUwsRUFBUWtnQixFQUFTbkIsT0FBUTFaLEVBQU1jLEVBQU1lLEVBQU9vQyxVQUFXL1UsSUFFdkR5TCxFQUFNdEksS0FBTW5ELElBR1B5TCxHQUFTLElBSWxCNmdCLFFBQVMsU0FBVXhiLEVBQU1jLEdBQ3hCQSxFQUFPQSxHQUFRLEtBRWYsSUFBSW5HLEVBQVFrSCxFQUFPbEgsTUFBT3FGLEVBQU1jLEdBQy9CMmEsRUFBYzlnQixFQUFNalksT0FDcEJaLEVBQUs2WSxFQUFNMUYsUUFDWHltQixFQUFRN1osRUFBTzhaLFlBQWEzYixFQUFNYyxHQU12QixlQUFQaGYsSUFDSkEsRUFBSzZZLEVBQU0xRixRQUNYd21CLEtBR0kzNUIsSUFJVSxPQUFUZ2YsR0FDSm5HLEVBQU1vRSxRQUFTLHFCQUlUMmMsRUFBTUUsS0FDYjk1QixFQUFHcEMsS0FBTXNnQixHQXBCRixXQUNONkIsRUFBTzJaLFFBQVN4YixFQUFNYyxLQW1CRjRhLEtBR2hCRCxHQUFlQyxHQUNwQkEsRUFBTTlFLE1BQU1ILFFBS2RrRixZQUFhLFNBQVUzYixFQUFNYyxHQUM1QixJQUFJaGdCLEVBQU1nZ0IsRUFBTyxhQUNqQixPQUFPK1osRUFBU3o2QixJQUFLNGYsRUFBTWxmLElBQVMrNUIsRUFBU25CLE9BQVExWixFQUFNbGYsRUFBSyxDQUMvRDgxQixNQUFPL1UsRUFBT21VLFVBQVcsZUFBZ0JmLEtBQUssV0FDN0M0RixFQUFTbEUsT0FBUTNXLEVBQU0sQ0FBRWMsRUFBTyxRQUFTaGdCLFlBTTdDK2dCLEVBQU8vZixHQUFHNmQsT0FBUSxDQUNqQmhGLE1BQU8sU0FBVW1HLEVBQU01UixHQUN0QixJQUFJMnNCLEVBQVMsRUFRYixNQU5xQixpQkFBVC9hLElBQ1g1UixFQUFPNFIsRUFDUEEsRUFBTyxLQUNQK2EsS0FHSTcwQixVQUFVdEUsT0FBU201QixFQUNoQmhhLEVBQU9sSCxNQUFPelksS0FBTSxHQUFLNGUsUUFHakI3WixJQUFUaUksRUFDTmhOLEtBQ0FBLEtBQUt3Z0IsTUFBTSxXQUNWLElBQUkvSCxFQUFRa0gsRUFBT2xILE1BQU96WSxLQUFNNGUsRUFBTTVSLEdBR3RDMlMsRUFBTzhaLFlBQWF6NUIsS0FBTTRlLEdBRVosT0FBVEEsR0FBZ0MsZUFBZm5HLEVBQU8sSUFDNUJrSCxFQUFPMlosUUFBU3Q1QixLQUFNNGUsT0FJMUIwYSxRQUFTLFNBQVUxYSxHQUNsQixPQUFPNWUsS0FBS3dnQixNQUFNLFdBQ2pCYixFQUFPMlosUUFBU3Q1QixLQUFNNGUsT0FHeEJnYixXQUFZLFNBQVVoYixHQUNyQixPQUFPNWUsS0FBS3lZLE1BQU9tRyxHQUFRLEtBQU0sS0FLbEM5QixRQUFTLFNBQVU4QixFQUFNcFgsR0FDeEIsSUFBSWtpQixFQUNIbVEsRUFBUSxFQUNSQyxFQUFRbmEsRUFBT21WLFdBQ2ZwSyxFQUFXMXFCLEtBQ1gzQyxFQUFJMkMsS0FBS1EsT0FDVGEsRUFBVSxhQUNDdzRCLEdBQ1RDLEVBQU03RCxZQUFhdkwsRUFBVSxDQUFFQSxLQVVsQyxJQU5xQixpQkFBVDlMLElBQ1hwWCxFQUFNb1gsRUFDTkEsT0FBTzdaLEdBRVI2WixFQUFPQSxHQUFRLEtBRVB2aEIsTUFDUHFzQixFQUFNaVAsRUFBU3o2QixJQUFLd3NCLEVBQVVydEIsR0FBS3VoQixFQUFPLGdCQUM5QjhLLEVBQUlnTCxRQUNmbUYsSUFDQW5RLEVBQUlnTCxNQUFNM0IsSUFBSzF4QixJQUlqQixPQURBQSxJQUNPeTRCLEVBQU1oZCxRQUFTdFYsTUFHeEIsSUFBSXV5QixHQUFPLHNDQUEwQ3B5QixPQUVqRHF5QixHQUFVLElBQUl0VixPQUFRLGlCQUFtQnFWLEdBQU8sY0FBZSxLQUcvREUsR0FBWSxDQUFFLE1BQU8sUUFBUyxTQUFVLFFBRXhDNTJCLEdBQWtCM0MsRUFBUzJDLGdCQUkxQjYyQixHQUFhLFNBQVVwYyxHQUN6QixPQUFPNkIsRUFBT2xiLFNBQVVxWixFQUFLcmQsY0FBZXFkLElBRTdDcWMsR0FBVyxDQUFFQSxVQUFVLEdBT25COTJCLEdBQWdCKzJCLGNBQ3BCRixHQUFhLFNBQVVwYyxHQUN0QixPQUFPNkIsRUFBT2xiLFNBQVVxWixFQUFLcmQsY0FBZXFkLElBQzNDQSxFQUFLc2MsWUFBYUQsTUFBZXJjLEVBQUtyZCxnQkFHMUMsSUFBSTQ1QixHQUFxQixTQUFVdmMsRUFBTW5VLEdBT3ZDLE1BQThCLFVBSDlCbVUsRUFBT25VLEdBQU1tVSxHQUdEN08sTUFBTXFyQixTQUNNLEtBQXZCeGMsRUFBSzdPLE1BQU1xckIsU0FNWEosR0FBWXBjLElBRXNCLFNBQWxDNkIsRUFBTzFmLElBQUs2ZCxFQUFNLFlBS3JCLFNBQVN5YyxHQUFXemMsRUFBTTNRLEVBQU1xdEIsRUFBWUMsR0FDM0MsSUFBSUMsRUFBVUMsRUFDYkMsRUFBZ0IsR0FDaEJDLEVBQWVKLEVBQ2QsV0FDQyxPQUFPQSxFQUFNcHRCLE9BRWQsV0FDQyxPQUFPc1MsRUFBTzFmLElBQUs2ZCxFQUFNM1EsRUFBTSxLQUVqQzJ0QixFQUFVRCxJQUNWaHFCLEVBQU8ycEIsR0FBY0EsRUFBWSxLQUFTN2EsRUFBT29iLFVBQVc1dEIsR0FBUyxHQUFLLE1BRzFFNnRCLEVBQWdCbGQsRUFBS2hjLFdBQ2xCNmQsRUFBT29iLFVBQVc1dEIsSUFBbUIsT0FBVDBELElBQWtCaXFCLElBQ2hEZCxHQUFRaFQsS0FBTXJILEVBQU8xZixJQUFLNmQsRUFBTTNRLElBRWxDLEdBQUs2dEIsR0FBaUJBLEVBQWUsS0FBUW5xQixFQUFPLENBWW5ELElBUkFpcUIsR0FBb0IsRUFHcEJqcUIsRUFBT0EsR0FBUW1xQixFQUFlLEdBRzlCQSxHQUFpQkYsR0FBVyxFQUVwQkYsS0FJUGpiLEVBQU8xUSxNQUFPNk8sRUFBTTNRLEVBQU02dEIsRUFBZ0JucUIsSUFDbkMsRUFBSThwQixJQUFZLEdBQU1BLEVBQVFFLElBQWlCQyxHQUFXLE1BQVcsSUFDM0VGLEVBQWdCLEdBRWpCSSxHQUFnQ0wsRUFJakNLLEdBQWdDLEVBQ2hDcmIsRUFBTzFRLE1BQU82TyxFQUFNM1EsRUFBTTZ0QixFQUFnQm5xQixHQUcxQzJwQixFQUFhQSxHQUFjLEdBZ0I1QixPQWJLQSxJQUNKUSxHQUFpQkEsSUFBa0JGLEdBQVcsRUFHOUNKLEVBQVdGLEVBQVksR0FDdEJRLEdBQWtCUixFQUFZLEdBQU0sR0FBTUEsRUFBWSxJQUNyREEsRUFBWSxHQUNUQyxJQUNKQSxFQUFNNXBCLEtBQU9BLEVBQ2I0cEIsRUFBTXYyQixNQUFRODJCLEVBQ2RQLEVBQU10MkIsSUFBTXUyQixJQUdQQSxFQUlSLElBQUlPLEdBQW9CLEdBRXhCLFNBQVNDLEdBQW1CcGQsR0FDM0IsSUFBSW9SLEVBQ0hoUSxFQUFNcEIsRUFBS3JkLGNBQ1h5QixFQUFXNGIsRUFBSzViLFNBQ2hCbzRCLEVBQVVXLEdBQW1CLzRCLEdBRTlCLE9BQUtvNEIsSUFJTHBMLEVBQU9oUSxFQUFJNWMsS0FBS21kLFlBQWFQLEVBQUlHLGNBQWVuZCxJQUNoRG80QixFQUFVM2EsRUFBTzFmLElBQUtpdkIsRUFBTSxXQUU1QkEsRUFBSy9zQixXQUFXb04sWUFBYTJmLEdBRVosU0FBWm9MLElBQ0pBLEVBQVUsU0FFWFcsR0FBbUIvNEIsR0FBYW80QixFQUV6QkEsR0FHUixTQUFTYSxHQUFVelEsRUFBVTBRLEdBTzVCLElBTkEsSUFBSWQsRUFBU3hjLEVBQ1p1ZCxFQUFTLEdBQ1QzcEIsRUFBUSxFQUNSbFIsRUFBU2txQixFQUFTbHFCLE9BR1hrUixFQUFRbFIsRUFBUWtSLEtBQ3ZCb00sRUFBTzRNLEVBQVVoWixJQUNOekMsUUFJWHFyQixFQUFVeGMsRUFBSzdPLE1BQU1xckIsUUFDaEJjLEdBS2EsU0FBWmQsSUFDSmUsRUFBUTNwQixHQUFVaW5CLEVBQVN6NkIsSUFBSzRmLEVBQU0sWUFBZSxLQUMvQ3VkLEVBQVEzcEIsS0FDYm9NLEVBQUs3TyxNQUFNcXJCLFFBQVUsS0FHSyxLQUF2QnhjLEVBQUs3TyxNQUFNcXJCLFNBQWtCRCxHQUFvQnZjLEtBQ3JEdWQsRUFBUTNwQixHQUFVd3BCLEdBQW1CcGQsS0FHckIsU0FBWndjLElBQ0plLEVBQVEzcEIsR0FBVSxPQUdsQmluQixFQUFTRixJQUFLM2EsRUFBTSxVQUFXd2MsS0FNbEMsSUFBTTVvQixFQUFRLEVBQUdBLEVBQVFsUixFQUFRa1IsSUFDUixNQUFuQjJwQixFQUFRM3BCLEtBQ1pnWixFQUFVaFosR0FBUXpDLE1BQU1xckIsUUFBVWUsRUFBUTNwQixJQUk1QyxPQUFPZ1osRUFHUi9LLEVBQU8vZixHQUFHNmQsT0FBUSxDQUNqQjJkLEtBQU0sV0FDTCxPQUFPRCxHQUFVbjdCLE1BQU0sSUFFeEJpVyxLQUFNLFdBQ0wsT0FBT2tsQixHQUFVbjdCLE9BRWxCczdCLE9BQVEsU0FBVS92QixHQUNqQixNQUFzQixrQkFBVkEsRUFDSkEsRUFBUXZMLEtBQUtvN0IsT0FBU3A3QixLQUFLaVcsT0FHNUJqVyxLQUFLd2dCLE1BQU0sV0FDWjZaLEdBQW9CcjZCLE1BQ3hCMmYsRUFBUTNmLE1BQU9vN0IsT0FFZnpiLEVBQVEzZixNQUFPaVcsYUFLbkIsSUFVRXNsQixHQUNBNVIsR0FYRTZSLEdBQWlCLHdCQUVqQkMsR0FBVyxpQ0FFWEMsR0FBYyxxQ0FNaEJILEdBRGM3NkIsRUFBU2k3Qix5QkFDUmxjLFlBQWEvZSxFQUFTMmUsY0FBZSxTQUNwRHNLLEdBQVFqcEIsRUFBUzJlLGNBQWUsVUFNM0JoSSxhQUFjLE9BQVEsU0FDNUJzUyxHQUFNdFMsYUFBYyxVQUFXLFdBQy9Cc1MsR0FBTXRTLGFBQWMsT0FBUSxLQUU1QmtrQixHQUFJOWIsWUFBYWtLLElBSWpCbkwsRUFBUW9kLFdBQWFMLEdBQUlNLFdBQVcsR0FBT0EsV0FBVyxHQUFPclAsVUFBVWMsUUFJdkVpTyxHQUFJM1IsVUFBWSx5QkFDaEJwTCxFQUFRc2QsaUJBQW1CUCxHQUFJTSxXQUFXLEdBQU9yUCxVQUFVMkUsYUFLM0RvSyxHQUFJM1IsVUFBWSxvQkFDaEJwTCxFQUFRdWQsU0FBV1IsR0FBSS9PLFVBS3hCLElBQUl3UCxHQUFVLENBS2JDLE1BQU8sQ0FBRSxFQUFHLFVBQVcsWUFDdkJDLElBQUssQ0FBRSxFQUFHLG9CQUFxQix1QkFDL0JDLEdBQUksQ0FBRSxFQUFHLGlCQUFrQixvQkFDM0JDLEdBQUksQ0FBRSxFQUFHLHFCQUFzQix5QkFFL0JDLFNBQVUsQ0FBRSxFQUFHLEdBQUksS0FZcEIsU0FBU0MsR0FBUXpjLEVBQVM0SixHQUl6QixJQUFJcEosRUFZSixPQVRDQSxPQUQ0QyxJQUFqQ1IsRUFBUXFILHFCQUNickgsRUFBUXFILHFCQUFzQnVDLEdBQU8sVUFFSSxJQUE3QjVKLEVBQVE0SCxpQkFDcEI1SCxFQUFRNEgsaUJBQWtCZ0MsR0FBTyxLQUdqQyxRQUdNMWtCLElBQVIwa0IsR0FBcUJBLEdBQU92bkIsRUFBVTJkLEVBQVM0SixHQUM1QzlKLEVBQU9XLE1BQU8sQ0FBRVQsR0FBV1EsR0FHNUJBLEVBS1IsU0FBU2tjLEdBQWVuYyxFQUFPb2MsR0FJOUIsSUFIQSxJQUFJbi9CLEVBQUksRUFDUEMsRUFBSThpQixFQUFNNWYsT0FFSG5ELEVBQUlDLEVBQUdELElBQ2RzN0IsRUFBU0YsSUFDUnJZLEVBQU8vaUIsR0FDUCxjQUNDbS9CLEdBQWU3RCxFQUFTejZCLElBQUtzK0IsRUFBYW4vQixHQUFLLGVBMUNuRDIrQixHQUFRUyxNQUFRVCxHQUFRVSxNQUFRVixHQUFRVyxTQUFXWCxHQUFRWSxRQUFVWixHQUFRQyxNQUM3RUQsR0FBUWEsR0FBS2IsR0FBUUksR0FHZjVkLEVBQVF1ZCxTQUNiQyxHQUFRYyxTQUFXZCxHQUFRRCxPQUFTLENBQUUsRUFBRywrQkFBZ0MsY0EyQzFFLElBQUk3VyxHQUFRLFlBRVosU0FBUzZYLEdBQWUzYyxFQUFPUCxFQUFTbWQsRUFBU0MsRUFBV0MsR0FPM0QsSUFOQSxJQUFJcGYsRUFBTTRMLEVBQUtELEVBQUswVCxFQUFNQyxFQUFVcmMsRUFDbkNzYyxFQUFXeGQsRUFBUThiLHlCQUNuQjJCLEVBQVEsR0FDUmpnQyxFQUFJLEVBQ0pDLEVBQUk4aUIsRUFBTTVmLE9BRUhuRCxFQUFJQyxFQUFHRCxJQUdkLElBRkF5Z0IsRUFBT3NDLEVBQU8vaUIsS0FFUSxJQUFUeWdCLEVBR1osR0FBd0IsV0FBbkI0QixFQUFRNUIsR0FJWjZCLEVBQU9XLE1BQU9nZCxFQUFPeGYsRUFBS2hjLFNBQVcsQ0FBRWdjLEdBQVNBLFFBRzFDLEdBQU1vSCxHQUFNNWxCLEtBQU13ZSxHQUlsQixDQVVOLElBVEE0TCxFQUFNQSxHQUFPMlQsRUFBUzVkLFlBQWFJLEVBQVFSLGNBQWUsUUFHMURvSyxHQUFRZ1MsR0FBU3pVLEtBQU1sSixJQUFVLENBQUUsR0FBSSxLQUFRLEdBQUl4SixjQUNuRDZvQixFQUFPbkIsR0FBU3ZTLElBQVN1UyxHQUFRSyxTQUNqQzNTLEVBQUlFLFVBQVl1VCxFQUFNLEdBQU14ZCxFQUFPNGQsY0FBZXpmLEdBQVNxZixFQUFNLEdBR2pFcGMsRUFBSW9jLEVBQU0sR0FDRnBjLEtBQ1AySSxFQUFNQSxFQUFJOEMsVUFLWDdNLEVBQU9XLE1BQU9nZCxFQUFPNVQsRUFBSWpELGFBR3pCaUQsRUFBTTJULEVBQVNsUyxZQUdYRCxZQUFjLFFBekJsQm9TLEVBQU1udEIsS0FBTTBQLEVBQVEyZCxlQUFnQjFmLElBa0N2QyxJQUhBdWYsRUFBU25TLFlBQWMsR0FFdkI3dEIsRUFBSSxFQUNNeWdCLEVBQU93ZixFQUFPamdDLE1BR3ZCLEdBQUs0L0IsR0FBYXRkLEVBQU9zQyxRQUFTbkUsRUFBTW1mLElBQWUsRUFDakRDLEdBQ0pBLEVBQVEvc0IsS0FBTTJOLFFBZ0JoQixHQVhBc2YsRUFBV2xELEdBQVlwYyxHQUd2QjRMLEVBQU00UyxHQUFRZSxFQUFTNWQsWUFBYTNCLEdBQVEsVUFHdkNzZixHQUNKYixHQUFlN1MsR0FJWHNULEVBRUosSUFEQWpjLEVBQUksRUFDTWpELEVBQU80TCxFQUFLM0ksTUFDaEIyYSxHQUFZcDhCLEtBQU13ZSxFQUFLYyxNQUFRLEtBQ25Db2UsRUFBUTdzQixLQUFNMk4sR0FNbEIsT0FBT3VmLEVBSVIsSUFBSUksR0FBaUIsc0JBRXJCLFNBQVNDLEtBQ1IsT0FBTyxFQUdSLFNBQVNDLEtBQ1IsT0FBTyxFQVNSLFNBQVNDLEdBQVk5ZixFQUFNYyxHQUMxQixPQUFTZCxJQU1WLFdBQ0MsSUFDQyxPQUFPcGQsRUFBU3dzQixjQUNmLE1BQVEyUSxLQVRRQyxLQUFxQyxVQUFUbGYsR0FZL0MsU0FBUy9FLEdBQUlpRSxFQUFNaWdCLEVBQU9uZSxFQUFVNVMsRUFBTXBOLEVBQUlvK0IsR0FDN0MsSUFBSUMsRUFBUXJmLEVBR1osR0FBc0IsaUJBQVZtZixFQUFxQixDQVNoQyxJQUFNbmYsSUFObUIsaUJBQWJnQixJQUdYNVMsRUFBT0EsR0FBUTRTLEVBQ2ZBLE9BQVc3YSxHQUVFZzVCLEVBQ2Jsa0IsR0FBSWlFLEVBQU1jLEVBQU1nQixFQUFVNVMsRUFBTSt3QixFQUFPbmYsR0FBUW9mLEdBRWhELE9BQU9sZ0IsRUFzQlIsR0FuQmEsTUFBUjlRLEdBQXNCLE1BQU5wTixHQUdwQkEsRUFBS2dnQixFQUNMNVMsRUFBTzRTLE9BQVc3YSxHQUNELE1BQU5uRixJQUNjLGlCQUFiZ2dCLEdBR1hoZ0IsRUFBS29OLEVBQ0xBLE9BQU9qSSxJQUlQbkYsRUFBS29OLEVBQ0xBLEVBQU80UyxFQUNQQSxPQUFXN2EsS0FHRCxJQUFQbkYsRUFDSkEsRUFBSys5QixRQUNDLElBQU0vOUIsRUFDWixPQUFPa2UsRUFlUixPQVphLElBQVJrZ0IsSUFDSkMsRUFBU3IrQixHQUNUQSxFQUFLLFNBQVVtUSxHQUlkLE9BREE0UCxJQUFTM0YsSUFBS2pLLEdBQ1BrdUIsRUFBTzFrQixNQUFPdlosS0FBTThFLGFBSXpCeWQsS0FBTzBiLEVBQU8xYixPQUFVMGIsRUFBTzFiLEtBQU81QyxFQUFPNEMsU0FFMUN6RSxFQUFLMEMsTUFBTSxXQUNqQmIsRUFBTzVQLE1BQU1nakIsSUFBSy95QixLQUFNKzlCLEVBQU9uK0IsRUFBSW9OLEVBQU00UyxNQSthM0MsU0FBU3NlLEdBQWdCdjBCLEVBQUlpVixFQUFNZ2YsR0FHNUJBLEdBUU5qRixFQUFTRixJQUFLOXVCLEVBQUlpVixHQUFNLEdBQ3hCZSxFQUFPNVAsTUFBTWdqQixJQUFLcHBCLEVBQUlpVixFQUFNLENBQzNCa0ssV0FBVyxFQUNYYixRQUFTLFNBQVVsWSxHQUNsQixJQUFJb3VCLEVBQVVuMkIsRUFDYm8yQixFQUFRekYsRUFBU3o2QixJQUFLOEIsS0FBTTRlLEdBRTdCLEdBQXlCLEVBQWxCN08sRUFBTXN1QixXQUFtQnIrQixLQUFNNGUsSUFLckMsR0FBTXdmLEVBQU01OUIsUUF1Q0VtZixFQUFPNVAsTUFBTThsQixRQUFTalgsSUFBVSxJQUFLMGYsY0FDbER2dUIsRUFBTXd1Qix1QkFyQk4sR0FkQUgsRUFBUWx4QixFQUFNMVAsS0FBTXNILFdBQ3BCNnpCLEVBQVNGLElBQUt6NEIsS0FBTTRlLEVBQU13ZixHQUsxQkQsRUFBV1AsRUFBWTU5QixLQUFNNGUsR0FDN0I1ZSxLQUFNNGUsS0FFRHdmLEtBRExwMkIsRUFBUzJ3QixFQUFTejZCLElBQUs4QixLQUFNNGUsS0FDSnVmLEVBQ3hCeEYsRUFBU0YsSUFBS3o0QixLQUFNNGUsR0FBTSxHQUUxQjVXLEVBQVMsR0FFTG8yQixJQUFVcDJCLEVBV2QsT0FSQStILEVBQU15dUIsMkJBQ056dUIsRUFBTTB1QixpQkFPQ3oyQixHQUFVQSxFQUFPMUosV0FlZjgvQixFQUFNNTlCLFNBR2pCbTRCLEVBQVNGLElBQUt6NEIsS0FBTTRlLEVBQU0sQ0FDekJ0Z0IsTUFBT3FoQixFQUFPNVAsTUFBTTJ1QixRQUluQi9lLEVBQU9sQyxPQUFRMmdCLEVBQU8sR0FBS3plLEVBQU9nZixNQUFNMS9CLFdBQ3hDbS9CLEVBQU1seEIsTUFBTyxHQUNibE4sUUFLRitQLEVBQU15dUIscUNBL0UwQno1QixJQUE3QjR6QixFQUFTejZCLElBQUt5TCxFQUFJaVYsSUFDdEJlLEVBQU81UCxNQUFNZ2pCLElBQUtwcEIsRUFBSWlWLEVBQU04ZSxJQTVhL0IvZCxFQUFPNVAsTUFBUSxDQUVkOEgsT0FBUSxHQUVSa2IsSUFBSyxTQUFValYsRUFBTWlnQixFQUFPOVYsRUFBU2piLEVBQU00UyxHQUUxQyxJQUFJZ2YsRUFBYUMsRUFBYW5WLEVBQzdCb1YsRUFBUXZnQyxFQUFHd2dDLEVBQ1hsSixFQUFTL2EsRUFBVThELEVBQU1vZ0IsRUFBWUMsRUFDckNDLEVBQVd2RyxFQUFTejZCLElBQUs0ZixHQUcxQixHQUFNdWEsRUFBWXZhLEdBdUNsQixJQWxDS21LLEVBQVFBLFVBRVpBLEdBREEyVyxFQUFjM1csR0FDUUEsUUFDdEJySSxFQUFXZ2YsRUFBWWhmLFVBS25CQSxHQUNKRCxFQUFPalQsS0FBS21kLGdCQUFpQnhtQixHQUFpQnVjLEdBSXpDcUksRUFBUTFGLE9BQ2IwRixFQUFRMUYsS0FBTzVDLEVBQU80QyxTQUlmdWMsRUFBU0ksRUFBU0osVUFDekJBLEVBQVNJLEVBQVNKLE9BQVMvZ0MsT0FBT1ksT0FBUSxRQUVuQ2tnQyxFQUFjSyxFQUFTQyxVQUM5Qk4sRUFBY0ssRUFBU0MsT0FBUyxTQUFVcDNCLEdBSXpDLFlBQXlCLElBQVg0WCxHQUEwQkEsRUFBTzVQLE1BQU1xdkIsWUFBY3IzQixFQUFFNlcsS0FDcEVlLEVBQU81UCxNQUFNc3ZCLFNBQVM5bEIsTUFBT3VFLEVBQU1oWixnQkFBY0MsSUFNcER4RyxHQURBdy9CLEdBQVVBLEdBQVMsSUFBS3p3QixNQUFPaW1CLElBQW1CLENBQUUsS0FDMUMveUIsT0FDRmpDLEtBRVBxZ0IsRUFBT3FnQixHQURQdlYsRUFBTStULEdBQWV6VyxLQUFNK1csRUFBT3gvQixLQUFTLElBQ3BCLEdBQ3ZCeWdDLEdBQWV0VixFQUFLLElBQU8sSUFBS3JlLE1BQU8sS0FBTVAsT0FHdkM4VCxJQUtOaVgsRUFBVWxXLEVBQU81UCxNQUFNOGxCLFFBQVNqWCxJQUFVLEdBRzFDQSxHQUFTZ0IsRUFBV2lXLEVBQVF5SSxhQUFlekksRUFBUXlKLFdBQWMxZ0IsRUFHakVpWCxFQUFVbFcsRUFBTzVQLE1BQU04bEIsUUFBU2pYLElBQVUsR0FHMUNtZ0IsRUFBWXBmLEVBQU9sQyxPQUFRLENBQzFCbUIsS0FBTUEsRUFDTnFnQixTQUFVQSxFQUNWanlCLEtBQU1BLEVBQ05pYixRQUFTQSxFQUNUMUYsS0FBTTBGLEVBQVExRixLQUNkM0MsU0FBVUEsRUFDVmdTLGFBQWNoUyxHQUFZRCxFQUFPakMsS0FBS3BRLE1BQU1za0IsYUFBYXR5QixLQUFNc2dCLEdBQy9Ea0osVUFBV2tXLEVBQVd4WCxLQUFNLE1BQzFCb1gsSUFHSzlqQixFQUFXZ2tCLEVBQVFsZ0IsT0FDMUI5RCxFQUFXZ2tCLEVBQVFsZ0IsR0FBUyxJQUNuQjJnQixjQUFnQixFQUduQjFKLEVBQVEySixRQUNpRCxJQUE5RDNKLEVBQVEySixNQUFNaGlDLEtBQU1zZ0IsRUFBTTlRLEVBQU1neUIsRUFBWUgsSUFFdkMvZ0IsRUFBS25PLGtCQUNUbU8sRUFBS25PLGlCQUFrQmlQLEVBQU1pZ0IsSUFLM0JoSixFQUFROUMsTUFDWjhDLEVBQVE5QyxJQUFJdjFCLEtBQU1zZ0IsRUFBTWloQixHQUVsQkEsRUFBVTlXLFFBQVExRixPQUN2QndjLEVBQVU5VyxRQUFRMUYsS0FBTzBGLEVBQVExRixPQUs5QjNDLEVBQ0o5RSxFQUFTa0csT0FBUWxHLEVBQVN5a0IsZ0JBQWlCLEVBQUdSLEdBRTlDamtCLEVBQVMzSyxLQUFNNHVCLEdBSWhCcGYsRUFBTzVQLE1BQU04SCxPQUFRK0csSUFBUyxJQU1oQzZWLE9BQVEsU0FBVTNXLEVBQU1pZ0IsRUFBTzlWLEVBQVNySSxFQUFVNmYsR0FFakQsSUFBSTFlLEVBQUcyZSxFQUFXaFcsRUFDakJvVixFQUFRdmdDLEVBQUd3Z0MsRUFDWGxKLEVBQVMvYSxFQUFVOEQsRUFBTW9nQixFQUFZQyxFQUNyQ0MsRUFBV3ZHLEVBQVNELFFBQVM1YSxJQUFVNmEsRUFBU3o2QixJQUFLNGYsR0FFdEQsR0FBTW9oQixJQUFlSixFQUFTSSxFQUFTSixRQUF2QyxDQU9BLElBREF2Z0MsR0FEQXcvQixHQUFVQSxHQUFTLElBQUt6d0IsTUFBT2ltQixJQUFtQixDQUFFLEtBQzFDL3lCLE9BQ0ZqQyxLQU1QLEdBSkFxZ0IsRUFBT3FnQixHQURQdlYsRUFBTStULEdBQWV6VyxLQUFNK1csRUFBT3gvQixLQUFTLElBQ3BCLEdBQ3ZCeWdDLEdBQWV0VixFQUFLLElBQU8sSUFBS3JlLE1BQU8sS0FBTVAsT0FHdkM4VCxFQUFOLENBZUEsSUFSQWlYLEVBQVVsVyxFQUFPNVAsTUFBTThsQixRQUFTalgsSUFBVSxHQUUxQzlELEVBQVdna0IsRUFEWGxnQixHQUFTZ0IsRUFBV2lXLEVBQVF5SSxhQUFlekksRUFBUXlKLFdBQWMxZ0IsSUFDcEMsR0FDN0I4SyxFQUFNQSxFQUFLLElBQ1YsSUFBSWhGLE9BQVEsVUFBWXNhLEVBQVd4WCxLQUFNLGlCQUFvQixXQUc5RGtZLEVBQVkzZSxFQUFJakcsRUFBU3RhLE9BQ2pCdWdCLEtBQ1BnZSxFQUFZamtCLEVBQVVpRyxJQUVmMGUsR0FBZVIsSUFBYUYsRUFBVUUsVUFDekNoWCxHQUFXQSxFQUFRMUYsT0FBU3djLEVBQVV4YyxNQUN0Q21ILElBQU9BLEVBQUlwcUIsS0FBTXkvQixFQUFValcsWUFDM0JsSixHQUFZQSxJQUFhbWYsRUFBVW5mLFdBQ3hCLE9BQWJBLElBQXFCbWYsRUFBVW5mLFlBQ2hDOUUsRUFBU2tHLE9BQVFELEVBQUcsR0FFZmdlLEVBQVVuZixVQUNkOUUsRUFBU3lrQixnQkFFTDFKLEVBQVFwQixRQUNab0IsRUFBUXBCLE9BQU9qM0IsS0FBTXNnQixFQUFNaWhCLElBT3pCVyxJQUFjNWtCLEVBQVN0YSxTQUNyQnExQixFQUFROEosV0FDa0QsSUFBL0Q5SixFQUFROEosU0FBU25pQyxLQUFNc2dCLEVBQU1raEIsRUFBWUUsRUFBU0MsU0FFbER4ZixFQUFPaWdCLFlBQWE5aEIsRUFBTWMsRUFBTXNnQixFQUFTQyxlQUduQ0wsRUFBUWxnQixTQTFDZixJQUFNQSxLQUFRa2dCLEVBQ2JuZixFQUFPNVAsTUFBTTBrQixPQUFRM1csRUFBTWMsRUFBT21mLEVBQU94L0IsR0FBSzBwQixFQUFTckksR0FBVSxHQThDL0RELEVBQU9rQyxjQUFlaWQsSUFDMUJuRyxFQUFTbEUsT0FBUTNXLEVBQU0sbUJBSXpCdWhCLFNBQVUsU0FBVVEsR0FFbkIsSUFBSXhpQyxFQUFHMGpCLEVBQUdWLEVBQUtyVSxFQUFTK3lCLEVBQVdlLEVBQ2xDeG1CLEVBQU8sSUFBSXpNLE1BQU8vSCxVQUFVdEUsUUFHNUJ1UCxFQUFRNFAsRUFBTzVQLE1BQU1nd0IsSUFBS0YsR0FFMUIva0IsR0FDQzZkLEVBQVN6NkIsSUFBSzhCLEtBQU0sV0FBY2pDLE9BQU9ZLE9BQVEsT0FDL0NvUixFQUFNNk8sT0FBVSxHQUNuQmlYLEVBQVVsVyxFQUFPNVAsTUFBTThsQixRQUFTOWxCLEVBQU02TyxPQUFVLEdBS2pELElBRkF0RixFQUFNLEdBQU12SixFQUVOMVMsRUFBSSxFQUFHQSxFQUFJeUgsVUFBVXRFLE9BQVFuRCxJQUNsQ2ljLEVBQU1qYyxHQUFNeUgsVUFBV3pILEdBTXhCLEdBSEEwUyxFQUFNaXdCLGVBQWlCaGdDLE1BR2xCNjFCLEVBQVFvSyxjQUEyRCxJQUE1Q3BLLEVBQVFvSyxZQUFZemlDLEtBQU13QyxLQUFNK1AsR0FBNUQsQ0FTQSxJQUpBK3ZCLEVBQWVuZ0IsRUFBTzVQLE1BQU0rSyxTQUFTdGQsS0FBTXdDLEtBQU0rUCxFQUFPK0ssR0FHeER6ZCxFQUFJLEdBQ00yTyxFQUFVOHpCLEVBQWN6aUMsUUFBWTBTLEVBQU1td0Isd0JBSW5ELElBSEFud0IsRUFBTW93QixjQUFnQm4wQixFQUFROFIsS0FFOUJpRCxFQUFJLEdBQ01nZSxFQUFZL3lCLEVBQVE4TyxTQUFVaUcsUUFDdENoUixFQUFNcXdCLGlDQUlEcndCLEVBQU1zd0IsYUFBc0MsSUFBeEJ0QixFQUFValcsWUFDbkMvWSxFQUFNc3dCLFdBQVcvZ0MsS0FBTXkvQixFQUFValcsYUFFakMvWSxFQUFNZ3ZCLFVBQVlBLEVBQ2xCaHZCLEVBQU0vQyxLQUFPK3hCLEVBQVUveEIsVUFLVmpJLEtBSGJzYixJQUFVVixFQUFPNVAsTUFBTThsQixRQUFTa0osRUFBVUUsV0FBYyxJQUFLRSxRQUM1REosRUFBVTlXLFNBQVUxTyxNQUFPdk4sRUFBUThSLEtBQU14RSxNQUdULEtBQXpCdkosRUFBTS9ILE9BQVNxWSxLQUNyQnRRLEVBQU0wdUIsaUJBQ04xdUIsRUFBTXd1QixvQkFZWCxPQUpLMUksRUFBUXlLLGNBQ1p6SyxFQUFReUssYUFBYTlpQyxLQUFNd0MsS0FBTStQLEdBRzNCQSxFQUFNL0gsU0FHZDhTLFNBQVUsU0FBVS9LLEVBQU8rSyxHQUMxQixJQUFJemQsRUFBRzBoQyxFQUFXbFUsRUFBSzBWLEVBQWlCQyxFQUN2Q1YsRUFBZSxHQUNmUCxFQUFnQnprQixFQUFTeWtCLGNBQ3pCbHlCLEVBQU0wQyxFQUFNOUksT0FHYixHQUFLczRCLEdBSUpseUIsRUFBSXZMLFlBT2MsVUFBZmlPLEVBQU02TyxNQUFvQjdPLEVBQU0wd0IsUUFBVSxHQUU3QyxLQUFRcHpCLElBQVFyTixLQUFNcU4sRUFBTUEsRUFBSWxMLFlBQWNuQyxLQUk3QyxHQUFzQixJQUFqQnFOLEVBQUl2TCxXQUFvQyxVQUFmaU8sRUFBTTZPLE9BQXFDLElBQWpCdlIsRUFBSWtaLFVBQXNCLENBR2pGLElBRkFnYSxFQUFrQixHQUNsQkMsRUFBbUIsR0FDYm5qQyxFQUFJLEVBQUdBLEVBQUlraUMsRUFBZWxpQyxTQU1FMEgsSUFBNUJ5N0IsRUFGTDNWLEdBSEFrVSxFQUFZamtCLEVBQVV6ZCxJQUdOdWlCLFNBQVcsT0FHMUI0Z0IsRUFBa0IzVixHQUFRa1UsRUFBVW5OLGFBQ25DalMsRUFBUWtMLEVBQUs3cUIsTUFBTzBSLE1BQU9yRSxJQUFTLEVBQ3BDc1MsRUFBT2pULEtBQU1tZSxFQUFLN3FCLEtBQU0sS0FBTSxDQUFFcU4sSUFBUTdNLFFBRXJDZ2dDLEVBQWtCM1YsSUFDdEIwVixFQUFnQnB3QixLQUFNNHVCLEdBR25Cd0IsRUFBZ0IvL0IsUUFDcEJzL0IsRUFBYTN2QixLQUFNLENBQUUyTixLQUFNelEsRUFBS3lOLFNBQVV5bEIsSUFZOUMsT0FMQWx6QixFQUFNck4sS0FDRHUvQixFQUFnQnprQixFQUFTdGEsUUFDN0JzL0IsRUFBYTN2QixLQUFNLENBQUUyTixLQUFNelEsRUFBS3lOLFNBQVVBLEVBQVM1TixNQUFPcXlCLEtBR3BETyxHQUdSWSxRQUFTLFNBQVU5aUMsRUFBTStpQyxHQUN4QjVpQyxPQUFPQyxlQUFnQjJoQixFQUFPZ2YsTUFBTTEvQixVQUFXckIsRUFBTSxDQUNwREssWUFBWSxFQUNabUosY0FBYyxFQUVkbEosSUFBS3VELEVBQVlrL0IsR0FDaEIsV0FDQyxHQUFLM2dDLEtBQUs0Z0MsY0FDVCxPQUFPRCxFQUFNM2dDLEtBQUs0Z0MsZ0JBR3BCLFdBQ0MsR0FBSzVnQyxLQUFLNGdDLGNBQ1QsT0FBTzVnQyxLQUFLNGdDLGNBQWVoakMsSUFJOUI2NkIsSUFBSyxTQUFVbjZCLEdBQ2RQLE9BQU9DLGVBQWdCZ0MsS0FBTXBDLEVBQU0sQ0FDbENLLFlBQVksRUFDWm1KLGNBQWMsRUFDZEMsVUFBVSxFQUNWL0ksTUFBT0EsUUFNWHloQyxJQUFLLFNBQVVhLEdBQ2QsT0FBT0EsRUFBZWpoQixFQUFPNEIsU0FDNUJxZixFQUNBLElBQUlqaEIsRUFBT2dmLE1BQU9pQyxJQUdwQi9LLFFBQVMsQ0FDUmdMLEtBQU0sQ0FHTEMsVUFBVSxHQUVYQyxNQUFPLENBR052QixNQUFPLFNBQVV4eUIsR0FJaEIsSUFBSXJELEVBQUszSixNQUFRZ04sRUFXakIsT0FSS3d1QixHQUFlbDhCLEtBQU1xSyxFQUFHaVYsT0FDNUJqVixFQUFHbzNCLE9BQVM3K0IsRUFBVXlILEVBQUksVUFHMUJ1MEIsR0FBZ0J2MEIsRUFBSSxRQUFTK3pCLEtBSXZCLEdBRVJnQixRQUFTLFNBQVUxeEIsR0FJbEIsSUFBSXJELEVBQUszSixNQUFRZ04sRUFVakIsT0FQS3d1QixHQUFlbDhCLEtBQU1xSyxFQUFHaVYsT0FDNUJqVixFQUFHbzNCLE9BQVM3K0IsRUFBVXlILEVBQUksVUFFMUJ1MEIsR0FBZ0J2MEIsRUFBSSxVQUlkLEdBS1IweUIsU0FBVSxTQUFVdHNCLEdBQ25CLElBQUk5SSxFQUFTOEksRUFBTTlJLE9BQ25CLE9BQU91MEIsR0FBZWw4QixLQUFNMkgsRUFBTzJYLE9BQ2xDM1gsRUFBTzg1QixPQUFTNytCLEVBQVUrRSxFQUFRLFVBQ2xDMHhCLEVBQVN6NkIsSUFBSytJLEVBQVEsVUFDdEIvRSxFQUFVK0UsRUFBUSxPQUlyQis1QixhQUFjLENBQ2JWLGFBQWMsU0FBVXZ3QixRQUlEaEwsSUFBakJnTCxFQUFNL0gsUUFBd0IrSCxFQUFNNndCLGdCQUN4Qzd3QixFQUFNNndCLGNBQWNLLFlBQWNseEIsRUFBTS9ILFlBb0c3QzJYLEVBQU9pZ0IsWUFBYyxTQUFVOWhCLEVBQU1jLEVBQU11Z0IsR0FHckNyaEIsRUFBS3ROLHFCQUNUc04sRUFBS3ROLG9CQUFxQm9PLEVBQU11Z0IsSUFJbEN4ZixFQUFPZ2YsTUFBUSxTQUFVOWYsRUFBSzNYLEdBRzdCLEtBQVFsSCxnQkFBZ0IyZixFQUFPZ2YsT0FDOUIsT0FBTyxJQUFJaGYsRUFBT2dmLE1BQU85ZixFQUFLM1gsR0FJMUIyWCxHQUFPQSxFQUFJRCxNQUNmNWUsS0FBSzRnQyxjQUFnQi9oQixFQUNyQjdlLEtBQUs0ZSxLQUFPQyxFQUFJRCxLQUloQjVlLEtBQUtraEMsbUJBQXFCcmlCLEVBQUlzaUIsdUJBQ0hwOEIsSUFBekI4WixFQUFJc2lCLG1CQUdnQixJQUFwQnRpQixFQUFJb2lCLFlBQ0x2RCxHQUNBQyxHQUtEMzlCLEtBQUtpSCxPQUFXNFgsRUFBSTVYLFFBQWtDLElBQXhCNFgsRUFBSTVYLE9BQU9uRixTQUN4QytjLEVBQUk1WCxPQUFPOUUsV0FDWDBjLEVBQUk1WCxPQUVMakgsS0FBS21nQyxjQUFnQnRoQixFQUFJc2hCLGNBQ3pCbmdDLEtBQUtvaEMsY0FBZ0J2aUIsRUFBSXVpQixlQUl6QnBoQyxLQUFLNGUsS0FBT0MsRUFJUjNYLEdBQ0p5WSxFQUFPbEMsT0FBUXpkLEtBQU1rSCxHQUl0QmxILEtBQUtxaEMsVUFBWXhpQixHQUFPQSxFQUFJd2lCLFdBQWE1ZCxLQUFLNmQsTUFHOUN0aEMsS0FBTTJmLEVBQU80QixVQUFZLEdBSzFCNUIsRUFBT2dmLE1BQU0xL0IsVUFBWSxDQUN4QitnQixZQUFhTCxFQUFPZ2YsTUFDcEJ1QyxtQkFBb0J2RCxHQUNwQnVDLHFCQUFzQnZDLEdBQ3RCeUMsOEJBQStCekMsR0FDL0I0RCxhQUFhLEVBRWI5QyxlQUFnQixXQUNmLElBQUkxMkIsRUFBSS9ILEtBQUs0Z0MsY0FFYjVnQyxLQUFLa2hDLG1CQUFxQnhELEdBRXJCMzFCLElBQU0vSCxLQUFLdWhDLGFBQ2Z4NUIsRUFBRTAyQixrQkFHSkYsZ0JBQWlCLFdBQ2hCLElBQUl4MkIsRUFBSS9ILEtBQUs0Z0MsY0FFYjVnQyxLQUFLa2dDLHFCQUF1QnhDLEdBRXZCMzFCLElBQU0vSCxLQUFLdWhDLGFBQ2Z4NUIsRUFBRXcyQixtQkFHSkMseUJBQTBCLFdBQ3pCLElBQUl6MkIsRUFBSS9ILEtBQUs0Z0MsY0FFYjVnQyxLQUFLb2dDLDhCQUFnQzFDLEdBRWhDMzFCLElBQU0vSCxLQUFLdWhDLGFBQ2Z4NUIsRUFBRXkyQiwyQkFHSHgrQixLQUFLdStCLG9CQUtQNWUsRUFBT2EsS0FBTSxDQUNaZ2hCLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxZQUFZLEVBQ1pDLGdCQUFnQixFQUNoQkMsU0FBUyxFQUNUQyxRQUFRLEVBQ1JDLFlBQVksRUFDWkMsU0FBUyxFQUNUQyxPQUFPLEVBQ1BDLE9BQU8sRUFDUEMsVUFBVSxFQUNWQyxNQUFNLEVBQ04sTUFBUSxFQUNSbGpCLE1BQU0sRUFDTm1qQixVQUFVLEVBQ1Z4akMsS0FBSyxFQUNMeWpDLFNBQVMsRUFDVDVCLFFBQVEsRUFDUjZCLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLGVBQWUsRUFDZkMsV0FBVyxFQUNYQyxTQUFTLEVBQ1RDLE9BQU8sR0FDTHZqQixFQUFPNVAsTUFBTTJ3QixTQUVoQi9nQixFQUFPYSxLQUFNLENBQUUyaUIsTUFBTyxVQUFXQyxLQUFNLGFBQWMsU0FBVXhrQixFQUFNMGYsR0FDcEUzZSxFQUFPNVAsTUFBTThsQixRQUFTalgsR0FBUyxDQUc5QjRnQixNQUFPLFdBUU4sT0FIQXRCLEdBQWdCbCtCLEtBQU00ZSxFQUFNZ2YsS0FHckIsR0FFUmMsUUFBUyxXQU1SLE9BSEFSLEdBQWdCbCtCLEtBQU00ZSxJQUdmLEdBS1J5ZCxTQUFVLFdBQ1QsT0FBTyxHQUdSaUMsYUFBY0EsTUFZaEIzZSxFQUFPYSxLQUFNLENBQ1o2aUIsV0FBWSxZQUNaQyxXQUFZLFdBQ1pDLGFBQWMsY0FDZEMsYUFBYyxlQUNaLFNBQVVDLEVBQU0xRCxHQUNsQnBnQixFQUFPNVAsTUFBTThsQixRQUFTNE4sR0FBUyxDQUM5Qm5GLGFBQWN5QixFQUNkVCxTQUFVUyxFQUVWWixPQUFRLFNBQVVwdkIsR0FDakIsSUFBSXNRLEVBQ0hwWixFQUFTakgsS0FDVDBqQyxFQUFVM3pCLEVBQU1xeEIsY0FDaEJyQyxFQUFZaHZCLEVBQU1ndkIsVUFTbkIsT0FMTTJFLElBQWFBLElBQVl6OEIsR0FBVzBZLEVBQU9sYixTQUFVd0MsRUFBUXk4QixNQUNsRTN6QixFQUFNNk8sS0FBT21nQixFQUFVRSxTQUN2QjVlLEVBQU0wZSxFQUFVOVcsUUFBUTFPLE1BQU92WixLQUFNOEUsV0FDckNpTCxFQUFNNk8sS0FBT21oQixHQUVQMWYsT0FLVlYsRUFBTy9mLEdBQUc2ZCxPQUFRLENBRWpCNUQsR0FBSSxTQUFVa2tCLEVBQU9uZSxFQUFVNVMsRUFBTXBOLEdBQ3BDLE9BQU9pYSxHQUFJN1osS0FBTSs5QixFQUFPbmUsRUFBVTVTLEVBQU1wTixJQUV6Q28rQixJQUFLLFNBQVVELEVBQU9uZSxFQUFVNVMsRUFBTXBOLEdBQ3JDLE9BQU9pYSxHQUFJN1osS0FBTSs5QixFQUFPbmUsRUFBVTVTLEVBQU1wTixFQUFJLElBRTdDb2EsSUFBSyxTQUFVK2pCLEVBQU9uZSxFQUFVaGdCLEdBQy9CLElBQUltL0IsRUFBV25nQixFQUNmLEdBQUttZixHQUFTQSxFQUFNVSxnQkFBa0JWLEVBQU1nQixVQVczQyxPQVJBQSxFQUFZaEIsRUFBTWdCLFVBQ2xCcGYsRUFBUW9lLEVBQU1pQyxnQkFBaUJobUIsSUFDOUIra0IsRUFBVWpXLFVBQ1RpVyxFQUFVRSxTQUFXLElBQU1GLEVBQVVqVyxVQUNyQ2lXLEVBQVVFLFNBQ1hGLEVBQVVuZixTQUNWbWYsRUFBVTlXLFNBRUpqb0IsS0FFUixHQUFzQixpQkFBVis5QixFQUFxQixDQUdoQyxJQUFNbmYsS0FBUW1mLEVBQ2IvOUIsS0FBS2dhLElBQUs0RSxFQUFNZ0IsRUFBVW1lLEVBQU9uZixJQUVsQyxPQUFPNWUsS0FXUixPQVRrQixJQUFiNGYsR0FBMEMsbUJBQWJBLElBR2pDaGdCLEVBQUtnZ0IsRUFDTEEsT0FBVzdhLElBRUEsSUFBUG5GLElBQ0pBLEVBQUsrOUIsSUFFQzM5QixLQUFLd2dCLE1BQU0sV0FDakJiLEVBQU81UCxNQUFNMGtCLE9BQVF6MEIsS0FBTSs5QixFQUFPbitCLEVBQUlnZ0IsU0FNekMsSUFLQytqQixHQUFlLHdCQUdmQyxHQUFXLG9DQUNYQyxHQUFlLDJDQUdoQixTQUFTQyxHQUFvQmhtQixFQUFNd1YsR0FDbEMsT0FBS3B4QixFQUFVNGIsRUFBTSxVQUNwQjViLEVBQStCLEtBQXJCb3hCLEVBQVF4eEIsU0FBa0J3eEIsRUFBVUEsRUFBUW5JLFdBQVksT0FFM0R4TCxFQUFRN0IsR0FBT3JWLFNBQVUsU0FBVyxJQUdyQ3FWLEVBSVIsU0FBU2ltQixHQUFlam1CLEdBRXZCLE9BREFBLEVBQUtjLE1BQXlDLE9BQWhDZCxFQUFLeUIsYUFBYyxTQUFzQixJQUFNekIsRUFBS2MsS0FDM0RkLEVBRVIsU0FBU2ttQixHQUFlbG1CLEdBT3ZCLE1BTjJDLFdBQXBDQSxFQUFLYyxNQUFRLElBQUsxUixNQUFPLEVBQUcsR0FDbEM0USxFQUFLYyxLQUFPZCxFQUFLYyxLQUFLMVIsTUFBTyxHQUU3QjRRLEVBQUszTyxnQkFBaUIsUUFHaEIyTyxFQUdSLFNBQVNtbUIsR0FBZ0JwbEIsRUFBS3FsQixHQUM3QixJQUFJN21DLEVBQUdDLEVBQUdzaEIsRUFBZ0J1bEIsRUFBVUMsRUFBVXRGLEVBRTlDLEdBQXVCLElBQWxCb0YsRUFBS3BpQyxTQUFWLENBS0EsR0FBSzYyQixFQUFTRCxRQUFTN1osS0FFdEJpZ0IsRUFEV25HLEVBQVN6NkIsSUFBSzJnQixHQUNQaWdCLFFBS2pCLElBQU1sZ0IsS0FGTitaLEVBQVNsRSxPQUFReVAsRUFBTSxpQkFFVHBGLEVBQ2IsSUFBTXpoQyxFQUFJLEVBQUdDLEVBQUl3aEMsRUFBUWxnQixHQUFPcGUsT0FBUW5ELEVBQUlDLEVBQUdELElBQzlDc2lCLEVBQU81UCxNQUFNZ2pCLElBQUttUixFQUFNdGxCLEVBQU1rZ0IsRUFBUWxnQixHQUFRdmhCLElBTzdDdTdCLEVBQVNGLFFBQVM3WixLQUN0QnNsQixFQUFXdkwsRUFBU3BCLE9BQVEzWSxHQUM1QnVsQixFQUFXemtCLEVBQU9sQyxPQUFRLEdBQUkwbUIsR0FFOUJ2TCxFQUFTSCxJQUFLeUwsRUFBTUUsS0FLdEIsU0FBU0MsR0FBVXhsQixFQUFLcWxCLEdBQ3ZCLElBQUloaUMsRUFBV2dpQyxFQUFLaGlDLFNBQVNvUyxjQUdYLFVBQWJwUyxHQUF3QnM1QixHQUFlbDhCLEtBQU11ZixFQUFJRCxNQUNyRHNsQixFQUFLNVcsUUFBVXpPLEVBQUl5TyxRQUdLLFVBQWJwckIsR0FBcUMsYUFBYkEsSUFDbkNnaUMsRUFBSy9TLGFBQWV0UyxFQUFJc1MsY0FJMUIsU0FBU21ULEdBQVVDLEVBQVlqckIsRUFBTXRKLEVBQVVrdEIsR0FHOUM1akIsRUFBTzZFLEVBQU03RSxHQUViLElBQUkrakIsRUFBVTVjLEVBQU91YyxFQUFTd0gsRUFBWTlnQyxFQUFNd2IsRUFDL0M3aEIsRUFBSSxFQUNKQyxFQUFJaW5DLEVBQVcvakMsT0FDZmlrQyxFQUFXbm5DLEVBQUksRUFDZmdCLEVBQVFnYixFQUFNLEdBQ2RvckIsRUFBa0JqakMsRUFBWW5ELEdBRy9CLEdBQUtvbUMsR0FDRHBuQyxFQUFJLEdBQXNCLGlCQUFWZ0IsSUFDaEJrZ0IsRUFBUW9kLFlBQWNnSSxHQUFTdGtDLEtBQU1oQixHQUN4QyxPQUFPaW1DLEVBQVcvakIsTUFBTSxTQUFVOU8sR0FDakMsSUFBSXVnQixFQUFPc1MsRUFBV2hrQyxHQUFJbVIsR0FDckJnekIsSUFDSnByQixFQUFNLEdBQU1oYixFQUFNZCxLQUFNd0MsS0FBTTBSLEVBQU91Z0IsRUFBS2h0QixTQUUzQ3EvQixHQUFVclMsRUFBTTNZLEVBQU10SixFQUFVa3RCLE1BSWxDLEdBQUs1L0IsSUFFSm1qQixHQURBNGMsRUFBV04sR0FBZXpqQixFQUFNaXJCLEVBQVksR0FBSTlqQyxlQUFlLEVBQU84akMsRUFBWXJILElBQ2pFL1IsV0FFbUIsSUFBL0JrUyxFQUFTNVcsV0FBV2ptQixTQUN4QjY4QixFQUFXNWMsR0FJUEEsR0FBU3ljLEdBQVUsQ0FPdkIsSUFMQXNILEdBREF4SCxFQUFVcmQsRUFBTy9VLElBQUsweEIsR0FBUWUsRUFBVSxVQUFZMEcsS0FDL0J2akMsT0FLYm5ELEVBQUlDLEVBQUdELElBQ2RxRyxFQUFPMjVCLEVBRUZoZ0MsSUFBTW9uQyxJQUNWL2dDLEVBQU9pYyxFQUFPd0IsTUFBT3pkLEdBQU0sR0FBTSxHQUc1QjhnQyxHQUlKN2tCLEVBQU9XLE1BQU8wYyxFQUFTVixHQUFRNTRCLEVBQU0sWUFJdkNzTSxFQUFTeFMsS0FBTSttQyxFQUFZbG5DLEdBQUtxRyxFQUFNckcsR0FHdkMsR0FBS21uQyxFQU9KLElBTkF0bEIsRUFBTThkLEVBQVNBLEVBQVF4OEIsT0FBUyxHQUFJQyxjQUdwQ2tmLEVBQU8vVSxJQUFLb3lCLEVBQVNnSCxJQUdmM21DLEVBQUksRUFBR0EsRUFBSW1uQyxFQUFZbm5DLElBQzVCcUcsRUFBT3M1QixFQUFTMy9CLEdBQ1hxK0IsR0FBWXA4QixLQUFNb0UsRUFBS2tiLE1BQVEsTUFDbEMrWixFQUFTbkIsT0FBUTl6QixFQUFNLGVBQ3hCaWMsRUFBT2xiLFNBQVV5YSxFQUFLeGIsS0FFakJBLEVBQUttYixLQUE4QyxZQUFyQ25iLEVBQUtrYixNQUFRLElBQUt0SyxjQUcvQnFMLEVBQU9nbEIsV0FBYWpoQyxFQUFLcWIsVUFDN0JZLEVBQU9nbEIsU0FBVWpoQyxFQUFLbWIsSUFBSyxDQUMxQkMsTUFBT3BiLEVBQUtvYixPQUFTcGIsRUFBSzZiLGFBQWMsVUFDdENMLEdBR0pGLEVBQVN0YixFQUFLd25CLFlBQVl6ckIsUUFBU29rQyxHQUFjLElBQU1uZ0MsRUFBTXdiLElBUW5FLE9BQU9xbEIsRUFHUixTQUFTOVAsR0FBUTNXLEVBQU04QixFQUFVZ2xCLEdBS2hDLElBSkEsSUFBSWxoQyxFQUNINDVCLEVBQVExZCxFQUFXRCxFQUFPdGYsT0FBUXVmLEVBQVU5QixHQUFTQSxFQUNyRHpnQixFQUFJLEVBRTRCLE9BQXZCcUcsRUFBTzQ1QixFQUFPamdDLElBQWVBLElBQ2hDdW5DLEdBQThCLElBQWxCbGhDLEVBQUs1QixVQUN0QjZkLEVBQU9rbEIsVUFBV3ZJLEdBQVE1NEIsSUFHdEJBLEVBQUt2QixhQUNKeWlDLEdBQVkxSyxHQUFZeDJCLElBQzVCNjRCLEdBQWVELEdBQVE1NEIsRUFBTSxXQUU5QkEsRUFBS3ZCLFdBQVdvTixZQUFhN0wsSUFJL0IsT0FBT29hLEVBR1I2QixFQUFPbEMsT0FBUSxDQUNkOGYsY0FBZSxTQUFVdDRCLEdBQ3hCLE9BQU9BLEdBR1JrYyxNQUFPLFNBQVVyRCxFQUFNZ25CLEVBQWVDLEdBQ3JDLElBQUkxbkMsRUFBR0MsRUFBRzBuQyxFQUFhQyxFQUN0QjlqQixFQUFRckQsRUFBSytkLFdBQVcsR0FDeEJxSixFQUFTaEwsR0FBWXBjLEdBR3RCLEtBQU1VLEVBQVFzZCxnQkFBc0MsSUFBbEJoZSxFQUFLaGMsVUFBb0MsS0FBbEJnYyxFQUFLaGMsVUFDM0Q2ZCxFQUFPMFIsU0FBVXZULElBTW5CLElBSEFtbkIsRUFBZTNJLEdBQVFuYixHQUdqQjlqQixFQUFJLEVBQUdDLEdBRmIwbkMsRUFBYzFJLEdBQVF4ZSxJQUVPdGQsT0FBUW5ELEVBQUlDLEVBQUdELElBQzNDZ25DLEdBQVVXLEVBQWEzbkMsR0FBSzRuQyxFQUFjNW5DLElBSzVDLEdBQUt5bkMsRUFDSixHQUFLQyxFQUlKLElBSEFDLEVBQWNBLEdBQWUxSSxHQUFReGUsR0FDckNtbkIsRUFBZUEsR0FBZ0IzSSxHQUFRbmIsR0FFakM5akIsRUFBSSxFQUFHQyxFQUFJMG5DLEVBQVl4a0MsT0FBUW5ELEVBQUlDLEVBQUdELElBQzNDNG1DLEdBQWdCZSxFQUFhM25DLEdBQUs0bkMsRUFBYzVuQyxTQUdqRDRtQyxHQUFnQm5tQixFQUFNcUQsR0FXeEIsT0FOQThqQixFQUFlM0ksR0FBUW5iLEVBQU8sV0FDWjNnQixPQUFTLEdBQzFCKzdCLEdBQWUwSSxHQUFlQyxHQUFVNUksR0FBUXhlLEVBQU0sV0FJaERxRCxHQUdSMGpCLFVBQVcsU0FBVXprQixHQUtwQixJQUpBLElBQUlwVCxFQUFNOFEsRUFBTWMsRUFDZmlYLEVBQVVsVyxFQUFPNVAsTUFBTThsQixRQUN2Qng0QixFQUFJLE9BRTZCMEgsS0FBeEIrWSxFQUFPc0MsRUFBTy9pQixJQUFxQkEsSUFDNUMsR0FBS2c3QixFQUFZdmEsR0FBUyxDQUN6QixHQUFPOVEsRUFBTzhRLEVBQU02YSxFQUFTcFgsU0FBYyxDQUMxQyxHQUFLdlUsRUFBSzh4QixPQUNULElBQU1sZ0IsS0FBUTVSLEVBQUs4eEIsT0FDYmpKLEVBQVNqWCxHQUNiZSxFQUFPNVAsTUFBTTBrQixPQUFRM1csRUFBTWMsR0FJM0JlLEVBQU9pZ0IsWUFBYTloQixFQUFNYyxFQUFNNVIsRUFBS215QixRQU94Q3JoQixFQUFNNmEsRUFBU3BYLGNBQVl4YyxFQUV2QitZLEVBQU04YSxFQUFTclgsV0FJbkJ6RCxFQUFNOGEsRUFBU3JYLGNBQVl4YyxPQU9oQzRhLEVBQU8vZixHQUFHNmQsT0FBUSxDQUNqQjBuQixPQUFRLFNBQVV2bEIsR0FDakIsT0FBTzZVLEdBQVF6MEIsS0FBTTRmLEdBQVUsSUFHaEM2VSxPQUFRLFNBQVU3VSxHQUNqQixPQUFPNlUsR0FBUXowQixLQUFNNGYsSUFHdEJOLEtBQU0sU0FBVWhoQixHQUNmLE9BQU9rNUIsRUFBUXgzQixNQUFNLFNBQVUxQixHQUM5QixZQUFpQnlHLElBQVZ6RyxFQUNOcWhCLEVBQU9MLEtBQU10ZixNQUNiQSxLQUFLMDBCLFFBQVFsVSxNQUFNLFdBQ0ssSUFBbEJ4Z0IsS0FBSzhCLFVBQW9DLEtBQWxCOUIsS0FBSzhCLFVBQXFDLElBQWxCOUIsS0FBSzhCLFdBQ3hEOUIsS0FBS2tyQixZQUFjNXNCLFFBR3BCLEtBQU1BLEVBQU93RyxVQUFVdEUsU0FHM0I0a0MsT0FBUSxXQUNQLE9BQU9kLEdBQVV0a0MsS0FBTThFLFdBQVcsU0FBVWdaLEdBQ3BCLElBQWxCOWQsS0FBSzhCLFVBQW9DLEtBQWxCOUIsS0FBSzhCLFVBQXFDLElBQWxCOUIsS0FBSzhCLFVBQzNDZ2lDLEdBQW9COWpDLEtBQU04ZCxHQUNoQzJCLFlBQWEzQixPQUt2QnVuQixRQUFTLFdBQ1IsT0FBT2YsR0FBVXRrQyxLQUFNOEUsV0FBVyxTQUFVZ1osR0FDM0MsR0FBdUIsSUFBbEI5ZCxLQUFLOEIsVUFBb0MsS0FBbEI5QixLQUFLOEIsVUFBcUMsSUFBbEI5QixLQUFLOEIsU0FBaUIsQ0FDekUsSUFBSW1GLEVBQVM2OEIsR0FBb0I5akMsS0FBTThkLEdBQ3ZDN1csRUFBT3ErQixhQUFjeG5CLEVBQU03VyxFQUFPa2tCLGlCQUtyQ29hLE9BQVEsV0FDUCxPQUFPakIsR0FBVXRrQyxLQUFNOEUsV0FBVyxTQUFVZ1osR0FDdEM5ZCxLQUFLbUMsWUFDVG5DLEtBQUttQyxXQUFXbWpDLGFBQWN4bkIsRUFBTTlkLFVBS3ZDd2xDLE1BQU8sV0FDTixPQUFPbEIsR0FBVXRrQyxLQUFNOEUsV0FBVyxTQUFVZ1osR0FDdEM5ZCxLQUFLbUMsWUFDVG5DLEtBQUttQyxXQUFXbWpDLGFBQWN4bkIsRUFBTTlkLEtBQUtzb0IsaUJBSzVDb00sTUFBTyxXQUlOLElBSEEsSUFBSTVXLEVBQ0h6Z0IsRUFBSSxFQUUyQixPQUF0QnlnQixFQUFPOWQsS0FBTTNDLElBQWVBLElBQ2QsSUFBbEJ5Z0IsRUFBS2hjLFdBR1Q2ZCxFQUFPa2xCLFVBQVd2SSxHQUFReGUsR0FBTSxJQUdoQ0EsRUFBS29OLFlBQWMsSUFJckIsT0FBT2xyQixNQUdSbWhCLE1BQU8sU0FBVTJqQixFQUFlQyxHQUkvQixPQUhBRCxFQUFpQyxNQUFqQkEsR0FBZ0NBLEVBQ2hEQyxFQUF5QyxNQUFyQkEsRUFBNEJELEVBQWdCQyxFQUV6RC9rQyxLQUFLNEssS0FBSyxXQUNoQixPQUFPK1UsRUFBT3dCLE1BQU9uaEIsS0FBTThrQyxFQUFlQyxPQUk1QzkvQixLQUFNLFNBQVUzRyxHQUNmLE9BQU9rNUIsRUFBUXgzQixNQUFNLFNBQVUxQixHQUM5QixJQUFJd2YsRUFBTzlkLEtBQU0sSUFBTyxHQUN2QjNDLEVBQUksRUFDSkMsRUFBSTBDLEtBQUtRLE9BRVYsUUFBZXVFLElBQVZ6RyxHQUF5QyxJQUFsQndmLEVBQUtoYyxTQUNoQyxPQUFPZ2MsRUFBSzhMLFVBSWIsR0FBc0IsaUJBQVZ0ckIsSUFBdUJxbEMsR0FBYXJrQyxLQUFNaEIsS0FDcEQwOUIsSUFBV1AsR0FBU3pVLEtBQU0xb0IsSUFBVyxDQUFFLEdBQUksS0FBUSxHQUFJZ1csZUFBa0IsQ0FFMUVoVyxFQUFRcWhCLEVBQU80ZCxjQUFlai9CLEdBRTlCLElBQ0MsS0FBUWpCLEVBQUlDLEVBQUdELElBSVMsS0FIdkJ5Z0IsRUFBTzlkLEtBQU0zQyxJQUFPLElBR1Z5RSxXQUNUNmQsRUFBT2tsQixVQUFXdkksR0FBUXhlLEdBQU0sSUFDaENBLEVBQUs4TCxVQUFZdHJCLEdBSW5Cd2YsRUFBTyxFQUdOLE1BQVEvVixLQUdOK1YsR0FDSjlkLEtBQUswMEIsUUFBUTBRLE9BQVE5bUMsS0FFcEIsS0FBTUEsRUFBT3dHLFVBQVV0RSxTQUczQmlsQyxZQUFhLFdBQ1osSUFBSXZJLEVBQVUsR0FHZCxPQUFPb0gsR0FBVXRrQyxLQUFNOEUsV0FBVyxTQUFVZ1osR0FDM0MsSUFBSXhkLEVBQVNOLEtBQUttQyxXQUVid2QsRUFBT3NDLFFBQVNqaUIsS0FBTWs5QixHQUFZLElBQ3RDdmQsRUFBT2tsQixVQUFXdkksR0FBUXQ4QixPQUNyQk0sR0FDSkEsRUFBT29sQyxhQUFjNW5CLEVBQU05ZCxTQUszQms5QixNQUlMdmQsRUFBT2EsS0FBTSxDQUNabWxCLFNBQVUsU0FDVkMsVUFBVyxVQUNYTixhQUFjLFNBQ2RPLFlBQWEsUUFDYkMsV0FBWSxnQkFDVixTQUFVbG9DLEVBQU1tb0MsR0FDbEJwbUIsRUFBTy9mLEdBQUloQyxHQUFTLFNBQVVnaUIsR0FPN0IsSUFOQSxJQUFJUSxFQUNIQyxFQUFNLEdBQ04ybEIsRUFBU3JtQixFQUFRQyxHQUNqQmMsRUFBT3NsQixFQUFPeGxDLE9BQVMsRUFDdkJuRCxFQUFJLEVBRUdBLEdBQUtxakIsRUFBTXJqQixJQUNsQitpQixFQUFRL2lCLElBQU1xakIsRUFBTzFnQixLQUFPQSxLQUFLbWhCLE9BQU8sR0FDeEN4QixFQUFRcW1CLEVBQVEzb0MsSUFBTzBvQyxHQUFZM2xCLEdBSW5DalEsRUFBS29KLE1BQU84RyxFQUFLRCxFQUFNbGlCLE9BR3hCLE9BQU84QixLQUFLbWdCLFVBQVdFLE9BR3pCLElBQUk0bEIsR0FBWSxJQUFJdmhCLE9BQVEsS0FBT3FWLEdBQU8sa0JBQW1CLEtBRXpEbU0sR0FBWSxTQUFVcG9CLEdBS3hCLElBQUlxa0IsRUFBT3JrQixFQUFLcmQsY0FBY3NCLFlBTTlCLE9BSk1vZ0MsR0FBU0EsRUFBS2dFLFNBQ25CaEUsRUFBT3ZoQyxHQUdEdWhDLEVBQUtuZ0MsaUJBQWtCOGIsSUFHNUJzb0IsR0FBTyxTQUFVdG9CLEVBQU05UCxFQUFTZ0MsR0FDbkMsSUFBSXFRLEVBQUt6aUIsRUFDUnlvQyxFQUFNLEdBR1AsSUFBTXpvQyxLQUFRb1EsRUFDYnE0QixFQUFLem9DLEdBQVNrZ0IsRUFBSzdPLE1BQU9yUixHQUMxQmtnQixFQUFLN08sTUFBT3JSLEdBQVNvUSxFQUFTcFEsR0FNL0IsSUFBTUEsS0FITnlpQixFQUFNclEsRUFBU3hTLEtBQU1zZ0IsR0FHUDlQLEVBQ2I4UCxFQUFLN08sTUFBT3JSLEdBQVN5b0MsRUFBS3pvQyxHQUczQixPQUFPeWlCLEdBSUppbUIsR0FBWSxJQUFJNWhCLE9BQVF1VixHQUFVelMsS0FBTSxLQUFPLEtBaUpuRCxTQUFTK2UsR0FBUXpvQixFQUFNbGdCLEVBQU00b0MsR0FDNUIsSUFBSTkvQixFQUFPKy9CLEVBQVVDLEVBQVVybUIsRUFNOUJwUixFQUFRNk8sRUFBSzdPLE1BcUNkLE9BbkNBdTNCLEVBQVdBLEdBQVlOLEdBQVdwb0IsTUFRcEIsTUFGYnVDLEVBQU1tbUIsRUFBU0csaUJBQWtCL29DLElBQVU0b0MsRUFBVTVvQyxLQUVqQ3M4QixHQUFZcGMsS0FDL0J1QyxFQUFNVixFQUFPMVEsTUFBTzZPLEVBQU1sZ0IsS0FRckI0Z0IsRUFBUW9vQixrQkFBb0JYLEdBQVUzbUMsS0FBTStnQixJQUFTaW1CLEdBQVVobkMsS0FBTTFCLEtBRzFFOEksRUFBUXVJLEVBQU12SSxNQUNkKy9CLEVBQVd4M0IsRUFBTXczQixTQUNqQkMsRUFBV3ozQixFQUFNeTNCLFNBR2pCejNCLEVBQU13M0IsU0FBV3gzQixFQUFNeTNCLFNBQVd6M0IsRUFBTXZJLE1BQVEyWixFQUNoREEsRUFBTW1tQixFQUFTOS9CLE1BR2Z1SSxFQUFNdkksTUFBUUEsRUFDZHVJLEVBQU13M0IsU0FBV0EsRUFDakJ4M0IsRUFBTXkzQixTQUFXQSxTQUlKM2hDLElBQVJzYixFQUlOQSxFQUFNLEdBQ05BLEVBSUYsU0FBU3dtQixHQUFjQyxFQUFhQyxHQUduQyxNQUFPLENBQ043b0MsSUFBSyxXQUNKLElBQUs0b0MsSUFTTCxPQUFTOW1DLEtBQUs5QixJQUFNNm9DLEdBQVN4dEIsTUFBT3ZaLEtBQU04RSxrQkFMbEM5RSxLQUFLOUIsT0EzTWhCLFdBSUMsU0FBUzhvQyxJQUdSLEdBQU16TCxFQUFOLENBSUEwTCxFQUFVaDRCLE1BQU1pNEIsUUFBVSwrRUFFMUIzTCxFQUFJdHNCLE1BQU1pNEIsUUFDVCw0SEFHRDdqQyxHQUFnQm9jLFlBQWF3bkIsR0FBWXhuQixZQUFhOGIsR0FFdEQsSUFBSTRMLEVBQVd2bUMsRUFBT29CLGlCQUFrQnU1QixHQUN4QzZMLEVBQW9DLE9BQWpCRCxFQUFTMWhDLElBRzVCNGhDLEVBQXNFLEtBQTlDQyxFQUFvQkgsRUFBU2wrQixZQUlyRHN5QixFQUFJdHNCLE1BQU1ySixNQUFRLE1BQ2xCMmhDLEVBQTZELEtBQXpDRCxFQUFvQkgsRUFBU3ZoQyxPQUlqRDRoQyxFQUFnRSxLQUF6Q0YsRUFBb0JILEVBQVN6Z0MsT0FNcEQ2MEIsRUFBSXRzQixNQUFNbFAsU0FBVyxXQUNyQjBuQyxFQUFpRSxLQUE5Q0gsRUFBb0IvTCxFQUFJbHpCLFlBQWMsR0FFekRoRixHQUFnQmtNLFlBQWEwM0IsR0FJN0IxTCxFQUFNLE1BR1AsU0FBUytMLEVBQW9CSSxHQUM1QixPQUFPcmhDLEtBQUt3TyxNQUFPM08sV0FBWXdoQyxJQUdoQyxJQUFJTixFQUFrQkksRUFBc0JDLEVBQWtCRixFQUM3REksRUFBeUJOLEVBQ3pCSixFQUFZdm1DLEVBQVMyZSxjQUFlLE9BQ3BDa2MsRUFBTTc2QixFQUFTMmUsY0FBZSxPQUd6QmtjLEVBQUl0c0IsUUFNVnNzQixFQUFJdHNCLE1BQU0yNEIsZUFBaUIsY0FDM0JyTSxFQUFJTSxXQUFXLEdBQU81c0IsTUFBTTI0QixlQUFpQixHQUM3Q3BwQixFQUFRcXBCLGdCQUErQyxnQkFBN0J0TSxFQUFJdHNCLE1BQU0yNEIsZUFFcENqb0IsRUFBT2xDLE9BQVFlLEVBQVMsQ0FDdkJzcEIsa0JBQW1CLFdBRWxCLE9BREFkLElBQ09RLEdBRVJaLGVBQWdCLFdBRWYsT0FEQUksSUFDT08sR0FFUlEsY0FBZSxXQUVkLE9BREFmLElBQ09JLEdBRVJZLG1CQUFvQixXQUVuQixPQURBaEIsSUFDT0ssR0FFUlksY0FBZSxXQUVkLE9BREFqQixJQUNPUyxHQVlSUyxxQkFBc0IsV0FDckIsSUFBSUMsRUFBT2hNLEVBQUlpTSxFQUFTQyxFQW1DeEIsT0FsQ2dDLE1BQTNCVixJQUNKUSxFQUFRem5DLEVBQVMyZSxjQUFlLFNBQ2hDOGMsRUFBS3o3QixFQUFTMmUsY0FBZSxNQUM3QitvQixFQUFVMW5DLEVBQVMyZSxjQUFlLE9BRWxDOG9CLEVBQU1sNUIsTUFBTWk0QixRQUFVLDJEQUN0Qi9LLEVBQUdsdEIsTUFBTWk0QixRQUFVLG1CQUtuQi9LLEVBQUdsdEIsTUFBTXhJLE9BQVMsTUFDbEIyaEMsRUFBUW41QixNQUFNeEksT0FBUyxNQVF2QjJoQyxFQUFRbjVCLE1BQU1xckIsUUFBVSxRQUV4QmozQixHQUNFb2MsWUFBYTBvQixHQUNiMW9CLFlBQWEwYyxHQUNiMWMsWUFBYTJvQixHQUVmQyxFQUFVem5DLEVBQU9vQixpQkFBa0JtNkIsR0FDbkN3TCxFQUE0QnBoQyxTQUFVOGhDLEVBQVE1aEMsT0FBUSxJQUNyREYsU0FBVThoQyxFQUFRdi9CLGVBQWdCLElBQ2xDdkMsU0FBVThoQyxFQUFRQyxrQkFBbUIsTUFBV25NLEVBQUc1ekIsYUFFcERsRixHQUFnQmtNLFlBQWE0NEIsSUFFdkJSLE1BdklWLEdBc05BLElBQUlZLEdBQWMsQ0FBRSxTQUFVLE1BQU8sTUFDcENDLEdBQWE5bkMsRUFBUzJlLGNBQWUsT0FBUXBRLE1BQzdDdzVCLEdBQWMsR0FrQmYsU0FBU0MsR0FBZTlxQyxHQUN2QixJQUFJK3FDLEVBQVFocEIsRUFBT2lwQixTQUFVaHJDLElBQVU2cUMsR0FBYTdxQyxHQUVwRCxPQUFLK3FDLElBR0EvcUMsS0FBUTRxQyxHQUNMNXFDLEVBRUQ2cUMsR0FBYTdxQyxHQXhCckIsU0FBeUJBLEdBTXhCLElBSEEsSUFBSWlyQyxFQUFVanJDLEVBQU0sR0FBSWtSLGNBQWdCbFIsRUFBS3NQLE1BQU8sR0FDbkQ3UCxFQUFJa3JDLEdBQVkvbkMsT0FFVG5ELEtBRVAsSUFEQU8sRUFBTzJxQyxHQUFhbHJDLEdBQU13ckMsS0FDYkwsR0FDWixPQUFPNXFDLEVBZW9Ca3JDLENBQWdCbHJDLElBQVVBLEdBSXhELElBS0NtckMsR0FBZSw0QkFDZkMsR0FBYyxNQUNkQyxHQUFVLENBQUVscEMsU0FBVSxXQUFZbXBDLFdBQVksU0FBVTVPLFFBQVMsU0FDakU2TyxHQUFxQixDQUNwQkMsY0FBZSxJQUNmQyxXQUFZLE9BR2QsU0FBU0MsR0FBbUJ6b0IsRUFBT3ZpQixFQUFPK0csR0FJekMsSUFBSStjLEVBQVU0WCxHQUFRaFQsS0FBTTFvQixHQUM1QixPQUFPOGpCLEVBR04vYixLQUFLQyxJQUFLLEVBQUc4YixFQUFTLElBQVEvYyxHQUFZLEtBQVUrYyxFQUFTLElBQU8sTUFDcEU5akIsRUFHRixTQUFTaXJDLEdBQW9CenJCLEVBQU0wckIsRUFBV0MsRUFBS0MsRUFBYTVqQyxFQUFRNmpDLEdBQ3ZFLElBQUl0c0MsRUFBa0IsVUFBZG1zQyxFQUF3QixFQUFJLEVBQ25DSSxFQUFRLEVBQ1JDLEVBQVEsRUFHVCxHQUFLSixLQUFVQyxFQUFjLFNBQVcsV0FDdkMsT0FBTyxFQUdSLEtBQVFyc0MsRUFBSSxFQUFHQSxHQUFLLEVBR04sV0FBUm9zQyxJQUNKSSxHQUFTbHFCLEVBQU8xZixJQUFLNmQsRUFBTTJyQixFQUFNeFAsR0FBVzU4QixJQUFLLEVBQU15SSxJQUlsRDRqQyxHQW1CUSxZQUFSRCxJQUNKSSxHQUFTbHFCLEVBQU8xZixJQUFLNmQsRUFBTSxVQUFZbWMsR0FBVzU4QixJQUFLLEVBQU15SSxJQUlqRCxXQUFSMmpDLElBQ0pJLEdBQVNscUIsRUFBTzFmLElBQUs2ZCxFQUFNLFNBQVdtYyxHQUFXNThCLEdBQU0sU0FBUyxFQUFNeUksTUF0QnZFK2pDLEdBQVNscUIsRUFBTzFmLElBQUs2ZCxFQUFNLFVBQVltYyxHQUFXNThCLElBQUssRUFBTXlJLEdBR2hELFlBQVIyakMsRUFDSkksR0FBU2xxQixFQUFPMWYsSUFBSzZkLEVBQU0sU0FBV21jLEdBQVc1OEIsR0FBTSxTQUFTLEVBQU15SSxHQUl0RThqQyxHQUFTanFCLEVBQU8xZixJQUFLNmQsRUFBTSxTQUFXbWMsR0FBVzU4QixHQUFNLFNBQVMsRUFBTXlJLElBb0N6RSxPQWhCTTRqQyxHQUFlQyxHQUFlLElBSW5DRSxHQUFTeGpDLEtBQUtDLElBQUssRUFBR0QsS0FBS3lqQyxLQUMxQmhzQixFQUFNLFNBQVcwckIsRUFBVyxHQUFJMTZCLGNBQWdCMDZCLEVBQVV0OEIsTUFBTyxJQUNqRXk4QixFQUNBRSxFQUNBRCxFQUNBLE1BSU0sR0FHREMsRUFHUixTQUFTRSxHQUFrQmpzQixFQUFNMHJCLEVBQVdJLEdBRzNDLElBQUk5akMsRUFBU29nQyxHQUFXcG9CLEdBS3ZCNHJCLElBRG1CbHJCLEVBQVFzcEIscUJBQXVCOEIsSUFFRSxlQUFuRGpxQixFQUFPMWYsSUFBSzZkLEVBQU0sYUFBYSxFQUFPaFksR0FDdkNra0MsRUFBbUJOLEVBRW5CdnFCLEVBQU1vbkIsR0FBUXpvQixFQUFNMHJCLEVBQVcxakMsR0FDL0Jta0MsRUFBYSxTQUFXVCxFQUFXLEdBQUkxNkIsY0FBZ0IwNkIsRUFBVXQ4QixNQUFPLEdBSXpFLEdBQUsrNEIsR0FBVTNtQyxLQUFNNmYsR0FBUSxDQUM1QixJQUFNeXFCLEVBQ0wsT0FBT3pxQixFQUVSQSxFQUFNLE9BeUNQLFFBbENRWCxFQUFRc3BCLHFCQUF1QjRCLElBTXJDbHJCLEVBQVEwcEIsd0JBQTBCaG1DLEVBQVU0YixFQUFNLE9BSTNDLFNBQVJxQixJQUlDalosV0FBWWlaLElBQTBELFdBQWpEUSxFQUFPMWYsSUFBSzZkLEVBQU0sV0FBVyxFQUFPaFksS0FHMURnWSxFQUFLb3NCLGlCQUFpQjFwQyxTQUV0QmtwQyxFQUFpRSxlQUFuRC9wQixFQUFPMWYsSUFBSzZkLEVBQU0sYUFBYSxFQUFPaFksSUFLcERra0MsRUFBbUJDLEtBQWNuc0IsS0FFaENxQixFQUFNckIsRUFBTW1zQixNQUtkOXFCLEVBQU1qWixXQUFZaVosSUFBUyxHQUkxQm9xQixHQUNDenJCLEVBQ0EwckIsRUFDQUksSUFBV0YsRUFBYyxTQUFXLFdBQ3BDTSxFQUNBbGtDLEVBR0FxWixHQUVFLEtBK1NMLFNBQVNnckIsR0FBT3JzQixFQUFNOVAsRUFBU2IsRUFBTWhKLEVBQUtpbUMsR0FDekMsT0FBTyxJQUFJRCxHQUFNbHJDLFVBQVU2Z0IsS0FBTWhDLEVBQU05UCxFQUFTYixFQUFNaEosRUFBS2ltQyxHQTdTNUR6cUIsRUFBT2xDLE9BQVEsQ0FJZDRzQixTQUFVLENBQ1RDLFFBQVMsQ0FDUnBzQyxJQUFLLFNBQVU0ZixFQUFNMG9CLEdBQ3BCLEdBQUtBLEVBQVcsQ0FHZixJQUFJbm1CLEVBQU1rbUIsR0FBUXpvQixFQUFNLFdBQ3hCLE1BQWUsS0FBUnVDLEVBQWEsSUFBTUEsTUFPOUIwYSxVQUFXLENBQ1YseUJBQTJCLEVBQzNCLGFBQWUsRUFDZixhQUFlLEVBQ2YsVUFBWSxFQUNaLFlBQWMsRUFDZCxZQUFjLEVBQ2QsVUFBWSxFQUNaLFlBQWMsRUFDZCxlQUFpQixFQUNqQixpQkFBbUIsRUFDbkIsU0FBVyxFQUNYLFlBQWMsRUFDZCxjQUFnQixFQUNoQixZQUFjLEVBQ2QsU0FBVyxFQUNYLE9BQVMsRUFDVCxTQUFXLEVBQ1gsUUFBVSxFQUNWLFFBQVUsRUFDVixNQUFRLEdBS1Q2TixTQUFVLEdBR1YzNUIsTUFBTyxTQUFVNk8sRUFBTWxnQixFQUFNVSxFQUFPc3JDLEdBR25DLEdBQU05ckIsR0FBMEIsSUFBbEJBLEVBQUtoYyxVQUFvQyxJQUFsQmdjLEVBQUtoYyxVQUFtQmdjLEVBQUs3TyxNQUFsRSxDQUtBLElBQUlvUixFQUFLekIsRUFBTTRhLEVBQ2QrUSxFQUFXcFMsRUFBV3Y2QixHQUN0QjRzQyxFQUFleEIsR0FBWTFwQyxLQUFNMUIsR0FDakNxUixFQUFRNk8sRUFBSzdPLE1BYWQsR0FSTXU3QixJQUNMNXNDLEVBQU84cUMsR0FBZTZCLElBSXZCL1EsRUFBUTdaLEVBQU8wcUIsU0FBVXpzQyxJQUFVK2hCLEVBQU8wcUIsU0FBVUUsUUFHckN4bEMsSUFBVnpHLEVBMENKLE9BQUtrN0IsR0FBUyxRQUFTQSxRQUN3QnowQixLQUE1Q3NiLEVBQU1tWixFQUFNdDdCLElBQUs0ZixHQUFNLEVBQU84ckIsSUFFekJ2cEIsRUFJRHBSLEVBQU9yUixHQTdDQSxZQUhkZ2hCLFNBQWN0Z0IsS0FHYytoQixFQUFNMlosR0FBUWhULEtBQU0xb0IsS0FBYStoQixFQUFLLEtBQ2pFL2hCLEVBQVFpOEIsR0FBV3pjLEVBQU1sZ0IsRUFBTXlpQixHQUcvQnpCLEVBQU8sVUFJTSxNQUFUdGdCLEdBQWlCQSxHQUFVQSxJQU9sQixXQUFUc2dCLEdBQXNCNHJCLElBQzFCbHNDLEdBQVMraEIsR0FBT0EsRUFBSyxLQUFTVixFQUFPb2IsVUFBV3dQLEdBQWEsR0FBSyxPQUk3RC9yQixFQUFRcXBCLGlCQUE2QixLQUFWdnBDLEdBQWlELElBQWpDVixFQUFLcUQsUUFBUyxnQkFDOURnTyxFQUFPclIsR0FBUyxXQUlYNDdCLEdBQVksUUFBU0EsUUFDc0J6MEIsS0FBOUN6RyxFQUFRazdCLEVBQU1mLElBQUszYSxFQUFNeGYsRUFBT3NyQyxNQUU3QlksRUFDSnY3QixFQUFNdzdCLFlBQWE3c0MsRUFBTVUsR0FFekIyUSxFQUFPclIsR0FBU1UsTUFrQnBCMkIsSUFBSyxTQUFVNmQsRUFBTWxnQixFQUFNZ3NDLEVBQU85akMsR0FDakMsSUFBSXFaLEVBQUtlLEVBQUtzWixFQUNiK1EsRUFBV3BTLEVBQVd2NkIsR0E2QnZCLE9BNUJnQm9yQyxHQUFZMXBDLEtBQU0xQixLQU1qQ0EsRUFBTzhxQyxHQUFlNkIsS0FJdkIvUSxFQUFRN1osRUFBTzBxQixTQUFVenNDLElBQVUraEIsRUFBTzBxQixTQUFVRSxLQUd0QyxRQUFTL1EsSUFDdEJyYSxFQUFNcWEsRUFBTXQ3QixJQUFLNGYsR0FBTSxFQUFNOHJCLFNBSWpCN2tDLElBQVJvYSxJQUNKQSxFQUFNb25CLEdBQVF6b0IsRUFBTWxnQixFQUFNa0ksSUFJZCxXQUFScVosR0FBb0J2aEIsS0FBUXVyQyxLQUNoQ2hxQixFQUFNZ3FCLEdBQW9CdnJDLElBSVosS0FBVmdzQyxHQUFnQkEsR0FDcEIxcEIsRUFBTWhhLFdBQVlpWixJQUNELElBQVZ5cUIsR0FBa0JqNUIsU0FBVXVQLEdBQVFBLEdBQU8sRUFBSWYsR0FHaERBLEtBSVRRLEVBQU9hLEtBQU0sQ0FBRSxTQUFVLFVBQVcsU0FBVWlDLEVBQUkrbUIsR0FDakQ3cEIsRUFBTzBxQixTQUFVYixHQUFjLENBQzlCdHJDLElBQUssU0FBVTRmLEVBQU0wb0IsRUFBVW9ELEdBQzlCLEdBQUtwRCxFQUlKLE9BQU91QyxHQUFhenBDLEtBQU1xZ0IsRUFBTzFmLElBQUs2ZCxFQUFNLGFBUXhDQSxFQUFLb3NCLGlCQUFpQjFwQyxRQUFXc2QsRUFBS2hXLHdCQUF3QnBCLE1BSWpFcWpDLEdBQWtCanNCLEVBQU0wckIsRUFBV0ksR0FIbkN4RCxHQUFNdG9CLEVBQU1tckIsSUFBUyxXQUNwQixPQUFPYyxHQUFrQmpzQixFQUFNMHJCLEVBQVdJLE9BTTlDblIsSUFBSyxTQUFVM2EsRUFBTXhmLEVBQU9zckMsR0FDM0IsSUFBSXhuQixFQUNIdGMsRUFBU29nQyxHQUFXcG9CLEdBSXBCNHNCLEdBQXNCbHNCLEVBQVF5cEIsaUJBQ1QsYUFBcEJuaUMsRUFBTy9GLFNBSVIycEMsR0FEa0JnQixHQUFzQmQsSUFFWSxlQUFuRGpxQixFQUFPMWYsSUFBSzZkLEVBQU0sYUFBYSxFQUFPaFksR0FDdkNULEVBQVd1a0MsRUFDVkwsR0FDQ3pyQixFQUNBMHJCLEVBQ0FJLEVBQ0FGLEVBQ0E1akMsR0FFRCxFQXFCRixPQWpCSzRqQyxHQUFlZ0IsSUFDbkJybEMsR0FBWWdCLEtBQUt5akMsS0FDaEJoc0IsRUFBTSxTQUFXMHJCLEVBQVcsR0FBSTE2QixjQUFnQjA2QixFQUFVdDhCLE1BQU8sSUFDakVoSCxXQUFZSixFQUFRMGpDLElBQ3BCRCxHQUFvQnpyQixFQUFNMHJCLEVBQVcsVUFBVSxFQUFPMWpDLEdBQ3RELEtBS0dULElBQWMrYyxFQUFVNFgsR0FBUWhULEtBQU0xb0IsS0FDYixRQUEzQjhqQixFQUFTLElBQU8sUUFFbEJ0RSxFQUFLN08sTUFBT3U2QixHQUFjbHJDLEVBQzFCQSxFQUFRcWhCLEVBQU8xZixJQUFLNmQsRUFBTTByQixJQUdwQkYsR0FBbUJ4ckIsRUFBTXhmLEVBQU8rRyxRQUsxQ3NhLEVBQU8wcUIsU0FBU3BoQyxXQUFhNDlCLEdBQWNyb0IsRUFBUXdwQixvQkFDbEQsU0FBVWxxQixFQUFNMG9CLEdBQ2YsR0FBS0EsRUFDSixPQUFTdGdDLFdBQVlxZ0MsR0FBUXpvQixFQUFNLGdCQUNsQ0EsRUFBS2hXLHdCQUF3Qm5DLEtBQzVCeWdDLEdBQU10b0IsRUFBTSxDQUFFN1UsV0FBWSxJQUFLLFdBQzlCLE9BQU82VSxFQUFLaFcsd0JBQXdCbkMsU0FFbkMsUUFNUGdhLEVBQU9hLEtBQU0sQ0FDWm1xQixPQUFRLEdBQ1I3Z0MsUUFBUyxHQUNUOGdDLE9BQVEsVUFDTixTQUFVNzdCLEVBQVE4N0IsR0FDcEJsckIsRUFBTzBxQixTQUFVdDdCLEVBQVM4N0IsR0FBVyxDQUNwQ0MsT0FBUSxTQUFVeHNDLEdBT2pCLElBTkEsSUFBSWpCLEVBQUksRUFDUDB0QyxFQUFXLEdBR1hDLEVBQXlCLGlCQUFWMXNDLEVBQXFCQSxFQUFNK00sTUFBTyxLQUFRLENBQUUvTSxHQUVwRGpCLEVBQUksRUFBR0EsSUFDZDB0QyxFQUFVaDhCLEVBQVNrckIsR0FBVzU4QixHQUFNd3RDLEdBQ25DRyxFQUFPM3RDLElBQU8ydEMsRUFBTzN0QyxFQUFJLElBQU8ydEMsRUFBTyxHQUd6QyxPQUFPRCxJQUlPLFdBQVhoOEIsSUFDSjRRLEVBQU8wcUIsU0FBVXQ3QixFQUFTODdCLEdBQVNwUyxJQUFNNlEsT0FJM0MzcEIsRUFBTy9mLEdBQUc2ZCxPQUFRLENBQ2pCeGQsSUFBSyxTQUFVckMsRUFBTVUsR0FDcEIsT0FBT2s1QixFQUFReDNCLE1BQU0sU0FBVThkLEVBQU1sZ0IsRUFBTVUsR0FDMUMsSUFBSXdILEVBQVFzTyxFQUNYeEosRUFBTSxHQUNOdk4sRUFBSSxFQUVMLEdBQUt3UCxNQUFNeVUsUUFBUzFqQixHQUFTLENBSTVCLElBSEFrSSxFQUFTb2dDLEdBQVdwb0IsR0FDcEIxSixFQUFNeFcsRUFBSzRDLE9BRUhuRCxFQUFJK1csRUFBSy9XLElBQ2hCdU4sRUFBS2hOLEVBQU1QLElBQVFzaUIsRUFBTzFmLElBQUs2ZCxFQUFNbGdCLEVBQU1QLElBQUssRUFBT3lJLEdBR3hELE9BQU84RSxFQUdSLFlBQWlCN0YsSUFBVnpHLEVBQ05xaEIsRUFBTzFRLE1BQU82TyxFQUFNbGdCLEVBQU1VLEdBQzFCcWhCLEVBQU8xZixJQUFLNmQsRUFBTWxnQixLQUNqQkEsRUFBTVUsRUFBT3dHLFVBQVV0RSxPQUFTLE1BUXJDbWYsRUFBT3dxQixNQUFRQSxHQUVmQSxHQUFNbHJDLFVBQVksQ0FDakIrZ0IsWUFBYW1xQixHQUNicnFCLEtBQU0sU0FBVWhDLEVBQU05UCxFQUFTYixFQUFNaEosRUFBS2ltQyxFQUFRdjVCLEdBQ2pEN1EsS0FBSzhkLEtBQU9BLEVBQ1o5ZCxLQUFLbU4sS0FBT0EsRUFDWm5OLEtBQUtvcUMsT0FBU0EsR0FBVXpxQixFQUFPeXFCLE9BQU8vTixTQUN0Q3I4QixLQUFLZ08sUUFBVUEsRUFDZmhPLEtBQUtrRSxNQUFRbEUsS0FBS3NoQyxJQUFNdGhDLEtBQUtxTixNQUM3QnJOLEtBQUttRSxJQUFNQSxFQUNYbkUsS0FBSzZRLEtBQU9BLElBQVU4TyxFQUFPb2IsVUFBVzV0QixHQUFTLEdBQUssT0FFdkRFLElBQUssV0FDSixJQUFJbXNCLEVBQVEyUSxHQUFNYyxVQUFXanJDLEtBQUttTixNQUVsQyxPQUFPcXNCLEdBQVNBLEVBQU10N0IsSUFDckJzN0IsRUFBTXQ3QixJQUFLOEIsTUFDWG1xQyxHQUFNYyxVQUFVNU8sU0FBU24rQixJQUFLOEIsT0FFaEMrWSxJQUFLLFNBQVVteUIsR0FDZCxJQUFJQyxFQUNIM1IsRUFBUTJRLEdBQU1jLFVBQVdqckMsS0FBS21OLE1Bb0IvQixPQWxCS25OLEtBQUtnTyxRQUFRbzlCLFNBQ2pCcHJDLEtBQUtxckMsSUFBTUYsRUFBUXhyQixFQUFPeXFCLE9BQVFwcUMsS0FBS29xQyxRQUN0Q2MsRUFBU2xyQyxLQUFLZ08sUUFBUW85QixTQUFXRixFQUFTLEVBQUcsRUFBR2xyQyxLQUFLZ08sUUFBUW85QixVQUc5RHByQyxLQUFLcXJDLElBQU1GLEVBQVFELEVBRXBCbHJDLEtBQUtzaEMsS0FBUXRoQyxLQUFLbUUsSUFBTW5FLEtBQUtrRSxPQUFVaW5DLEVBQVFuckMsS0FBS2tFLE1BRS9DbEUsS0FBS2dPLFFBQVFpSCxNQUNqQmpWLEtBQUtnTyxRQUFRaUgsS0FBS3pYLEtBQU13QyxLQUFLOGQsS0FBTTlkLEtBQUtzaEMsSUFBS3RoQyxNQUd6Q3c1QixHQUFTQSxFQUFNZixJQUNuQmUsRUFBTWYsSUFBS3o0QixNQUVYbXFDLEdBQU1jLFVBQVU1TyxTQUFTNUQsSUFBS3o0QixNQUV4QkEsT0FJVG1xQyxHQUFNbHJDLFVBQVU2Z0IsS0FBSzdnQixVQUFZa3JDLEdBQU1sckMsVUFFdkNrckMsR0FBTWMsVUFBWSxDQUNqQjVPLFNBQVUsQ0FDVG4rQixJQUFLLFNBQVV1OEIsR0FDZCxJQUFJenlCLEVBSUosT0FBNkIsSUFBeEJ5eUIsRUFBTTNjLEtBQUtoYyxVQUNhLE1BQTVCMjRCLEVBQU0zYyxLQUFNMmMsRUFBTXR0QixPQUFvRCxNQUFsQ3N0QixFQUFNM2MsS0FBSzdPLE1BQU93ckIsRUFBTXR0QixNQUNyRHN0QixFQUFNM2MsS0FBTTJjLEVBQU10dEIsT0FPMUJuRixFQUFTMlgsRUFBTzFmLElBQUt3NkIsRUFBTTNjLEtBQU0yYyxFQUFNdHRCLEtBQU0sTUFHaEIsU0FBWG5GLEVBQXdCQSxFQUFKLEdBRXZDeXdCLElBQUssU0FBVWdDLEdBS1Q5YSxFQUFPMnJCLEdBQUdyMkIsS0FBTXdsQixFQUFNdHRCLE1BQzFCd1MsRUFBTzJyQixHQUFHcjJCLEtBQU13bEIsRUFBTXR0QixNQUFRc3RCLEdBQ0ssSUFBeEJBLEVBQU0zYyxLQUFLaGMsV0FDdEI2ZCxFQUFPMHFCLFNBQVU1UCxFQUFNdHRCLE9BQzZCLE1BQW5Ec3RCLEVBQU0zYyxLQUFLN08sTUFBT3k1QixHQUFlak8sRUFBTXR0QixPQUd4Q3N0QixFQUFNM2MsS0FBTTJjLEVBQU10dEIsTUFBU3N0QixFQUFNNkcsSUFGakMzaEIsRUFBTzFRLE1BQU93ckIsRUFBTTNjLEtBQU0yYyxFQUFNdHRCLEtBQU1zdEIsRUFBTTZHLElBQU03RyxFQUFNNXBCLFNBVTVEczVCLEdBQU1jLFVBQVUzbEMsVUFBWTZrQyxHQUFNYyxVQUFVMWxDLFdBQWEsQ0FDeERrekIsSUFBSyxTQUFVZ0MsR0FDVEEsRUFBTTNjLEtBQUtoYyxVQUFZMjRCLEVBQU0zYyxLQUFLM2IsYUFDdENzNEIsRUFBTTNjLEtBQU0yYyxFQUFNdHRCLE1BQVNzdEIsRUFBTTZHLE9BS3BDM2hCLEVBQU95cUIsT0FBUyxDQUNmbUIsT0FBUSxTQUFVcHNDLEdBQ2pCLE9BQU9BLEdBRVJxc0MsTUFBTyxTQUFVcnNDLEdBQ2hCLE1BQU8sR0FBTWtILEtBQUtvbEMsSUFBS3RzQyxFQUFJa0gsS0FBS3FsQyxJQUFPLEdBRXhDclAsU0FBVSxTQUdYMWMsRUFBTzJyQixHQUFLbkIsR0FBTWxyQyxVQUFVNmdCLEtBRzVCSCxFQUFPMnJCLEdBQUdyMkIsS0FBTyxHQUtqQixJQUNDMDJCLEdBQU9DLEdBQ1BDLEdBQVcseUJBQ1hDLEdBQU8sY0FFUixTQUFTQyxLQUNISCxNQUNxQixJQUFwQmxyQyxFQUFTc3JDLFFBQW9CcHJDLEVBQU84VyxzQkFDeEM5VyxFQUFPOFcsc0JBQXVCcTBCLElBRTlCbnJDLEVBQU9ZLFdBQVl1cUMsR0FBVXBzQixFQUFPMnJCLEdBQUdXLFVBR3hDdHNCLEVBQU8yckIsR0FBR1ksUUFLWixTQUFTQyxLQUlSLE9BSEF2ckMsRUFBT1ksWUFBWSxXQUNsQm1xQyxRQUFRNW1DLEtBRUE0bUMsR0FBUWxvQixLQUFLNmQsTUFJdkIsU0FBUzhLLEdBQU94dEIsRUFBTXl0QixHQUNyQixJQUFJbkosRUFDSDdsQyxFQUFJLEVBQ0oycUIsRUFBUSxDQUFFdmhCLE9BQVFtWSxHQUtuQixJQURBeXRCLEVBQWVBLEVBQWUsRUFBSSxFQUMxQmh2QyxFQUFJLEVBQUdBLEdBQUssRUFBSWd2QyxFQUV2QnJrQixFQUFPLFVBRFBrYixFQUFRakosR0FBVzU4QixLQUNTMnFCLEVBQU8sVUFBWWtiLEdBQVV0a0IsRUFPMUQsT0FKS3l0QixJQUNKcmtCLEVBQU1zaUIsUUFBVXRpQixFQUFNdGhCLE1BQVFrWSxHQUd4Qm9KLEVBR1IsU0FBU3NrQixHQUFhaHVDLEVBQU82TyxFQUFNby9CLEdBS2xDLElBSkEsSUFBSTlSLEVBQ0g4SixHQUFlaUksR0FBVUMsU0FBVXQvQixJQUFVLElBQUt3RSxPQUFRNjZCLEdBQVVDLFNBQVUsTUFDOUUvNkIsRUFBUSxFQUNSbFIsRUFBUytqQyxFQUFXL2pDLE9BQ2JrUixFQUFRbFIsRUFBUWtSLElBQ3ZCLEdBQU8rb0IsRUFBUThKLEVBQVk3eUIsR0FBUWxVLEtBQU0rdUMsRUFBV3AvQixFQUFNN08sR0FHekQsT0FBT204QixFQXNOVixTQUFTK1IsR0FBVzF1QixFQUFNNHVCLEVBQVkxK0IsR0FDckMsSUFBSWhHLEVBQ0gya0MsRUFDQWo3QixFQUFRLEVBQ1JsUixFQUFTZ3NDLEdBQVVJLFdBQVdwc0MsT0FDOUIwMEIsRUFBV3ZWLEVBQU9tVixXQUFXRyxRQUFRLGtCQUc3QmlYLEVBQUtwdUIsUUFFYm91QixFQUFPLFdBQ04sR0FBS1MsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjbEIsSUFBU1EsS0FDMUIxVixFQUFZcHdCLEtBQUtDLElBQUssRUFBR2ltQyxFQUFVTyxVQUFZUCxFQUFVbkIsU0FBV3lCLEdBS3BFM0IsRUFBVSxHQURIelUsRUFBWThWLEVBQVVuQixVQUFZLEdBRXpDMTVCLEVBQVEsRUFDUmxSLEVBQVMrckMsRUFBVVEsT0FBT3ZzQyxPQUVuQmtSLEVBQVFsUixFQUFRa1IsSUFDdkI2NkIsRUFBVVEsT0FBUXI3QixHQUFRcUgsSUFBS215QixHQU1oQyxPQUhBaFcsRUFBU2MsV0FBWWxZLEVBQU0sQ0FBRXl1QixFQUFXckIsRUFBU3pVLElBRzVDeVUsRUFBVSxHQUFLMXFDLEVBQ1ppMkIsR0FJRmoyQixHQUNMMDBCLEVBQVNjLFdBQVlsWSxFQUFNLENBQUV5dUIsRUFBVyxFQUFHLElBSTVDclgsRUFBU2UsWUFBYW5ZLEVBQU0sQ0FBRXl1QixLQUN2QixJQUVSQSxFQUFZclgsRUFBU3BZLFFBQVMsQ0FDN0JnQixLQUFNQSxFQUNONVcsTUFBT3lZLEVBQU9sQyxPQUFRLEdBQUlpdkIsR0FDMUJNLEtBQU1ydEIsRUFBT2xDLFFBQVEsRUFBTSxDQUMxQnd2QixjQUFlLEdBQ2Y3QyxPQUFRenFCLEVBQU95cUIsT0FBTy9OLFVBQ3BCcnVCLEdBQ0hrL0IsbUJBQW9CUixFQUNwQlMsZ0JBQWlCbi9CLEVBQ2pCOCtCLFVBQVduQixJQUFTUSxLQUNwQmYsU0FBVXA5QixFQUFRbzlCLFNBQ2xCMkIsT0FBUSxHQUNSVCxZQUFhLFNBQVVuL0IsRUFBTWhKLEdBQzVCLElBQUlzMkIsRUFBUTlhLEVBQU93cUIsTUFBT3JzQixFQUFNeXVCLEVBQVVTLEtBQU03L0IsRUFBTWhKLEVBQ3JEb29DLEVBQVVTLEtBQUtDLGNBQWU5L0IsSUFBVW8vQixFQUFVUyxLQUFLNUMsUUFFeEQsT0FEQW1DLEVBQVVRLE9BQU81OEIsS0FBTXNxQixHQUNoQkEsR0FFUmYsS0FBTSxTQUFVMFQsR0FDZixJQUFJMTdCLEVBQVEsRUFJWGxSLEVBQVM0c0MsRUFBVWIsRUFBVVEsT0FBT3ZzQyxPQUFTLEVBQzlDLEdBQUttc0MsRUFDSixPQUFPM3NDLEtBR1IsSUFEQTJzQyxHQUFVLEVBQ0ZqN0IsRUFBUWxSLEVBQVFrUixJQUN2QjY2QixFQUFVUSxPQUFRcjdCLEdBQVFxSCxJQUFLLEdBVWhDLE9BTktxMEIsR0FDSmxZLEVBQVNjLFdBQVlsWSxFQUFNLENBQUV5dUIsRUFBVyxFQUFHLElBQzNDclgsRUFBU2UsWUFBYW5ZLEVBQU0sQ0FBRXl1QixFQUFXYSxLQUV6Q2xZLEVBQVNrQixXQUFZdFksRUFBTSxDQUFFeXVCLEVBQVdhLElBRWxDcHRDLFFBR1RrSCxFQUFRcWxDLEVBQVVybEMsTUFJbkIsS0EvSEQsU0FBcUJBLEVBQU8rbEMsR0FDM0IsSUFBSXY3QixFQUFPOVQsRUFBTXdzQyxFQUFROXJDLEVBQU9rN0IsRUFHaEMsSUFBTTluQixLQUFTeEssRUFlZCxHQWJBa2pDLEVBQVM2QyxFQURUcnZDLEVBQU91NkIsRUFBV3ptQixJQUVsQnBULEVBQVE0SSxFQUFPd0ssR0FDVjdFLE1BQU15VSxRQUFTaGpCLEtBQ25COHJDLEVBQVM5ckMsRUFBTyxHQUNoQkEsRUFBUTRJLEVBQU93SyxHQUFVcFQsRUFBTyxJQUc1Qm9ULElBQVU5VCxJQUNkc0osRUFBT3RKLEdBQVNVLFNBQ1Q0SSxFQUFPd0ssS0FHZjhuQixFQUFRN1osRUFBTzBxQixTQUFVenNDLEtBQ1gsV0FBWTQ3QixFQU16QixJQUFNOW5CLEtBTE5wVCxFQUFRazdCLEVBQU1zUixPQUFReHNDLFVBQ2Y0SSxFQUFPdEosR0FJQ1UsRUFDTm9ULEtBQVN4SyxJQUNoQkEsRUFBT3dLLEdBQVVwVCxFQUFPb1QsR0FDeEJ1N0IsRUFBZXY3QixHQUFVMDRCLFFBSTNCNkMsRUFBZXJ2QyxHQUFTd3NDLEVBNkYxQmlELENBQVlubUMsRUFBT3FsQyxFQUFVUyxLQUFLQyxlQUUxQnY3QixFQUFRbFIsRUFBUWtSLElBRXZCLEdBREExSixFQUFTd2tDLEdBQVVJLFdBQVlsN0IsR0FBUWxVLEtBQU0rdUMsRUFBV3p1QixFQUFNNVcsRUFBT3FsQyxFQUFVUyxNQU05RSxPQUpLdnJDLEVBQVl1RyxFQUFPMHhCLFFBQ3ZCL1osRUFBTzhaLFlBQWE4UyxFQUFVenVCLEtBQU15dUIsRUFBVVMsS0FBS3YwQixPQUFRaWhCLEtBQzFEMXhCLEVBQU8weEIsS0FBSzc2QixLQUFNbUosSUFFYkEsRUF5QlQsT0FyQkEyWCxFQUFPL1UsSUFBSzFELEVBQU9vbEMsR0FBYUMsR0FFM0I5cUMsRUFBWThxQyxFQUFVUyxLQUFLOW9DLFFBQy9CcW9DLEVBQVVTLEtBQUs5b0MsTUFBTTFHLEtBQU1zZ0IsRUFBTXl1QixHQUlsQ0EsRUFDRS9XLFNBQVUrVyxFQUFVUyxLQUFLeFgsVUFDekI1UixLQUFNMm9CLEVBQVVTLEtBQUtwcEIsS0FBTTJvQixFQUFVUyxLQUFLTSxVQUMxQ3paLEtBQU0wWSxFQUFVUyxLQUFLblosTUFDckJvQixPQUFRc1gsRUFBVVMsS0FBSy9YLFFBRXpCdFYsRUFBTzJyQixHQUFHaUMsTUFDVDV0QixFQUFPbEMsT0FBUXl1QixFQUFNLENBQ3BCcHVCLEtBQU1BLEVBQ04wdkIsS0FBTWpCLEVBQ045ekIsTUFBTzh6QixFQUFVUyxLQUFLdjBCLFNBSWpCOHpCLEVBR1I1c0IsRUFBTzZzQixVQUFZN3NCLEVBQU9sQyxPQUFRK3VCLEdBQVcsQ0FFNUNDLFNBQVUsQ0FDVCxJQUFLLENBQUUsU0FBVXQvQixFQUFNN08sR0FDdEIsSUFBSW04QixFQUFRejZCLEtBQUtzc0MsWUFBYW4vQixFQUFNN08sR0FFcEMsT0FEQWk4QixHQUFXRSxFQUFNM2MsS0FBTTNRLEVBQU02c0IsR0FBUWhULEtBQU0xb0IsR0FBU204QixHQUM3Q0EsS0FJVGdULFFBQVMsU0FBVXZtQyxFQUFPOEksR0FDcEJ2TyxFQUFZeUYsSUFDaEI4SSxFQUFXOUksRUFDWEEsRUFBUSxDQUFFLE1BRVZBLEVBQVFBLEVBQU1vRyxNQUFPaW1CLEdBT3RCLElBSkEsSUFBSXBtQixFQUNIdUUsRUFBUSxFQUNSbFIsRUFBUzBHLEVBQU0xRyxPQUVSa1IsRUFBUWxSLEVBQVFrUixJQUN2QnZFLEVBQU9qRyxFQUFPd0ssR0FDZDg2QixHQUFVQyxTQUFVdC9CLEdBQVNxL0IsR0FBVUMsU0FBVXQvQixJQUFVLEdBQzNEcS9CLEdBQVVDLFNBQVV0L0IsR0FBTzBQLFFBQVM3TSxJQUl0QzQ4QixXQUFZLENBM1diLFNBQTJCOXVCLEVBQU01VyxFQUFPOGxDLEdBQ3ZDLElBQUk3L0IsRUFBTTdPLEVBQU9nOUIsRUFBUTlCLEVBQU9rVSxFQUFTQyxFQUFXQyxFQUFnQnRULEVBQ25FdVQsRUFBUSxVQUFXM21DLEdBQVMsV0FBWUEsRUFDeENzbUMsRUFBT3h0QyxLQUNQeWpDLEVBQU8sR0FDUHgwQixFQUFRNk8sRUFBSzdPLE1BQ2IrOEIsRUFBU2x1QixFQUFLaGMsVUFBWXU0QixHQUFvQnZjLEdBQzlDZ3dCLEVBQVduVixFQUFTejZCLElBQUs0ZixFQUFNLFVBNkJoQyxJQUFNM1EsS0ExQkE2L0IsRUFBS3YwQixRQUVhLE9BRHZCK2dCLEVBQVE3WixFQUFPOFosWUFBYTNiLEVBQU0sT0FDdkJpd0IsV0FDVnZVLEVBQU11VSxTQUFXLEVBQ2pCTCxFQUFVbFUsRUFBTTlFLE1BQU1ILEtBQ3RCaUYsRUFBTTlFLE1BQU1ILEtBQU8sV0FDWmlGLEVBQU11VSxVQUNYTCxNQUlIbFUsRUFBTXVVLFdBRU5QLEVBQUt2WSxRQUFRLFdBR1p1WSxFQUFLdlksUUFBUSxXQUNadUUsRUFBTXVVLFdBQ0FwdUIsRUFBT2xILE1BQU9xRixFQUFNLE1BQU90ZCxRQUNoQ2c1QixFQUFNOUUsTUFBTUgsY0FPRnJ0QixFQUViLEdBREE1SSxFQUFRNEksRUFBT2lHLEdBQ1YwK0IsR0FBU3ZzQyxLQUFNaEIsR0FBVSxDQUc3QixVQUZPNEksRUFBT2lHLEdBQ2RtdUIsRUFBU0EsR0FBb0IsV0FBVmg5QixFQUNkQSxLQUFZMHRDLEVBQVMsT0FBUyxRQUFXLENBSTdDLEdBQWUsU0FBVjF0QyxJQUFvQnd2QyxRQUFpQy9vQyxJQUFyQitvQyxFQUFVM2dDLEdBSzlDLFNBSkE2K0IsR0FBUyxFQU9YdkksRUFBTXQyQixHQUFTMmdDLEdBQVlBLEVBQVUzZ0MsSUFBVXdTLEVBQU8xUSxNQUFPNk8sRUFBTTNRLEdBTXJFLElBREF3Z0MsR0FBYWh1QixFQUFPa0MsY0FBZTNhLE1BQ2hCeVksRUFBT2tDLGNBQWU0aEIsR0E4RHpDLElBQU10MkIsS0F6REQwZ0MsR0FBMkIsSUFBbEIvdkIsRUFBS2hjLFdBTWxCa3JDLEVBQUt4cUMsU0FBVyxDQUFFeU0sRUFBTXpNLFNBQVV5TSxFQUFNeE0sVUFBV3dNLEVBQU12TSxXQUlsQyxPQUR2QmtyQyxFQUFpQkUsR0FBWUEsRUFBU3hULFdBRXJDc1QsRUFBaUJqVixFQUFTejZCLElBQUs0ZixFQUFNLFlBR3JCLFVBRGpCd2MsRUFBVTNhLEVBQU8xZixJQUFLNmQsRUFBTSxjQUV0Qjh2QixFQUNKdFQsRUFBVXNULEdBSVZ6UyxHQUFVLENBQUVyZCxJQUFRLEdBQ3BCOHZCLEVBQWlCOXZCLEVBQUs3TyxNQUFNcXJCLFNBQVdzVCxFQUN2Q3RULEVBQVUzYSxFQUFPMWYsSUFBSzZkLEVBQU0sV0FDNUJxZCxHQUFVLENBQUVyZCxPQUtHLFdBQVp3YyxHQUFvQyxpQkFBWkEsR0FBZ0QsTUFBbEJzVCxJQUNyQixTQUFoQ2p1QixFQUFPMWYsSUFBSzZkLEVBQU0sV0FHaEI2dkIsSUFDTEgsRUFBSzVwQixNQUFNLFdBQ1YzVSxFQUFNcXJCLFFBQVVzVCxLQUVNLE1BQWxCQSxJQUNKdFQsRUFBVXJyQixFQUFNcXJCLFFBQ2hCc1QsRUFBNkIsU0FBWnRULEVBQXFCLEdBQUtBLElBRzdDcnJCLEVBQU1xckIsUUFBVSxpQkFLZDBTLEVBQUt4cUMsV0FDVHlNLEVBQU16TSxTQUFXLFNBQ2pCZ3JDLEVBQUt2WSxRQUFRLFdBQ1pobUIsRUFBTXpNLFNBQVd3cUMsRUFBS3hxQyxTQUFVLEdBQ2hDeU0sRUFBTXhNLFVBQVl1cUMsRUFBS3hxQyxTQUFVLEdBQ2pDeU0sRUFBTXZNLFVBQVlzcUMsRUFBS3hxQyxTQUFVLE9BS25DbXJDLEdBQVksRUFDRWxLLEVBR1BrSyxJQUNBRyxFQUNDLFdBQVlBLElBQ2hCOUIsRUFBUzhCLEVBQVM5QixRQUduQjhCLEVBQVduVixFQUFTbkIsT0FBUTFaLEVBQU0sU0FBVSxDQUFFd2MsUUFBU3NULElBSW5EdFMsSUFDSndTLEVBQVM5QixRQUFVQSxHQUlmQSxHQUNKN1EsR0FBVSxDQUFFcmQsSUFBUSxHQUtyQjB2QixFQUFLNXBCLE1BQU0sV0FTVixJQUFNelcsS0FKQTYrQixHQUNMN1EsR0FBVSxDQUFFcmQsSUFFYjZhLEVBQVNsRSxPQUFRM1csRUFBTSxVQUNUMmxCLEVBQ2I5akIsRUFBTzFRLE1BQU82TyxFQUFNM1EsRUFBTXMyQixFQUFNdDJCLFFBTW5Dd2dDLEVBQVlyQixHQUFhTixFQUFTOEIsRUFBVTNnQyxHQUFTLEVBQUdBLEVBQU1xZ0MsR0FDdERyZ0MsS0FBUTJnQyxJQUNmQSxFQUFVM2dDLEdBQVN3Z0MsRUFBVXpwQyxNQUN4QjhuQyxJQUNKMkIsRUFBVXhwQyxJQUFNd3BDLEVBQVV6cEMsTUFDMUJ5cEMsRUFBVXpwQyxNQUFRLE1BdU1yQjhwQyxVQUFXLFNBQVVoK0IsRUFBVXExQixHQUN6QkEsRUFDSm1ILEdBQVVJLFdBQVcvdkIsUUFBUzdNLEdBRTlCdzhCLEdBQVVJLFdBQVd6OEIsS0FBTUgsTUFLOUIyUCxFQUFPc3VCLE1BQVEsU0FBVUEsRUFBTzdELEVBQVF4cUMsR0FDdkMsSUFBSXN1QyxFQUFNRCxHQUEwQixpQkFBVkEsRUFBcUJ0dUIsRUFBT2xDLE9BQVEsR0FBSXd3QixHQUFVLENBQzNFWCxTQUFVMXRDLElBQU9BLEdBQU13cUMsR0FDdEIzb0MsRUFBWXdzQyxJQUFXQSxFQUN4QjdDLFNBQVU2QyxFQUNWN0QsT0FBUXhxQyxHQUFNd3FDLEdBQVVBLElBQVczb0MsRUFBWTJvQyxJQUFZQSxHQW9DNUQsT0FoQ0t6cUIsRUFBTzJyQixHQUFHdHhCLElBQ2RrMEIsRUFBSTlDLFNBQVcsRUFHYyxpQkFBakI4QyxFQUFJOUMsV0FDVjhDLEVBQUk5QyxZQUFZenJCLEVBQU8yckIsR0FBRzZDLE9BQzlCRCxFQUFJOUMsU0FBV3pyQixFQUFPMnJCLEdBQUc2QyxPQUFRRCxFQUFJOUMsVUFHckM4QyxFQUFJOUMsU0FBV3pyQixFQUFPMnJCLEdBQUc2QyxPQUFPOVIsVUFNakIsTUFBYjZSLEVBQUl6MUIsUUFBK0IsSUFBZHkxQixFQUFJejFCLFFBQzdCeTFCLEVBQUl6MUIsTUFBUSxNQUlieTFCLEVBQUk3SCxJQUFNNkgsRUFBSVosU0FFZFksRUFBSVosU0FBVyxXQUNUN3JDLEVBQVl5c0MsRUFBSTdILE1BQ3BCNkgsRUFBSTdILElBQUk3b0MsS0FBTXdDLE1BR1ZrdUMsRUFBSXoxQixPQUNSa0gsRUFBTzJaLFFBQVN0NUIsS0FBTWt1QyxFQUFJejFCLFFBSXJCeTFCLEdBR1J2dUIsRUFBTy9mLEdBQUc2ZCxPQUFRLENBQ2pCMndCLE9BQVEsU0FBVUgsRUFBT0ksRUFBSWpFLEVBQVFwNkIsR0FHcEMsT0FBT2hRLEtBQUtLLE9BQVFnNkIsSUFBcUJwNkIsSUFBSyxVQUFXLEdBQUltN0IsT0FHM0RqM0IsTUFBTW1xQyxRQUFTLENBQUVoRSxRQUFTK0QsR0FBTUosRUFBTzdELEVBQVFwNkIsSUFFbERzK0IsUUFBUyxTQUFVbmhDLEVBQU04Z0MsRUFBTzdELEVBQVFwNkIsR0FDdkMsSUFBSTBrQixFQUFRL1UsRUFBT2tDLGNBQWUxVSxHQUNqQ29oQyxFQUFTNXVCLEVBQU9zdUIsTUFBT0EsRUFBTzdELEVBQVFwNkIsR0FDdEN3K0IsRUFBYyxXQUdiLElBQUloQixFQUFPaEIsR0FBV3hzQyxLQUFNMmYsRUFBT2xDLE9BQVEsR0FBSXRRLEdBQVFvaEMsSUFHbEQ3WixHQUFTaUUsRUFBU3o2QixJQUFLOEIsS0FBTSxZQUNqQ3d0QyxFQUFLOVQsTUFBTSxJQU1kLE9BRkE4VSxFQUFZQyxPQUFTRCxFQUVkOVosSUFBMEIsSUFBakI2WixFQUFPOTFCLE1BQ3RCelksS0FBS3dnQixLQUFNZ3VCLEdBQ1h4dUMsS0FBS3lZLE1BQU84MUIsRUFBTzkxQixNQUFPKzFCLElBRTVCOVUsS0FBTSxTQUFVOWEsRUFBTWdiLEVBQVl3VCxHQUNqQyxJQUFJc0IsRUFBWSxTQUFVbFYsR0FDekIsSUFBSUUsRUFBT0YsRUFBTUUsWUFDVkYsRUFBTUUsS0FDYkEsRUFBTTBULElBWVAsTUFUcUIsaUJBQVR4dUIsSUFDWHd1QixFQUFVeFQsRUFDVkEsRUFBYWhiLEVBQ2JBLE9BQU83WixHQUVINjBCLEdBQ0o1NUIsS0FBS3lZLE1BQU9tRyxHQUFRLEtBQU0sSUFHcEI1ZSxLQUFLd2dCLE1BQU0sV0FDakIsSUFBSThZLEdBQVUsRUFDYjVuQixFQUFnQixNQUFSa04sR0FBZ0JBLEVBQU8sYUFDL0IrdkIsRUFBU2h2QixFQUFPZ3ZCLE9BQ2hCM2hDLEVBQU8yckIsRUFBU3o2QixJQUFLOEIsTUFFdEIsR0FBSzBSLEVBQ0MxRSxFQUFNMEUsSUFBVzFFLEVBQU0wRSxHQUFRZ29CLE1BQ25DZ1YsRUFBVzFoQyxFQUFNMEUsU0FHbEIsSUFBTUEsS0FBUzFFLEVBQ1RBLEVBQU0wRSxJQUFXMUUsRUFBTTBFLEdBQVFnb0IsTUFBUW9TLEdBQUt4c0MsS0FBTW9TLElBQ3REZzlCLEVBQVcxaEMsRUFBTTBFLElBS3BCLElBQU1BLEVBQVFpOUIsRUFBT251QyxPQUFRa1IsS0FDdkJpOUIsRUFBUWo5QixHQUFRb00sT0FBUzlkLE1BQ25CLE1BQVI0ZSxHQUFnQit2QixFQUFRajlCLEdBQVErRyxRQUFVbUcsSUFFNUMrdkIsRUFBUWo5QixHQUFRODdCLEtBQUs5VCxLQUFNMFQsR0FDM0I5VCxHQUFVLEVBQ1ZxVixFQUFPM3RCLE9BQVF0UCxFQUFPLEtBT25CNG5CLEdBQVk4VCxHQUNoQnp0QixFQUFPMlosUUFBU3Q1QixLQUFNNGUsT0FJekI2dkIsT0FBUSxTQUFVN3ZCLEdBSWpCLE9BSGMsSUFBVEEsSUFDSkEsRUFBT0EsR0FBUSxNQUVUNWUsS0FBS3dnQixNQUFNLFdBQ2pCLElBQUk5TyxFQUNIMUUsRUFBTzJyQixFQUFTejZCLElBQUs4QixNQUNyQnlZLEVBQVF6TCxFQUFNNFIsRUFBTyxTQUNyQjRhLEVBQVF4c0IsRUFBTTRSLEVBQU8sY0FDckIrdkIsRUFBU2h2QixFQUFPZ3ZCLE9BQ2hCbnVDLEVBQVNpWSxFQUFRQSxFQUFNalksT0FBUyxFQWFqQyxJQVZBd00sRUFBS3loQyxRQUFTLEVBR2Q5dUIsRUFBT2xILE1BQU96WSxLQUFNNGUsRUFBTSxJQUVyQjRhLEdBQVNBLEVBQU1FLE1BQ25CRixFQUFNRSxLQUFLbDhCLEtBQU13QyxNQUFNLEdBSWxCMFIsRUFBUWk5QixFQUFPbnVDLE9BQVFrUixLQUN2Qmk5QixFQUFRajlCLEdBQVFvTSxPQUFTOWQsTUFBUTJ1QyxFQUFRajlCLEdBQVErRyxRQUFVbUcsSUFDL0QrdkIsRUFBUWo5QixHQUFRODdCLEtBQUs5VCxNQUFNLEdBQzNCaVYsRUFBTzN0QixPQUFRdFAsRUFBTyxJQUt4QixJQUFNQSxFQUFRLEVBQUdBLEVBQVFsUixFQUFRa1IsSUFDM0IrRyxFQUFPL0csSUFBVytHLEVBQU8vRyxHQUFRKzhCLFFBQ3JDaDJCLEVBQU8vRyxHQUFRKzhCLE9BQU9qeEMsS0FBTXdDLGFBS3ZCZ04sRUFBS3loQyxhQUtmOXVCLEVBQU9hLEtBQU0sQ0FBRSxTQUFVLE9BQVEsU0FBVSxTQUFVaUMsRUFBSTdrQixHQUN4RCxJQUFJZ3hDLEVBQVFqdkIsRUFBTy9mLEdBQUloQyxHQUN2QitoQixFQUFPL2YsR0FBSWhDLEdBQVMsU0FBVXF3QyxFQUFPN0QsRUFBUXA2QixHQUM1QyxPQUFnQixNQUFUaStCLEdBQWtDLGtCQUFWQSxFQUM5QlcsRUFBTXIxQixNQUFPdlosS0FBTThFLFdBQ25COUUsS0FBS3N1QyxRQUFTbEMsR0FBT3h1QyxHQUFNLEdBQVFxd0MsRUFBTzdELEVBQVFwNkIsT0FLckQyUCxFQUFPYSxLQUFNLENBQ1pxdUIsVUFBV3pDLEdBQU8sUUFDbEIwQyxRQUFTMUMsR0FBTyxRQUNoQjJDLFlBQWEzQyxHQUFPLFVBQ3BCNEMsT0FBUSxDQUFFMUUsUUFBUyxRQUNuQjJFLFFBQVMsQ0FBRTNFLFFBQVMsUUFDcEI0RSxXQUFZLENBQUU1RSxRQUFTLFlBQ3JCLFNBQVUxc0MsRUFBTXNKLEdBQ2xCeVksRUFBTy9mLEdBQUloQyxHQUFTLFNBQVVxd0MsRUFBTzdELEVBQVFwNkIsR0FDNUMsT0FBT2hRLEtBQUtzdUMsUUFBU3BuQyxFQUFPK21DLEVBQU83RCxFQUFRcDZCLE9BSTdDMlAsRUFBT2d2QixPQUFTLEdBQ2hCaHZCLEVBQU8yckIsR0FBR1ksS0FBTyxXQUNoQixJQUFJcUIsRUFDSGx3QyxFQUFJLEVBQ0pzeEMsRUFBU2h2QixFQUFPZ3ZCLE9BSWpCLElBRkFoRCxHQUFRbG9CLEtBQUs2ZCxNQUVMamtDLEVBQUlzeEMsRUFBT251QyxPQUFRbkQsS0FDMUJrd0MsRUFBUW9CLEVBQVF0eEMsT0FHQ3N4QyxFQUFRdHhDLEtBQVFrd0MsR0FDaENvQixFQUFPM3RCLE9BQVEzakIsSUFBSyxHQUloQnN4QyxFQUFPbnVDLFFBQ1ptZixFQUFPMnJCLEdBQUc1UixPQUVYaVMsUUFBUTVtQyxHQUdUNGEsRUFBTzJyQixHQUFHaUMsTUFBUSxTQUFVQSxHQUMzQjV0QixFQUFPZ3ZCLE9BQU94K0IsS0FBTW85QixHQUNwQjV0QixFQUFPMnJCLEdBQUdwbkMsU0FHWHliLEVBQU8yckIsR0FBR1csU0FBVyxHQUNyQnRzQixFQUFPMnJCLEdBQUdwbkMsTUFBUSxXQUNaMG5DLEtBSUxBLElBQWEsRUFDYkcsT0FHRHBzQixFQUFPMnJCLEdBQUc1UixLQUFPLFdBQ2hCa1MsR0FBYSxNQUdkanNCLEVBQU8yckIsR0FBRzZDLE9BQVMsQ0FDbEJnQixLQUFNLElBQ05DLEtBQU0sSUFHTi9TLFNBQVUsS0FNWDFjLEVBQU8vZixHQUFHeXZDLE1BQVEsU0FBVUMsRUFBTTF3QixHQUlqQyxPQUhBMHdCLEVBQU8zdkIsRUFBTzJyQixJQUFLM3JCLEVBQU8yckIsR0FBRzZDLE9BQVFtQixJQUFpQkEsRUFDdEQxd0IsRUFBT0EsR0FBUSxLQUVSNWUsS0FBS3lZLE1BQU9tRyxHQUFNLFNBQVU0SCxFQUFNZ1QsR0FDeEMsSUFBSTFnQixFQUFVbFksRUFBT1ksV0FBWWdsQixFQUFNOG9CLEdBQ3ZDOVYsRUFBTUUsS0FBTyxXQUNaOTRCLEVBQU8yWCxhQUFjTyxRQU14QixXQUNDLElBQUk2USxFQUFRanBCLEVBQVMyZSxjQUFlLFNBRW5DNnVCLEVBRFN4dEMsRUFBUzJlLGNBQWUsVUFDcEJJLFlBQWEvZSxFQUFTMmUsY0FBZSxXQUVuRHNLLEVBQU0vSyxLQUFPLFdBSWJKLEVBQVErd0IsUUFBMEIsS0FBaEI1bEIsRUFBTXJyQixNQUl4QmtnQixFQUFRZ3hCLFlBQWN0QixFQUFJM2dCLFVBSTFCNUQsRUFBUWpwQixFQUFTMmUsY0FBZSxVQUMxQi9nQixNQUFRLElBQ2RxckIsRUFBTS9LLEtBQU8sUUFDYkosRUFBUWl4QixXQUE2QixNQUFoQjlsQixFQUFNcnJCLE1BcEI1QixHQXdCQSxJQUFJb3hDLEdBQ0h4bkIsR0FBYXZJLEVBQU9qQyxLQUFLd0ssV0FFMUJ2SSxFQUFPL2YsR0FBRzZkLE9BQVEsQ0FDakJrTixLQUFNLFNBQVUvc0IsRUFBTVUsR0FDckIsT0FBT2s1QixFQUFReDNCLEtBQU0yZixFQUFPZ0wsS0FBTS9zQixFQUFNVSxFQUFPd0csVUFBVXRFLE9BQVMsSUFHbkVtdkMsV0FBWSxTQUFVL3hDLEdBQ3JCLE9BQU9vQyxLQUFLd2dCLE1BQU0sV0FDakJiLEVBQU9nd0IsV0FBWTN2QyxLQUFNcEMsU0FLNUIraEIsRUFBT2xDLE9BQVEsQ0FDZGtOLEtBQU0sU0FBVTdNLEVBQU1sZ0IsRUFBTVUsR0FDM0IsSUFBSStoQixFQUFLbVosRUFDUm9XLEVBQVE5eEIsRUFBS2hjLFNBR2QsR0FBZSxJQUFWOHRDLEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBS25DLFlBQWtDLElBQXRCOXhCLEVBQUt5QixhQUNUSSxFQUFPeFMsS0FBTTJRLEVBQU1sZ0IsRUFBTVUsSUFLbEIsSUFBVnN4QyxHQUFnQmp3QixFQUFPMFIsU0FBVXZULEtBQ3JDMGIsRUFBUTdaLEVBQU9rd0IsVUFBV2p5QyxFQUFLMFcsaUJBQzVCcUwsRUFBT2pDLEtBQUtwUSxNQUFNd2lDLEtBQUt4d0MsS0FBTTFCLEdBQVM4eEMsUUFBVzNxQyxTQUd0Q0EsSUFBVnpHLEVBQ1csT0FBVkEsT0FDSnFoQixFQUFPZ3dCLFdBQVk3eEIsRUFBTWxnQixHQUlyQjQ3QixHQUFTLFFBQVNBLFFBQ3VCejBCLEtBQTNDc2IsRUFBTW1aLEVBQU1mLElBQUszYSxFQUFNeGYsRUFBT1YsSUFDekJ5aUIsR0FHUnZDLEVBQUt6RyxhQUFjelosRUFBTVUsRUFBUSxJQUMxQkEsR0FHSGs3QixHQUFTLFFBQVNBLEdBQStDLFFBQXBDblosRUFBTW1aLEVBQU10N0IsSUFBSzRmLEVBQU1sZ0IsSUFDakR5aUIsRUFNTSxPQUhkQSxFQUFNVixFQUFPalQsS0FBS2llLEtBQU03TSxFQUFNbGdCLFNBR1RtSCxFQUFZc2IsSUFHbEN3dkIsVUFBVyxDQUNWanhCLEtBQU0sQ0FDTDZaLElBQUssU0FBVTNhLEVBQU14ZixHQUNwQixJQUFNa2dCLEVBQVFpeEIsWUFBd0IsVUFBVm54QyxHQUMzQjRELEVBQVU0YixFQUFNLFNBQVksQ0FDNUIsSUFBSXFCLEVBQU1yQixFQUFLeGYsTUFLZixPQUpBd2YsRUFBS3pHLGFBQWMsT0FBUS9ZLEdBQ3RCNmdCLElBQ0pyQixFQUFLeGYsTUFBUTZnQixHQUVQN2dCLE1BTVhxeEMsV0FBWSxTQUFVN3hCLEVBQU14ZixHQUMzQixJQUFJVixFQUNIUCxFQUFJLEVBSUoweUMsRUFBWXp4QyxHQUFTQSxFQUFNZ1AsTUFBT2ltQixHQUVuQyxHQUFLd2MsR0FBK0IsSUFBbEJqeUIsRUFBS2hjLFNBQ3RCLEtBQVVsRSxFQUFPbXlDLEVBQVcxeUMsTUFDM0J5Z0IsRUFBSzNPLGdCQUFpQnZSLE1BTzFCOHhDLEdBQVcsQ0FDVmpYLElBQUssU0FBVTNhLEVBQU14ZixFQUFPVixHQVEzQixPQVBlLElBQVZVLEVBR0pxaEIsRUFBT2d3QixXQUFZN3hCLEVBQU1sZ0IsR0FFekJrZ0IsRUFBS3pHLGFBQWN6WixFQUFNQSxHQUVuQkEsSUFJVCtoQixFQUFPYSxLQUFNYixFQUFPakMsS0FBS3BRLE1BQU13aUMsS0FBS25vQyxPQUFPMkYsTUFBTyxTQUFVLFNBQVVtVixFQUFJN2tCLEdBQ3pFLElBQUlDLEVBQVNxcUIsR0FBWXRxQixJQUFVK2hCLEVBQU9qVCxLQUFLaWUsS0FFL0N6QyxHQUFZdHFCLEdBQVMsU0FBVWtnQixFQUFNbGdCLEVBQU1pbEIsR0FDMUMsSUFBSXhDLEVBQUs4ZSxFQUNSNlEsRUFBZ0JweUMsRUFBSzBXLGNBWXRCLE9BVk11TyxJQUdMc2MsRUFBU2pYLEdBQVk4bkIsR0FDckI5bkIsR0FBWThuQixHQUFrQjN2QixFQUM5QkEsRUFBcUMsTUFBL0J4aUIsRUFBUWlnQixFQUFNbGdCLEVBQU1pbEIsR0FDekJtdEIsRUFDQSxLQUNEOW5CLEdBQVk4bkIsR0FBa0I3USxHQUV4QjllLE1BT1QsSUFBSTR2QixHQUFhLHNDQUNoQkMsR0FBYSxnQkF5SWIsU0FBU0MsR0FBa0I3eEMsR0FFMUIsT0FEYUEsRUFBTWdQLE1BQU9pbUIsSUFBbUIsSUFDL0IvTCxLQUFNLEtBSXRCLFNBQVM0b0IsR0FBVXR5QixHQUNsQixPQUFPQSxFQUFLeUIsY0FBZ0J6QixFQUFLeUIsYUFBYyxVQUFhLEdBRzdELFNBQVM4d0IsR0FBZ0IveEMsR0FDeEIsT0FBS3VPLE1BQU15VSxRQUFTaGpCLEdBQ1pBLEVBRWMsaUJBQVZBLEdBQ0pBLEVBQU1nUCxNQUFPaW1CLElBRWQsR0F4SlI1VCxFQUFPL2YsR0FBRzZkLE9BQVEsQ0FDakJ0USxLQUFNLFNBQVV2UCxFQUFNVSxHQUNyQixPQUFPazVCLEVBQVF4M0IsS0FBTTJmLEVBQU94UyxLQUFNdlAsRUFBTVUsRUFBT3dHLFVBQVV0RSxPQUFTLElBR25FOHZDLFdBQVksU0FBVTF5QyxHQUNyQixPQUFPb0MsS0FBS3dnQixNQUFNLGtCQUNWeGdCLEtBQU0yZixFQUFPNHdCLFFBQVMzeUMsSUFBVUEsU0FLMUMraEIsRUFBT2xDLE9BQVEsQ0FDZHRRLEtBQU0sU0FBVTJRLEVBQU1sZ0IsRUFBTVUsR0FDM0IsSUFBSStoQixFQUFLbVosRUFDUm9XLEVBQVE5eEIsRUFBS2hjLFNBR2QsR0FBZSxJQUFWOHRDLEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBV25DLE9BUGUsSUFBVkEsR0FBZ0Jqd0IsRUFBTzBSLFNBQVV2VCxLQUdyQ2xnQixFQUFPK2hCLEVBQU80d0IsUUFBUzN5QyxJQUFVQSxFQUNqQzQ3QixFQUFRN1osRUFBT3NyQixVQUFXcnRDLFNBR1ptSCxJQUFWekcsRUFDQ2s3QixHQUFTLFFBQVNBLFFBQ3VCejBCLEtBQTNDc2IsRUFBTW1aLEVBQU1mLElBQUszYSxFQUFNeGYsRUFBT1YsSUFDekJ5aUIsRUFHQ3ZDLEVBQU1sZ0IsR0FBU1UsRUFHcEJrN0IsR0FBUyxRQUFTQSxHQUErQyxRQUFwQ25aLEVBQU1tWixFQUFNdDdCLElBQUs0ZixFQUFNbGdCLElBQ2pEeWlCLEVBR0R2QyxFQUFNbGdCLElBR2RxdEMsVUFBVyxDQUNWNWQsU0FBVSxDQUNUbnZCLElBQUssU0FBVTRmLEdBT2QsSUFBSTB5QixFQUFXN3dCLEVBQU9qVCxLQUFLaWUsS0FBTTdNLEVBQU0sWUFFdkMsT0FBSzB5QixFQUNHanFDLFNBQVVpcUMsRUFBVSxJQUkzQlAsR0FBVzN3QyxLQUFNd2UsRUFBSzViLFdBQ3RCZ3VDLEdBQVc1d0MsS0FBTXdlLEVBQUs1YixXQUN0QjRiLEVBQUtzUCxLQUVFLEdBR0EsS0FLWG1qQixRQUFTLENBQ1IsSUFBTyxVQUNQLE1BQVMsZUFZTC94QixFQUFRZ3hCLGNBQ2I3dkIsRUFBT3NyQixVQUFVMWQsU0FBVyxDQUMzQnJ2QixJQUFLLFNBQVU0ZixHQUlkLElBQUl4ZCxFQUFTd2QsRUFBSzNiLFdBSWxCLE9BSEs3QixHQUFVQSxFQUFPNkIsWUFDckI3QixFQUFPNkIsV0FBV3FyQixjQUVaLE1BRVJpTCxJQUFLLFNBQVUzYSxHQUlkLElBQUl4ZCxFQUFTd2QsRUFBSzNiLFdBQ2I3QixJQUNKQSxFQUFPa3RCLGNBRUZsdEIsRUFBTzZCLFlBQ1g3QixFQUFPNkIsV0FBV3FyQixrQkFPdkI3TixFQUFPYSxLQUFNLENBQ1osV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0Esb0JBQ0UsV0FDRmIsRUFBTzR3QixRQUFTdndDLEtBQUtzVSxlQUFrQnRVLFFBNEJ4QzJmLEVBQU8vZixHQUFHNmQsT0FBUSxDQUNqQmd6QixTQUFVLFNBQVVueUMsR0FDbkIsSUFBSW95QyxFQUFTNXlCLEVBQU16USxFQUFLc2pDLEVBQVVDLEVBQU83dkIsRUFBRzh2QixFQUMzQ3h6QyxFQUFJLEVBRUwsR0FBS29FLEVBQVluRCxHQUNoQixPQUFPMEIsS0FBS3dnQixNQUFNLFNBQVVPLEdBQzNCcEIsRUFBUTNmLE1BQU95d0MsU0FBVW55QyxFQUFNZCxLQUFNd0MsS0FBTStnQixFQUFHcXZCLEdBQVVwd0MsV0FNMUQsSUFGQTB3QyxFQUFVTCxHQUFnQi94QyxJQUVia0MsT0FDWixLQUFVc2QsRUFBTzlkLEtBQU0zQyxNQUl0QixHQUhBc3pDLEVBQVdQLEdBQVV0eUIsR0FDckJ6USxFQUF3QixJQUFsQnlRLEVBQUtoYyxVQUFvQixJQUFNcXVDLEdBQWtCUSxHQUFhLElBRXpELENBRVYsSUFEQTV2QixFQUFJLEVBQ002dkIsRUFBUUYsRUFBUzN2QixNQUNyQjFULEVBQUlwTSxRQUFTLElBQU0ydkMsRUFBUSxLQUFRLElBQ3ZDdmpDLEdBQU91akMsRUFBUSxLQU1aRCxLQURMRSxFQUFhVixHQUFrQjlpQyxLQUU5QnlRLEVBQUt6RyxhQUFjLFFBQVN3NUIsR0FNaEMsT0FBTzd3QyxNQUdSOHdDLFlBQWEsU0FBVXh5QyxHQUN0QixJQUFJb3lDLEVBQVM1eUIsRUFBTXpRLEVBQUtzakMsRUFBVUMsRUFBTzd2QixFQUFHOHZCLEVBQzNDeHpDLEVBQUksRUFFTCxHQUFLb0UsRUFBWW5ELEdBQ2hCLE9BQU8wQixLQUFLd2dCLE1BQU0sU0FBVU8sR0FDM0JwQixFQUFRM2YsTUFBTzh3QyxZQUFheHlDLEVBQU1kLEtBQU13QyxLQUFNK2dCLEVBQUdxdkIsR0FBVXB3QyxXQUk3RCxJQUFNOEUsVUFBVXRFLE9BQ2YsT0FBT1IsS0FBSzJxQixLQUFNLFFBQVMsSUFLNUIsSUFGQStsQixFQUFVTCxHQUFnQi94QyxJQUVia0MsT0FDWixLQUFVc2QsRUFBTzlkLEtBQU0zQyxNQU10QixHQUxBc3pDLEVBQVdQLEdBQVV0eUIsR0FHckJ6USxFQUF3QixJQUFsQnlRLEVBQUtoYyxVQUFvQixJQUFNcXVDLEdBQWtCUSxHQUFhLElBRXpELENBRVYsSUFEQTV2QixFQUFJLEVBQ002dkIsRUFBUUYsRUFBUzN2QixNQUcxQixLQUFRMVQsRUFBSXBNLFFBQVMsSUFBTTJ2QyxFQUFRLE1BQVMsR0FDM0N2akMsRUFBTUEsRUFBSTVOLFFBQVMsSUFBTW14QyxFQUFRLElBQUssS0FNbkNELEtBRExFLEVBQWFWLEdBQWtCOWlDLEtBRTlCeVEsRUFBS3pHLGFBQWMsUUFBU3c1QixHQU1oQyxPQUFPN3dDLE1BR1Ird0MsWUFBYSxTQUFVenlDLEVBQU8weUMsR0FDN0IsSUFBSXB5QixTQUFjdGdCLEVBQ2pCMnlDLEVBQXdCLFdBQVRyeUIsR0FBcUIvUixNQUFNeVUsUUFBU2hqQixHQUVwRCxNQUF5QixrQkFBYjB5QyxHQUEwQkMsRUFDOUJELEVBQVdoeEMsS0FBS3l3QyxTQUFVbnlDLEdBQVUwQixLQUFLOHdDLFlBQWF4eUMsR0FHekRtRCxFQUFZbkQsR0FDVDBCLEtBQUt3Z0IsTUFBTSxTQUFVbmpCLEdBQzNCc2lCLEVBQVEzZixNQUFPK3dDLFlBQ2R6eUMsRUFBTWQsS0FBTXdDLEtBQU0zQyxFQUFHK3lDLEdBQVVwd0MsTUFBUWd4QyxHQUN2Q0EsTUFLSWh4QyxLQUFLd2dCLE1BQU0sV0FDakIsSUFBSTJJLEVBQVc5ckIsRUFBRzQwQixFQUFNaWYsRUFFeEIsR0FBS0QsRUFPSixJQUpBNXpDLEVBQUksRUFDSjQwQixFQUFPdFMsRUFBUTNmLE1BQ2ZreEMsRUFBYWIsR0FBZ0IveEMsR0FFbkI2cUIsRUFBWStuQixFQUFZN3pDLE1BRzVCNDBCLEVBQUtrZixTQUFVaG9CLEdBQ25COEksRUFBSzZlLFlBQWEzbkIsR0FFbEI4SSxFQUFLd2UsU0FBVXRuQixhQUtJcGtCLElBQVZ6RyxHQUFnQyxZQUFUc2dCLEtBQ2xDdUssRUFBWWluQixHQUFVcHdDLFFBSXJCMjRCLEVBQVNGLElBQUt6NEIsS0FBTSxnQkFBaUJtcEIsR0FPakNucEIsS0FBS3FYLGNBQ1RyWCxLQUFLcVgsYUFBYyxRQUNsQjhSLElBQXVCLElBQVY3cUIsRUFDWixHQUNBcTZCLEVBQVN6NkIsSUFBSzhCLEtBQU0sa0JBQXFCLFNBTy9DbXhDLFNBQVUsU0FBVXZ4QixHQUNuQixJQUFJdUosRUFBV3JMLEVBQ2R6Z0IsRUFBSSxFQUdMLElBREE4ckIsRUFBWSxJQUFNdkosRUFBVyxJQUNuQjlCLEVBQU85ZCxLQUFNM0MsTUFDdEIsR0FBdUIsSUFBbEJ5Z0IsRUFBS2hjLFdBQ1AsSUFBTXF1QyxHQUFrQkMsR0FBVXR5QixJQUFXLEtBQU03YyxRQUFTa29CLElBQWUsRUFDN0UsT0FBTyxFQUlULE9BQU8sS0FPVCxJQUFJaW9CLEdBQVUsTUFFZHp4QixFQUFPL2YsR0FBRzZkLE9BQVEsQ0FDakIwQixJQUFLLFNBQVU3Z0IsR0FDZCxJQUFJazdCLEVBQU9uWixFQUFLcWtCLEVBQ2Y1bUIsRUFBTzlkLEtBQU0sR0FFZCxPQUFNOEUsVUFBVXRFLFFBMEJoQmtrQyxFQUFrQmpqQyxFQUFZbkQsR0FFdkIwQixLQUFLd2dCLE1BQU0sU0FBVW5qQixHQUMzQixJQUFJOGhCLEVBRW1CLElBQWxCbmYsS0FBSzhCLFdBV0UsT0FOWHFkLEVBREl1bEIsRUFDRXBtQyxFQUFNZCxLQUFNd0MsS0FBTTNDLEVBQUdzaUIsRUFBUTNmLE1BQU9tZixPQUVwQzdnQixHQUtONmdCLEVBQU0sR0FFb0IsaUJBQVJBLEVBQ2xCQSxHQUFPLEdBRUl0UyxNQUFNeVUsUUFBU25DLEtBQzFCQSxFQUFNUSxFQUFPL1UsSUFBS3VVLEdBQUssU0FBVTdnQixHQUNoQyxPQUFnQixNQUFUQSxFQUFnQixHQUFLQSxFQUFRLFFBSXRDazdCLEVBQVE3WixFQUFPMHhCLFNBQVVyeEMsS0FBSzRlLE9BQVVlLEVBQU8weEIsU0FBVXJ4QyxLQUFLa0MsU0FBU29TLGlCQUdyRCxRQUFTa2xCLFFBQStDejBCLElBQXBDeTBCLEVBQU1mLElBQUt6NEIsS0FBTW1mLEVBQUssV0FDM0RuZixLQUFLMUIsTUFBUTZnQixRQXpEVHJCLEdBQ0owYixFQUFRN1osRUFBTzB4QixTQUFVdnpCLEVBQUtjLE9BQzdCZSxFQUFPMHhCLFNBQVV2ekIsRUFBSzViLFNBQVNvUyxpQkFHL0IsUUFBU2tsQixRQUNnQ3owQixLQUF2Q3NiLEVBQU1tWixFQUFNdDdCLElBQUs0ZixFQUFNLFVBRWxCdUMsRUFNWSxpQkFIcEJBLEVBQU12QyxFQUFLeGYsT0FJSCtoQixFQUFJNWdCLFFBQVMyeEMsR0FBUyxJQUloQixNQUFQL3dCLEVBQWMsR0FBS0EsT0FHM0IsS0F5Q0hWLEVBQU9sQyxPQUFRLENBQ2Q0ekIsU0FBVSxDQUNUdFYsT0FBUSxDQUNQNzlCLElBQUssU0FBVTRmLEdBRWQsSUFBSXFCLEVBQU1RLEVBQU9qVCxLQUFLaWUsS0FBTTdNLEVBQU0sU0FDbEMsT0FBYyxNQUFQcUIsRUFDTkEsRUFNQWd4QixHQUFrQnh3QixFQUFPTCxLQUFNeEIsTUFHbENrRixPQUFRLENBQ1A5a0IsSUFBSyxTQUFVNGYsR0FDZCxJQUFJeGYsRUFBT3k5QixFQUFRMStCLEVBQ2xCMlEsRUFBVThQLEVBQUs5UCxRQUNmMEQsRUFBUW9NLEVBQUswUCxjQUNid1EsRUFBb0IsZUFBZGxnQixFQUFLYyxLQUNYeWMsRUFBUzJDLEVBQU0sS0FBTyxHQUN0QjEzQixFQUFNMDNCLEVBQU10c0IsRUFBUSxFQUFJMUQsRUFBUXhOLE9BVWpDLElBUENuRCxFQURJcVUsRUFBUSxFQUNScEwsRUFHQTAzQixFQUFNdHNCLEVBQVEsRUFJWHJVLEVBQUlpSixFQUFLakosSUFLaEIsS0FKQTArQixFQUFTL3RCLEVBQVMzUSxJQUlKa3dCLFVBQVlsd0IsSUFBTXFVLEtBRzdCcXFCLEVBQU94VixZQUNMd1YsRUFBTzU1QixXQUFXb2tCLFdBQ25CcmtCLEVBQVU2NUIsRUFBTzU1QixXQUFZLGFBQWlCLENBTWpELEdBSEE3RCxFQUFRcWhCLEVBQVFvYyxHQUFTNWMsTUFHcEI2ZSxFQUNKLE9BQU8xL0IsRUFJUis4QixFQUFPbHJCLEtBQU03UixHQUlmLE9BQU8rOEIsR0FHUjVDLElBQUssU0FBVTNhLEVBQU14ZixHQU1wQixJQUxBLElBQUlnekMsRUFBV3ZWLEVBQ2QvdEIsRUFBVThQLEVBQUs5UCxRQUNmcXRCLEVBQVMxYixFQUFPb0MsVUFBV3pqQixHQUMzQmpCLEVBQUkyUSxFQUFReE4sT0FFTG5ELE9BQ1AwK0IsRUFBUy90QixFQUFTM1EsSUFJTmt3QixTQUNYNU4sRUFBT3NDLFFBQVN0QyxFQUFPMHhCLFNBQVN0VixPQUFPNzlCLElBQUs2OUIsR0FBVVYsSUFBWSxLQUVsRWlXLEdBQVksR0FVZCxPQUhNQSxJQUNMeHpCLEVBQUswUCxlQUFpQixHQUVoQjZOLE9BT1gxYixFQUFPYSxLQUFNLENBQUUsUUFBUyxhQUFjLFdBQ3JDYixFQUFPMHhCLFNBQVVyeEMsTUFBUyxDQUN6Qnk0QixJQUFLLFNBQVUzYSxFQUFNeGYsR0FDcEIsR0FBS3VPLE1BQU15VSxRQUFTaGpCLEdBQ25CLE9BQVN3ZixFQUFLd1AsUUFBVTNOLEVBQU9zQyxRQUFTdEMsRUFBUTdCLEdBQU9xQixNQUFPN2dCLElBQVcsSUFJdEVrZ0IsRUFBUSt3QixVQUNiNXZCLEVBQU8weEIsU0FBVXJ4QyxNQUFPOUIsSUFBTSxTQUFVNGYsR0FDdkMsT0FBd0MsT0FBakNBLEVBQUt5QixhQUFjLFNBQXFCLEtBQU96QixFQUFLeGYsV0FXOURrZ0IsRUFBUSt5QixRQUFVLGNBQWUzd0MsRUFHakMsSUFBSTR3QyxHQUFjLGtDQUNqQkMsR0FBMEIsU0FBVTFwQyxHQUNuQ0EsRUFBRXcyQixtQkFHSjVlLEVBQU9sQyxPQUFRa0MsRUFBTzVQLE1BQU8sQ0FFNUIydUIsUUFBUyxTQUFVM3VCLEVBQU8vQyxFQUFNOFEsRUFBTTR6QixHQUVyQyxJQUFJcjBDLEVBQUdnUSxFQUFLcWMsRUFBS2lvQixFQUFZQyxFQUFRelMsRUFBUXRKLEVBQVNnYyxFQUNyREMsRUFBWSxDQUFFaDBCLEdBQVFwZCxHQUN0QmtlLEVBQU9QLEVBQU83Z0IsS0FBTXVTLEVBQU8sUUFBV0EsRUFBTTZPLEtBQU83TyxFQUNuRGl2QixFQUFhM2dCLEVBQU83Z0IsS0FBTXVTLEVBQU8sYUFBZ0JBLEVBQU0rWSxVQUFVemQsTUFBTyxLQUFRLEdBS2pGLEdBSEFnQyxFQUFNd2tDLEVBQWNub0IsRUFBTTVMLEVBQU9BLEdBQVFwZCxFQUdsQixJQUFsQm9kLEVBQUtoYyxVQUFvQyxJQUFsQmdjLEVBQUtoYyxXQUs1QjB2QyxHQUFZbHlDLEtBQU1zZixFQUFPZSxFQUFPNVAsTUFBTXF2QixhQUl0Q3hnQixFQUFLM2QsUUFBUyxNQUFTLElBRzNCKzlCLEVBQWFwZ0IsRUFBS3ZULE1BQU8sS0FDekJ1VCxFQUFPb2dCLEVBQVdqc0IsUUFDbEJpc0IsRUFBV2wwQixRQUVaOG1DLEVBQVNoekIsRUFBSzNkLFFBQVMsS0FBUSxHQUFLLEtBQU8yZCxHQUczQzdPLEVBQVFBLEVBQU80UCxFQUFPNEIsU0FDckJ4UixFQUNBLElBQUk0UCxFQUFPZ2YsTUFBTy9mLEVBQXVCLGlCQUFWN08sR0FBc0JBLElBR2hEc3VCLFVBQVlxVCxFQUFlLEVBQUksRUFDckMzaEMsRUFBTStZLFVBQVlrVyxFQUFXeFgsS0FBTSxLQUNuQ3pYLEVBQU1zd0IsV0FBYXR3QixFQUFNK1ksVUFDeEIsSUFBSXBFLE9BQVEsVUFBWXNhLEVBQVd4WCxLQUFNLGlCQUFvQixXQUM3RCxLQUdEelgsRUFBTS9ILFlBQVNqRCxFQUNUZ0wsRUFBTTlJLFNBQ1g4SSxFQUFNOUksT0FBUzZXLEdBSWhCOVEsRUFBZSxNQUFSQSxFQUNOLENBQUUrQyxHQUNGNFAsRUFBT29DLFVBQVcvVSxFQUFNLENBQUUrQyxJQUczQjhsQixFQUFVbFcsRUFBTzVQLE1BQU04bEIsUUFBU2pYLElBQVUsR0FDcEM4eUIsSUFBZ0I3YixFQUFRNkksVUFBbUQsSUFBeEM3SSxFQUFRNkksUUFBUW5sQixNQUFPdUUsRUFBTTlRLElBQXRFLENBTUEsSUFBTTBrQyxJQUFpQjdiLEVBQVFpTCxXQUFhcGlCLEVBQVVaLEdBQVMsQ0FNOUQsSUFKQTZ6QixFQUFhOWIsRUFBUXlJLGNBQWdCMWYsRUFDL0I0eUIsR0FBWWx5QyxLQUFNcXlDLEVBQWEveUIsS0FDcEN2UixFQUFNQSxFQUFJbEwsWUFFSGtMLEVBQUtBLEVBQU1BLEVBQUlsTCxXQUN0QjJ2QyxFQUFVM2hDLEtBQU05QyxHQUNoQnFjLEVBQU1yYyxFQUlGcWMsS0FBVTVMLEVBQUtyZCxlQUFpQkMsSUFDcENveEMsRUFBVTNoQyxLQUFNdVosRUFBSTNuQixhQUFlMm5CLEVBQUlxb0IsY0FBZ0JueEMsR0FNekQsSUFEQXZELEVBQUksR0FDTWdRLEVBQU15a0MsRUFBV3owQyxRQUFZMFMsRUFBTW13Qix3QkFDNUMyUixFQUFjeGtDLEVBQ2QwQyxFQUFNNk8sS0FBT3ZoQixFQUFJLEVBQ2hCczBDLEVBQ0E5YixFQUFReUosVUFBWTFnQixHQUdyQnVnQixHQUFXeEcsRUFBU3o2QixJQUFLbVAsRUFBSyxXQUFjdFAsT0FBT1ksT0FBUSxPQUFVb1IsRUFBTTZPLE9BQzFFK1osRUFBU3o2QixJQUFLbVAsRUFBSyxZQUVuQjh4QixFQUFPNWxCLE1BQU9sTSxFQUFLTCxJQUlwQm15QixFQUFTeVMsR0FBVXZrQyxFQUFLdWtDLEtBQ1R6UyxFQUFPNWxCLE9BQVM4ZSxFQUFZaHJCLEtBQzFDMEMsRUFBTS9ILE9BQVNtM0IsRUFBTzVsQixNQUFPbE0sRUFBS0wsSUFDWixJQUFqQitDLEVBQU0vSCxRQUNWK0gsRUFBTTB1QixrQkE4Q1QsT0ExQ0ExdUIsRUFBTTZPLEtBQU9BLEVBR1A4eUIsR0FBaUIzaEMsRUFBTW14QixzQkFFcEJyTCxFQUFRd0csV0FDcUMsSUFBcER4RyxFQUFRd0csU0FBUzlpQixNQUFPdTRCLEVBQVUzdEIsTUFBT25YLEtBQ3pDcXJCLEVBQVl2YSxJQUlQOHpCLEdBQVVud0MsRUFBWXFjLEVBQU1jLE1BQWFGLEVBQVVaLE1BR3ZENEwsRUFBTTVMLEVBQU04ekIsTUFHWDl6QixFQUFNOHpCLEdBQVcsTUFJbEJqeUIsRUFBTzVQLE1BQU1xdkIsVUFBWXhnQixFQUVwQjdPLEVBQU1td0Isd0JBQ1YyUixFQUFZbGlDLGlCQUFrQmlQLEVBQU02eUIsSUFHckMzekIsRUFBTWMsS0FFRDdPLEVBQU1td0Isd0JBQ1YyUixFQUFZcmhDLG9CQUFxQm9PLEVBQU02eUIsSUFHeEM5eEIsRUFBTzVQLE1BQU1xdkIsZUFBWXI2QixFQUVwQjJrQixJQUNKNUwsRUFBTTh6QixHQUFXbG9CLElBTWQzWixFQUFNL0gsU0FLZGdxQyxTQUFVLFNBQVVwekIsRUFBTWQsRUFBTS9OLEdBQy9CLElBQUloSSxFQUFJNFgsRUFBT2xDLE9BQ2QsSUFBSWtDLEVBQU9nZixNQUNYNXVCLEVBQ0EsQ0FDQzZPLEtBQU1BLEVBQ04yaUIsYUFBYSxJQUlmNWhCLEVBQU81UCxNQUFNMnVCLFFBQVMzMkIsRUFBRyxLQUFNK1YsTUFLakM2QixFQUFPL2YsR0FBRzZkLE9BQVEsQ0FFakJpaEIsUUFBUyxTQUFVOWYsRUFBTTVSLEdBQ3hCLE9BQU9oTixLQUFLd2dCLE1BQU0sV0FDakJiLEVBQU81UCxNQUFNMnVCLFFBQVM5ZixFQUFNNVIsRUFBTWhOLFVBR3BDaXlDLGVBQWdCLFNBQVVyekIsRUFBTTVSLEdBQy9CLElBQUk4USxFQUFPOWQsS0FBTSxHQUNqQixHQUFLOGQsRUFDSixPQUFPNkIsRUFBTzVQLE1BQU0ydUIsUUFBUzlmLEVBQU01UixFQUFNOFEsR0FBTSxNQWM1Q1UsRUFBUSt5QixTQUNiNXhCLEVBQU9hLEtBQU0sQ0FBRTJpQixNQUFPLFVBQVdDLEtBQU0sYUFBYyxTQUFVSyxFQUFNMUQsR0FHcEUsSUFBSTlYLEVBQVUsU0FBVWxZLEdBQ3ZCNFAsRUFBTzVQLE1BQU1paUMsU0FBVWpTLEVBQUtod0IsRUFBTTlJLE9BQVEwWSxFQUFPNVAsTUFBTWd3QixJQUFLaHdCLEtBRzdENFAsRUFBTzVQLE1BQU04bEIsUUFBU2tLLEdBQVEsQ0FDN0JQLE1BQU8sV0FJTixJQUFJdGdCLEVBQU1sZixLQUFLUyxlQUFpQlQsS0FBS1UsVUFBWVYsS0FDaERreUMsRUFBV3ZaLEVBQVNuQixPQUFRdFksRUFBSzZnQixHQUU1Qm1TLEdBQ0xoekIsRUFBSXZQLGlCQUFrQjh6QixFQUFNeGIsR0FBUyxHQUV0QzBRLEVBQVNuQixPQUFRdFksRUFBSzZnQixHQUFPbVMsR0FBWSxHQUFNLElBRWhEdlMsU0FBVSxXQUNULElBQUl6Z0IsRUFBTWxmLEtBQUtTLGVBQWlCVCxLQUFLVSxVQUFZVixLQUNoRGt5QyxFQUFXdlosRUFBU25CLE9BQVF0WSxFQUFLNmdCLEdBQVEsRUFFcENtUyxFQUtMdlosRUFBU25CLE9BQVF0WSxFQUFLNmdCLEVBQUttUyxJQUozQmh6QixFQUFJMU8sb0JBQXFCaXpCLEVBQU14YixHQUFTLEdBQ3hDMFEsRUFBU2xFLE9BQVF2VixFQUFLNmdCLFNBUzNCLElBQUk5UyxHQUFXcnNCLEVBQU9xc0IsU0FFbEJuTyxHQUFRLENBQUV5RCxLQUFNa0IsS0FBSzZkLE9BRXJCNlEsR0FBUyxLQUtieHlCLEVBQU95eUIsU0FBVyxTQUFVcGxDLEdBQzNCLElBQUltZixFQUFLa21CLEVBQ1QsSUFBTXJsQyxHQUF3QixpQkFBVEEsRUFDcEIsT0FBTyxLQUtSLElBQ0NtZixHQUFNLElBQU12ckIsRUFBTzB4QyxXQUFjQyxnQkFBaUJ2bEMsRUFBTSxZQUN2RCxNQUFRakYsSUFZVixPQVZBc3FDLEVBQWtCbG1CLEdBQU9BLEVBQUlqRixxQkFBc0IsZUFBaUIsR0FDOURpRixJQUFPa21CLEdBQ1oxeUIsRUFBT3ZDLE1BQU8saUJBQ2JpMUIsRUFDQzF5QixFQUFPL1UsSUFBS3luQyxFQUFnQjVyQixZQUFZLFNBQVU5YyxHQUNqRCxPQUFPQSxFQUFHdWhCLGVBQ1AxRCxLQUFNLE1BQ1Z4YSxJQUdJbWYsR0FJUixJQUNDcW1CLEdBQVcsUUFDWEMsR0FBUSxTQUNSQyxHQUFrQix3Q0FDbEJDLEdBQWUscUNBRWhCLFNBQVNDLEdBQWE3akMsRUFBUXZILEVBQUtxckMsRUFBYTlmLEdBQy9DLElBQUluMUIsRUFFSixHQUFLaVAsTUFBTXlVLFFBQVM5WixHQUduQm1ZLEVBQU9hLEtBQU1oWixHQUFLLFNBQVVuSyxFQUFHb1osR0FDekJvOEIsR0FBZUwsR0FBU2x6QyxLQUFNeVAsR0FHbENna0IsRUFBS2hrQixFQUFRMEgsR0FLYm04QixHQUNDN2pDLEVBQVMsS0FBcUIsaUJBQU4wSCxHQUF1QixNQUFMQSxFQUFZcFosRUFBSSxJQUFPLElBQ2pFb1osRUFDQW84QixFQUNBOWYsV0FLRyxHQUFNOGYsR0FBaUMsV0FBbEJuekIsRUFBUWxZLEdBVW5DdXJCLEVBQUtoa0IsRUFBUXZILFFBUGIsSUFBTTVKLEtBQVE0SixFQUNib3JDLEdBQWE3akMsRUFBUyxJQUFNblIsRUFBTyxJQUFLNEosRUFBSzVKLEdBQVFpMUMsRUFBYTlmLEdBWXJFcFQsRUFBT216QixNQUFRLFNBQVUvbkMsRUFBRzhuQyxHQUMzQixJQUFJOWpDLEVBQ0gzUCxFQUFJLEdBQ0oyekIsRUFBTSxTQUFVbjBCLEVBQUttMEMsR0FHcEIsSUFBSXowQyxFQUFRbUQsRUFBWXN4QyxHQUN2QkEsSUFDQUEsRUFFRDN6QyxFQUFHQSxFQUFFb0IsUUFBV3d5QyxtQkFBb0JwMEMsR0FBUSxJQUMzQ28wQyxtQkFBNkIsTUFBVDEwQyxFQUFnQixHQUFLQSxJQUc1QyxHQUFVLE1BQUx5TSxFQUNKLE1BQU8sR0FJUixHQUFLOEIsTUFBTXlVLFFBQVN2VyxJQUFTQSxFQUFFNE0sU0FBV2dJLEVBQU8wQixjQUFldFcsR0FHL0Q0VSxFQUFPYSxLQUFNelYsR0FBRyxXQUNmZ29CLEVBQUsveUIsS0FBS3BDLEtBQU1vQyxLQUFLMUIsZUFPdEIsSUFBTXlRLEtBQVVoRSxFQUNmNm5DLEdBQWE3akMsRUFBUWhFLEVBQUdnRSxHQUFVOGpDLEVBQWE5ZixHQUtqRCxPQUFPM3pCLEVBQUVvb0IsS0FBTSxNQUdoQjdILEVBQU8vZixHQUFHNmQsT0FBUSxDQUNqQncxQixVQUFXLFdBQ1YsT0FBT3R6QixFQUFPbXpCLE1BQU85eUMsS0FBS2t6QyxtQkFFM0JBLGVBQWdCLFdBQ2YsT0FBT2x6QyxLQUFLNEssS0FBSyxXQUdoQixJQUFJOGYsRUFBVy9LLEVBQU94UyxLQUFNbk4sS0FBTSxZQUNsQyxPQUFPMHFCLEVBQVcvSyxFQUFPb0MsVUFBVzJJLEdBQWExcUIsUUFDOUNLLFFBQVEsV0FDWCxJQUFJdWUsRUFBTzVlLEtBQUs0ZSxLQUdoQixPQUFPNWUsS0FBS3BDLE9BQVMraEIsRUFBUTNmLE1BQU95eEIsR0FBSSxjQUN2Q2toQixHQUFhcnpDLEtBQU1VLEtBQUtrQyxZQUFld3dDLEdBQWdCcHpDLEtBQU1zZixLQUMzRDVlLEtBQUtzdEIsVUFBWWtPLEdBQWVsOEIsS0FBTXNmLE9BQ3RDaFUsS0FBSyxTQUFVNlgsRUFBSTNFLEdBQ3RCLElBQUlxQixFQUFNUSxFQUFRM2YsTUFBT21mLE1BRXpCLE9BQVksTUFBUEEsRUFDRyxLQUdIdFMsTUFBTXlVLFFBQVNuQyxHQUNaUSxFQUFPL1UsSUFBS3VVLEdBQUssU0FBVUEsR0FDakMsTUFBTyxDQUFFdmhCLEtBQU1rZ0IsRUFBS2xnQixLQUFNVSxNQUFPNmdCLEVBQUkxZixRQUFTZ3pDLEdBQU8sWUFJaEQsQ0FBRTcwQyxLQUFNa2dCLEVBQUtsZ0IsS0FBTVUsTUFBTzZnQixFQUFJMWYsUUFBU2d6QyxHQUFPLFlBQ2xEdjBDLFNBS04sSUFDQ2kxQyxHQUFNLE9BQ05DLEdBQVEsT0FDUkMsR0FBYSxnQkFDYkMsR0FBVyw2QkFJWEMsR0FBYSxpQkFDYkMsR0FBWSxRQVdaNUcsR0FBYSxHQU9iNkcsR0FBYSxHQUdiQyxHQUFXLEtBQUsvaEMsT0FBUSxLQUd4QmdpQyxHQUFlanpDLEVBQVMyZSxjQUFlLEtBS3hDLFNBQVN1MEIsR0FBNkJDLEdBR3JDLE9BQU8sU0FBVUMsRUFBb0IvZSxHQUVELGlCQUF2QitlLElBQ1gvZSxFQUFPK2UsRUFDUEEsRUFBcUIsS0FHdEIsSUFBSUMsRUFDSDEyQyxFQUFJLEVBQ0oyMkMsRUFBWUYsRUFBbUJ4L0IsY0FBY2hILE1BQU9pbUIsSUFBbUIsR0FFeEUsR0FBSzl4QixFQUFZc3pCLEdBR2hCLEtBQVVnZixFQUFXQyxFQUFXMzJDLE1BR1IsTUFBbEIwMkMsRUFBVSxJQUNkQSxFQUFXQSxFQUFTN21DLE1BQU8sSUFBTyxLQUNoQzJtQyxFQUFXRSxHQUFhRixFQUFXRSxJQUFjLElBQUtsM0IsUUFBU2tZLEtBSS9EOGUsRUFBV0UsR0FBYUYsRUFBV0UsSUFBYyxJQUFLNWpDLEtBQU00a0IsSUFRbkUsU0FBU2tmLEdBQStCSixFQUFXN2xDLEVBQVNtL0IsRUFBaUIrRyxHQUU1RSxJQUFJQyxFQUFZLEdBQ2ZDLEVBQXFCUCxJQUFjSixHQUVwQyxTQUFTWSxFQUFTTixHQUNqQixJQUFJeG1CLEVBY0osT0FiQTRtQixFQUFXSixJQUFhLEVBQ3hCcDBCLEVBQU9hLEtBQU1xekIsRUFBV0UsSUFBYyxJQUFJLFNBQVVoZ0IsRUFBR3VnQixHQUN0RCxJQUFJQyxFQUFzQkQsRUFBb0J0bUMsRUFBU20vQixFQUFpQitHLEdBQ3hFLE1BQW9DLGlCQUF4QkssR0FDVkgsR0FBcUJELEVBQVdJLEdBS3RCSCxJQUNEN21CLEVBQVdnbkIsUUFEZixHQUhOdm1DLEVBQVFnbUMsVUFBVW4zQixRQUFTMDNCLEdBQzNCRixFQUFTRSxJQUNGLE1BS0ZobkIsRUFHUixPQUFPOG1CLEVBQVNybUMsRUFBUWdtQyxVQUFXLE1BQVVHLEVBQVcsTUFBU0UsRUFBUyxLQU0zRSxTQUFTRyxHQUFZdnRDLEVBQVE0WCxHQUM1QixJQUFJamdCLEVBQUt3aUIsRUFDUnF6QixFQUFjOTBCLEVBQU8rMEIsYUFBYUQsYUFBZSxHQUVsRCxJQUFNNzFDLEtBQU9pZ0IsT0FDUTlaLElBQWY4WixFQUFLamdCLE1BQ1A2MUMsRUFBYTcxQyxHQUFRcUksRUFBV21hLElBQVVBLEVBQU8sS0FBVXhpQixHQUFRaWdCLEVBQUtqZ0IsSUFPNUUsT0FKS3dpQixHQUNKekIsRUFBT2xDLFFBQVEsRUFBTXhXLEVBQVFtYSxHQUd2Qm5hLEVBL0VSMHNDLEdBQWF2bUIsS0FBT0gsR0FBU0csS0FnUDdCek4sRUFBT2xDLE9BQVEsQ0FHZGszQixPQUFRLEVBR1JDLGFBQWMsR0FDZEMsS0FBTSxHQUVOSCxhQUFjLENBQ2JyMUMsSUFBSzR0QixHQUFTRyxLQUNkeE8sS0FBTSxNQUNOazJCLFFBeFJnQiw0REF3UlF4MUMsS0FBTTJ0QixHQUFTOG5CLFVBQ3ZDbDlCLFFBQVEsRUFDUm05QixhQUFhLEVBQ2JDLE9BQU8sRUFDUEMsWUFBYSxtREFjYkMsUUFBUyxDQUNSLElBQUt6QixHQUNMcDBCLEtBQU0sYUFDTnJhLEtBQU0sWUFDTmtuQixJQUFLLDRCQUNMaXBCLEtBQU0scUNBR1A1aUIsU0FBVSxDQUNUckcsSUFBSyxVQUNMbG5CLEtBQU0sU0FDTm13QyxLQUFNLFlBR1BDLGVBQWdCLENBQ2ZscEIsSUFBSyxjQUNMN00sS0FBTSxlQUNOODFCLEtBQU0sZ0JBS1BFLFdBQVksQ0FHWCxTQUFVenZCLE9BR1YsYUFBYSxFQUdiLFlBQWFtVCxLQUFLQyxNQUdsQixXQUFZdFosRUFBT3l5QixVQU9wQnFDLFlBQWEsQ0FDWnAxQyxLQUFLLEVBQ0x3Z0IsU0FBUyxJQU9YMDFCLFVBQVcsU0FBVXR1QyxFQUFRdXVDLEdBQzVCLE9BQU9BLEVBR05oQixHQUFZQSxHQUFZdnRDLEVBQVEwWSxFQUFPKzBCLGNBQWdCYyxHQUd2RGhCLEdBQVk3MEIsRUFBTyswQixhQUFjenRDLElBR25Dd3VDLGNBQWU3QixHQUE2QmhILElBQzVDOEksY0FBZTlCLEdBQTZCSCxJQUc1Q2tDLEtBQU0sU0FBVXQyQyxFQUFLMk8sR0FHQSxpQkFBUjNPLElBQ1gyTyxFQUFVM08sRUFDVkEsT0FBTTBGLEdBSVBpSixFQUFVQSxHQUFXLEdBRXJCLElBQUk0bkMsRUFHSEMsRUFHQUMsRUFDQUMsRUFHQUMsRUFHQUMsRUFHQS9lLEVBR0FnZixFQUdBNzRDLEVBR0E4NEMsRUFHQS8yQyxFQUFJdWdCLEVBQU80MUIsVUFBVyxHQUFJdm5DLEdBRzFCb29DLEVBQWtCaDNDLEVBQUV5Z0IsU0FBV3pnQixFQUcvQmkzQyxFQUFxQmozQyxFQUFFeWdCLFVBQ3BCdTJCLEVBQWdCdDBDLFVBQVlzMEMsRUFBZ0J6K0IsUUFDOUNnSSxFQUFReTJCLEdBQ1J6MkIsRUFBTzVQLE1BR1JtbEIsRUFBV3ZWLEVBQU9tVixXQUNsQndoQixFQUFtQjMyQixFQUFPbVUsVUFBVyxlQUdyQ3lpQixFQUFhbjNDLEVBQUVtM0MsWUFBYyxHQUc3QkMsRUFBaUIsR0FDakJDLEVBQXNCLEdBR3RCQyxFQUFXLFdBR1h4QyxFQUFRLENBQ1A1YyxXQUFZLEVBR1pxZixrQkFBbUIsU0FBVS8zQyxHQUM1QixJQUFJME8sRUFDSixHQUFLNHBCLEVBQVksQ0FDaEIsSUFBTTZlLEVBRUwsSUFEQUEsRUFBa0IsR0FDUnpvQyxFQUFRZ21DLEdBQVN0c0IsS0FBTTh1QixJQUNoQ0MsRUFBaUJ6b0MsRUFBTyxHQUFJZ0gsY0FBZ0IsTUFDekN5aEMsRUFBaUJ6b0MsRUFBTyxHQUFJZ0gsY0FBZ0IsTUFBUyxJQUNyRDNDLE9BQVFyRSxFQUFPLElBR3BCQSxFQUFReW9DLEVBQWlCbjNDLEVBQUkwVixjQUFnQixLQUU5QyxPQUFnQixNQUFUaEgsRUFBZ0IsS0FBT0EsRUFBTWthLEtBQU0sT0FJM0NvdkIsc0JBQXVCLFdBQ3RCLE9BQU8xZixFQUFZNGUsRUFBd0IsTUFJNUNlLGlCQUFrQixTQUFVajVDLEVBQU1VLEdBTWpDLE9BTGtCLE1BQWI0NEIsSUFDSnQ1QixFQUFPNjRDLEVBQXFCNzRDLEVBQUswVyxlQUNoQ21pQyxFQUFxQjc0QyxFQUFLMFcsZ0JBQW1CMVcsRUFDOUM0NEMsRUFBZ0I1NEMsR0FBU1UsR0FFbkIwQixNQUlSODJDLGlCQUFrQixTQUFVbDRCLEdBSTNCLE9BSGtCLE1BQWJzWSxJQUNKOTNCLEVBQUUyM0MsU0FBV240QixHQUVQNWUsTUFJUnUyQyxXQUFZLFNBQVUzckMsR0FDckIsSUFBSXFVLEVBQ0osR0FBS3JVLEVBQ0osR0FBS3NzQixFQUdKZ2QsRUFBTWpmLE9BQVFycUIsRUFBS3NwQyxFQUFNOEMsY0FJekIsSUFBTS8zQixLQUFRclUsRUFDYjJyQyxFQUFZdDNCLEdBQVMsQ0FBRXMzQixFQUFZdDNCLEdBQVFyVSxFQUFLcVUsSUFJbkQsT0FBT2pmLE1BSVJpM0MsTUFBTyxTQUFVQyxHQUNoQixJQUFJQyxFQUFZRCxHQUFjUixFQUs5QixPQUpLZCxHQUNKQSxFQUFVcUIsTUFBT0UsR0FFbEJ2ekIsRUFBTSxFQUFHdXpCLEdBQ0ZuM0MsT0FvQlYsR0FmQWsxQixFQUFTcFksUUFBU28zQixHQUtsQjkwQyxFQUFFQyxNQUFVQSxHQUFPRCxFQUFFQyxLQUFPNHRCLEdBQVNHLE1BQVMsSUFDNUMzdEIsUUFBUyt6QyxHQUFXdm1CLEdBQVM4bkIsU0FBVyxNQUcxQzMxQyxFQUFFd2YsS0FBTzVRLEVBQVFtTyxRQUFVbk8sRUFBUTRRLE1BQVF4ZixFQUFFK2MsUUFBVS9jLEVBQUV3ZixLQUd6RHhmLEVBQUU0MEMsV0FBYzUwQyxFQUFFMjBDLFVBQVksS0FBTXovQixjQUFjaEgsTUFBT2ltQixJQUFtQixDQUFFLElBR3hELE1BQWpCbjBCLEVBQUVnNEMsWUFBc0IsQ0FDNUJuQixFQUFZdjFDLEVBQVMyZSxjQUFlLEtBS3BDLElBQ0M0MkIsRUFBVTdvQixLQUFPaHVCLEVBQUVDLElBSW5CNDJDLEVBQVU3b0IsS0FBTzZvQixFQUFVN29CLEtBQzNCaHVCLEVBQUVnNEMsWUFBY3pELEdBQWFvQixTQUFXLEtBQU9wQixHQUFhdnhDLE1BQzNENnpDLEVBQVVsQixTQUFXLEtBQU9rQixFQUFVN3pDLEtBQ3RDLE1BQVEyRixHQUlUM0ksRUFBRWc0QyxhQUFjLEdBYWxCLEdBUktoNEMsRUFBRTROLE1BQVE1TixFQUFFNDFDLGFBQWlDLGlCQUFYNTFDLEVBQUU0TixPQUN4QzVOLEVBQUU0TixLQUFPMlMsRUFBT216QixNQUFPMXpDLEVBQUU0TixLQUFNNU4sRUFBRXl6QyxjQUlsQ29CLEdBQStCckgsR0FBWXh0QyxFQUFHNE8sRUFBU2ttQyxHQUdsRGhkLEVBQ0osT0FBT2dkLEVBOEVSLElBQU03MkMsS0F6RU42NEMsRUFBY3YyQixFQUFPNVAsT0FBUzNRLEVBQUV5WSxTQUdRLEdBQXBCOEgsRUFBT2cxQixVQUMxQmgxQixFQUFPNVAsTUFBTTJ1QixRQUFTLGFBSXZCdC9CLEVBQUV3ZixLQUFPeGYsRUFBRXdmLEtBQUs5UCxjQUdoQjFQLEVBQUVpNEMsWUFBYzlELEdBQVdqMEMsS0FBTUYsRUFBRXdmLE1BS25DaTNCLEVBQVd6MkMsRUFBRUMsSUFBSUksUUFBUzJ6QyxHQUFPLElBRzNCaDBDLEVBQUVpNEMsV0F3QklqNEMsRUFBRTROLE1BQVE1TixFQUFFNDFDLGFBQ29ELEtBQXpFNTFDLEVBQUU4MUMsYUFBZSxJQUFLajBDLFFBQVMsdUNBQ2pDN0IsRUFBRTROLEtBQU81TixFQUFFNE4sS0FBS3ZOLFFBQVMwekMsR0FBSyxPQXZCOUJnRCxFQUFXLzJDLEVBQUVDLElBQUk2TixNQUFPMm9DLEVBQVNyMUMsUUFHNUJwQixFQUFFNE4sT0FBVTVOLEVBQUU0MUMsYUFBaUMsaUJBQVg1MUMsRUFBRTROLFFBQzFDNm9DLElBQWMxRCxHQUFPN3lDLEtBQU11MkMsR0FBYSxJQUFNLEtBQVF6MkMsRUFBRTROLFlBR2pENU4sRUFBRTROLE9BSU8sSUFBWjVOLEVBQUV1b0IsUUFDTmt1QixFQUFXQSxFQUFTcDJDLFFBQVM0ekMsR0FBWSxNQUN6QzhDLEdBQWFoRSxHQUFPN3lDLEtBQU11MkMsR0FBYSxJQUFNLEtBQVEsS0FBUy8yQixHQUFNeUQsT0FDbkU0ekIsR0FJRi8yQyxFQUFFQyxJQUFNdzJDLEVBQVdNLEdBU2YvMkMsRUFBRWs0QyxhQUNEMzNCLEVBQU9pMUIsYUFBY2lCLElBQ3pCM0IsRUFBTTJDLGlCQUFrQixvQkFBcUJsM0IsRUFBT2kxQixhQUFjaUIsSUFFOURsMkIsRUFBT2sxQixLQUFNZ0IsSUFDakIzQixFQUFNMkMsaUJBQWtCLGdCQUFpQmwzQixFQUFPazFCLEtBQU1nQixNQUtuRHoyQyxFQUFFNE4sTUFBUTVOLEVBQUVpNEMsYUFBZ0MsSUFBbEJqNEMsRUFBRTgxQyxhQUF5QmxuQyxFQUFRa25DLGNBQ2pFaEIsRUFBTTJDLGlCQUFrQixlQUFnQnozQyxFQUFFODFDLGFBSTNDaEIsRUFBTTJDLGlCQUNMLFNBQ0F6M0MsRUFBRTQwQyxVQUFXLElBQU81MEMsRUFBRSsxQyxRQUFTLzFDLEVBQUU0MEMsVUFBVyxJQUMzQzUwQyxFQUFFKzFDLFFBQVMvMUMsRUFBRTQwQyxVQUFXLEtBQ0EsTUFBckI1MEMsRUFBRTQwQyxVQUFXLEdBQWMsS0FBT04sR0FBVyxXQUFhLElBQzdEdDBDLEVBQUUrMUMsUUFBUyxNQUlGLzFDLEVBQUVtNEMsUUFDWnJELEVBQU0yQyxpQkFBa0J4NUMsRUFBRytCLEVBQUVtNEMsUUFBU2w2QyxJQUl2QyxHQUFLK0IsRUFBRW80QyxjQUMrQyxJQUFuRHA0QyxFQUFFbzRDLFdBQVdoNkMsS0FBTTQ0QyxFQUFpQmxDLEVBQU85MEMsSUFBaUI4M0IsR0FHOUQsT0FBT2dkLEVBQU0rQyxRQWVkLEdBWEFQLEVBQVcsUUFHWEosRUFBaUJ2akIsSUFBSzN6QixFQUFFa3VDLFVBQ3hCNEcsRUFBTXR3QixLQUFNeGtCLEVBQUVxNEMsU0FDZHZELEVBQU1yZ0IsS0FBTXowQixFQUFFZ2UsT0FHZHc0QixFQUFZM0IsR0FBK0JSLEdBQVlyMEMsRUFBRzRPLEVBQVNrbUMsR0FLNUQsQ0FTTixHQVJBQSxFQUFNNWMsV0FBYSxFQUdkNGUsR0FDSkcsRUFBbUIzWCxRQUFTLFdBQVksQ0FBRXdWLEVBQU85MEMsSUFJN0M4M0IsRUFDSixPQUFPZ2QsRUFJSDkwQyxFQUFFNjFDLE9BQVM3MUMsRUFBRTBaLFFBQVUsSUFDM0JrOUIsRUFBZXAxQyxFQUFPWSxZQUFZLFdBQ2pDMHlDLEVBQU0rQyxNQUFPLGFBQ1g3M0MsRUFBRTBaLFVBR04sSUFDQ29lLEdBQVksRUFDWjBlLEVBQVU4QixLQUFNbEIsRUFBZ0I1eUIsR0FDL0IsTUFBUTdiLEdBR1QsR0FBS212QixFQUNKLE1BQU1udkIsRUFJUDZiLEdBQU8sRUFBRzdiLFNBaENYNmIsR0FBTyxFQUFHLGdCQXFDWCxTQUFTQSxFQUFNb3pCLEVBQVFXLEVBQWtCQyxFQUFXTCxHQUNuRCxJQUFJTSxFQUFXSixFQUFTcjZCLEVBQU9uQixFQUFVNjdCLEVBQ3hDWixFQUFhUyxFQUdUemdCLElBSUxBLEdBQVksRUFHUDhlLEdBQ0pwMUMsRUFBTzJYLGFBQWN5OUIsR0FLdEJKLE9BQVk3d0MsRUFHWit3QyxFQUF3QnlCLEdBQVcsR0FHbkNyRCxFQUFNNWMsV0FBYTBmLEVBQVMsRUFBSSxFQUFJLEVBR3BDYSxFQUFZYixHQUFVLEtBQU9BLEVBQVMsS0FBa0IsTUFBWEEsRUFHeENZLElBQ0ozN0IsRUE3bEJKLFNBQThCN2MsRUFBRzgwQyxFQUFPMEQsR0FPdkMsSUFMQSxJQUFJRyxFQUFJbjVCLEVBQU1vNUIsRUFBZUMsRUFDNUJ6bEIsRUFBV3B6QixFQUFFb3pCLFNBQ2J3aEIsRUFBWTUwQyxFQUFFNDBDLFVBR1ksTUFBbkJBLEVBQVcsSUFDbEJBLEVBQVVqaEMsYUFDRWhPLElBQVBnekMsSUFDSkEsRUFBSzM0QyxFQUFFMjNDLFVBQVk3QyxFQUFNeUMsa0JBQW1CLGlCQUs5QyxHQUFLb0IsRUFDSixJQUFNbjVCLEtBQVE0VCxFQUNiLEdBQUtBLEVBQVU1VCxJQUFVNFQsRUFBVTVULEdBQU90ZixLQUFNeTRDLEdBQU8sQ0FDdEQvRCxFQUFVbjNCLFFBQVMrQixHQUNuQixNQU1ILEdBQUtvMUIsRUFBVyxLQUFPNEQsRUFDdEJJLEVBQWdCaEUsRUFBVyxPQUNyQixDQUdOLElBQU1wMUIsS0FBUWc1QixFQUFZLENBQ3pCLElBQU01RCxFQUFXLElBQU81MEMsRUFBRWsyQyxXQUFZMTJCLEVBQU8sSUFBTW8xQixFQUFXLElBQVEsQ0FDckVnRSxFQUFnQnA1QixFQUNoQixNQUVLcTVCLElBQ0xBLEVBQWdCcjVCLEdBS2xCbzVCLEVBQWdCQSxHQUFpQkMsRUFNbEMsR0FBS0QsRUFJSixPQUhLQSxJQUFrQmhFLEVBQVcsSUFDakNBLEVBQVVuM0IsUUFBU203QixHQUViSixFQUFXSSxHQTBpQkxFLENBQXFCOTRDLEVBQUc4MEMsRUFBTzBELEtBSXJDQyxHQUNMbDRCLEVBQU9zQyxRQUFTLFNBQVU3aUIsRUFBRTQwQyxZQUFlLEdBQzNDcjBCLEVBQU9zQyxRQUFTLE9BQVE3aUIsRUFBRTQwQyxXQUFjLElBQ3hDNTBDLEVBQUVrMkMsV0FBWSxlQUFrQixjQUlqQ3I1QixFQTlpQkgsU0FBc0I3YyxFQUFHNmMsRUFBVWk0QixFQUFPMkQsR0FDekMsSUFBSU0sRUFBT0MsRUFBU0MsRUFBTTN1QixFQUFLK0ksRUFDOUI2aUIsRUFBYSxHQUdidEIsRUFBWTUwQyxFQUFFNDBDLFVBQVU5bUMsUUFHekIsR0FBSzhtQyxFQUFXLEdBQ2YsSUFBTXFFLEtBQVFqNUMsRUFBRWsyQyxXQUNmQSxFQUFZK0MsRUFBSy9qQyxlQUFrQmxWLEVBQUVrMkMsV0FBWStDLEdBT25ELElBSEFELEVBQVVwRSxFQUFVamhDLFFBR1pxbEMsR0FjUCxHQVpLaDVDLEVBQUVpMkMsZUFBZ0IrQyxLQUN0QmxFLEVBQU85MEMsRUFBRWkyQyxlQUFnQitDLElBQWNuOEIsSUFJbEN3VyxHQUFRb2xCLEdBQWF6NEMsRUFBRWs1QyxhQUM1QnI4QixFQUFXN2MsRUFBRWs1QyxXQUFZcjhCLEVBQVU3YyxFQUFFMjBDLFdBR3RDdGhCLEVBQU8ybEIsRUFDUEEsRUFBVXBFLEVBQVVqaEMsUUFLbkIsR0FBaUIsTUFBWnFsQyxFQUVKQSxFQUFVM2xCLE9BR0osR0FBYyxNQUFUQSxHQUFnQkEsSUFBUzJsQixFQUFVLENBTTlDLEtBSEFDLEVBQU8vQyxFQUFZN2lCLEVBQU8sSUFBTTJsQixJQUFhOUMsRUFBWSxLQUFPOEMsSUFJL0QsSUFBTUQsS0FBUzdDLEVBSWQsSUFEQTVyQixFQUFNeXVCLEVBQU05c0MsTUFBTyxNQUNULEtBQVErc0MsSUFHakJDLEVBQU8vQyxFQUFZN2lCLEVBQU8sSUFBTS9JLEVBQUssS0FDcEM0ckIsRUFBWSxLQUFPNXJCLEVBQUssS0FDYixFQUdHLElBQVQydUIsRUFDSkEsRUFBTy9DLEVBQVk2QyxJQUdnQixJQUF4QjdDLEVBQVk2QyxLQUN2QkMsRUFBVTF1QixFQUFLLEdBQ2ZzcUIsRUFBVW4zQixRQUFTNk0sRUFBSyxLQUV6QixNQU9KLElBQWMsSUFBVDJ1QixFQUdKLEdBQUtBLEdBQVFqNUMsRUFBRW01QyxPQUNkdDhCLEVBQVdvOEIsRUFBTXA4QixRQUVqQixJQUNDQSxFQUFXbzhCLEVBQU1wOEIsR0FDaEIsTUFBUWxVLEdBQ1QsTUFBTyxDQUNOd0QsTUFBTyxjQUNQNlIsTUFBT2k3QixFQUFPdHdDLEVBQUksc0JBQXdCMHFCLEVBQU8sT0FBUzJsQixJQVNqRSxNQUFPLENBQUU3c0MsTUFBTyxVQUFXeUIsS0FBTWlQLEdBaWRwQnU4QixDQUFhcDVDLEVBQUc2YyxFQUFVaTRCLEVBQU8yRCxHQUd2Q0EsR0FHQ3o0QyxFQUFFazRDLGNBQ05RLEVBQVc1RCxFQUFNeUMsa0JBQW1CLG9CQUVuQ2gzQixFQUFPaTFCLGFBQWNpQixHQUFhaUMsSUFFbkNBLEVBQVc1RCxFQUFNeUMsa0JBQW1CLFdBRW5DaDNCLEVBQU9rMUIsS0FBTWdCLEdBQWFpQyxJQUtaLE1BQVhkLEdBQTZCLFNBQVg1M0MsRUFBRXdmLEtBQ3hCczRCLEVBQWEsWUFHUyxNQUFYRixFQUNYRSxFQUFhLGVBSWJBLEVBQWFqN0IsRUFBUzFRLE1BQ3RCa3NDLEVBQVV4N0IsRUFBU2pQLEtBRW5CNnFDLElBREF6NkIsRUFBUW5CLEVBQVNtQixVQU1sQkEsRUFBUTg1QixHQUNIRixHQUFXRSxJQUNmQSxFQUFhLFFBQ1JGLEVBQVMsSUFDYkEsRUFBUyxLQU1aOUMsRUFBTThDLE9BQVNBLEVBQ2Y5QyxFQUFNZ0QsWUFBZVMsR0FBb0JULEdBQWUsR0FHbkRXLEVBQ0ozaUIsRUFBU2UsWUFBYW1nQixFQUFpQixDQUFFcUIsRUFBU1AsRUFBWWhELElBRTlEaGYsRUFBU2tCLFdBQVlnZ0IsRUFBaUIsQ0FBRWxDLEVBQU9nRCxFQUFZOTVCLElBSTVEODJCLEVBQU1xQyxXQUFZQSxHQUNsQkEsT0FBYXh4QyxFQUVSbXhDLEdBQ0pHLEVBQW1CM1gsUUFBU21aLEVBQVksY0FBZ0IsWUFDdkQsQ0FBRTNELEVBQU85MEMsRUFBR3k0QyxFQUFZSixFQUFVcjZCLElBSXBDazVCLEVBQWlCemhCLFNBQVV1aEIsRUFBaUIsQ0FBRWxDLEVBQU9nRCxJQUVoRGhCLElBQ0pHLEVBQW1CM1gsUUFBUyxlQUFnQixDQUFFd1YsRUFBTzkwQyxNQUczQ3VnQixFQUFPZzFCLFFBQ2hCaDFCLEVBQU81UCxNQUFNMnVCLFFBQVMsY0FLekIsT0FBT3dWLEdBR1J1RSxRQUFTLFNBQVVwNUMsRUFBSzJOLEVBQU1nRCxHQUM3QixPQUFPMlAsRUFBT3poQixJQUFLbUIsRUFBSzJOLEVBQU1nRCxFQUFVLFNBR3pDMG9DLFVBQVcsU0FBVXI1QyxFQUFLMlEsR0FDekIsT0FBTzJQLEVBQU96aEIsSUFBS21CLE9BQUswRixFQUFXaUwsRUFBVSxhQUkvQzJQLEVBQU9hLEtBQU0sQ0FBRSxNQUFPLFNBQVUsU0FBVWlDLEVBQUl0RyxHQUM3Q3dELEVBQVF4RCxHQUFXLFNBQVU5YyxFQUFLMk4sRUFBTWdELEVBQVU0TyxHQVVqRCxPQVBLbmQsRUFBWXVMLEtBQ2hCNFIsRUFBT0EsR0FBUTVPLEVBQ2ZBLEVBQVdoRCxFQUNYQSxPQUFPakksR0FJRDRhLEVBQU9nMkIsS0FBTWgyQixFQUFPbEMsT0FBUSxDQUNsQ3BlLElBQUtBLEVBQ0x1ZixLQUFNekMsRUFDTjQzQixTQUFVbjFCLEVBQ1Y1UixLQUFNQSxFQUNOeXFDLFFBQVN6bkMsR0FDUDJQLEVBQU8wQixjQUFlaGlCLElBQVNBLFFBSXBDc2dCLEVBQU84MUIsZUFBZSxTQUFVcjJDLEdBQy9CLElBQUkvQixFQUNKLElBQU1BLEtBQUsrQixFQUFFbTRDLFFBQ2EsaUJBQXBCbDZDLEVBQUVpWCxnQkFDTmxWLEVBQUU4MUMsWUFBYzkxQyxFQUFFbTRDLFFBQVNsNkMsSUFBTyxPQU1yQ3NpQixFQUFPZ2xCLFNBQVcsU0FBVXRsQyxFQUFLMk8sRUFBU2tSLEdBQ3pDLE9BQU9TLEVBQU9nMkIsS0FBTSxDQUNuQnQyQyxJQUFLQSxFQUdMdWYsS0FBTSxNQUNObTFCLFNBQVUsU0FDVnBzQixPQUFPLEVBQ1BzdEIsT0FBTyxFQUNQcDlCLFFBQVEsRUFLUnk5QixXQUFZLENBQ1gsY0FBZSxjQUVoQmdELFdBQVksU0FBVXI4QixHQUNyQjBELEVBQU9tQyxXQUFZN0YsRUFBVWpPLEVBQVNrUixPQU16Q1MsRUFBTy9mLEdBQUc2ZCxPQUFRLENBQ2pCazdCLFFBQVMsU0FBVTF6QyxHQUNsQixJQUFJazRCLEVBeUJKLE9BdkJLbjlCLEtBQU0sS0FDTHlCLEVBQVl3RCxLQUNoQkEsRUFBT0EsRUFBS3pILEtBQU13QyxLQUFNLEtBSXpCbTlCLEVBQU94ZCxFQUFRMWEsRUFBTWpGLEtBQU0sR0FBSVMsZUFBZ0JGLEdBQUksR0FBSTRnQixPQUFPLEdBRXpEbmhCLEtBQU0sR0FBSW1DLFlBQ2RnN0IsRUFBS21JLGFBQWN0bEMsS0FBTSxJQUcxQm05QixFQUFLdnlCLEtBQUssV0FHVCxJQUZBLElBQUlrVCxFQUFPOWQsS0FFSDhkLEVBQUtwWixtQkFDWm9aLEVBQU9BLEVBQUtwWixrQkFHYixPQUFPb1osS0FDSnNuQixPQUFRcGxDLE9BR05BLE1BR1I0NEMsVUFBVyxTQUFVM3pDLEdBQ3BCLE9BQUt4RCxFQUFZd0QsR0FDVGpGLEtBQUt3Z0IsTUFBTSxTQUFVbmpCLEdBQzNCc2lCLEVBQVEzZixNQUFPNDRDLFVBQVczekMsRUFBS3pILEtBQU13QyxLQUFNM0MsT0FJdEMyQyxLQUFLd2dCLE1BQU0sV0FDakIsSUFBSXlSLEVBQU90UyxFQUFRM2YsTUFDbEJ3eUIsRUFBV1AsRUFBS08sV0FFWkEsRUFBU2h5QixPQUNiZ3lCLEVBQVNtbUIsUUFBUzF6QyxHQUdsQmd0QixFQUFLbVQsT0FBUW5nQyxPQUtoQms0QixLQUFNLFNBQVVsNEIsR0FDZixJQUFJNHpDLEVBQWlCcDNDLEVBQVl3RCxHQUVqQyxPQUFPakYsS0FBS3dnQixNQUFNLFNBQVVuakIsR0FDM0JzaUIsRUFBUTNmLE1BQU8yNEMsUUFBU0UsRUFBaUI1ekMsRUFBS3pILEtBQU13QyxLQUFNM0MsR0FBTTRILE9BSWxFNnpDLE9BQVEsU0FBVWw1QixHQUlqQixPQUhBNWYsS0FBS00sT0FBUXNmLEdBQVdvUyxJQUFLLFFBQVN4UixNQUFNLFdBQzNDYixFQUFRM2YsTUFBT3lsQyxZQUFhemxDLEtBQUt5bUIsZUFFM0J6bUIsUUFLVDJmLEVBQU9qQyxLQUFLQyxRQUFRcXVCLE9BQVMsU0FBVWx1QixHQUN0QyxPQUFRNkIsRUFBT2pDLEtBQUtDLFFBQVFvN0IsUUFBU2o3QixJQUV0QzZCLEVBQU9qQyxLQUFLQyxRQUFRbzdCLFFBQVUsU0FBVWo3QixHQUN2QyxTQUFXQSxFQUFLelYsYUFBZXlWLEVBQUt2VixjQUFnQnVWLEVBQUtvc0IsaUJBQWlCMXBDLFNBTTNFbWYsRUFBTyswQixhQUFhc0UsSUFBTSxXQUN6QixJQUNDLE9BQU8sSUFBSXA0QyxFQUFPcTRDLGVBQ2pCLE1BQVFseEMsTUFHWCxJQUFJbXhDLEdBQW1CLENBR3JCQyxFQUFHLElBSUhDLEtBQU0sS0FFUEMsR0FBZTE1QixFQUFPKzBCLGFBQWFzRSxNQUVwQ3g2QixFQUFRODZCLE9BQVNELElBQWtCLG9CQUFxQkEsR0FDeEQ3NkIsRUFBUW0zQixLQUFPMEQsS0FBaUJBLEdBRWhDMTVCLEVBQU8rMUIsZUFBZSxTQUFVMW5DLEdBQy9CLElBQUlnQyxFQUFVdXBDLEVBR2QsR0FBSy82QixFQUFRODZCLE1BQVFELEtBQWlCcnJDLEVBQVFvcEMsWUFDN0MsTUFBTyxDQUNOTSxLQUFNLFNBQVVILEVBQVNqSyxHQUN4QixJQUFJandDLEVBQ0gyN0MsRUFBTWhyQyxFQUFRZ3JDLE1BV2YsR0FUQUEsRUFBSVEsS0FDSHhyQyxFQUFRNFEsS0FDUjVRLEVBQVEzTyxJQUNSMk8sRUFBUWluQyxNQUNSam5DLEVBQVF5ckMsU0FDUnpyQyxFQUFRNmYsVUFJSjdmLEVBQVEwckMsVUFDWixJQUFNcjhDLEtBQUsyUSxFQUFRMHJDLFVBQ2xCVixFQUFLMzdDLEdBQU0yUSxFQUFRMHJDLFVBQVdyOEMsR0FtQmhDLElBQU1BLEtBZEQyUSxFQUFRK29DLFVBQVlpQyxFQUFJbEMsa0JBQzVCa0MsRUFBSWxDLGlCQUFrQjlvQyxFQUFRK29DLFVBUXpCL29DLEVBQVFvcEMsYUFBZ0JHLEVBQVMsc0JBQ3RDQSxFQUFTLG9CQUF1QixrQkFJdEJBLEVBQ1Z5QixFQUFJbkMsaUJBQWtCeDVDLEVBQUdrNkMsRUFBU2w2QyxJQUluQzJTLEVBQVcsU0FBVTRPLEdBQ3BCLE9BQU8sV0FDRDVPLElBQ0pBLEVBQVd1cEMsRUFBZ0JQLEVBQUlXLE9BQzlCWCxFQUFJWSxRQUFVWixFQUFJYSxRQUFVYixFQUFJYyxVQUMvQmQsRUFBSWUsbUJBQXFCLEtBRWIsVUFBVG43QixFQUNKbzZCLEVBQUkvQixRQUNnQixVQUFUcjRCLEVBS2dCLGlCQUFmbzZCLEVBQUloQyxPQUNmMUosRUFBVSxFQUFHLFNBRWJBLEVBR0MwTCxFQUFJaEMsT0FDSmdDLEVBQUk5QixZQUlONUosRUFDQzRMLEdBQWtCRixFQUFJaEMsU0FBWWdDLEVBQUloQyxPQUN0Q2dDLEVBQUk5QixXQUsrQixVQUFqQzhCLEVBQUlnQixjQUFnQixTQUNNLGlCQUFyQmhCLEVBQUlpQixhQUNWLENBQUVDLE9BQVFsQixFQUFJLzhCLFVBQ2QsQ0FBRXFELEtBQU0wNUIsRUFBSWlCLGNBQ2JqQixFQUFJcEMsNEJBUVRvQyxFQUFJVyxPQUFTM3BDLElBQ2J1cEMsRUFBZ0JQLEVBQUlZLFFBQVVaLEVBQUljLFVBQVk5cEMsRUFBVSxjQUtuQ2pMLElBQWhCaTBDLEVBQUlhLFFBQ1JiLEVBQUlhLFFBQVVOLEVBRWRQLEVBQUllLG1CQUFxQixXQUdBLElBQW5CZixFQUFJMWhCLFlBTVIxMkIsRUFBT1ksWUFBWSxXQUNid08sR0FDSnVwQyxRQVFMdnBDLEVBQVdBLEVBQVUsU0FFckIsSUFHQ2dwQyxFQUFJdEIsS0FBTTFwQyxFQUFRcXBDLFlBQWNycEMsRUFBUWhCLE1BQVEsTUFDL0MsTUFBUWpGLEdBR1QsR0FBS2lJLEVBQ0osTUFBTWpJLElBS1RrdkMsTUFBTyxXQUNEam5DLEdBQ0pBLFNBV0wyUCxFQUFPODFCLGVBQWUsU0FBVXIyQyxHQUMxQkEsRUFBRWc0QyxjQUNOaDRDLEVBQUVvekIsU0FBU3BULFFBQVMsTUFLdEJPLEVBQU80MUIsVUFBVyxDQUNqQkosUUFBUyxDQUNSLzFCLE9BQVEsNkZBR1RvVCxTQUFVLENBQ1RwVCxPQUFRLDJCQUVUazJCLFdBQVksQ0FDWCxjQUFlLFNBQVVoMkIsR0FFeEIsT0FEQUssRUFBT21DLFdBQVl4QyxHQUNaQSxNQU1WSyxFQUFPODFCLGNBQWUsVUFBVSxTQUFVcjJDLFFBQ3hCMkYsSUFBWjNGLEVBQUV1b0IsUUFDTnZvQixFQUFFdW9CLE9BQVEsR0FFTnZvQixFQUFFZzRDLGNBQ05oNEMsRUFBRXdmLEtBQU8sVUFLWGUsRUFBTysxQixjQUFlLFVBQVUsU0FBVXQyQyxHQUl4QyxJQUFJZ2dCLEVBQVFwUCxFQURiLEdBQUs1USxFQUFFZzRDLGFBQWVoNEMsRUFBRSs2QyxZQUV2QixNQUFPLENBQ056QyxLQUFNLFNBQVUzakIsRUFBR3VaLEdBQ2xCbHVCLEVBQVNPLEVBQVEsWUFDZmdMLEtBQU12ckIsRUFBRSs2QyxhQUFlLElBQ3ZCaHRDLEtBQU0sQ0FBRWl0QyxRQUFTaDdDLEVBQUVpN0MsY0FBZXg3QixJQUFLemYsRUFBRUMsTUFDekN3YSxHQUFJLGFBQWM3SixFQUFXLFNBQVVzcUMsR0FDdkNsN0IsRUFBT3FWLFNBQ1B6a0IsRUFBVyxLQUNOc3FDLEdBQ0poTixFQUF1QixVQUFiZ04sRUFBSTE3QixLQUFtQixJQUFNLElBQUswN0IsRUFBSTE3QixRQUtuRGxlLEVBQVM4ZSxLQUFLQyxZQUFhTCxFQUFRLEtBRXBDNjNCLE1BQU8sV0FDRGpuQyxHQUNKQSxTQVVMLElBcUdLMU4sR0FyR0RpNEMsR0FBZSxHQUNsQkMsR0FBUyxvQkFHVjc2QixFQUFPNDFCLFVBQVcsQ0FDakJrRixNQUFPLFdBQ1BDLGNBQWUsV0FDZCxJQUFJMXFDLEVBQVd1cUMsR0FBYXAyQixPQUFXeEUsRUFBTzRCLFFBQVUsSUFBUXpDLEdBQU15RCxPQUV0RSxPQURBdmlCLEtBQU1nUSxJQUFhLEVBQ1pBLEtBS1QyUCxFQUFPODFCLGNBQWUsY0FBYyxTQUFVcjJDLEVBQUd1N0MsRUFBa0J6RyxHQUVsRSxJQUFJMEcsRUFBY0MsRUFBYUMsRUFDOUJDLEdBQXVCLElBQVozN0MsRUFBRXE3QyxRQUFxQkQsR0FBT2w3QyxLQUFNRixFQUFFQyxLQUNoRCxNQUNrQixpQkFBWEQsRUFBRTROLE1BRTZDLEtBRG5ENU4sRUFBRTgxQyxhQUFlLElBQ2pCajBDLFFBQVMsc0NBQ1h1NUMsR0FBT2w3QyxLQUFNRixFQUFFNE4sT0FBVSxRQUk1QixHQUFLK3RDLEdBQWlDLFVBQXJCMzdDLEVBQUU0MEMsVUFBVyxHQThEN0IsT0EzREE0RyxFQUFleDdDLEVBQUVzN0MsY0FBZ0JqNUMsRUFBWXJDLEVBQUVzN0MsZUFDOUN0N0MsRUFBRXM3QyxnQkFDRnQ3QyxFQUFFczdDLGNBR0VLLEVBQ0ozN0MsRUFBRzI3QyxHQUFhMzdDLEVBQUcyN0MsR0FBV3Q3QyxRQUFTKzZDLEdBQVEsS0FBT0ksSUFDL0IsSUFBWng3QyxFQUFFcTdDLFFBQ2JyN0MsRUFBRUMsTUFBUzh5QyxHQUFPN3lDLEtBQU1GLEVBQUVDLEtBQVEsSUFBTSxLQUFRRCxFQUFFcTdDLE1BQVEsSUFBTUcsR0FJakV4N0MsRUFBRWsyQyxXQUFZLGVBQWtCLFdBSS9CLE9BSE13RixHQUNMbjdCLEVBQU92QyxNQUFPdzlCLEVBQWUsbUJBRXZCRSxFQUFtQixJQUkzQjE3QyxFQUFFNDBDLFVBQVcsR0FBTSxPQUduQjZHLEVBQWNqNkMsRUFBUWc2QyxHQUN0Qmg2QyxFQUFRZzZDLEdBQWlCLFdBQ3hCRSxFQUFvQmgyQyxXQUlyQm92QyxFQUFNamYsUUFBUSxnQkFHUWx3QixJQUFoQjgxQyxFQUNKbDdCLEVBQVEvZSxHQUFTMHZDLFdBQVlzSyxHQUk3Qmg2QyxFQUFRZzZDLEdBQWlCQyxFQUlyQno3QyxFQUFHdzdDLEtBR1B4N0MsRUFBRXM3QyxjQUFnQkMsRUFBaUJELGNBR25DSCxHQUFhcHFDLEtBQU15cUMsSUFJZkUsR0FBcUJyNUMsRUFBWW81QyxJQUNyQ0EsRUFBYUMsRUFBbUIsSUFHakNBLEVBQW9CRCxPQUFjOTFDLEtBSTVCLFlBWVR5WixFQUFRdzhCLHFCQUNIMTRDLEdBQU81QixFQUFTdTZDLGVBQWVELG1CQUFvQixJQUFLMTRDLE1BQ3ZEc25CLFVBQVksNkJBQ2lCLElBQTNCdG5CLEdBQUtta0IsV0FBV2ptQixRQVF4Qm1mLEVBQU95UyxVQUFZLFNBQVVwbEIsRUFBTTZTLEVBQVNxN0IsR0FDM0MsTUFBcUIsaUJBQVRsdUMsRUFDSixJQUVnQixrQkFBWjZTLElBQ1hxN0IsRUFBY3I3QixFQUNkQSxHQUFVLEdBS0xBLElBSUFyQixFQUFRdzhCLHFCQU1aN3NCLEdBTEF0TyxFQUFVbmYsRUFBU3U2QyxlQUFlRCxtQkFBb0IsS0FLdkMzN0IsY0FBZSxTQUN6QitOLEtBQU8xc0IsRUFBU3VzQixTQUFTRyxLQUM5QnZOLEVBQVFMLEtBQUtDLFlBQWEwTyxJQUUxQnRPLEVBQVVuZixHQUtaczhCLEdBQVdrZSxHQUFlLElBRDFCQyxFQUFTdHBCLEVBQVc3SyxLQUFNaGEsSUFLbEIsQ0FBRTZTLEVBQVFSLGNBQWU4N0IsRUFBUSxNQUd6Q0EsRUFBU3BlLEdBQWUsQ0FBRS92QixHQUFRNlMsRUFBU21kLEdBRXRDQSxHQUFXQSxFQUFReDhCLFFBQ3ZCbWYsRUFBUXFkLEdBQVV2SSxTQUdaOVUsRUFBT1csTUFBTyxHQUFJNjZCLEVBQU8xMEIsY0FsQ2hDLElBQUkwSCxFQUFNZ3RCLEVBQVFuZSxHQXlDbkJyZCxFQUFPL2YsR0FBR2loQyxLQUFPLFNBQVV4aEMsRUFBS2tlLEVBQVF2TixHQUN2QyxJQUFJNFAsRUFBVWhCLEVBQU0zQyxFQUNuQmdXLEVBQU9qeUIsS0FDUGdhLEVBQU0zYSxFQUFJNEIsUUFBUyxLQXNEcEIsT0FwREsrWSxHQUFPLElBQ1g0RixFQUFXdXdCLEdBQWtCOXdDLEVBQUk2TixNQUFPOE0sSUFDeEMzYSxFQUFNQSxFQUFJNk4sTUFBTyxFQUFHOE0sSUFJaEJ2WSxFQUFZOGIsSUFHaEJ2TixFQUFXdU4sRUFDWEEsT0FBU3hZLEdBR0V3WSxHQUE0QixpQkFBWEEsSUFDNUJxQixFQUFPLFFBSUhxVCxFQUFLenhCLE9BQVMsR0FDbEJtZixFQUFPZzJCLEtBQU0sQ0FDWnQyQyxJQUFLQSxFQUtMdWYsS0FBTUEsR0FBUSxNQUNkbTFCLFNBQVUsT0FDVi9tQyxLQUFNdVEsSUFDSHFHLE1BQU0sU0FBVXEyQixHQUduQmgrQixFQUFXblgsVUFFWG10QixFQUFLaHRCLEtBQU0yYSxFQUlWRCxFQUFRLFNBQVV5bEIsT0FBUXpsQixFQUFPeVMsVUFBVzZuQixJQUFpQnZ0QyxLQUFNa1QsR0FHbkVxNkIsTUFLRWhsQixPQUFRamxCLEdBQVksU0FBVWtrQyxFQUFPOEMsR0FDeEMva0IsRUFBS3pSLE1BQU0sV0FDVnhRLEVBQVN1SixNQUFPdlosS0FBTWljLEdBQVksQ0FBRWk0QixFQUFNK0YsYUFBY2pELEVBQVE5QyxTQUs1RGwwQyxNQU1SMmYsRUFBT2pDLEtBQUtDLFFBQVF5OUIsU0FBVyxTQUFVdDlCLEdBQ3hDLE9BQU82QixFQUFPaUIsS0FBTWpCLEVBQU9ndkIsUUFBUSxTQUFVL3VDLEdBQzVDLE9BQU9rZSxJQUFTbGUsRUFBR2tlLFFBQ2hCdGQsUUFNTG1mLEVBQU9wVyxPQUFTLENBQ2Y4eEMsVUFBVyxTQUFVdjlCLEVBQU05UCxFQUFTM1EsR0FDbkMsSUFBSWkrQyxFQUFhQyxFQUFTQyxFQUFXQyxFQUFRQyxFQUFXQyxFQUN2RDU3QyxFQUFXNGYsRUFBTzFmLElBQUs2ZCxFQUFNLFlBQzdCODlCLEVBQVVqOEIsRUFBUTdCLEdBQ2xCNVcsRUFBUSxHQUdTLFdBQWJuSCxJQUNKK2QsRUFBSzdPLE1BQU1sUCxTQUFXLFlBR3ZCMjdDLEVBQVlFLEVBQVFyeUMsU0FDcEJpeUMsRUFBWTc3QixFQUFPMWYsSUFBSzZkLEVBQU0sT0FDOUI2OUIsRUFBYWg4QixFQUFPMWYsSUFBSzZkLEVBQU0sU0FDSSxhQUFiL2QsR0FBd0MsVUFBYkEsS0FDOUN5N0MsRUFBWUcsR0FBYTE2QyxRQUFTLFNBQVksR0FNaER3NkMsR0FEQUgsRUFBY00sRUFBUTc3QyxZQUNEMEYsSUFDckI4MUMsRUFBVUQsRUFBWTMxQyxPQUd0QjgxQyxFQUFTdjFDLFdBQVlzMUMsSUFBZSxFQUNwQ0QsRUFBVXIxQyxXQUFZeTFDLElBQWdCLEdBR2xDbDZDLEVBQVl1TSxLQUdoQkEsRUFBVUEsRUFBUXhRLEtBQU1zZ0IsRUFBTXpnQixFQUFHc2lCLEVBQU9sQyxPQUFRLEdBQUlpK0IsS0FHakMsTUFBZjF0QyxFQUFRdkksTUFDWnlCLEVBQU16QixJQUFRdUksRUFBUXZJLElBQU1pMkMsRUFBVWoyQyxJQUFRZzJDLEdBRTFCLE1BQWhCenRDLEVBQVFySSxPQUNadUIsRUFBTXZCLEtBQVNxSSxFQUFRckksS0FBTysxQyxFQUFVLzFDLEtBQVM0MUMsR0FHN0MsVUFBV3Z0QyxFQUNmQSxFQUFRNnRDLE1BQU1yK0MsS0FBTXNnQixFQUFNNVcsR0FHMUIwMEMsRUFBUTM3QyxJQUFLaUgsS0FLaEJ5WSxFQUFPL2YsR0FBRzZkLE9BQVEsQ0FHakJsVSxPQUFRLFNBQVV5RSxHQUdqQixHQUFLbEosVUFBVXRFLE9BQ2QsWUFBbUJ1RSxJQUFaaUosRUFDTmhPLEtBQ0FBLEtBQUt3Z0IsTUFBTSxTQUFVbmpCLEdBQ3BCc2lCLEVBQU9wVyxPQUFPOHhDLFVBQVdyN0MsS0FBTWdPLEVBQVMzUSxNQUkzQyxJQUFJK0gsRUFBTTAyQyxFQUNUaCtCLEVBQU85ZCxLQUFNLEdBRWQsT0FBTThkLEVBUUFBLEVBQUtvc0IsaUJBQWlCMXBDLFFBSzVCNEUsRUFBTzBZLEVBQUtoVyx3QkFDWmcwQyxFQUFNaCtCLEVBQUtyZCxjQUFjc0IsWUFDbEIsQ0FDTjBELElBQUtMLEVBQUtLLElBQU1xMkMsRUFBSUMsWUFDcEJwMkMsS0FBTVAsRUFBS08sS0FBT20yQyxFQUFJRSxjQVJmLENBQUV2MkMsSUFBSyxFQUFHRSxLQUFNLFFBVHhCLEdBdUJENUYsU0FBVSxXQUNULEdBQU1DLEtBQU0sR0FBWixDQUlBLElBQUl1RCxFQUFjZ0csRUFBUTJWLEVBQ3pCcEIsRUFBTzlkLEtBQU0sR0FDYmk4QyxFQUFlLENBQUV4MkMsSUFBSyxFQUFHRSxLQUFNLEdBR2hDLEdBQXdDLFVBQW5DZ2EsRUFBTzFmLElBQUs2ZCxFQUFNLFlBR3RCdlUsRUFBU3VVLEVBQUtoVyw0QkFFUixDQU9OLElBTkF5QixFQUFTdkosS0FBS3VKLFNBSWQyVixFQUFNcEIsRUFBS3JkLGNBQ1g4QyxFQUFldWEsRUFBS3ZhLGNBQWdCMmIsRUFBSTdiLGdCQUNoQ0UsSUFDTEEsSUFBaUIyYixFQUFJNWMsTUFBUWlCLElBQWlCMmIsRUFBSTdiLGtCQUNULFdBQTNDc2MsRUFBTzFmLElBQUtzRCxFQUFjLGFBRTFCQSxFQUFlQSxFQUFhcEIsV0FFeEJvQixHQUFnQkEsSUFBaUJ1YSxHQUFrQyxJQUExQnZhLEVBQWF6QixZQUcxRG02QyxFQUFldDhCLEVBQVFwYyxHQUFlZ0csVUFDekI5RCxLQUFPa2EsRUFBTzFmLElBQUtzRCxFQUFjLGtCQUFrQixHQUNoRTA0QyxFQUFhdDJDLE1BQVFnYSxFQUFPMWYsSUFBS3NELEVBQWMsbUJBQW1CLElBS3BFLE1BQU8sQ0FDTmtDLElBQUs4RCxFQUFPOUQsSUFBTXcyQyxFQUFheDJDLElBQU1rYSxFQUFPMWYsSUFBSzZkLEVBQU0sYUFBYSxHQUNwRW5ZLEtBQU00RCxFQUFPNUQsS0FBT3MyQyxFQUFhdDJDLEtBQU9nYSxFQUFPMWYsSUFBSzZkLEVBQU0sY0FBYyxNQWMxRXZhLGFBQWMsV0FDYixPQUFPdkQsS0FBSzRLLEtBQUssV0FHaEIsSUFGQSxJQUFJckgsRUFBZXZELEtBQUt1RCxhQUVoQkEsR0FBMkQsV0FBM0NvYyxFQUFPMWYsSUFBS3NELEVBQWMsYUFDakRBLEVBQWVBLEVBQWFBLGFBRzdCLE9BQU9BLEdBQWdCRixTQU0xQnNjLEVBQU9hLEtBQU0sQ0FBRWpiLFdBQVksY0FBZUQsVUFBVyxnQkFBaUIsU0FBVTZXLEVBQVFoUCxHQUN2RixJQUFJMUgsRUFBTSxnQkFBa0IwSCxFQUU1QndTLEVBQU8vZixHQUFJdWMsR0FBVyxTQUFVZ0QsR0FDL0IsT0FBT3FZLEVBQVF4M0IsTUFBTSxTQUFVOGQsRUFBTTNCLEVBQVFnRCxHQUc1QyxJQUFJMjhCLEVBT0osR0FOS3A5QixFQUFVWixHQUNkZytCLEVBQU1oK0IsRUFDdUIsSUFBbEJBLEVBQUtoYyxXQUNoQmc2QyxFQUFNaCtCLEVBQUsvYixrQkFHQ2dELElBQVJvYSxFQUNKLE9BQU8yOEIsRUFBTUEsRUFBSzN1QyxHQUFTMlEsRUFBTTNCLEdBRzdCMi9CLEVBQ0pBLEVBQUlJLFNBQ0Z6MkMsRUFBWXEyQyxFQUFJRSxZQUFWNzhCLEVBQ1AxWixFQUFNMFosRUFBTTI4QixFQUFJQyxhQUlqQmorQixFQUFNM0IsR0FBV2dELElBRWhCaEQsRUFBUWdELEVBQUtyYSxVQUFVdEUsWUFVNUJtZixFQUFPYSxLQUFNLENBQUUsTUFBTyxTQUFVLFNBQVVpQyxFQUFJdFYsR0FDN0N3UyxFQUFPMHFCLFNBQVVsOUIsR0FBUzA1QixHQUFjcm9CLEVBQVF1cEIsZUFDL0MsU0FBVWpxQixFQUFNMG9CLEdBQ2YsR0FBS0EsRUFJSixPQUhBQSxFQUFXRCxHQUFRem9CLEVBQU0zUSxHQUdsQjg0QixHQUFVM21DLEtBQU1rbkMsR0FDdEI3bUIsRUFBUTdCLEdBQU8vZCxXQUFZb04sR0FBUyxLQUNwQ3E1QixRQVFMN21CLEVBQU9hLEtBQU0sQ0FBRTI3QixPQUFRLFNBQVVDLE1BQU8sVUFBVyxTQUFVeCtDLEVBQU1naEIsR0FDbEVlLEVBQU9hLEtBQU0sQ0FDWjFXLFFBQVMsUUFBVWxNLEVBQ25CMDFCLFFBQVMxVSxFQUNULEdBQUksUUFBVWhoQixJQUNaLFNBQVV5K0MsRUFBY0MsR0FHMUIzOEIsRUFBTy9mLEdBQUkwOEMsR0FBYSxTQUFVM1IsRUFBUXJzQyxHQUN6QyxJQUFJbTVCLEVBQVkzeUIsVUFBVXRFLFNBQVk2N0MsR0FBa0Msa0JBQVgxUixHQUM1RGYsRUFBUXlTLEtBQTZCLElBQVgxUixJQUE2QixJQUFWcnNDLEVBQWlCLFNBQVcsVUFFMUUsT0FBT2s1QixFQUFReDNCLE1BQU0sU0FBVThkLEVBQU1jLEVBQU10Z0IsR0FDMUMsSUFBSTRnQixFQUVKLE9BQUtSLEVBQVVaLEdBR3lCLElBQWhDdytCLEVBQVNyN0MsUUFBUyxTQUN4QjZjLEVBQU0sUUFBVWxnQixHQUNoQmtnQixFQUFLcGQsU0FBUzJDLGdCQUFpQixTQUFXekYsR0FJckIsSUFBbEJrZ0IsRUFBS2hjLFVBQ1RvZCxFQUFNcEIsRUFBS3phLGdCQUlKZ0QsS0FBS0MsSUFDWHdYLEVBQUt4YixLQUFNLFNBQVcxRSxHQUFRc2hCLEVBQUssU0FBV3RoQixHQUM5Q2tnQixFQUFLeGIsS0FBTSxTQUFXMUUsR0FBUXNoQixFQUFLLFNBQVd0aEIsR0FDOUNzaEIsRUFBSyxTQUFXdGhCLFVBSURtSCxJQUFWekcsRUFHTnFoQixFQUFPMWYsSUFBSzZkLEVBQU1jLEVBQU1nckIsR0FHeEJqcUIsRUFBTzFRLE1BQU82TyxFQUFNYyxFQUFNdGdCLEVBQU9zckMsS0FDaENockIsRUFBTTZZLEVBQVlrVCxPQUFTNWxDLEVBQVcweUIsVUFNNUM5WCxFQUFPYSxLQUFNLENBQ1osWUFDQSxXQUNBLGVBQ0EsWUFDQSxjQUNBLGFBQ0UsU0FBVWlDLEVBQUk3RCxHQUNoQmUsRUFBTy9mLEdBQUlnZixHQUFTLFNBQVVoZixHQUM3QixPQUFPSSxLQUFLNlosR0FBSStFLEVBQU1oZixPQU94QitmLEVBQU8vZixHQUFHNmQsT0FBUSxDQUVqQjVlLEtBQU0sU0FBVWsvQixFQUFPL3dCLEVBQU1wTixHQUM1QixPQUFPSSxLQUFLNlosR0FBSWtrQixFQUFPLEtBQU0vd0IsRUFBTXBOLElBRXBDMjhDLE9BQVEsU0FBVXhlLEVBQU9uK0IsR0FDeEIsT0FBT0ksS0FBS2dhLElBQUsrakIsRUFBTyxLQUFNbitCLElBRy9CNDhDLFNBQVUsU0FBVTU4QixFQUFVbWUsRUFBTy93QixFQUFNcE4sR0FDMUMsT0FBT0ksS0FBSzZaLEdBQUlra0IsRUFBT25lLEVBQVU1UyxFQUFNcE4sSUFFeEM2OEMsV0FBWSxTQUFVNzhCLEVBQVVtZSxFQUFPbitCLEdBR3RDLE9BQTRCLElBQXJCa0YsVUFBVXRFLE9BQ2hCUixLQUFLZ2EsSUFBSzRGLEVBQVUsTUFDcEI1ZixLQUFLZ2EsSUFBSytqQixFQUFPbmUsR0FBWSxLQUFNaGdCLElBR3JDODhDLE1BQU8sU0FBVUMsRUFBUUMsR0FDeEIsT0FBTzU4QyxLQUFLcWpDLFdBQVlzWixHQUFTclosV0FBWXNaLEdBQVNELE1BSXhEaDlCLEVBQU9hLEtBQ04sd0xBRTREblYsTUFBTyxNQUNuRSxTQUFVb1gsRUFBSTdrQixHQUdiK2hCLEVBQU8vZixHQUFJaEMsR0FBUyxTQUFVb1AsRUFBTXBOLEdBQ25DLE9BQU9rRixVQUFVdEUsT0FBUyxFQUN6QlIsS0FBSzZaLEdBQUlqYyxFQUFNLEtBQU1vUCxFQUFNcE4sR0FDM0JJLEtBQUswK0IsUUFBUzlnQyxPQVVsQixJQUFJK21CLEdBQVEscUNBTVpoRixFQUFPazlCLE1BQVEsU0FBVWo5QyxFQUFJaWdCLEdBQzVCLElBQUk2SixFQUFLcFEsRUFBTXVqQyxFQVVmLEdBUndCLGlCQUFaaDlCLElBQ1g2SixFQUFNOXBCLEVBQUlpZ0IsR0FDVkEsRUFBVWpnQixFQUNWQSxFQUFLOHBCLEdBS0Fqb0IsRUFBWTdCLEdBYWxCLE9BUkEwWixFQUFPcE0sRUFBTTFQLEtBQU1zSCxVQUFXLElBQzlCKzNDLEVBQVEsV0FDUCxPQUFPajlDLEVBQUcyWixNQUFPc0csR0FBVzdmLEtBQU1zWixFQUFLM0gsT0FBUXpFLEVBQU0xUCxLQUFNc0gsZUFJdER5ZCxLQUFPM2lCLEVBQUcyaUIsS0FBTzNpQixFQUFHMmlCLE1BQVE1QyxFQUFPNEMsT0FFbENzNkIsR0FHUmw5QixFQUFPbTlCLFVBQVksU0FBVUMsR0FDdkJBLEVBQ0pwOUIsRUFBT3lYLFlBRVB6WCxFQUFPMFMsT0FBTyxJQUdoQjFTLEVBQU8yQixRQUFVelUsTUFBTXlVLFFBQ3ZCM0IsRUFBT3E5QixVQUFZaGtCLEtBQUtDLE1BQ3hCdFosRUFBT3pkLFNBQVdBLEVBQ2xCeWQsRUFBT2xlLFdBQWFBLEVBQ3BCa2UsRUFBT2pCLFNBQVdBLEVBQ2xCaUIsRUFBT3dZLFVBQVlBLEVBQ25CeFksRUFBT2YsS0FBT2MsRUFFZEMsRUFBTzJoQixJQUFNN2QsS0FBSzZkLElBRWxCM2hCLEVBQU9sUCxVQUFZLFNBQVVqSixHQUs1QixJQUFJb1gsRUFBT2UsRUFBT2YsS0FBTXBYLEdBQ3hCLE9BQWtCLFdBQVRvWCxHQUE4QixXQUFUQSxLQUs1QmxPLE1BQU9sSixFQUFNdEIsV0FBWXNCLEtBRzVCbVksRUFBT3hOLEtBQU8sU0FBVW1OLEdBQ3ZCLE9BQWUsTUFBUkEsRUFDTixJQUNFQSxFQUFPLElBQUs3ZixRQUFTa2xCLEdBQU8sVUFxQjlCLEtBRnFCLEVBQUYsV0FDbkIsT0FBT2hGLEdBQ1AsUUFGaUIsT0FFakIsYUFNRixJQUdDczlCLEdBQVVyOEMsRUFBTytlLE9BR2pCdTlCLEdBQUt0OEMsRUFBT2pCLEVBd0JiLE9BdEJBZ2dCLEVBQU93OUIsV0FBYSxTQUFVLzdCLEdBUzdCLE9BUkt4Z0IsRUFBT2pCLElBQU1nZ0IsSUFDakIvZSxFQUFPakIsRUFBSXU5QyxJQUdQOTdCLEdBQVF4Z0IsRUFBTytlLFNBQVdBLElBQzlCL2UsRUFBTytlLE9BQVNzOUIsSUFHVnQ5QixRQU1pQixJQUFiM0IsSUFDWHBkLEVBQU8rZSxPQUFTL2UsRUFBT2pCLEVBQUlnZ0IsR0FNckJBLE0sa0NDN25WUHZpQixFQUFPRCxRQUFVLFNBQWN5QyxFQUFJdzlDLEdBQ2pDLE9BQU8sV0FFTCxJQURBLElBQUk5akMsRUFBTyxJQUFJek0sTUFBTS9ILFVBQVV0RSxRQUN0Qm5ELEVBQUksRUFBR0EsRUFBSWljLEVBQUs5WSxPQUFRbkQsSUFDL0JpYyxFQUFLamMsR0FBS3lILFVBQVV6SCxHQUV0QixPQUFPdUMsRUFBRzJaLE1BQU02akMsRUFBUzlqQyxNLG1DQ1I3QixZQUVBLElBQUlzQixFQUFRLEVBQVEsUUFDaEJ5aUMsRUFBc0IsRUFBUSxRQUM5QkMsRUFBZSxFQUFRLFFBRXZCQyxFQUF1QixDQUN6QixlQUFnQixxQ0FHbEIsU0FBU0MsRUFBc0JqRyxFQUFTajVDLElBQ2pDc2MsRUFBTTZpQyxZQUFZbEcsSUFBWTM4QixFQUFNNmlDLFlBQVlsRyxFQUFRLG1CQUMzREEsRUFBUSxnQkFBa0JqNUMsR0ErQjlCLElBMUJNby9DLEVBMEJGNWhDLEVBQVcsQ0FFYk0sYUFBYyxDQUNaRSxtQkFBbUIsRUFDbkJFLG1CQUFtQixFQUNuQkMscUJBQXFCLEdBR3ZCaWhDLFVBakM4QixvQkFBbkJ6RSxxQkFHbUIsSUFBWmhoQyxHQUF1RSxxQkFBNUNsYSxPQUFPa0IsVUFBVTBDLFNBQVNuRSxLQUFLeWEsTUFEMUV5bEMsRUFBVSxFQUFRLFNBS2JBLEdBNEJQQyxpQkFBa0IsQ0FBQyxTQUEwQjN3QyxFQUFNdXFDLEdBSWpELE9BSEE4RixFQUFvQjlGLEVBQVMsVUFDN0I4RixFQUFvQjlGLEVBQVMsZ0JBRXpCMzhCLEVBQU1nakMsV0FBVzV3QyxJQUNuQjROLEVBQU1pakMsY0FBYzd3QyxJQUNwQjROLEVBQU1rakMsU0FBUzl3QyxJQUNmNE4sRUFBTW1qQyxTQUFTL3dDLElBQ2Y0TixFQUFNb2pDLE9BQU9oeEMsSUFDYjROLEVBQU1xakMsT0FBT2p4QyxHQUVOQSxFQUVMNE4sRUFBTXNqQyxrQkFBa0JseEMsR0FDbkJBLEVBQUtteEMsT0FFVnZqQyxFQUFNd2pDLGtCQUFrQnB4QyxJQUMxQnd3QyxFQUFzQmpHLEVBQVMsbURBQ3hCdnFDLEVBQUtyTCxZQUVWaVosRUFBTXlqQyxTQUFTcnhDLElBQVV1cUMsR0FBdUMscUJBQTVCQSxFQUFRLGlCQUM5Q2lHLEVBQXNCakcsRUFBUyxvQkE5Q3JDLFNBQXlCK0csRUFBVUMsRUFBUUMsR0FDekMsR0FBSTVqQyxFQUFNNmpDLFNBQVNILEdBQ2pCLElBRUUsT0FEQ0MsR0FBVXZsQixLQUFLQyxPQUFPcWxCLEdBQ2hCMWpDLEVBQU16SSxLQUFLbXNDLEdBQ2xCLE1BQU92MkMsR0FDUCxHQUFlLGdCQUFYQSxFQUFFbkssS0FDSixNQUFNbUssRUFLWixPQUFReTJDLEdBQVd4bEIsS0FBSzBsQixXQUFXSixHQW1DeEJLLENBQWdCM3hDLElBRWxCQSxJQUdUNHhDLGtCQUFtQixDQUFDLFNBQTJCNXhDLEdBQzdDLElBQUlvUCxFQUFlcGMsS0FBS29jLGFBQ3BCRSxFQUFvQkYsR0FBZ0JBLEVBQWFFLGtCQUNqREUsRUFBb0JKLEdBQWdCQSxFQUFhSSxrQkFDakRxaUMsR0FBcUJ2aUMsR0FBMkMsU0FBdEJ0YyxLQUFLZzZDLGFBRW5ELEdBQUk2RSxHQUFzQnJpQyxHQUFxQjVCLEVBQU02akMsU0FBU3p4QyxJQUFTQSxFQUFLeE0sT0FDMUUsSUFDRSxPQUFPdzRCLEtBQUtDLE1BQU1qc0IsR0FDbEIsTUFBT2pGLEdBQ1AsR0FBSTgyQyxFQUFtQixDQUNyQixHQUFlLGdCQUFYOTJDLEVBQUVuSyxLQUNKLE1BQU0wL0MsRUFBYXYxQyxFQUFHL0gsS0FBTSxnQkFFOUIsTUFBTStILEdBS1osT0FBT2lGLElBT1Q4TCxRQUFTLEVBRVRnbUMsZUFBZ0IsYUFDaEJDLGVBQWdCLGVBRWhCQyxrQkFBbUIsRUFDbkJDLGVBQWdCLEVBRWhCQyxlQUFnQixTQUF3QmxJLEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxNQUlyQ2w3QixFQUFTeTdCLFFBQVUsQ0FDakI0SCxPQUFRLENBQ04sT0FBVSxzQ0FJZHZrQyxFQUFNck4sUUFBUSxDQUFDLFNBQVUsTUFBTyxTQUFTLFNBQTZCNE8sR0FDcEVMLEVBQVN5N0IsUUFBUXA3QixHQUFVLE1BRzdCdkIsRUFBTXJOLFFBQVEsQ0FBQyxPQUFRLE1BQU8sVUFBVSxTQUErQjRPLEdBQ3JFTCxFQUFTeTdCLFFBQVFwN0IsR0FBVXZCLEVBQU0wRixNQUFNaTlCLE1BR3pDbmdELEVBQU9ELFFBQVUyZSxJLDJDQ3JJakJsYixPQUFPbXpCLEVBQUlxckIsRUFBUSxRQUNuQngrQyxPQUFPakIsRUFBSWlCLE9BQU8rZSxPQUFTeS9CLEVBQVEsUUFDbkNBLEVBQVEsUUFDUkEsRUFBUSxRQUVSeCtDLE9BQU80VyxPQUFTNG5DLEVBQVEsUUFBUixRQUNoQngrQyxPQUFPeStDLE1BQVFELEVBQVEsUUFDdkJ4K0MsT0FBT3krQyxNQUFNdmpDLFNBQVN5N0IsUUFBUTRILE9BQU8sb0JBQXNCLGlCQUMzRHYrQyxPQUFPMCtDLFNBQVdGLEVBQVEsUUFFMUJBLEVBQVEsUUFFUixJQUFJcHVCLEVBQVF0d0IsU0FBUzhlLEtBQUtyTCxjQUFjLDJCQUNwQzZjLEVBQ0Fwd0IsT0FBT3krQyxNQUFNdmpDLFNBQVN5N0IsUUFBUTRILE9BQU8sZ0JBQWtCbnVCLEVBQU1zQyxRQUU3RDlsQixRQUFRNFAsTUFBTSwwRSxrQ0NkbEIsSUFBSWtnQyxFQUFlLEVBQVEsUUFZM0JsZ0QsRUFBT0QsUUFBVSxTQUFxQjQ1QixFQUFTN2EsRUFBUStDLEVBQU1qRCxFQUFTQyxHQUNwRSxJQUFJbUIsRUFBUSxJQUFJakYsTUFBTTRlLEdBQ3RCLE9BQU91bUIsRUFBYWxnQyxFQUFPbEIsRUFBUStDLEVBQU1qRCxFQUFTQyxLLGtDQ2RwRDdlLEVBQU9ELFFBQVUsU0FBa0JtQixHQUNqQyxTQUFVQSxJQUFTQSxFQUFNaWhELGMsc0JDSDNCLHFCQVFFLFdBR0EsSUFVSUMsRUFBa0Isc0JBVWxCQyxFQUFjLHlCQWdEZEMsRUFBWSxDQUNkLENBQUMsTUE5QmlCLEtBK0JsQixDQUFDLE9BdENrQixHQXVDbkIsQ0FBQyxVQXRDc0IsR0F1Q3ZCLENBQUMsUUFyQ21CLEdBc0NwQixDQUFDLGFBckN5QixJQXNDMUIsQ0FBQyxPQWpDa0IsS0FrQ25CLENBQUMsVUF0Q3FCLElBdUN0QixDQUFDLGVBdEMyQixJQXVDNUIsQ0FBQyxRQXJDbUIsTUF5Q2xCQyxFQUFVLHFCQUNWQyxFQUFXLGlCQUVYQyxFQUFVLG1CQUNWQyxFQUFVLGdCQUVWQyxFQUFXLGlCQUNYQyxFQUFVLG9CQUNWQyxFQUFTLDZCQUNUQyxFQUFTLGVBQ1RDLEVBQVksa0JBRVpDLEVBQVksa0JBR1pDLEVBQVksa0JBQ1pDLEVBQVMsZUFDVEMsRUFBWSxrQkFDWkMsRUFBWSxrQkFFWkMsRUFBYSxtQkFHYkMsRUFBaUIsdUJBQ2pCQyxFQUFjLG9CQUNkQyxFQUFhLHdCQUNiQyxFQUFhLHdCQUNiQyxFQUFVLHFCQUNWQyxFQUFXLHNCQUNYQyxFQUFXLHNCQUNYQyxFQUFXLHNCQUVYQyxFQUFZLHVCQUNaQyxFQUFZLHVCQUdaQyxFQUF1QixpQkFDdkJDLEVBQXNCLHFCQUN0QkMsRUFBd0IsZ0NBR3hCQyxFQUFnQiw0QkFDaEJDLEVBQWtCLFdBQ2xCQyxFQUFtQi84QixPQUFPNjhCLEVBQWM1NUMsUUFDeEMrNUMsRUFBcUJoOUIsT0FBTzg4QixFQUFnQjc1QyxRQUc1Q2c2QyxFQUFXLG1CQUNYQyxFQUFhLGtCQUNiQyxFQUFnQixtQkFHaEJDLEVBQWUsbURBQ2ZDLEVBQWdCLFFBQ2hCQyxFQUFhLG1HQU1iQyxFQUFlLHNCQUNmQyxFQUFrQng5QixPQUFPdTlCLEVBQWF0NkMsUUFHdEN3NkMsRUFBYyxPQUdkQyxFQUFlLEtBR2ZDLEVBQWdCLDRDQUNoQkMsRUFBZ0Isb0NBQ2hCQyxFQUFpQixRQUdqQkMsRUFBYyw0Q0FZZEMsR0FBNkIsbUJBRzdCQyxHQUFlLFdBTWZDLEdBQWUsa0NBR2ZDLEdBQVUsT0FHVkMsR0FBYSxxQkFHYkMsR0FBYSxhQUdiQyxHQUFlLDhCQUdmQyxHQUFZLGNBR1pDLEdBQVcsbUJBR1hDLEdBQVUsOENBR1ZDLEdBQVksT0FHWkMsR0FBb0IseUJBT3BCQyxHQUFlQyxnREFTZkMsR0FBZUMsOE9BSWZDLEdBQVcsb0JBQ1hDLEdBQVUsSUFBTUgsR0FBZSxJQUMvQkksR0FBVSxJQUFNTixHQUFlLElBQy9CTyxHQUFXLE9BQ1hDLEdBQVksb0JBQ1pDLEdBQVUsOEJBQ1ZDLEdBQVMsb0JBQXVCUixHQUFlSyxHQUF0QyxxRUFDVEksR0FBUywyQkFFVEMsR0FBYyxxQkFDZEMsR0FBYSxrQ0FDYkMsR0FBYSxxQ0FDYkMsR0FBVSw4QkFJVkMsR0FBYyxNQUFRUCxHQUFVLElBQU1DLEdBQVMsSUFDL0NPLEdBQWMsTUFBUUYsR0FBVSxJQUFNTCxHQUFTLElBRy9DUSxHQVphLE1BQVFaLEdBQVUsSUFBTUssR0FBUyxJQVl0QixJQUt4QlEsR0FKVyxvQkFJUUQsSUFIUCxnQkFBd0IsQ0FBQ04sR0FBYUMsR0FBWUMsSUFBWTM4QixLQUFLLEtBQW5FLHFCQUEyRis4QixHQUFXLE1BSWxIRSxHQUFVLE1BQVEsQ0FBQ1osR0FBV0ssR0FBWUMsSUFBWTM4QixLQUFLLEtBQU8sSUFBTWc5QixHQUN4RUUsR0FBVyxNQUFRLENBQUNULEdBQWNOLEdBQVUsSUFBS0EsR0FBU08sR0FBWUMsR0FBWVYsSUFBVWo4QixLQUFLLEtBQU8sSUFHeEdtOUIsR0FBU2pnQyxPQS9CQSxPQStCZSxLQU14QmtnQyxHQUFjbGdDLE9BQU9pL0IsR0FBUyxLQUc5QmtCLEdBQVluZ0MsT0FBT3MvQixHQUFTLE1BQVFBLEdBQVMsS0FBT1UsR0FBV0YsR0FBTyxLQUd0RU0sR0FBZ0JwZ0MsT0FBTyxDQUN6QjAvQixHQUFVLElBQU1OLEdBQWhCTSxvQ0FBMEQsQ0FBQ1YsR0FBU1UsR0FBUyxLQUFLNThCLEtBQUssS0FBTyxJQUM5Rjg4Qix1Q0FBOEMsQ0FBQ1osR0FBU1UsR0FBVUMsR0FBYSxLQUFLNzhCLEtBQUssS0FBTyxJQUNoRzQ4QixHQUFVLElBQU1DLEdBQWhCRCxpQ0FDQUEsb0NBdEJlLG1EQURBLG1EQTBCZlIsR0FDQWEsSUFDQWo5QixLQUFLLEtBQU0sS0FHVHU5QixHQUFlcmdDLE9BQU8sMEJBQStCMitCLEdBQS9CLG1CQUd0QjJCLEdBQW1CLHFFQUduQkMsR0FBZSxDQUNqQixRQUFTLFNBQVUsV0FBWSxPQUFRLFFBQVMsZUFBZ0IsZUFDaEUsV0FBWSxZQUFhLGFBQWMsYUFBYyxNQUFPLE9BQVEsU0FDcEUsVUFBVyxTQUFVLE1BQU8sU0FBVSxTQUFVLFlBQWEsYUFDN0Qsb0JBQXFCLGNBQWUsY0FBZSxVQUNuRCxJQUFLLGVBQWdCLFdBQVksV0FBWSxjQUkzQ0MsSUFBbUIsRUFHbkJDLEdBQWlCLEdBQ3JCQSxHQUFldkUsR0FBY3VFLEdBQWV0RSxHQUM1Q3NFLEdBQWVyRSxHQUFXcUUsR0FBZXBFLEdBQ3pDb0UsR0FBZW5FLEdBQVltRSxHQUFlbEUsR0FDMUNrRSxHQTVMc0IsOEJBNExZQSxHQUFlakUsR0FDakRpRSxHQUFlaEUsSUFBYSxFQUM1QmdFLEdBQWV4RixHQUFXd0YsR0FBZXZGLEdBQ3pDdUYsR0FBZXpFLEdBQWtCeUUsR0FBZXRGLEdBQ2hEc0YsR0FBZXhFLEdBQWV3RSxHQUFlckYsR0FDN0NxRixHQUFlcEYsR0FBWW9GLEdBQWVuRixHQUMxQ21GLEdBQWVqRixHQUFVaUYsR0FBZWhGLEdBQ3hDZ0YsR0FBZS9FLEdBQWErRSxHQUFlOUUsR0FDM0M4RSxHQUFlN0UsR0FBVTZFLEdBQWU1RSxHQUN4QzRFLEdBQWUxRSxJQUFjLEVBRzdCLElBQUkyRSxHQUFnQixHQUNwQkEsR0FBY3pGLEdBQVd5RixHQUFjeEYsR0FDdkN3RixHQUFjMUUsR0FBa0IwRSxHQUFjekUsR0FDOUN5RSxHQUFjdkYsR0FBV3VGLEdBQWN0RixHQUN2Q3NGLEdBQWN4RSxHQUFjd0UsR0FBY3ZFLEdBQzFDdUUsR0FBY3RFLEdBQVdzRSxHQUFjckUsR0FDdkNxRSxHQUFjcEUsR0FBWW9FLEdBQWNsRixHQUN4Q2tGLEdBQWNqRixHQUFhaUYsR0FBY2hGLEdBQ3pDZ0YsR0FBYy9FLEdBQWErRSxHQUFjOUUsR0FDekM4RSxHQUFjN0UsR0FBYTZFLEdBQWM1RSxHQUN6QzRFLEdBQWNuRSxHQUFZbUUsR0FsTkosOEJBbU50QkEsR0FBY2xFLEdBQWFrRSxHQUFjakUsSUFBYSxFQUN0RGlFLEdBQWNyRixHQUFZcUYsR0FBY3BGLEdBQ3hDb0YsR0FBYzNFLElBQWMsRUFHNUIsSUE0RUk0RSxHQUFnQixDQUNsQixLQUFNLEtBQ04sSUFBSyxJQUNMLEtBQU0sSUFDTixLQUFNLElBQ04sU0FBVSxRQUNWLFNBQVUsU0FJUkMsR0FBaUJwL0MsV0FDakJxL0MsR0FBZWgvQyxTQUdmaS9DLEdBQThCLGlCQUFWM3RDLEdBQXNCQSxHQUFVQSxFQUFPOVosU0FBV0EsUUFBVThaLEVBR2hGNHRDLEdBQTBCLGlCQUFSeHpCLE1BQW9CQSxNQUFRQSxLQUFLbDBCLFNBQVdBLFFBQVVrMEIsS0FHeEVFLEdBQU9xekIsSUFBY0MsSUFBWUMsU0FBUyxjQUFUQSxHQUdqQ0MsR0FBNEN4b0QsSUFBWUEsRUFBUTJFLFVBQVkzRSxFQUc1RXlvRCxHQUFhRCxJQUFnQyxpQkFBVnZvRCxHQUFzQkEsSUFBV0EsRUFBTzBFLFVBQVkxRSxFQUd2RnlvRCxHQUFnQkQsSUFBY0EsR0FBV3pvRCxVQUFZd29ELEdBR3JERyxHQUFjRCxJQUFpQkwsR0FBV3Z0QyxRQUcxQzh0QyxHQUFZLFdBQ2QsSUFFRSxJQUFJaG9CLEVBQVE2bkIsSUFBY0EsR0FBV3hHLFNBQVd3RyxHQUFXeEcsUUFBUSxRQUFRcmhCLE1BRTNFLE9BQUlBLEdBS0crbkIsSUFBZUEsR0FBWXZyQyxTQUFXdXJDLEdBQVl2ckMsUUFBUSxRQUNqRSxNQUFPeFMsS0FYSSxHQWVYaStDLEdBQW9CRCxJQUFZQSxHQUFTbEksY0FDekNvSSxHQUFhRixJQUFZQSxHQUFTRyxPQUNsQ0MsR0FBWUosSUFBWUEsR0FBU0ssTUFDakNDLEdBQWVOLElBQVlBLEdBQVNPLFNBQ3BDQyxHQUFZUixJQUFZQSxHQUFTUyxNQUNqQ0MsR0FBbUJWLElBQVlBLEdBQVNXLGFBYzVDLFNBQVNudEMsR0FBTXdiLEVBQU1xb0IsRUFBUzlqQyxHQUM1QixPQUFRQSxFQUFLOVksUUFDWCxLQUFLLEVBQUcsT0FBT3UwQixFQUFLdjNCLEtBQUs0L0MsR0FDekIsS0FBSyxFQUFHLE9BQU9yb0IsRUFBS3YzQixLQUFLNC9DLEVBQVM5akMsRUFBSyxJQUN2QyxLQUFLLEVBQUcsT0FBT3liLEVBQUt2M0IsS0FBSzQvQyxFQUFTOWpDLEVBQUssR0FBSUEsRUFBSyxJQUNoRCxLQUFLLEVBQUcsT0FBT3liLEVBQUt2M0IsS0FBSzQvQyxFQUFTOWpDLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBRTNELE9BQU95YixFQUFLeGIsTUFBTTZqQyxFQUFTOWpDLEdBYTdCLFNBQVNxdEMsR0FBZ0J4dEMsRUFBT3dnQixFQUFRaXRCLEVBQVVDLEdBSWhELElBSEEsSUFBSW4xQyxHQUFTLEVBQ1RsUixFQUFrQixNQUFUMlksRUFBZ0IsRUFBSUEsRUFBTTNZLFNBRTlCa1IsRUFBUWxSLEdBQVEsQ0FDdkIsSUFBSWxDLEVBQVE2YSxFQUFNekgsR0FDbEJpb0IsRUFBT2t0QixFQUFhdm9ELEVBQU9zb0QsRUFBU3RvRCxHQUFRNmEsR0FFOUMsT0FBTzB0QyxFQVlULFNBQVNDLEdBQVUzdEMsRUFBT3l0QyxHQUl4QixJQUhBLElBQUlsMUMsR0FBUyxFQUNUbFIsRUFBa0IsTUFBVDJZLEVBQWdCLEVBQUlBLEVBQU0zWSxTQUU5QmtSLEVBQVFsUixJQUM4QixJQUF6Q29tRCxFQUFTenRDLEVBQU16SCxHQUFRQSxFQUFPeUgsS0FJcEMsT0FBT0EsRUFZVCxTQUFTNHRDLEdBQWU1dEMsRUFBT3l0QyxHQUc3QixJQUZBLElBQUlwbUQsRUFBa0IsTUFBVDJZLEVBQWdCLEVBQUlBLEVBQU0zWSxPQUVoQ0EsTUFDMEMsSUFBM0NvbUQsRUFBU3p0QyxFQUFNM1ksR0FBU0EsRUFBUTJZLEtBSXRDLE9BQU9BLEVBYVQsU0FBUzZ0QyxHQUFXN3RDLEVBQU84dEMsR0FJekIsSUFIQSxJQUFJdjFDLEdBQVMsRUFDVGxSLEVBQWtCLE1BQVQyWSxFQUFnQixFQUFJQSxFQUFNM1ksU0FFOUJrUixFQUFRbFIsR0FDZixJQUFLeW1ELEVBQVU5dEMsRUFBTXpILEdBQVFBLEVBQU95SCxHQUNsQyxPQUFPLEVBR1gsT0FBTyxFQVlULFNBQVMrdEMsR0FBWS90QyxFQUFPOHRDLEdBTTFCLElBTEEsSUFBSXYxQyxHQUFTLEVBQ1RsUixFQUFrQixNQUFUMlksRUFBZ0IsRUFBSUEsRUFBTTNZLE9BQ25DMm1ELEVBQVcsRUFDWG4vQyxFQUFTLEtBRUowSixFQUFRbFIsR0FBUSxDQUN2QixJQUFJbEMsRUFBUTZhLEVBQU16SCxHQUNkdTFDLEVBQVUzb0QsRUFBT29ULEVBQU95SCxLQUMxQm5SLEVBQU9tL0MsS0FBYzdvRCxHQUd6QixPQUFPMEosRUFZVCxTQUFTby9DLEdBQWNqdUMsRUFBTzdhLEdBRTVCLFNBRHNCLE1BQVQ2YSxFQUFnQixFQUFJQSxFQUFNM1ksU0FDcEI2bUQsR0FBWWx1QyxFQUFPN2EsRUFBTyxJQUFNLEVBWXJELFNBQVNncEQsR0FBa0JudUMsRUFBTzdhLEVBQU9pcEQsR0FJdkMsSUFIQSxJQUFJNzFDLEdBQVMsRUFDVGxSLEVBQWtCLE1BQVQyWSxFQUFnQixFQUFJQSxFQUFNM1ksU0FFOUJrUixFQUFRbFIsR0FDZixHQUFJK21ELEVBQVdqcEQsRUFBTzZhLEVBQU16SCxJQUMxQixPQUFPLEVBR1gsT0FBTyxFQVlULFNBQVM4MUMsR0FBU3J1QyxFQUFPeXRDLEdBS3ZCLElBSkEsSUFBSWwxQyxHQUFTLEVBQ1RsUixFQUFrQixNQUFUMlksRUFBZ0IsRUFBSUEsRUFBTTNZLE9BQ25Dd0gsRUFBUzZFLE1BQU1yTSxLQUVWa1IsRUFBUWxSLEdBQ2Z3SCxFQUFPMEosR0FBU2sxQyxFQUFTenRDLEVBQU16SCxHQUFRQSxFQUFPeUgsR0FFaEQsT0FBT25SLEVBV1QsU0FBU3kvQyxHQUFVdHVDLEVBQU9raUIsR0FLeEIsSUFKQSxJQUFJM3BCLEdBQVMsRUFDVGxSLEVBQVM2NkIsRUFBTzc2QixPQUNoQitJLEVBQVM0UCxFQUFNM1ksU0FFVmtSLEVBQVFsUixHQUNmMlksRUFBTTVQLEVBQVNtSSxHQUFTMnBCLEVBQU8zcEIsR0FFakMsT0FBT3lILEVBZVQsU0FBU3V1QyxHQUFZdnVDLEVBQU95dEMsRUFBVUMsRUFBYWMsR0FDakQsSUFBSWoyQyxHQUFTLEVBQ1RsUixFQUFrQixNQUFUMlksRUFBZ0IsRUFBSUEsRUFBTTNZLE9BS3ZDLElBSEltbkQsR0FBYW5uRCxJQUNmcW1ELEVBQWMxdEMsSUFBUXpILE1BRWZBLEVBQVFsUixHQUNmcW1ELEVBQWNELEVBQVNDLEVBQWExdEMsRUFBTXpILEdBQVFBLEVBQU95SCxHQUUzRCxPQUFPMHRDLEVBZVQsU0FBU2UsR0FBaUJ6dUMsRUFBT3l0QyxFQUFVQyxFQUFhYyxHQUN0RCxJQUFJbm5ELEVBQWtCLE1BQVQyWSxFQUFnQixFQUFJQSxFQUFNM1ksT0FJdkMsSUFISW1uRCxHQUFhbm5ELElBQ2ZxbUQsRUFBYzF0QyxJQUFRM1ksSUFFakJBLEtBQ0xxbUQsRUFBY0QsRUFBU0MsRUFBYTF0QyxFQUFNM1ksR0FBU0EsRUFBUTJZLEdBRTdELE9BQU8wdEMsRUFhVCxTQUFTZ0IsR0FBVTF1QyxFQUFPOHRDLEdBSXhCLElBSEEsSUFBSXYxQyxHQUFTLEVBQ1RsUixFQUFrQixNQUFUMlksRUFBZ0IsRUFBSUEsRUFBTTNZLFNBRTlCa1IsRUFBUWxSLEdBQ2YsR0FBSXltRCxFQUFVOXRDLEVBQU16SCxHQUFRQSxFQUFPeUgsR0FDakMsT0FBTyxFQUdYLE9BQU8sRUFVVCxJQUFJMnVDLEdBQVlDLEdBQWEsVUFtQzdCLFNBQVNDLEdBQVl6akIsRUFBWTBpQixFQUFXZ0IsR0FDMUMsSUFBSWpnRCxFQU9KLE9BTkFpZ0QsRUFBUzFqQixHQUFZLFNBQVNqbUMsRUFBT00sRUFBSzJsQyxHQUN4QyxHQUFJMGlCLEVBQVUzb0QsRUFBT00sRUFBSzJsQyxHQUV4QixPQURBdjhCLEVBQVNwSixHQUNGLEtBR0pvSixFQWNULFNBQVNrZ0QsR0FBYy91QyxFQUFPOHRDLEVBQVdrQixFQUFXQyxHQUlsRCxJQUhBLElBQUk1bkQsRUFBUzJZLEVBQU0zWSxPQUNma1IsRUFBUXkyQyxHQUFhQyxFQUFZLEdBQUssR0FFbENBLEVBQVkxMkMsTUFBWUEsRUFBUWxSLEdBQ3RDLEdBQUl5bUQsRUFBVTl0QyxFQUFNekgsR0FBUUEsRUFBT3lILEdBQ2pDLE9BQU96SCxFQUdYLE9BQVEsRUFZVixTQUFTMjFDLEdBQVlsdUMsRUFBTzdhLEVBQU82cEQsR0FDakMsT0FBTzdwRCxHQUFVQSxFQWlkbkIsU0FBdUI2YSxFQUFPN2EsRUFBTzZwRCxHQUNuQyxJQUFJejJDLEVBQVF5MkMsRUFBWSxFQUNwQjNuRCxFQUFTMlksRUFBTTNZLE9BRW5CLE9BQVNrUixFQUFRbFIsR0FDZixHQUFJMlksRUFBTXpILEtBQVdwVCxFQUNuQixPQUFPb1QsRUFHWCxPQUFRLEVBemRKMjJDLENBQWNsdkMsRUFBTzdhLEVBQU82cEQsR0FDNUJELEdBQWMvdUMsRUFBT212QyxHQUFXSCxHQWF0QyxTQUFTSSxHQUFnQnB2QyxFQUFPN2EsRUFBTzZwRCxFQUFXWixHQUloRCxJQUhBLElBQUk3MUMsRUFBUXkyQyxFQUFZLEVBQ3BCM25ELEVBQVMyWSxFQUFNM1ksU0FFVmtSLEVBQVFsUixHQUNmLEdBQUkrbUQsRUFBV3B1QyxFQUFNekgsR0FBUXBULEdBQzNCLE9BQU9vVCxFQUdYLE9BQVEsRUFVVixTQUFTNDJDLEdBQVVocUQsR0FDakIsT0FBT0EsR0FBVUEsRUFZbkIsU0FBU2txRCxHQUFTcnZDLEVBQU95dEMsR0FDdkIsSUFBSXBtRCxFQUFrQixNQUFUMlksRUFBZ0IsRUFBSUEsRUFBTTNZLE9BQ3ZDLE9BQU9BLEVBQVVpb0QsR0FBUXR2QyxFQUFPeXRDLEdBQVlwbUQsRUExeUJwQyxJQW96QlYsU0FBU3VuRCxHQUFhbnBELEdBQ3BCLE9BQU8sU0FBU0csR0FDZCxPQUFpQixNQUFWQSxPQWwzQlBnRyxFQWszQm9DaEcsRUFBT0gsSUFXL0MsU0FBUzhwRCxHQUFlM3BELEdBQ3RCLE9BQU8sU0FBU0gsR0FDZCxPQUFpQixNQUFWRyxPQS8zQlBnRyxFQSszQm9DaEcsRUFBT0gsSUFpQi9DLFNBQVMrcEQsR0FBV3BrQixFQUFZcWlCLEVBQVVDLEVBQWFjLEVBQVdNLEdBTWhFLE9BTEFBLEVBQVMxakIsR0FBWSxTQUFTam1DLEVBQU9vVCxFQUFPNnlCLEdBQzFDc2lCLEVBQWNjLEdBQ1RBLEdBQVksRUFBT3JwRCxHQUNwQnNvRCxFQUFTQyxFQUFhdm9ELEVBQU9vVCxFQUFPNnlCLE1BRW5Dc2lCLEVBZ0NULFNBQVM0QixHQUFRdHZDLEVBQU95dEMsR0FLdEIsSUFKQSxJQUFJNStDLEVBQ0EwSixHQUFTLEVBQ1RsUixFQUFTMlksRUFBTTNZLFNBRVZrUixFQUFRbFIsR0FBUSxDQUN2QixJQUFJNDNDLEVBQVV3TyxFQUFTenRDLEVBQU16SCxTQTU3QjdCM00sSUE2N0JJcXpDLElBQ0Zwd0MsT0E5N0JGakQsSUE4N0JXaUQsRUFBdUJvd0MsRUFBV3B3QyxFQUFTb3dDLEdBR3hELE9BQU9wd0MsRUFZVCxTQUFTNGdELEdBQVU5cEQsRUFBRzhuRCxHQUlwQixJQUhBLElBQUlsMUMsR0FBUyxFQUNUMUosRUFBUzZFLE1BQU0vTixLQUVWNFMsRUFBUTVTLEdBQ2ZrSixFQUFPMEosR0FBU2sxQyxFQUFTbDFDLEdBRTNCLE9BQU8xSixFQXlCVCxTQUFTNmdELEdBQVN6d0IsR0FDaEIsT0FBT0EsRUFDSEEsRUFBT2xyQixNQUFNLEVBQUc0N0MsR0FBZ0Ixd0IsR0FBVSxHQUFHMzRCLFFBQVEwaUQsRUFBYSxJQUNsRS9wQixFQVVOLFNBQVMyd0IsR0FBVWgwQixHQUNqQixPQUFPLFNBQVN6MkIsR0FDZCxPQUFPeTJCLEVBQUt6MkIsSUFjaEIsU0FBUzBxRCxHQUFXanFELEVBQVFtSSxHQUMxQixPQUFPc2dELEdBQVN0Z0QsR0FBTyxTQUFTdEksR0FDOUIsT0FBT0csRUFBT0gsTUFZbEIsU0FBU3FxRCxHQUFTdGhDLEVBQU8vb0IsR0FDdkIsT0FBTytvQixFQUFNZ0wsSUFBSS96QixHQVluQixTQUFTc3FELEdBQWdCQyxFQUFZQyxHQUluQyxJQUhBLElBQUkxM0MsR0FBUyxFQUNUbFIsRUFBUzJvRCxFQUFXM29ELFNBRWZrUixFQUFRbFIsR0FBVTZtRCxHQUFZK0IsRUFBWUQsRUFBV3ozQyxHQUFRLElBQU0sSUFDNUUsT0FBT0EsRUFZVCxTQUFTMjNDLEdBQWNGLEVBQVlDLEdBR2pDLElBRkEsSUFBSTEzQyxFQUFReTNDLEVBQVczb0QsT0FFaEJrUixLQUFXMjFDLEdBQVkrQixFQUFZRCxFQUFXejNDLEdBQVEsSUFBTSxJQUNuRSxPQUFPQSxFQVdULFNBQVM0M0MsR0FBYW53QyxFQUFPb3dDLEdBSTNCLElBSEEsSUFBSS9vRCxFQUFTMlksRUFBTTNZLE9BQ2Z3SCxFQUFTLEVBRU54SCxLQUNEMlksRUFBTTNZLEtBQVkrb0QsS0FDbEJ2aEQsRUFHTixPQUFPQSxFQVdULElBQUl3aEQsR0FBZWQsR0FqeEJHLENBRXBCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUN0QixJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFDbkMsSUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUVSLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUss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IjoiL3NjcmlwdHMvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgU2Nyb2xsIFBhcmVudCAxLjEzLjJcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogc2Nyb2xsUGFyZW50XG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogR2V0IHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVsZW1lbnQgdGhhdCBpcyBzY3JvbGxhYmxlLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3Njcm9sbFBhcmVudC9cblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFsgXCJqcXVlcnlcIiwgXCIuL3ZlcnNpb25cIiBdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSApKCBmdW5jdGlvbiggJCApIHtcblwidXNlIHN0cmljdFwiO1xuXG5yZXR1cm4gJC5mbi5zY3JvbGxQYXJlbnQgPSBmdW5jdGlvbiggaW5jbHVkZUhpZGRlbiApIHtcblx0dmFyIHBvc2l0aW9uID0gdGhpcy5jc3MoIFwicG9zaXRpb25cIiApLFxuXHRcdGV4Y2x1ZGVTdGF0aWNQYXJlbnQgPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXHRcdG92ZXJmbG93UmVnZXggPSBpbmNsdWRlSGlkZGVuID8gLyhhdXRvfHNjcm9sbHxoaWRkZW4pLyA6IC8oYXV0b3xzY3JvbGwpLyxcblx0XHRzY3JvbGxQYXJlbnQgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHBhcmVudCA9ICQoIHRoaXMgKTtcblx0XHRcdGlmICggZXhjbHVkZVN0YXRpY1BhcmVudCAmJiBwYXJlbnQuY3NzKCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG92ZXJmbG93UmVnZXgudGVzdCggcGFyZW50LmNzcyggXCJvdmVyZmxvd1wiICkgKyBwYXJlbnQuY3NzKCBcIm92ZXJmbG93LXlcIiApICtcblx0XHRcdFx0cGFyZW50LmNzcyggXCJvdmVyZmxvdy14XCIgKSApO1xuXHRcdH0gKS5lcSggMCApO1xuXG5cdHJldHVybiBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiIHx8ICFzY3JvbGxQYXJlbnQubGVuZ3RoID9cblx0XHQkKCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApIDpcblx0XHRzY3JvbGxQYXJlbnQ7XG59O1xuXG59ICk7XG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE2LjFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcblxudmFyIHRpbWVvdXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn0oKTtcblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVmZXJlbmNlIG5vZGUgb2YgdGhlIHJlZmVyZW5jZSBvYmplY3QsIG9yIHRoZSByZWZlcmVuY2Ugb2JqZWN0IGl0c2VsZi5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSB7XG4gIHJldHVybiByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgPyByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA6IHJlZmVyZW5jZTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10pO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5oZWlnaHQ7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgpO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXRseSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gc2hvdWxkUm91bmQgLSBJZiB0aGUgb2Zmc2V0cyBzaG91bGQgYmUgcm91bmRlZCBhdCBhbGxcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWRcbiAqXG4gKiBUaGUgdGFsZSBvZiBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLiBJdCdzIHN0aWxsIG5vdCAxMDAlIHBlcmZlY3QsIGJ1dCBhc1xuICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi5cbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcbiAqXG4gKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxuICpcbiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvblxuICogaGlnaCBEUEkgc2NyZWVucy5cbiAqXG4gKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICB2YXIgbm9Sb3VuZCA9IGZ1bmN0aW9uIG5vUm91bmQodikge1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIHZhciByZWZlcmVuY2VXaWR0aCA9IHJvdW5kKHJlZmVyZW5jZS53aWR0aCk7XG4gIHZhciBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIHZhciBzYW1lV2lkdGhQYXJpdHkgPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IHBvcHBlcldpZHRoICUgMjtcbiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7XG5cbiAgdmFyIGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhQYXJpdHkgPyByb3VuZCA6IGZsb29yO1xuICB2YXIgdmVydGljYWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogcm91bmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmQgPyBwb3BwZXIubGVmdCAtIDEgOiBwb3BwZXIubGVmdCksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodClcbiAgfTtcbn1cblxudmFyIGlzRmlyZWZveCA9IGlzQnJvd3NlciAmJiAvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICB2YXIgb2Zmc2V0cyA9IGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94KTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpO1xuICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdW5jdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0pO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10pO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeVJlZiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0xlZnQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1RvcCk7XG5cbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9IGZsaXBwZWRWYXJpYXRpb25CeVJlZiB8fCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50O1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnM9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uczogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zQnlDb250ZW50PWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHBvcHBlciBlbGVtZW50IG92ZXJsYXBzIGl0cyByZWZlcmVuY2UgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zQnlDb250ZW50OiBmYWxzZVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgLyBYTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiwgJzEuMC4wJyksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiwgJzEuMC4wJylcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIi8qIVxuICogalF1ZXJ5IFVJIDpkYXRhIDEuMTMuMlxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiA6ZGF0YSBTZWxlY3RvclxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IFNlbGVjdHMgZWxlbWVudHMgd2hpY2ggaGF2ZSBkYXRhIHN0b3JlZCB1bmRlciB0aGUgc3BlY2lmaWVkIGtleS5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kYXRhLXNlbGVjdG9yL1xuXG4oIGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZSggWyBcImpxdWVyeVwiLCBcIi4vdmVyc2lvblwiIF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59ICkoIGZ1bmN0aW9uKCAkICkge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnJldHVybiAkLmV4dGVuZCggJC5leHByLnBzZXVkb3MsIHtcblx0ZGF0YTogJC5leHByLmNyZWF0ZVBzZXVkbyA/XG5cdFx0JC5leHByLmNyZWF0ZVBzZXVkbyggZnVuY3Rpb24oIGRhdGFOYW1lICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gISEkLmRhdGEoIGVsZW0sIGRhdGFOYW1lICk7XG5cdFx0XHR9O1xuXHRcdH0gKSA6XG5cblx0XHQvLyBTdXBwb3J0OiBqUXVlcnkgPDEuOFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBpLCBtYXRjaCApIHtcblx0XHRcdHJldHVybiAhISQuZGF0YSggZWxlbSwgbWF0Y2hbIDMgXSApO1xuXHRcdH1cbn0gKTtcbn0gKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My42LjBcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMS0wMy0wMlQxNzowOFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcblx0XHQvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcblx0XHQvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuXHRcdC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cblx0XHQvLyBTdXBwb3J0OiBRdFdlYiA8PTMuOC41LCBXZWJLaXQgPD01MzQuMzQsIHdraHRtbHRvcGRmIHRvb2wgPD0wLjEyLjVcblx0XHQvLyBQbHVzIGZvciBvbGQgV2ViS2l0LCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgY29sbGVjdGlvbnNcblx0XHQvLyAoZS5nLiwgYHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKSA9PT0gXCJmdW5jdGlvblwiYCkuIChnaC00NzU2KVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0dHlwZW9mIG9iai5pdGVtICE9PSBcImZ1bmN0aW9uXCI7XG5cdH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjYuMFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy42XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIxLTAyLTE2XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gZWxlbSAmJiAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cblx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn1cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHRcdFx0Ly8gSW4gQ2hyb21lLCBpZiBhbiBlbGVtZW50IGhhdmluZyBhIGZvY3Vzb3V0IGhhbmRsZXIgaXMgYmx1cnJlZCBieVxuXHRcdFx0XHRcdFx0Ly8gY2xpY2tpbmcgb3V0c2lkZSBvZiBpdCwgaXQgaW52b2tlcyB0aGUgaGFuZGxlciBzeW5jaHJvbm91c2x5LiBJZlxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBoYW5kbGVyIGNhbGxzIGAucmVtb3ZlKClgIG9uIHRoZSBlbGVtZW50LCB0aGUgZGF0YSBpcyBjbGVhcmVkLFxuXHRcdFx0XHRcdFx0Ly8gbGVhdmluZyBgcmVzdWx0YCB1bmRlZmluZWQuIFdlIG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCB0aGlzLlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAmJiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGFzIGl0J3MgYWxyZWFkeSBiZWluZyBmaXJlZFxuXHRcdC8vIGluIGxldmVyYWdlTmF0aXZlLlxuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5vcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB7XG4gICAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gICAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2VcbiAgfSxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlbmhhbmNlRXJyb3IoZSwgdGhpcywgJ0VfSlNPTl9QQVJTRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIndpbmRvdy5fID0gcmVxdWlyZSgnbG9kYXNoJyk7XG53aW5kb3cuJCA9IHdpbmRvdy5qUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbnJlcXVpcmUoJ2pxdWVyeS11aS91aS9jb3JlJyk7XG5yZXF1aXJlKCdqcXVlcnktdWkvdWkvd2lkZ2V0cy9zb3J0YWJsZScpO1xuXG53aW5kb3cuUG9wcGVyID0gcmVxdWlyZSgncG9wcGVyLmpzJykuZGVmYXVsdDtcbndpbmRvdy5heGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG53aW5kb3cuYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtUmVxdWVzdGVkLVdpdGgnXSA9ICdYTUxIdHRwUmVxdWVzdCc7XG53aW5kb3cuRHJvcHpvbmUgPSByZXF1aXJlKCdkcm9wem9uZScpO1xuXG5yZXF1aXJlKCdib290c3RyYXAnKTtcblxubGV0IHRva2VuID0gZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJyk7XG5pZiAodG9rZW4pIHtcbiAgICB3aW5kb3cuYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQ1NSRi1UT0tFTiddID0gdG9rZW4uY29udGVudDtcbn0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcignQ1NSRiB0b2tlbiBub3QgZm91bmQ6IGh0dHBzOi8vbGFyYXZlbC5jb20vZG9jcy9jc3JmI2NzcmYteC1jc3JmLXRva2VuJyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiLyohXG4gKiBqUXVlcnkgVUkgV2lkZ2V0IDEuMTMuMlxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBXaWRnZXRcbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBQcm92aWRlcyBhIGZhY3RvcnkgZm9yIGNyZWF0aW5nIHN0YXRlZnVsIHdpZGdldHMgd2l0aCBhIGNvbW1vbiBBUEkuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20valF1ZXJ5LndpZGdldC9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS93aWRnZXQvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKSggZnVuY3Rpb24oICQgKSB7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHdpZGdldFV1aWQgPSAwO1xudmFyIHdpZGdldEhhc093blByb3BlcnR5ID0gQXJyYXkucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHdpZGdldFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4kLmNsZWFuRGF0YSA9ICggZnVuY3Rpb24oIG9yaWcgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGV2ZW50cywgZWxlbSwgaTtcblx0XHRmb3IgKCBpID0gMDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblxuXHRcdFx0Ly8gT25seSB0cmlnZ2VyIHJlbW92ZSB3aGVuIG5lY2Vzc2FyeSB0byBzYXZlIHRpbWVcblx0XHRcdGV2ZW50cyA9ICQuX2RhdGEoIGVsZW0sIFwiZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICYmIGV2ZW50cy5yZW1vdmUgKSB7XG5cdFx0XHRcdCQoIGVsZW0gKS50cmlnZ2VySGFuZGxlciggXCJyZW1vdmVcIiApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRvcmlnKCBlbGVtcyApO1xuXHR9O1xufSApKCAkLmNsZWFuRGF0YSApO1xuXG4kLndpZGdldCA9IGZ1bmN0aW9uKCBuYW1lLCBiYXNlLCBwcm90b3R5cGUgKSB7XG5cdHZhciBleGlzdGluZ0NvbnN0cnVjdG9yLCBjb25zdHJ1Y3RvciwgYmFzZVByb3RvdHlwZTtcblxuXHQvLyBQcm94aWVkUHJvdG90eXBlIGFsbG93cyB0aGUgcHJvdmlkZWQgcHJvdG90eXBlIHRvIHJlbWFpbiB1bm1vZGlmaWVkXG5cdC8vIHNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgYXMgYSBtaXhpbiBmb3IgbXVsdGlwbGUgd2lkZ2V0cyAoIzg4NzYpXG5cdHZhciBwcm94aWVkUHJvdG90eXBlID0ge307XG5cblx0dmFyIG5hbWVzcGFjZSA9IG5hbWUuc3BsaXQoIFwiLlwiIClbIDAgXTtcblx0bmFtZSA9IG5hbWUuc3BsaXQoIFwiLlwiIClbIDEgXTtcblx0dmFyIGZ1bGxOYW1lID0gbmFtZXNwYWNlICsgXCItXCIgKyBuYW1lO1xuXG5cdGlmICggIXByb3RvdHlwZSApIHtcblx0XHRwcm90b3R5cGUgPSBiYXNlO1xuXHRcdGJhc2UgPSAkLldpZGdldDtcblx0fVxuXG5cdGlmICggQXJyYXkuaXNBcnJheSggcHJvdG90eXBlICkgKSB7XG5cdFx0cHJvdG90eXBlID0gJC5leHRlbmQuYXBwbHkoIG51bGwsIFsge30gXS5jb25jYXQoIHByb3RvdHlwZSApICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgc2VsZWN0b3IgZm9yIHBsdWdpblxuXHQkLmV4cHIucHNldWRvc1sgZnVsbE5hbWUudG9Mb3dlckNhc2UoKSBdID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBmdWxsTmFtZSApO1xuXHR9O1xuXG5cdCRbIG5hbWVzcGFjZSBdID0gJFsgbmFtZXNwYWNlIF0gfHwge307XG5cdGV4aXN0aW5nQ29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdO1xuXHRjb25zdHJ1Y3RvciA9ICRbIG5hbWVzcGFjZSBdWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHtcblxuXHRcdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCBcIm5ld1wiIGtleXdvcmRcblx0XHRpZiAoICF0aGlzIHx8ICF0aGlzLl9jcmVhdGVXaWRnZXQgKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGNvbnN0cnVjdG9yKCBvcHRpb25zLCBlbGVtZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IGluaXRpYWxpemluZyBmb3Igc2ltcGxlIGluaGVyaXRhbmNlXG5cdFx0Ly8gbXVzdCB1c2UgXCJuZXdcIiBrZXl3b3JkICh0aGUgY29kZSBhYm92ZSBhbHdheXMgcGFzc2VzIGFyZ3MpXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5fY3JlYXRlV2lkZ2V0KCBvcHRpb25zLCBlbGVtZW50ICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEV4dGVuZCB3aXRoIHRoZSBleGlzdGluZyBjb25zdHJ1Y3RvciB0byBjYXJyeSBvdmVyIGFueSBzdGF0aWMgcHJvcGVydGllc1xuXHQkLmV4dGVuZCggY29uc3RydWN0b3IsIGV4aXN0aW5nQ29uc3RydWN0b3IsIHtcblx0XHR2ZXJzaW9uOiBwcm90b3R5cGUudmVyc2lvbixcblxuXHRcdC8vIENvcHkgdGhlIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvdG90eXBlIGluIGNhc2Ugd2UgbmVlZCB0b1xuXHRcdC8vIHJlZGVmaW5lIHRoZSB3aWRnZXQgbGF0ZXJcblx0XHRfcHJvdG86ICQuZXh0ZW5kKCB7fSwgcHJvdG90eXBlICksXG5cblx0XHQvLyBUcmFjayB3aWRnZXRzIHRoYXQgaW5oZXJpdCBmcm9tIHRoaXMgd2lkZ2V0IGluIGNhc2UgdGhpcyB3aWRnZXQgaXNcblx0XHQvLyByZWRlZmluZWQgYWZ0ZXIgYSB3aWRnZXQgaW5oZXJpdHMgZnJvbSBpdFxuXHRcdF9jaGlsZENvbnN0cnVjdG9yczogW11cblx0fSApO1xuXG5cdGJhc2VQcm90b3R5cGUgPSBuZXcgYmFzZSgpO1xuXG5cdC8vIFdlIG5lZWQgdG8gbWFrZSB0aGUgb3B0aW9ucyBoYXNoIGEgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIG5ldyBpbnN0YW5jZVxuXHQvLyBvdGhlcndpc2Ugd2UnbGwgbW9kaWZ5IHRoZSBvcHRpb25zIGhhc2ggb24gdGhlIHByb3RvdHlwZSB0aGF0IHdlJ3JlXG5cdC8vIGluaGVyaXRpbmcgZnJvbVxuXHRiYXNlUHJvdG90eXBlLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LCBiYXNlUHJvdG90eXBlLm9wdGlvbnMgKTtcblx0JC5lYWNoKCBwcm90b3R5cGUsIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0cHJveGllZFByb3RvdHlwZVsgcHJvcCBdID0gdmFsdWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHByb3hpZWRQcm90b3R5cGVbIHByb3AgXSA9ICggZnVuY3Rpb24oKSB7XG5cdFx0XHRmdW5jdGlvbiBfc3VwZXIoKSB7XG5cdFx0XHRcdHJldHVybiBiYXNlLnByb3RvdHlwZVsgcHJvcCBdLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gX3N1cGVyQXBwbHkoIGFyZ3MgKSB7XG5cdFx0XHRcdHJldHVybiBiYXNlLnByb3RvdHlwZVsgcHJvcCBdLmFwcGx5KCB0aGlzLCBhcmdzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIF9fc3VwZXIgPSB0aGlzLl9zdXBlcjtcblx0XHRcdFx0dmFyIF9fc3VwZXJBcHBseSA9IHRoaXMuX3N1cGVyQXBwbHk7XG5cdFx0XHRcdHZhciByZXR1cm5WYWx1ZTtcblxuXHRcdFx0XHR0aGlzLl9zdXBlciA9IF9zdXBlcjtcblx0XHRcdFx0dGhpcy5fc3VwZXJBcHBseSA9IF9zdXBlckFwcGx5O1xuXG5cdFx0XHRcdHJldHVyblZhbHVlID0gdmFsdWUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdHRoaXMuX3N1cGVyID0gX19zdXBlcjtcblx0XHRcdFx0dGhpcy5fc3VwZXJBcHBseSA9IF9fc3VwZXJBcHBseTtcblxuXHRcdFx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XG5cdFx0XHR9O1xuXHRcdH0gKSgpO1xuXHR9ICk7XG5cdGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQud2lkZ2V0LmV4dGVuZCggYmFzZVByb3RvdHlwZSwge1xuXG5cdFx0Ly8gVE9ETzogcmVtb3ZlIHN1cHBvcnQgZm9yIHdpZGdldEV2ZW50UHJlZml4XG5cdFx0Ly8gYWx3YXlzIHVzZSB0aGUgbmFtZSArIGEgY29sb24gYXMgdGhlIHByZWZpeCwgZS5nLiwgZHJhZ2dhYmxlOnN0YXJ0XG5cdFx0Ly8gZG9uJ3QgcHJlZml4IGZvciB3aWRnZXRzIHRoYXQgYXJlbid0IERPTS1iYXNlZFxuXHRcdHdpZGdldEV2ZW50UHJlZml4OiBleGlzdGluZ0NvbnN0cnVjdG9yID8gKCBiYXNlUHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4IHx8IG5hbWUgKSA6IG5hbWVcblx0fSwgcHJveGllZFByb3RvdHlwZSwge1xuXHRcdGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvcixcblx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZSxcblx0XHR3aWRnZXROYW1lOiBuYW1lLFxuXHRcdHdpZGdldEZ1bGxOYW1lOiBmdWxsTmFtZVxuXHR9ICk7XG5cblx0Ly8gSWYgdGhpcyB3aWRnZXQgaXMgYmVpbmcgcmVkZWZpbmVkIHRoZW4gd2UgbmVlZCB0byBmaW5kIGFsbCB3aWRnZXRzIHRoYXRcblx0Ly8gYXJlIGluaGVyaXRpbmcgZnJvbSBpdCBhbmQgcmVkZWZpbmUgYWxsIG9mIHRoZW0gc28gdGhhdCB0aGV5IGluaGVyaXQgZnJvbVxuXHQvLyB0aGUgbmV3IHZlcnNpb24gb2YgdGhpcyB3aWRnZXQuIFdlJ3JlIGVzc2VudGlhbGx5IHRyeWluZyB0byByZXBsYWNlIG9uZVxuXHQvLyBsZXZlbCBpbiB0aGUgcHJvdG90eXBlIGNoYWluLlxuXHRpZiAoIGV4aXN0aW5nQ29uc3RydWN0b3IgKSB7XG5cdFx0JC5lYWNoKCBleGlzdGluZ0NvbnN0cnVjdG9yLl9jaGlsZENvbnN0cnVjdG9ycywgZnVuY3Rpb24oIGksIGNoaWxkICkge1xuXHRcdFx0dmFyIGNoaWxkUHJvdG90eXBlID0gY2hpbGQucHJvdG90eXBlO1xuXG5cdFx0XHQvLyBSZWRlZmluZSB0aGUgY2hpbGQgd2lkZ2V0IHVzaW5nIHRoZSBzYW1lIHByb3RvdHlwZSB0aGF0IHdhc1xuXHRcdFx0Ly8gb3JpZ2luYWxseSB1c2VkLCBidXQgaW5oZXJpdCBmcm9tIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGUgYmFzZVxuXHRcdFx0JC53aWRnZXQoIGNoaWxkUHJvdG90eXBlLm5hbWVzcGFjZSArIFwiLlwiICsgY2hpbGRQcm90b3R5cGUud2lkZ2V0TmFtZSwgY29uc3RydWN0b3IsXG5cdFx0XHRcdGNoaWxkLl9wcm90byApO1xuXHRcdH0gKTtcblxuXHRcdC8vIFJlbW92ZSB0aGUgbGlzdCBvZiBleGlzdGluZyBjaGlsZCBjb25zdHJ1Y3RvcnMgZnJvbSB0aGUgb2xkIGNvbnN0cnVjdG9yXG5cdFx0Ly8gc28gdGhlIG9sZCBjaGlsZCBjb25zdHJ1Y3RvcnMgY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkXG5cdFx0ZGVsZXRlIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzO1xuXHR9IGVsc2Uge1xuXHRcdGJhc2UuX2NoaWxkQ29uc3RydWN0b3JzLnB1c2goIGNvbnN0cnVjdG9yICk7XG5cdH1cblxuXHQkLndpZGdldC5icmlkZ2UoIG5hbWUsIGNvbnN0cnVjdG9yICk7XG5cblx0cmV0dXJuIGNvbnN0cnVjdG9yO1xufTtcblxuJC53aWRnZXQuZXh0ZW5kID0gZnVuY3Rpb24oIHRhcmdldCApIHtcblx0dmFyIGlucHV0ID0gd2lkZ2V0U2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICk7XG5cdHZhciBpbnB1dEluZGV4ID0gMDtcblx0dmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXHR2YXIga2V5O1xuXHR2YXIgdmFsdWU7XG5cblx0Zm9yICggOyBpbnB1dEluZGV4IDwgaW5wdXRMZW5ndGg7IGlucHV0SW5kZXgrKyApIHtcblx0XHRmb3IgKCBrZXkgaW4gaW5wdXRbIGlucHV0SW5kZXggXSApIHtcblx0XHRcdHZhbHVlID0gaW5wdXRbIGlucHV0SW5kZXggXVsga2V5IF07XG5cdFx0XHRpZiAoIHdpZGdldEhhc093blByb3BlcnR5LmNhbGwoIGlucHV0WyBpbnB1dEluZGV4IF0sIGtleSApICYmIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2xvbmUgb2JqZWN0c1xuXHRcdFx0XHRpZiAoICQuaXNQbGFpbk9iamVjdCggdmFsdWUgKSApIHtcblx0XHRcdFx0XHR0YXJnZXRbIGtleSBdID0gJC5pc1BsYWluT2JqZWN0KCB0YXJnZXRbIGtleSBdICkgP1xuXHRcdFx0XHRcdFx0JC53aWRnZXQuZXh0ZW5kKCB7fSwgdGFyZ2V0WyBrZXkgXSwgdmFsdWUgKSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGV4dGVuZCBzdHJpbmdzLCBhcnJheXMsIGV0Yy4gd2l0aCBvYmplY3RzXG5cdFx0XHRcdFx0XHQkLndpZGdldC5leHRlbmQoIHt9LCB2YWx1ZSApO1xuXG5cdFx0XHRcdC8vIENvcHkgZXZlcnl0aGluZyBlbHNlIGJ5IHJlZmVyZW5jZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRhcmdldFsga2V5IF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxuJC53aWRnZXQuYnJpZGdlID0gZnVuY3Rpb24oIG5hbWUsIG9iamVjdCApIHtcblx0dmFyIGZ1bGxOYW1lID0gb2JqZWN0LnByb3RvdHlwZS53aWRnZXRGdWxsTmFtZSB8fCBuYW1lO1xuXHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgaXNNZXRob2RDYWxsID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCI7XG5cdFx0dmFyIGFyZ3MgPSB3aWRnZXRTbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcblx0XHR2YXIgcmV0dXJuVmFsdWUgPSB0aGlzO1xuXG5cdFx0aWYgKCBpc01ldGhvZENhbGwgKSB7XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYW4gZW1wdHkgY29sbGVjdGlvbiwgd2UgbmVlZCB0byBoYXZlIHRoZSBpbnN0YW5jZSBtZXRob2Rcblx0XHRcdC8vIHJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiB0aGUgalF1ZXJ5IGluc3RhbmNlXG5cdFx0XHRpZiAoICF0aGlzLmxlbmd0aCAmJiBvcHRpb25zID09PSBcImluc3RhbmNlXCIgKSB7XG5cdFx0XHRcdHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgbWV0aG9kVmFsdWU7XG5cdFx0XHRcdFx0dmFyIGluc3RhbmNlID0gJC5kYXRhKCB0aGlzLCBmdWxsTmFtZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zID09PSBcImluc3RhbmNlXCIgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm5WYWx1ZSA9IGluc3RhbmNlO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggIWluc3RhbmNlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICQuZXJyb3IoIFwiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiBcIiArIG5hbWUgK1xuXHRcdFx0XHRcdFx0XHRcIiBwcmlvciB0byBpbml0aWFsaXphdGlvbjsgXCIgK1xuXHRcdFx0XHRcdFx0XHRcImF0dGVtcHRlZCB0byBjYWxsIG1ldGhvZCAnXCIgKyBvcHRpb25zICsgXCInXCIgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBpbnN0YW5jZVsgb3B0aW9ucyBdICE9PSBcImZ1bmN0aW9uXCIgfHxcblx0XHRcdFx0XHRcdG9wdGlvbnMuY2hhckF0KCAwICkgPT09IFwiX1wiICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICQuZXJyb3IoIFwibm8gc3VjaCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJyBmb3IgXCIgKyBuYW1lICtcblx0XHRcdFx0XHRcdFx0XCIgd2lkZ2V0IGluc3RhbmNlXCIgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtZXRob2RWYWx1ZSA9IGluc3RhbmNlWyBvcHRpb25zIF0uYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1ldGhvZFZhbHVlICE9PSBpbnN0YW5jZSAmJiBtZXRob2RWYWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuVmFsdWUgPSBtZXRob2RWYWx1ZSAmJiBtZXRob2RWYWx1ZS5qcXVlcnkgP1xuXHRcdFx0XHRcdFx0XHRyZXR1cm5WYWx1ZS5wdXNoU3RhY2soIG1ldGhvZFZhbHVlLmdldCgpICkgOlxuXHRcdFx0XHRcdFx0XHRtZXRob2RWYWx1ZTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBbGxvdyBtdWx0aXBsZSBoYXNoZXMgdG8gYmUgcGFzc2VkIG9uIGluaXRcblx0XHRcdGlmICggYXJncy5sZW5ndGggKSB7XG5cdFx0XHRcdG9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQuYXBwbHkoIG51bGwsIFsgb3B0aW9ucyBdLmNvbmNhdCggYXJncyApICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTtcblx0XHRcdFx0aWYgKCBpbnN0YW5jZSApIHtcblx0XHRcdFx0XHRpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgfHwge30gKTtcblx0XHRcdFx0XHRpZiAoIGluc3RhbmNlLl9pbml0ICkge1xuXHRcdFx0XHRcdFx0aW5zdGFuY2UuX2luaXQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCB0aGlzLCBmdWxsTmFtZSwgbmV3IG9iamVjdCggb3B0aW9ucywgdGhpcyApICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XG5cdH07XG59O1xuXG4kLldpZGdldCA9IGZ1bmN0aW9uKCAvKiBvcHRpb25zLCBlbGVtZW50ICovICkge307XG4kLldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnMgPSBbXTtcblxuJC5XaWRnZXQucHJvdG90eXBlID0ge1xuXHR3aWRnZXROYW1lOiBcIndpZGdldFwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGRpdj5cIixcblxuXHRvcHRpb25zOiB7XG5cdFx0Y2xhc3Nlczoge30sXG5cdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0Y3JlYXRlOiBudWxsXG5cdH0sXG5cblx0X2NyZWF0ZVdpZGdldDogZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7XG5cdFx0ZWxlbWVudCA9ICQoIGVsZW1lbnQgfHwgdGhpcy5kZWZhdWx0RWxlbWVudCB8fCB0aGlzIClbIDAgXTtcblx0XHR0aGlzLmVsZW1lbnQgPSAkKCBlbGVtZW50ICk7XG5cdFx0dGhpcy51dWlkID0gd2lkZ2V0VXVpZCsrO1xuXHRcdHRoaXMuZXZlbnROYW1lc3BhY2UgPSBcIi5cIiArIHRoaXMud2lkZ2V0TmFtZSArIHRoaXMudXVpZDtcblxuXHRcdHRoaXMuYmluZGluZ3MgPSAkKCk7XG5cdFx0dGhpcy5ob3ZlcmFibGUgPSAkKCk7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSAkKCk7XG5cdFx0dGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cCA9IHt9O1xuXG5cdFx0aWYgKCBlbGVtZW50ICE9PSB0aGlzICkge1xuXHRcdFx0JC5kYXRhKCBlbGVtZW50LCB0aGlzLndpZGdldEZ1bGxOYW1lLCB0aGlzICk7XG5cdFx0XHR0aGlzLl9vbiggdHJ1ZSwgdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdHJlbW92ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5kZXN0cm95KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHR0aGlzLmRvY3VtZW50ID0gJCggZWxlbWVudC5zdHlsZSA/XG5cblx0XHRcdFx0Ly8gRWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50XG5cdFx0XHRcdGVsZW1lbnQub3duZXJEb2N1bWVudCA6XG5cblx0XHRcdFx0Ly8gRWxlbWVudCBpcyB3aW5kb3cgb3IgZG9jdW1lbnRcblx0XHRcdFx0ZWxlbWVudC5kb2N1bWVudCB8fCBlbGVtZW50ICk7XG5cdFx0XHR0aGlzLndpbmRvdyA9ICQoIHRoaXMuZG9jdW1lbnRbIDAgXS5kZWZhdWx0VmlldyB8fCB0aGlzLmRvY3VtZW50WyAwIF0ucGFyZW50V2luZG93ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSxcblx0XHRcdHRoaXMub3B0aW9ucyxcblx0XHRcdHRoaXMuX2dldENyZWF0ZU9wdGlvbnMoKSxcblx0XHRcdG9wdGlvbnMgKTtcblxuXHRcdHRoaXMuX2NyZWF0ZSgpO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCggdGhpcy5vcHRpb25zLmRpc2FibGVkICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJjcmVhdGVcIiwgbnVsbCwgdGhpcy5fZ2V0Q3JlYXRlRXZlbnREYXRhKCkgKTtcblx0XHR0aGlzLl9pbml0KCk7XG5cdH0sXG5cblx0X2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7fTtcblx0fSxcblxuXHRfZ2V0Q3JlYXRlRXZlbnREYXRhOiAkLm5vb3AsXG5cblx0X2NyZWF0ZTogJC5ub29wLFxuXG5cdF9pbml0OiAkLm5vb3AsXG5cblx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0dGhpcy5fZGVzdHJveSgpO1xuXHRcdCQuZWFjaCggdGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cCwgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggdmFsdWUsIGtleSApO1xuXHRcdH0gKTtcblxuXHRcdC8vIFdlIGNhbiBwcm9iYWJseSByZW1vdmUgdGhlIHVuYmluZCBjYWxscyBpbiAyLjBcblx0XHQvLyBhbGwgZXZlbnQgYmluZGluZ3Mgc2hvdWxkIGdvIHRocm91Z2ggdGhpcy5fb24oKVxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0Lm9mZiggdGhpcy5ldmVudE5hbWVzcGFjZSApXG5cdFx0XHQucmVtb3ZlRGF0YSggdGhpcy53aWRnZXRGdWxsTmFtZSApO1xuXHRcdHRoaXMud2lkZ2V0KClcblx0XHRcdC5vZmYoIHRoaXMuZXZlbnROYW1lc3BhY2UgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiICk7XG5cblx0XHQvLyBDbGVhbiB1cCBldmVudHMgYW5kIHN0YXRlc1xuXHRcdHRoaXMuYmluZGluZ3Mub2ZmKCB0aGlzLmV2ZW50TmFtZXNwYWNlICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6ICQubm9vcCxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH0sXG5cblx0b3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgb3B0aW9ucyA9IGtleTtcblx0XHR2YXIgcGFydHM7XG5cdFx0dmFyIGN1ck9wdGlvbjtcblx0XHR2YXIgaTtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBoYXNoXG5cdFx0XHRyZXR1cm4gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgbmVzdGVkIGtleXMsIGUuZy4sIFwiZm9vLmJhclwiID0+IHsgZm9vOiB7IGJhcjogX19fIH0gfVxuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdFx0cGFydHMgPSBrZXkuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHRrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuXHRcdFx0aWYgKCBwYXJ0cy5sZW5ndGggKSB7XG5cdFx0XHRcdGN1ck9wdGlvbiA9IG9wdGlvbnNbIGtleSBdID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zWyBrZXkgXSApO1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKyApIHtcblx0XHRcdFx0XHRjdXJPcHRpb25bIHBhcnRzWyBpIF0gXSA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdIHx8IHt9O1xuXHRcdFx0XHRcdGN1ck9wdGlvbiA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGtleSA9IHBhcnRzLnBvcCgpO1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGN1ck9wdGlvblsga2V5IF0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjdXJPcHRpb25bIGtleSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1ck9wdGlvblsga2V5IF0gPSB2YWx1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zWyBrZXkgXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHRoaXMub3B0aW9uc1sga2V5IF07XG5cdFx0XHRcdH1cblx0XHRcdFx0b3B0aW9uc1sga2V5IF0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl9zZXRPcHRpb25zKCBvcHRpb25zICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0dmFyIGtleTtcblxuXHRcdGZvciAoIGtleSBpbiBvcHRpb25zICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uKCBrZXksIG9wdGlvbnNbIGtleSBdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiY2xhc3Nlc1wiICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uQ2xhc3NlcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLm9wdGlvbnNbIGtleSBdID0gdmFsdWU7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X3NldE9wdGlvbkNsYXNzZXM6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NLZXksIGVsZW1lbnRzLCBjdXJyZW50RWxlbWVudHM7XG5cblx0XHRmb3IgKCBjbGFzc0tleSBpbiB2YWx1ZSApIHtcblx0XHRcdGN1cnJlbnRFbGVtZW50cyA9IHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXBbIGNsYXNzS2V5IF07XG5cdFx0XHRpZiAoIHZhbHVlWyBjbGFzc0tleSBdID09PSB0aGlzLm9wdGlvbnMuY2xhc3Nlc1sgY2xhc3NLZXkgXSB8fFxuXHRcdFx0XHRcdCFjdXJyZW50RWxlbWVudHMgfHxcblx0XHRcdFx0XHQhY3VycmVudEVsZW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlIGFyZSBkb2luZyB0aGlzIHRvIGNyZWF0ZSBhIG5ldyBqUXVlcnkgb2JqZWN0IGJlY2F1c2UgdGhlIF9yZW1vdmVDbGFzcygpIGNhbGxcblx0XHRcdC8vIG9uIHRoZSBuZXh0IGxpbmUgaXMgZ29pbmcgdG8gZGVzdHJveSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGVsZW1lbnRzIGJlaW5nXG5cdFx0XHQvLyB0cmFja2VkLiBXZSBuZWVkIHRvIHNhdmUgYSBjb3B5IG9mIHRoaXMgY29sbGVjdGlvbiBzbyB0aGF0IHdlIGNhbiBhZGQgdGhlIG5ldyBjbGFzc2VzXG5cdFx0XHQvLyBiZWxvdy5cblx0XHRcdGVsZW1lbnRzID0gJCggY3VycmVudEVsZW1lbnRzLmdldCgpICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggY3VycmVudEVsZW1lbnRzLCBjbGFzc0tleSApO1xuXG5cdFx0XHQvLyBXZSBkb24ndCB1c2UgX2FkZENsYXNzKCkgaGVyZSwgYmVjYXVzZSB0aGF0IHVzZXMgdGhpcy5vcHRpb25zLmNsYXNzZXNcblx0XHRcdC8vIGZvciBnZW5lcmF0aW5nIHRoZSBzdHJpbmcgb2YgY2xhc3Nlcy4gV2Ugd2FudCB0byB1c2UgdGhlIHZhbHVlIHBhc3NlZCBpbiBmcm9tXG5cdFx0XHQvLyBfc2V0T3B0aW9uKCksIHRoaXMgaXMgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgY2xhc3NlcyBvcHRpb24gd2hpY2ggd2FzIHBhc3NlZCB0b1xuXHRcdFx0Ly8gX3NldE9wdGlvbigpLiBXZSBwYXNzIHRoaXMgdmFsdWUgZGlyZWN0bHkgdG8gX2NsYXNzZXMoKS5cblx0XHRcdGVsZW1lbnRzLmFkZENsYXNzKCB0aGlzLl9jbGFzc2VzKCB7XG5cdFx0XHRcdGVsZW1lbnQ6IGVsZW1lbnRzLFxuXHRcdFx0XHRrZXlzOiBjbGFzc0tleSxcblx0XHRcdFx0Y2xhc3NlczogdmFsdWUsXG5cdFx0XHRcdGFkZDogdHJ1ZVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCB0aGlzLndpZGdldCgpLCB0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWRcIiwgbnVsbCwgISF2YWx1ZSApO1xuXG5cdFx0Ly8gSWYgdGhlIHdpZGdldCBpcyBiZWNvbWluZyBkaXNhYmxlZCwgdGhlbiBub3RoaW5nIGlzIGludGVyYWN0aXZlXG5cdFx0aWYgKCB2YWx1ZSApIHtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhvdmVyYWJsZSwgbnVsbCwgXCJ1aS1zdGF0ZS1ob3ZlclwiICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5mb2N1c2FibGUsIG51bGwsIFwidWktc3RhdGUtZm9jdXNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRlbmFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZXRPcHRpb25zKCB7IGRpc2FibGVkOiBmYWxzZSB9ICk7XG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoIHsgZGlzYWJsZWQ6IHRydWUgfSApO1xuXHR9LFxuXG5cdF9jbGFzc2VzOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgZnVsbCA9IFtdO1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCgge1xuXHRcdFx0ZWxlbWVudDogdGhpcy5lbGVtZW50LFxuXHRcdFx0Y2xhc3NlczogdGhpcy5vcHRpb25zLmNsYXNzZXMgfHwge31cblx0XHR9LCBvcHRpb25zICk7XG5cblx0XHRmdW5jdGlvbiBiaW5kUmVtb3ZlRXZlbnQoKSB7XG5cdFx0XHR2YXIgbm9kZXNUb0JpbmQgPSBbXTtcblxuXHRcdFx0b3B0aW9ucy5lbGVtZW50LmVhY2goIGZ1bmN0aW9uKCBfLCBlbGVtZW50ICkge1xuXHRcdFx0XHR2YXIgaXNUcmFja2VkID0gJC5tYXAoIHRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXAsIGZ1bmN0aW9uKCBlbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudHM7XG5cdFx0XHRcdH0gKVxuXHRcdFx0XHRcdC5zb21lKCBmdW5jdGlvbiggZWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudHMuaXMoIGVsZW1lbnQgKTtcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0aWYgKCAhaXNUcmFja2VkICkge1xuXHRcdFx0XHRcdG5vZGVzVG9CaW5kLnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGF0Ll9vbiggJCggbm9kZXNUb0JpbmQgKSwge1xuXHRcdFx0XHRyZW1vdmU6IFwiX3VudHJhY2tDbGFzc2VzRWxlbWVudFwiXG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcHJvY2Vzc0NsYXNzU3RyaW5nKCBjbGFzc2VzLCBjaGVja09wdGlvbiApIHtcblx0XHRcdHZhciBjdXJyZW50LCBpO1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRjdXJyZW50ID0gdGhhdC5jbGFzc2VzRWxlbWVudExvb2t1cFsgY2xhc3Nlc1sgaSBdIF0gfHwgJCgpO1xuXHRcdFx0XHRpZiAoIG9wdGlvbnMuYWRkICkge1xuXHRcdFx0XHRcdGJpbmRSZW1vdmVFdmVudCgpO1xuXHRcdFx0XHRcdGN1cnJlbnQgPSAkKCAkLnVuaXF1ZVNvcnQoIGN1cnJlbnQuZ2V0KCkuY29uY2F0KCBvcHRpb25zLmVsZW1lbnQuZ2V0KCkgKSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3VycmVudCA9ICQoIGN1cnJlbnQubm90KCBvcHRpb25zLmVsZW1lbnQgKS5nZXQoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXBbIGNsYXNzZXNbIGkgXSBdID0gY3VycmVudDtcblx0XHRcdFx0ZnVsbC5wdXNoKCBjbGFzc2VzWyBpIF0gKTtcblx0XHRcdFx0aWYgKCBjaGVja09wdGlvbiAmJiBvcHRpb25zLmNsYXNzZXNbIGNsYXNzZXNbIGkgXSBdICkge1xuXHRcdFx0XHRcdGZ1bGwucHVzaCggb3B0aW9ucy5jbGFzc2VzWyBjbGFzc2VzWyBpIF0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLmtleXMgKSB7XG5cdFx0XHRwcm9jZXNzQ2xhc3NTdHJpbmcoIG9wdGlvbnMua2V5cy5tYXRjaCggL1xcUysvZyApIHx8IFtdLCB0cnVlICk7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5leHRyYSApIHtcblx0XHRcdHByb2Nlc3NDbGFzc1N0cmluZyggb3B0aW9ucy5leHRyYS5tYXRjaCggL1xcUysvZyApIHx8IFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bGwuam9pbiggXCIgXCIgKTtcblx0fSxcblxuXHRfdW50cmFja0NsYXNzZXNFbGVtZW50OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcdCQuZWFjaCggdGhhdC5jbGFzc2VzRWxlbWVudExvb2t1cCwgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoICQuaW5BcnJheSggZXZlbnQudGFyZ2V0LCB2YWx1ZSApICE9PSAtMSApIHtcblx0XHRcdFx0dGhhdC5jbGFzc2VzRWxlbWVudExvb2t1cFsga2V5IF0gPSAkKCB2YWx1ZS5ub3QoIGV2ZW50LnRhcmdldCApLmdldCgpICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5fb2ZmKCAkKCBldmVudC50YXJnZXQgKSApO1xuXHR9LFxuXG5cdF9yZW1vdmVDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGtleXMsIGV4dHJhICkge1xuXHRcdHJldHVybiB0aGlzLl90b2dnbGVDbGFzcyggZWxlbWVudCwga2V5cywgZXh0cmEsIGZhbHNlICk7XG5cdH0sXG5cblx0X2FkZENsYXNzOiBmdW5jdGlvbiggZWxlbWVudCwga2V5cywgZXh0cmEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3RvZ2dsZUNsYXNzKCBlbGVtZW50LCBrZXlzLCBleHRyYSwgdHJ1ZSApO1xuXHR9LFxuXG5cdF90b2dnbGVDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGtleXMsIGV4dHJhLCBhZGQgKSB7XG5cdFx0YWRkID0gKCB0eXBlb2YgYWRkID09PSBcImJvb2xlYW5cIiApID8gYWRkIDogZXh0cmE7XG5cdFx0dmFyIHNoaWZ0ID0gKCB0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIiB8fCBlbGVtZW50ID09PSBudWxsICksXG5cdFx0XHRvcHRpb25zID0ge1xuXHRcdFx0XHRleHRyYTogc2hpZnQgPyBrZXlzIDogZXh0cmEsXG5cdFx0XHRcdGtleXM6IHNoaWZ0ID8gZWxlbWVudCA6IGtleXMsXG5cdFx0XHRcdGVsZW1lbnQ6IHNoaWZ0ID8gdGhpcy5lbGVtZW50IDogZWxlbWVudCxcblx0XHRcdFx0YWRkOiBhZGRcblx0XHRcdH07XG5cdFx0b3B0aW9ucy5lbGVtZW50LnRvZ2dsZUNsYXNzKCB0aGlzLl9jbGFzc2VzKCBvcHRpb25zICksIGFkZCApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9vbjogZnVuY3Rpb24oIHN1cHByZXNzRGlzYWJsZWRDaGVjaywgZWxlbWVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGRlbGVnYXRlRWxlbWVudDtcblx0XHR2YXIgaW5zdGFuY2UgPSB0aGlzO1xuXG5cdFx0Ly8gTm8gc3VwcHJlc3NEaXNhYmxlZENoZWNrIGZsYWcsIHNodWZmbGUgYXJndW1lbnRzXG5cdFx0aWYgKCB0eXBlb2Ygc3VwcHJlc3NEaXNhYmxlZENoZWNrICE9PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdGhhbmRsZXJzID0gZWxlbWVudDtcblx0XHRcdGVsZW1lbnQgPSBzdXBwcmVzc0Rpc2FibGVkQ2hlY2s7XG5cdFx0XHRzdXBwcmVzc0Rpc2FibGVkQ2hlY2sgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBObyBlbGVtZW50IGFyZ3VtZW50LCBzaHVmZmxlIGFuZCB1c2UgdGhpcy5lbGVtZW50XG5cdFx0aWYgKCAhaGFuZGxlcnMgKSB7XG5cdFx0XHRoYW5kbGVycyA9IGVsZW1lbnQ7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0ZGVsZWdhdGVFbGVtZW50ID0gdGhpcy53aWRnZXQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbWVudCA9IGRlbGVnYXRlRWxlbWVudCA9ICQoIGVsZW1lbnQgKTtcblx0XHRcdHRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmFkZCggZWxlbWVudCApO1xuXHRcdH1cblxuXHRcdCQuZWFjaCggaGFuZGxlcnMsIGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlciApIHtcblx0XHRcdGZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHtcblxuXHRcdFx0XHQvLyBBbGxvdyB3aWRnZXRzIHRvIGN1c3RvbWl6ZSB0aGUgZGlzYWJsZWQgaGFuZGxpbmdcblx0XHRcdFx0Ly8gLSBkaXNhYmxlZCBhcyBhbiBhcnJheSBpbnN0ZWFkIG9mIGJvb2xlYW5cblx0XHRcdFx0Ly8gLSBkaXNhYmxlZCBjbGFzcyBhcyBtZXRob2QgZm9yIGRpc2FibGluZyBpbmRpdmlkdWFsIHBhcnRzXG5cdFx0XHRcdGlmICggIXN1cHByZXNzRGlzYWJsZWRDaGVjayAmJlxuXHRcdFx0XHRcdFx0KCBpbnN0YW5jZS5vcHRpb25zLmRpc2FibGVkID09PSB0cnVlIHx8XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuaGFzQ2xhc3MoIFwidWktc3RhdGUtZGlzYWJsZWRcIiApICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAoIHR5cGVvZiBoYW5kbGVyID09PSBcInN0cmluZ1wiID8gaW5zdGFuY2VbIGhhbmRsZXIgXSA6IGhhbmRsZXIgKVxuXHRcdFx0XHRcdC5hcHBseSggaW5zdGFuY2UsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb3B5IHRoZSBndWlkIHNvIGRpcmVjdCB1bmJpbmRpbmcgd29ya3Ncblx0XHRcdGlmICggdHlwZW9mIGhhbmRsZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdGhhbmRsZXJQcm94eS5ndWlkID0gaGFuZGxlci5ndWlkID1cblx0XHRcdFx0XHRoYW5kbGVyLmd1aWQgfHwgaGFuZGxlclByb3h5Lmd1aWQgfHwgJC5ndWlkKys7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBtYXRjaCA9IGV2ZW50Lm1hdGNoKCAvXihbXFx3Oi1dKilcXHMqKC4qKSQvICk7XG5cdFx0XHR2YXIgZXZlbnROYW1lID0gbWF0Y2hbIDEgXSArIGluc3RhbmNlLmV2ZW50TmFtZXNwYWNlO1xuXHRcdFx0dmFyIHNlbGVjdG9yID0gbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0ZGVsZWdhdGVFbGVtZW50Lm9uKCBldmVudE5hbWUsIHNlbGVjdG9yLCBoYW5kbGVyUHJveHkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnQub24oIGV2ZW50TmFtZSwgaGFuZGxlclByb3h5ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9vZmY6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudE5hbWUgKSB7XG5cdFx0ZXZlbnROYW1lID0gKCBldmVudE5hbWUgfHwgXCJcIiApLnNwbGl0KCBcIiBcIiApLmpvaW4oIHRoaXMuZXZlbnROYW1lc3BhY2UgKyBcIiBcIiApICtcblx0XHRcdHRoaXMuZXZlbnROYW1lc3BhY2U7XG5cdFx0ZWxlbWVudC5vZmYoIGV2ZW50TmFtZSApO1xuXG5cdFx0Ly8gQ2xlYXIgdGhlIHN0YWNrIHRvIGF2b2lkIG1lbW9yeSBsZWFrcyAoIzEwMDU2KVxuXHRcdHRoaXMuYmluZGluZ3MgPSAkKCB0aGlzLmJpbmRpbmdzLm5vdCggZWxlbWVudCApLmdldCgpICk7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSAkKCB0aGlzLmZvY3VzYWJsZS5ub3QoIGVsZW1lbnQgKS5nZXQoKSApO1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gJCggdGhpcy5ob3ZlcmFibGUubm90KCBlbGVtZW50ICkuZ2V0KCkgKTtcblx0fSxcblxuXHRfZGVsYXk6IGZ1bmN0aW9uKCBoYW5kbGVyLCBkZWxheSApIHtcblx0XHRmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7XG5cdFx0XHRyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gXCJzdHJpbmdcIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyIClcblx0XHRcdFx0LmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7XG5cdFx0fVxuXHRcdHZhciBpbnN0YW5jZSA9IHRoaXM7XG5cdFx0cmV0dXJuIHNldFRpbWVvdXQoIGhhbmRsZXJQcm94eSwgZGVsYXkgfHwgMCApO1xuXHR9LFxuXG5cdF9ob3ZlcmFibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gdGhpcy5ob3ZlcmFibGUuYWRkKCBlbGVtZW50ICk7XG5cdFx0dGhpcy5fb24oIGVsZW1lbnQsIHtcblx0XHRcdG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSwgbnVsbCwgXCJ1aS1zdGF0ZS1ob3ZlclwiICk7XG5cdFx0XHR9LFxuXHRcdFx0bW91c2VsZWF2ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X2ZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSB0aGlzLmZvY3VzYWJsZS5hZGQoIGVsZW1lbnQgKTtcblx0XHR0aGlzLl9vbiggZWxlbWVudCwge1xuXHRcdFx0Zm9jdXNpbjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHRcdH0sXG5cdFx0XHRmb2N1c291dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHtcblx0XHR2YXIgcHJvcCwgb3JpZztcblx0XHR2YXIgY2FsbGJhY2sgPSB0aGlzLm9wdGlvbnNbIHR5cGUgXTtcblxuXHRcdGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdGV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTtcblx0XHRldmVudC50eXBlID0gKCB0eXBlID09PSB0aGlzLndpZGdldEV2ZW50UHJlZml4ID9cblx0XHRcdHR5cGUgOlxuXHRcdFx0dGhpcy53aWRnZXRFdmVudFByZWZpeCArIHR5cGUgKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0Ly8gVGhlIG9yaWdpbmFsIGV2ZW50IG1heSBjb21lIGZyb20gYW55IGVsZW1lbnRcblx0XHQvLyBzbyB3ZSBuZWVkIHRvIHJlc2V0IHRoZSB0YXJnZXQgb24gdGhlIG5ldyBldmVudFxuXHRcdGV2ZW50LnRhcmdldCA9IHRoaXMuZWxlbWVudFsgMCBdO1xuXG5cdFx0Ly8gQ29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudFxuXHRcdG9yaWcgPSBldmVudC5vcmlnaW5hbEV2ZW50O1xuXHRcdGlmICggb3JpZyApIHtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0aWYgKCAhKCBwcm9wIGluIGV2ZW50ICkgKSB7XG5cdFx0XHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudC50cmlnZ2VyKCBldmVudCwgZGF0YSApO1xuXHRcdHJldHVybiAhKCB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMuZWxlbWVudFsgMCBdLCBbIGV2ZW50IF0uY29uY2F0KCBkYXRhICkgKSA9PT0gZmFsc2UgfHxcblx0XHRcdGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICk7XG5cdH1cbn07XG5cbiQuZWFjaCggeyBzaG93OiBcImZhZGVJblwiLCBoaWRlOiBcImZhZGVPdXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBkZWZhdWx0RWZmZWN0ICkge1xuXHQkLldpZGdldC5wcm90b3R5cGVbIFwiX1wiICsgbWV0aG9kIF0gPSBmdW5jdGlvbiggZWxlbWVudCwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB7IGVmZmVjdDogb3B0aW9ucyB9O1xuXHRcdH1cblxuXHRcdHZhciBoYXNPcHRpb25zO1xuXHRcdHZhciBlZmZlY3ROYW1lID0gIW9wdGlvbnMgP1xuXHRcdFx0bWV0aG9kIDpcblx0XHRcdG9wdGlvbnMgPT09IHRydWUgfHwgdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgP1xuXHRcdFx0XHRkZWZhdWx0RWZmZWN0IDpcblx0XHRcdFx0b3B0aW9ucy5lZmZlY3QgfHwgZGVmYXVsdEVmZmVjdDtcblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRvcHRpb25zID0geyBkdXJhdGlvbjogb3B0aW9ucyB9O1xuXHRcdH0gZWxzZSBpZiAoIG9wdGlvbnMgPT09IHRydWUgKSB7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0fVxuXG5cdFx0aGFzT3B0aW9ucyA9ICEkLmlzRW1wdHlPYmplY3QoIG9wdGlvbnMgKTtcblx0XHRvcHRpb25zLmNvbXBsZXRlID0gY2FsbGJhY2s7XG5cblx0XHRpZiAoIG9wdGlvbnMuZGVsYXkgKSB7XG5cdFx0XHRlbGVtZW50LmRlbGF5KCBvcHRpb25zLmRlbGF5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBoYXNPcHRpb25zICYmICQuZWZmZWN0cyAmJiAkLmVmZmVjdHMuZWZmZWN0WyBlZmZlY3ROYW1lIF0gKSB7XG5cdFx0XHRlbGVtZW50WyBtZXRob2QgXSggb3B0aW9ucyApO1xuXHRcdH0gZWxzZSBpZiAoIGVmZmVjdE5hbWUgIT09IG1ldGhvZCAmJiBlbGVtZW50WyBlZmZlY3ROYW1lIF0gKSB7XG5cdFx0XHRlbGVtZW50WyBlZmZlY3ROYW1lIF0oIG9wdGlvbnMuZHVyYXRpb24sIG9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtZW50LnF1ZXVlKCBmdW5jdGlvbiggbmV4dCApIHtcblx0XHRcdFx0JCggdGhpcyApWyBtZXRob2QgXSgpO1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGVsZW1lbnRbIDAgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5leHQoKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbnJldHVybiAkLndpZGdldDtcblxufSApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIsIFwiLi92ZXJzaW9uXCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKSggZnVuY3Rpb24oICQgKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuLy8gVGhpcyBmaWxlIGlzIGRlcHJlY2F0ZWRcbnJldHVybiAkLnVpLmllID0gISEvbXNpZSBbXFx3Ll0rLy5leGVjKCBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkgKTtcbn0gKTtcbiIsIi8qIVxuICogalF1ZXJ5IFVJIFNvcnRhYmxlIDEuMTMuMlxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBTb3J0YWJsZVxuLy8+Pmdyb3VwOiBJbnRlcmFjdGlvbnNcbi8vPj5kZXNjcmlwdGlvbjogRW5hYmxlcyBpdGVtcyBpbiBhIGxpc3QgdG8gYmUgc29ydGVkIHVzaW5nIHRoZSBtb3VzZS5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9zb3J0YWJsZS9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9zb3J0YWJsZS9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9zb3J0YWJsZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4vbW91c2VcIixcblx0XHRcdFwiLi4vZGF0YVwiLFxuXHRcdFx0XCIuLi9pZVwiLFxuXHRcdFx0XCIuLi9zY3JvbGwtcGFyZW50XCIsXG5cdFx0XHRcIi4uL3ZlcnNpb25cIixcblx0XHRcdFwiLi4vd2lkZ2V0XCJcblx0XHRdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSApKCBmdW5jdGlvbiggJCApIHtcblwidXNlIHN0cmljdFwiO1xuXG5yZXR1cm4gJC53aWRnZXQoIFwidWkuc29ydGFibGVcIiwgJC51aS5tb3VzZSwge1xuXHR2ZXJzaW9uOiBcIjEuMTMuMlwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJzb3J0XCIsXG5cdHJlYWR5OiBmYWxzZSxcblx0b3B0aW9uczoge1xuXHRcdGFwcGVuZFRvOiBcInBhcmVudFwiLFxuXHRcdGF4aXM6IGZhbHNlLFxuXHRcdGNvbm5lY3RXaXRoOiBmYWxzZSxcblx0XHRjb250YWlubWVudDogZmFsc2UsXG5cdFx0Y3Vyc29yOiBcImF1dG9cIixcblx0XHRjdXJzb3JBdDogZmFsc2UsXG5cdFx0ZHJvcE9uRW1wdHk6IHRydWUsXG5cdFx0Zm9yY2VQbGFjZWhvbGRlclNpemU6IGZhbHNlLFxuXHRcdGZvcmNlSGVscGVyU2l6ZTogZmFsc2UsXG5cdFx0Z3JpZDogZmFsc2UsXG5cdFx0aGFuZGxlOiBmYWxzZSxcblx0XHRoZWxwZXI6IFwib3JpZ2luYWxcIixcblx0XHRpdGVtczogXCI+ICpcIixcblx0XHRvcGFjaXR5OiBmYWxzZSxcblx0XHRwbGFjZWhvbGRlcjogZmFsc2UsXG5cdFx0cmV2ZXJ0OiBmYWxzZSxcblx0XHRzY3JvbGw6IHRydWUsXG5cdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDIwLFxuXHRcdHNjcm9sbFNwZWVkOiAyMCxcblx0XHRzY29wZTogXCJkZWZhdWx0XCIsXG5cdFx0dG9sZXJhbmNlOiBcImludGVyc2VjdFwiLFxuXHRcdHpJbmRleDogMTAwMCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGFjdGl2YXRlOiBudWxsLFxuXHRcdGJlZm9yZVN0b3A6IG51bGwsXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdGRlYWN0aXZhdGU6IG51bGwsXG5cdFx0b3V0OiBudWxsLFxuXHRcdG92ZXI6IG51bGwsXG5cdFx0cmVjZWl2ZTogbnVsbCxcblx0XHRyZW1vdmU6IG51bGwsXG5cdFx0c29ydDogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsLFxuXHRcdHVwZGF0ZTogbnVsbFxuXHR9LFxuXG5cdF9pc092ZXJBeGlzOiBmdW5jdGlvbiggeCwgcmVmZXJlbmNlLCBzaXplICkge1xuXHRcdHJldHVybiAoIHggPj0gcmVmZXJlbmNlICkgJiYgKCB4IDwgKCByZWZlcmVuY2UgKyBzaXplICkgKTtcblx0fSxcblxuXHRfaXNGbG9hdGluZzogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0cmV0dXJuICggL2xlZnR8cmlnaHQvICkudGVzdCggaXRlbS5jc3MoIFwiZmxvYXRcIiApICkgfHxcblx0XHRcdCggL2lubGluZXx0YWJsZS1jZWxsLyApLnRlc3QoIGl0ZW0uY3NzKCBcImRpc3BsYXlcIiApICk7XG5cdH0sXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jb250YWluZXJDYWNoZSA9IHt9O1xuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLXNvcnRhYmxlXCIgKTtcblxuXHRcdC8vR2V0IHRoZSBpdGVtc1xuXHRcdHRoaXMucmVmcmVzaCgpO1xuXG5cdFx0Ly9MZXQncyBkZXRlcm1pbmUgdGhlIHBhcmVudCdzIG9mZnNldFxuXHRcdHRoaXMub2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpO1xuXG5cdFx0Ly9Jbml0aWFsaXplIG1vdXNlIGV2ZW50cyBmb3IgaW50ZXJhY3Rpb25cblx0XHR0aGlzLl9tb3VzZUluaXQoKTtcblxuXHRcdHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpO1xuXG5cdFx0Ly9XZSdyZSByZWFkeSB0byBnb1xuXHRcdHRoaXMucmVhZHkgPSB0cnVlO1xuXG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImhhbmRsZVwiICkge1xuXHRcdFx0dGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRIYW5kbGVDbGFzc05hbWU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5lbGVtZW50LmZpbmQoIFwiLnVpLXNvcnRhYmxlLWhhbmRsZVwiICksIFwidWktc29ydGFibGUtaGFuZGxlXCIgKTtcblx0XHQkLmVhY2goIHRoaXMuaXRlbXMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhhdC5fYWRkQ2xhc3MoXG5cdFx0XHRcdHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oYW5kbGUgP1xuXHRcdFx0XHRcdHRoaXMuaXRlbS5maW5kKCB0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGFuZGxlICkgOlxuXHRcdFx0XHRcdHRoaXMuaXRlbSxcblx0XHRcdFx0XCJ1aS1zb3J0YWJsZS1oYW5kbGVcIlxuXHRcdFx0KTtcblx0XHR9ICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX21vdXNlRGVzdHJveSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0dGhpcy5pdGVtc1sgaSBdLml0ZW0ucmVtb3ZlRGF0YSggdGhpcy53aWRnZXROYW1lICsgXCItaXRlbVwiICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oIGV2ZW50LCBvdmVycmlkZUhhbmRsZSApIHtcblx0XHR2YXIgY3VycmVudEl0ZW0gPSBudWxsLFxuXHRcdFx0dmFsaWRIYW5kbGUgPSBmYWxzZSxcblx0XHRcdHRoYXQgPSB0aGlzO1xuXG5cdFx0aWYgKCB0aGlzLnJldmVydGluZyApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvL1dlIGhhdmUgdG8gcmVmcmVzaCB0aGUgaXRlbXMgZGF0YSBvbmNlIGZpcnN0XG5cdFx0dGhpcy5fcmVmcmVzaEl0ZW1zKCBldmVudCApO1xuXG5cdFx0Ly9GaW5kIG91dCBpZiB0aGUgY2xpY2tlZCBub2RlIChvciBvbmUgb2YgaXRzIHBhcmVudHMpIGlzIGEgYWN0dWFsIGl0ZW0gaW4gdGhpcy5pdGVtc1xuXHRcdCQoIGV2ZW50LnRhcmdldCApLnBhcmVudHMoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggJC5kYXRhKCB0aGlzLCB0aGF0LndpZGdldE5hbWUgKyBcIi1pdGVtXCIgKSA9PT0gdGhhdCApIHtcblx0XHRcdFx0Y3VycmVudEl0ZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0aWYgKCAkLmRhdGEoIGV2ZW50LnRhcmdldCwgdGhhdC53aWRnZXROYW1lICsgXCItaXRlbVwiICkgPT09IHRoYXQgKSB7XG5cdFx0XHRjdXJyZW50SXRlbSA9ICQoIGV2ZW50LnRhcmdldCApO1xuXHRcdH1cblxuXHRcdGlmICggIWN1cnJlbnRJdGVtICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5oYW5kbGUgJiYgIW92ZXJyaWRlSGFuZGxlICkge1xuXHRcdFx0JCggdGhpcy5vcHRpb25zLmhhbmRsZSwgY3VycmVudEl0ZW0gKS5maW5kKCBcIipcIiApLmFkZEJhY2soKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBldmVudC50YXJnZXQgKSB7XG5cdFx0XHRcdFx0dmFsaWRIYW5kbGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHRpZiAoICF2YWxpZEhhbmRsZSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuY3VycmVudEl0ZW0gPSBjdXJyZW50SXRlbTtcblx0XHR0aGlzLl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcygpO1xuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0X21vdXNlU3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgb3ZlcnJpZGVIYW5kbGUsIG5vQWN0aXZhdGlvbiApIHtcblxuXHRcdHZhciBpLCBib2R5LFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblxuXHRcdHRoaXMuY3VycmVudENvbnRhaW5lciA9IHRoaXM7XG5cblx0XHQvL1dlIG9ubHkgbmVlZCB0byBjYWxsIHJlZnJlc2hQb3NpdGlvbnMsIGJlY2F1c2UgdGhlIHJlZnJlc2hJdGVtcyBjYWxsIGhhcyBiZWVuIG1vdmVkIHRvXG5cdFx0Ly8gbW91c2VDYXB0dXJlXG5cdFx0dGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7XG5cblx0XHQvL1ByZXBhcmUgdGhlIGRyYWdnZWQgaXRlbXMgcGFyZW50XG5cdFx0dGhpcy5hcHBlbmRUbyA9ICQoIG8uYXBwZW5kVG8gIT09IFwicGFyZW50XCIgP1xuXHRcdFx0XHRvLmFwcGVuZFRvIDpcblx0XHRcdFx0dGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKSApO1xuXG5cdFx0Ly9DcmVhdGUgYW5kIGFwcGVuZCB0aGUgdmlzaWJsZSBoZWxwZXJcblx0XHR0aGlzLmhlbHBlciA9IHRoaXMuX2NyZWF0ZUhlbHBlciggZXZlbnQgKTtcblxuXHRcdC8vQ2FjaGUgdGhlIGhlbHBlciBzaXplXG5cdFx0dGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpO1xuXG5cdFx0Lypcblx0XHQgKiAtIFBvc2l0aW9uIGdlbmVyYXRpb24gLVxuXHRcdCAqIFRoaXMgYmxvY2sgZ2VuZXJhdGVzIGV2ZXJ5dGhpbmcgcG9zaXRpb24gcmVsYXRlZCAtIGl0J3MgdGhlIGNvcmUgb2YgZHJhZ2dhYmxlcy5cblx0XHQgKi9cblxuXHRcdC8vQ2FjaGUgdGhlIG1hcmdpbnMgb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnRcblx0XHR0aGlzLl9jYWNoZU1hcmdpbnMoKTtcblxuXHRcdC8vVGhlIGVsZW1lbnQncyBhYnNvbHV0ZSBwb3NpdGlvbiBvbiB0aGUgcGFnZSBtaW51cyBtYXJnaW5zXG5cdFx0dGhpcy5vZmZzZXQgPSB0aGlzLmN1cnJlbnRJdGVtLm9mZnNldCgpO1xuXHRcdHRoaXMub2Zmc2V0ID0ge1xuXHRcdFx0dG9wOiB0aGlzLm9mZnNldC50b3AgLSB0aGlzLm1hcmdpbnMudG9wLFxuXHRcdFx0bGVmdDogdGhpcy5vZmZzZXQubGVmdCAtIHRoaXMubWFyZ2lucy5sZWZ0XG5cdFx0fTtcblxuXHRcdCQuZXh0ZW5kKCB0aGlzLm9mZnNldCwge1xuXHRcdFx0Y2xpY2s6IHsgLy9XaGVyZSB0aGUgY2xpY2sgaGFwcGVuZWQsIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50XG5cdFx0XHRcdGxlZnQ6IGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQubGVmdCxcblx0XHRcdFx0dG9wOiBldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LnRvcFxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVGhpcyBpcyBhIHJlbGF0aXZlIHRvIGFic29sdXRlIHBvc2l0aW9uIG1pbnVzIHRoZSBhY3R1YWwgcG9zaXRpb24gY2FsY3VsYXRpb24gLVxuXHRcdFx0Ly8gb25seSB1c2VkIGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIGhlbHBlclxuXHRcdFx0cmVsYXRpdmU6IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KClcblx0XHR9ICk7XG5cblx0XHQvLyBBZnRlciB3ZSBnZXQgdGhlIGhlbHBlciBvZmZzZXQsIGJ1dCBiZWZvcmUgd2UgZ2V0IHRoZSBwYXJlbnQgb2Zmc2V0IHdlIGNhblxuXHRcdC8vIGNoYW5nZSB0aGUgaGVscGVyJ3MgcG9zaXRpb24gdG8gYWJzb2x1dGVcblx0XHQvLyBUT0RPOiBTdGlsbCBuZWVkIHRvIGZpZ3VyZSBvdXQgYSB3YXkgdG8gbWFrZSByZWxhdGl2ZSBzb3J0aW5nIHBvc3NpYmxlXG5cdFx0dGhpcy5oZWxwZXIuY3NzKCBcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIiApO1xuXHRcdHRoaXMuY3NzUG9zaXRpb24gPSB0aGlzLmhlbHBlci5jc3MoIFwicG9zaXRpb25cIiApO1xuXG5cdFx0Ly9BZGp1c3QgdGhlIG1vdXNlIG9mZnNldCByZWxhdGl2ZSB0byB0aGUgaGVscGVyIGlmIFwiY3Vyc29yQXRcIiBpcyBzdXBwbGllZFxuXHRcdGlmICggby5jdXJzb3JBdCApIHtcblx0XHRcdHRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoIG8uY3Vyc29yQXQgKTtcblx0XHR9XG5cblx0XHQvL0NhY2hlIHRoZSBmb3JtZXIgRE9NIHBvc2l0aW9uXG5cdFx0dGhpcy5kb21Qb3NpdGlvbiA9IHtcblx0XHRcdHByZXY6IHRoaXMuY3VycmVudEl0ZW0ucHJldigpWyAwIF0sXG5cdFx0XHRwYXJlbnQ6IHRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbIDAgXVxuXHRcdH07XG5cblx0XHQvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCB0aGUgb3JpZ2luYWwsIGhpZGUgdGhlIG9yaWdpbmFsIHNvIGl0J3Mgbm90IHBsYXlpbmcgYW55IHJvbGUgZHVyaW5nXG5cdFx0Ly8gdGhlIGRyYWcsIHdvbid0IGNhdXNlIGFueXRoaW5nIGJhZCB0aGlzIHdheVxuXHRcdGlmICggdGhpcy5oZWxwZXJbIDAgXSAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0dGhpcy5jdXJyZW50SXRlbS5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0Ly9DcmVhdGUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0dGhpcy5fY3JlYXRlUGxhY2Vob2xkZXIoKTtcblxuXHRcdC8vR2V0IHRoZSBuZXh0IHNjcm9sbGluZyBwYXJlbnRcblx0XHR0aGlzLnNjcm9sbFBhcmVudCA9IHRoaXMucGxhY2Vob2xkZXIuc2Nyb2xsUGFyZW50KCk7XG5cblx0XHQkLmV4dGVuZCggdGhpcy5vZmZzZXQsIHtcblx0XHRcdHBhcmVudDogdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KClcblx0XHR9ICk7XG5cblx0XHQvL1NldCBhIGNvbnRhaW5tZW50IGlmIGdpdmVuIGluIHRoZSBvcHRpb25zXG5cdFx0aWYgKCBvLmNvbnRhaW5tZW50ICkge1xuXHRcdFx0dGhpcy5fc2V0Q29udGFpbm1lbnQoKTtcblx0XHR9XG5cblx0XHRpZiAoIG8uY3Vyc29yICYmIG8uY3Vyc29yICE9PSBcImF1dG9cIiApIHsgLy8gY3Vyc29yIG9wdGlvblxuXHRcdFx0Ym9keSA9IHRoaXMuZG9jdW1lbnQuZmluZCggXCJib2R5XCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdHRoaXMuc3RvcmVkQ3Vyc29yID0gYm9keS5jc3MoIFwiY3Vyc29yXCIgKTtcblx0XHRcdGJvZHkuY3NzKCBcImN1cnNvclwiLCBvLmN1cnNvciApO1xuXG5cdFx0XHR0aGlzLnN0b3JlZFN0eWxlc2hlZXQgPVxuXHRcdFx0XHQkKCBcIjxzdHlsZT4qeyBjdXJzb3I6IFwiICsgby5jdXJzb3IgKyBcIiAhaW1wb3J0YW50OyB9PC9zdHlsZT5cIiApLmFwcGVuZFRvKCBib2R5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgbmVlZCB0byBtYWtlIHN1cmUgdG8gZ3JhYiB0aGUgekluZGV4IGJlZm9yZSBzZXR0aW5nIHRoZVxuXHRcdC8vIG9wYWNpdHksIGJlY2F1c2Ugc2V0dGluZyB0aGUgb3BhY2l0eSB0byBhbnl0aGluZyBsb3dlciB0aGFuIDFcblx0XHQvLyBjYXVzZXMgdGhlIHpJbmRleCB0byBjaGFuZ2UgZnJvbSBcImF1dG9cIiB0byAwLlxuXHRcdGlmICggby56SW5kZXggKSB7IC8vIHpJbmRleCBvcHRpb25cblx0XHRcdGlmICggdGhpcy5oZWxwZXIuY3NzKCBcInpJbmRleFwiICkgKSB7XG5cdFx0XHRcdHRoaXMuX3N0b3JlZFpJbmRleCA9IHRoaXMuaGVscGVyLmNzcyggXCJ6SW5kZXhcIiApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKCBcInpJbmRleFwiLCBvLnpJbmRleCApO1xuXHRcdH1cblxuXHRcdGlmICggby5vcGFjaXR5ICkgeyAvLyBvcGFjaXR5IG9wdGlvblxuXHRcdFx0aWYgKCB0aGlzLmhlbHBlci5jc3MoIFwib3BhY2l0eVwiICkgKSB7XG5cdFx0XHRcdHRoaXMuX3N0b3JlZE9wYWNpdHkgPSB0aGlzLmhlbHBlci5jc3MoIFwib3BhY2l0eVwiICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmhlbHBlci5jc3MoIFwib3BhY2l0eVwiLCBvLm9wYWNpdHkgKTtcblx0XHR9XG5cblx0XHQvL1ByZXBhcmUgc2Nyb2xsaW5nXG5cdFx0aWYgKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLmRvY3VtZW50WyAwIF0gJiZcblx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbIDAgXS50YWdOYW1lICE9PSBcIkhUTUxcIiApIHtcblx0XHRcdHRoaXMub3ZlcmZsb3dPZmZzZXQgPSB0aGlzLnNjcm9sbFBhcmVudC5vZmZzZXQoKTtcblx0XHR9XG5cblx0XHQvL0NhbGwgY2FsbGJhY2tzXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJzdGFydFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTtcblxuXHRcdC8vUmVjYWNoZSB0aGUgaGVscGVyIHNpemVcblx0XHRpZiAoICF0aGlzLl9wcmVzZXJ2ZUhlbHBlclByb3BvcnRpb25zICkge1xuXHRcdFx0dGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpO1xuXHRcdH1cblxuXHRcdC8vUG9zdCBcImFjdGl2YXRlXCIgZXZlbnRzIHRvIHBvc3NpYmxlIGNvbnRhaW5lcnNcblx0XHRpZiAoICFub0FjdGl2YXRpb24gKSB7XG5cdFx0XHRmb3IgKCBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5fdHJpZ2dlciggXCJhY3RpdmF0ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1ByZXBhcmUgcG9zc2libGUgZHJvcHBhYmxlc1xuXHRcdGlmICggJC51aS5kZG1hbmFnZXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5jdXJyZW50ID0gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICYmICFvLmRyb3BCZWhhdmlvdXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmhlbHBlciwgXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIiApO1xuXG5cdFx0Ly9Nb3ZlIHRoZSBoZWxwZXIsIGlmIG5lZWRlZFxuXHRcdGlmICggIXRoaXMuaGVscGVyLnBhcmVudCgpLmlzKCB0aGlzLmFwcGVuZFRvICkgKSB7XG5cdFx0XHR0aGlzLmhlbHBlci5kZXRhY2goKS5hcHBlbmRUbyggdGhpcy5hcHBlbmRUbyApO1xuXG5cdFx0XHQvL1VwZGF0ZSBwb3NpdGlvblxuXHRcdFx0dGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0Ly9HZW5lcmF0ZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25cblx0XHR0aGlzLnBvc2l0aW9uID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbiggZXZlbnQgKTtcblx0XHR0aGlzLm9yaWdpbmFsUGFnZVggPSBldmVudC5wYWdlWDtcblx0XHR0aGlzLm9yaWdpbmFsUGFnZVkgPSBldmVudC5wYWdlWTtcblx0XHR0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbyggXCJhYnNvbHV0ZVwiICk7XG5cblx0XHR0aGlzLl9tb3VzZURyYWcoIGV2ZW50ICk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdF9zY3JvbGw6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHNjcm9sbGVkID0gZmFsc2U7XG5cblx0XHRpZiAoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMuZG9jdW1lbnRbIDAgXSAmJlxuXHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFsgMCBdLnRhZ05hbWUgIT09IFwiSFRNTFwiICkge1xuXG5cdFx0XHRpZiAoICggdGhpcy5vdmVyZmxvd09mZnNldC50b3AgKyB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLm9mZnNldEhlaWdodCApIC1cblx0XHRcdFx0XHRldmVudC5wYWdlWSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsVG9wID1cblx0XHRcdFx0XHRzY3JvbGxlZCA9IHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsVG9wICsgby5zY3JvbGxTcGVlZDtcblx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vdmVyZmxvd09mZnNldC50b3AgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFsgMCBdLnNjcm9sbFRvcCA9XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLnNjcm9sbFRvcCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggKCB0aGlzLm92ZXJmbG93T2Zmc2V0LmxlZnQgKyB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLm9mZnNldFdpZHRoICkgLVxuXHRcdFx0XHRcdGV2ZW50LnBhZ2VYIDwgby5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbIDAgXS5zY3JvbGxMZWZ0ID0gc2Nyb2xsZWQgPVxuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsTGVmdCArIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHR9IGVsc2UgaWYgKCBldmVudC5wYWdlWCAtIHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID1cblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFsgMCBdLnNjcm9sbExlZnQgLSBvLnNjcm9sbFNwZWVkO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSAtIHRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRzY3JvbGxlZCA9IHRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCB0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpIC0gby5zY3JvbGxTcGVlZCApO1xuXHRcdFx0fSBlbHNlIGlmICggdGhpcy53aW5kb3cuaGVpZ2h0KCkgLSAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSApIDxcblx0XHRcdFx0XHRvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRzY3JvbGxlZCA9IHRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCB0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpICsgby5zY3JvbGxTcGVlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYIC0gdGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRzY3JvbGxlZCA9IHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdChcblx0XHRcdFx0XHR0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWRcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMud2luZG93LndpZHRoKCkgLSAoIGV2ZW50LnBhZ2VYIC0gdGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkgKSA8XG5cdFx0XHRcdFx0by5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0c2Nyb2xsZWQgPSB0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoXG5cdFx0XHRcdFx0dGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2Nyb2xsZWQ7XG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpLCBpdGVtLCBpdGVtRWxlbWVudCwgaW50ZXJzZWN0aW9uLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblxuXHRcdC8vQ29tcHV0ZSB0aGUgaGVscGVycyBwb3NpdGlvblxuXHRcdHRoaXMucG9zaXRpb24gPSB0aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKCBldmVudCApO1xuXHRcdHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbyggXCJhYnNvbHV0ZVwiICk7XG5cblx0XHQvL1NldCB0aGUgaGVscGVyIHBvc2l0aW9uXG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLmF4aXMgfHwgdGhpcy5vcHRpb25zLmF4aXMgIT09IFwieVwiICkge1xuXHRcdFx0dGhpcy5oZWxwZXJbIDAgXS5zdHlsZS5sZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0ICsgXCJweFwiO1xuXHRcdH1cblx0XHRpZiAoICF0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLm9wdGlvbnMuYXhpcyAhPT0gXCJ4XCIgKSB7XG5cdFx0XHR0aGlzLmhlbHBlclsgMCBdLnN0eWxlLnRvcCA9IHRoaXMucG9zaXRpb24udG9wICsgXCJweFwiO1xuXHRcdH1cblxuXHRcdC8vRG8gc2Nyb2xsaW5nXG5cdFx0aWYgKCBvLnNjcm9sbCApIHtcblx0XHRcdGlmICggdGhpcy5fc2Nyb2xsKCBldmVudCApICE9PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvL1VwZGF0ZSBpdGVtIHBvc2l0aW9ucyB1c2VkIGluIHBvc2l0aW9uIGNoZWNrc1xuXHRcdFx0XHR0aGlzLl9yZWZyZXNoSXRlbVBvc2l0aW9ucyggdHJ1ZSApO1xuXG5cdFx0XHRcdGlmICggJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91ciApIHtcblx0XHRcdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZHJhZ0RpcmVjdGlvbiA9IHtcblx0XHRcdHZlcnRpY2FsOiB0aGlzLl9nZXREcmFnVmVydGljYWxEaXJlY3Rpb24oKSxcblx0XHRcdGhvcml6b250YWw6IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKClcblx0XHR9O1xuXG5cdFx0Ly9SZWFycmFuZ2Vcblx0XHRmb3IgKCBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblxuXHRcdFx0Ly9DYWNoZSB2YXJpYWJsZXMgYW5kIGludGVyc2VjdGlvbiwgY29udGludWUgaWYgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpdGVtID0gdGhpcy5pdGVtc1sgaSBdO1xuXHRcdFx0aXRlbUVsZW1lbnQgPSBpdGVtLml0ZW1bIDAgXTtcblx0XHRcdGludGVyc2VjdGlvbiA9IHRoaXMuX2ludGVyc2VjdHNXaXRoUG9pbnRlciggaXRlbSApO1xuXHRcdFx0aWYgKCAhaW50ZXJzZWN0aW9uICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBwdXQgdGhlIHBsYWNlaG9sZGVyIGluc2lkZSB0aGUgY3VycmVudCBDb250YWluZXIsIHNraXAgYWxsXG5cdFx0XHQvLyBpdGVtcyBmcm9tIG90aGVyIGNvbnRhaW5lcnMuIFRoaXMgd29ya3MgYmVjYXVzZSB3aGVuIG1vdmluZ1xuXHRcdFx0Ly8gYW4gaXRlbSBmcm9tIG9uZSBjb250YWluZXIgdG8gYW5vdGhlciB0aGVcblx0XHRcdC8vIGN1cnJlbnRDb250YWluZXIgaXMgc3dpdGNoZWQgYmVmb3JlIHRoZSBwbGFjZWhvbGRlciBpcyBtb3ZlZC5cblx0XHRcdC8vXG5cdFx0XHQvLyBXaXRob3V0IHRoaXMsIG1vdmluZyBpdGVtcyBpbiBcInN1Yi1zb3J0YWJsZXNcIiBjYW4gY2F1c2Vcblx0XHRcdC8vIHRoZSBwbGFjZWhvbGRlciB0byBqaXR0ZXIgYmV0d2VlbiB0aGUgb3V0ZXIgYW5kIGlubmVyIGNvbnRhaW5lci5cblx0XHRcdGlmICggaXRlbS5pbnN0YW5jZSAhPT0gdGhpcy5jdXJyZW50Q29udGFpbmVyICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2Fubm90IGludGVyc2VjdCB3aXRoIGl0c2VsZlxuXHRcdFx0Ly8gbm8gdXNlbGVzcyBhY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGRvbmUgYmVmb3JlXG5cdFx0XHQvLyBubyBhY3Rpb24gaWYgdGhlIGl0ZW0gbW92ZWQgaXMgdGhlIHBhcmVudCBvZiB0aGUgaXRlbSBjaGVja2VkXG5cdFx0XHRpZiAoIGl0ZW1FbGVtZW50ICE9PSB0aGlzLmN1cnJlbnRJdGVtWyAwIF0gJiZcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlclsgaW50ZXJzZWN0aW9uID09PSAxID9cblx0XHRcdFx0XCJuZXh0XCIgOiBcInByZXZcIiBdKClbIDAgXSAhPT0gaXRlbUVsZW1lbnQgJiZcblx0XHRcdFx0ISQuY29udGFpbnMoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSwgaXRlbUVsZW1lbnQgKSAmJlxuXHRcdFx0XHQoIHRoaXMub3B0aW9ucy50eXBlID09PSBcInNlbWktZHluYW1pY1wiID9cblx0XHRcdFx0XHQhJC5jb250YWlucyggdGhpcy5lbGVtZW50WyAwIF0sIGl0ZW1FbGVtZW50ICkgOlxuXHRcdFx0XHRcdHRydWVcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cblx0XHRcdFx0dGhpcy5kaXJlY3Rpb24gPSBpbnRlcnNlY3Rpb24gPT09IDEgPyBcImRvd25cIiA6IFwidXBcIjtcblxuXHRcdFx0XHRpZiAoIHRoaXMub3B0aW9ucy50b2xlcmFuY2UgPT09IFwicG9pbnRlclwiIHx8XG5cdFx0XHRcdFx0XHR0aGlzLl9pbnRlcnNlY3RzV2l0aFNpZGVzKCBpdGVtICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVhcnJhbmdlKCBldmVudCwgaXRlbSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vUG9zdCBldmVudHMgdG8gY29udGFpbmVyc1xuXHRcdHRoaXMuX2NvbnRhY3RDb250YWluZXJzKCBldmVudCApO1xuXG5cdFx0Ly9JbnRlcmNvbm5lY3Qgd2l0aCBkcm9wcGFibGVzXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyYWcoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly9DYWxsIGNhbGxiYWNrc1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwic29ydFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTtcblxuXHRcdHRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFicztcblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQsIG5vUHJvcGFnYXRpb24gKSB7XG5cblx0XHRpZiAoICFldmVudCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvL0lmIHdlIGFyZSB1c2luZyBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgYWJvdXQgdGhlIGRyb3Bcblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyb3AoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMucmV2ZXJ0ICkge1xuXHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRjdXIgPSB0aGlzLnBsYWNlaG9sZGVyLm9mZnNldCgpLFxuXHRcdFx0XHRheGlzID0gdGhpcy5vcHRpb25zLmF4aXMsXG5cdFx0XHRcdGFuaW1hdGlvbiA9IHt9O1xuXG5cdFx0XHRpZiAoICFheGlzIHx8IGF4aXMgPT09IFwieFwiICkge1xuXHRcdFx0XHRhbmltYXRpb24ubGVmdCA9IGN1ci5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgLSB0aGlzLm1hcmdpbnMubGVmdCArXG5cdFx0XHRcdFx0KCB0aGlzLm9mZnNldFBhcmVudFsgMCBdID09PSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSA/XG5cdFx0XHRcdFx0XHQwIDpcblx0XHRcdFx0XHRcdHRoaXMub2Zmc2V0UGFyZW50WyAwIF0uc2Nyb2xsTGVmdFxuXHRcdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFheGlzIHx8IGF4aXMgPT09IFwieVwiICkge1xuXHRcdFx0XHRhbmltYXRpb24udG9wID0gY3VyLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AgLSB0aGlzLm1hcmdpbnMudG9wICtcblx0XHRcdFx0XHQoIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gPT09IHRoaXMuZG9jdW1lbnRbIDAgXS5ib2R5ID9cblx0XHRcdFx0XHRcdDAgOlxuXHRcdFx0XHRcdFx0dGhpcy5vZmZzZXRQYXJlbnRbIDAgXS5zY3JvbGxUb3Bcblx0XHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5yZXZlcnRpbmcgPSB0cnVlO1xuXHRcdFx0JCggdGhpcy5oZWxwZXIgKS5hbmltYXRlKFxuXHRcdFx0XHRhbmltYXRpb24sXG5cdFx0XHRcdHBhcnNlSW50KCB0aGlzLm9wdGlvbnMucmV2ZXJ0LCAxMCApIHx8IDUwMCxcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dGhhdC5fY2xlYXIoIGV2ZW50ICk7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2NsZWFyKCBldmVudCwgbm9Qcm9wYWdhdGlvbiApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9LFxuXG5cdGNhbmNlbDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAoIHRoaXMuZHJhZ2dpbmcgKSB7XG5cblx0XHRcdHRoaXMuX21vdXNlVXAoIG5ldyAkLkV2ZW50KCBcIm1vdXNldXBcIiwgeyB0YXJnZXQ6IG51bGwgfSApICk7XG5cblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmhlbHBlciA9PT0gXCJvcmlnaW5hbFwiICkge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLmNzcyggdGhpcy5fc3RvcmVkQ1NTICk7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmN1cnJlbnRJdGVtLCBcInVpLXNvcnRhYmxlLWhlbHBlclwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLnNob3coKTtcblx0XHRcdH1cblxuXHRcdFx0Ly9Qb3N0IGRlYWN0aXZhdGluZyBldmVudHMgdG8gY29udGFpbmVyc1xuXHRcdFx0Zm9yICggdmFyIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLl90cmlnZ2VyKCBcImRlYWN0aXZhdGVcIiwgbnVsbCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCB0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLl90cmlnZ2VyKCBcIm91dFwiLCBudWxsLCB0aGlzLl91aUhhc2goIHRoaXMgKSApO1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMucGxhY2Vob2xkZXIgKSB7XG5cblx0XHRcdC8vJCh0aGlzLnBsYWNlaG9sZGVyWzBdKS5yZW1vdmUoKTsgd291bGQgaGF2ZSBiZWVuIHRoZSBqUXVlcnkgd2F5IC0gdW5mb3J0dW5hdGVseSxcblx0XHRcdC8vIGl0IHVuYmluZHMgQUxMIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIVxuXHRcdFx0aWYgKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlclsgMCBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMuaGVscGVyICE9PSBcIm9yaWdpbmFsXCIgJiYgdGhpcy5oZWxwZXIgJiZcblx0XHRcdFx0XHR0aGlzLmhlbHBlclsgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQkLmV4dGVuZCggdGhpcywge1xuXHRcdFx0XHRoZWxwZXI6IG51bGwsXG5cdFx0XHRcdGRyYWdnaW5nOiBmYWxzZSxcblx0XHRcdFx0cmV2ZXJ0aW5nOiBmYWxzZSxcblx0XHRcdFx0X25vRmluYWxTb3J0OiBudWxsXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggdGhpcy5kb21Qb3NpdGlvbi5wcmV2ICkge1xuXHRcdFx0XHQkKCB0aGlzLmRvbVBvc2l0aW9uLnByZXYgKS5hZnRlciggdGhpcy5jdXJyZW50SXRlbSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggdGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQgKS5wcmVwZW5kKCB0aGlzLmN1cnJlbnRJdGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCBvICkge1xuXG5cdFx0dmFyIGl0ZW1zID0gdGhpcy5fZ2V0SXRlbXNBc2pRdWVyeSggbyAmJiBvLmNvbm5lY3RlZCApLFxuXHRcdFx0c3RyID0gW107XG5cdFx0byA9IG8gfHwge307XG5cblx0XHQkKCBpdGVtcyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHJlcyA9ICggJCggby5pdGVtIHx8IHRoaXMgKS5hdHRyKCBvLmF0dHJpYnV0ZSB8fCBcImlkXCIgKSB8fCBcIlwiIClcblx0XHRcdFx0Lm1hdGNoKCBvLmV4cHJlc3Npb24gfHwgKCAvKC4rKVtcXC09X10oLispLyApICk7XG5cdFx0XHRpZiAoIHJlcyApIHtcblx0XHRcdFx0c3RyLnB1c2goXG5cdFx0XHRcdFx0KCBvLmtleSB8fCByZXNbIDEgXSArIFwiW11cIiApICtcblx0XHRcdFx0XHRcIj1cIiArICggby5rZXkgJiYgby5leHByZXNzaW9uID8gcmVzWyAxIF0gOiByZXNbIDIgXSApICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0aWYgKCAhc3RyLmxlbmd0aCAmJiBvLmtleSApIHtcblx0XHRcdHN0ci5wdXNoKCBvLmtleSArIFwiPVwiICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0ci5qb2luKCBcIiZcIiApO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24oIG8gKSB7XG5cblx0XHR2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KCBvICYmIG8uY29ubmVjdGVkICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdG8gPSBvIHx8IHt9O1xuXG5cdFx0aXRlbXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXQucHVzaCggJCggby5pdGVtIHx8IHRoaXMgKS5hdHRyKCBvLmF0dHJpYnV0ZSB8fCBcImlkXCIgKSB8fCBcIlwiICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiByZXQ7XG5cblx0fSxcblxuXHQvKiBCZSBjYXJlZnVsIHdpdGggdGhlIGZvbGxvd2luZyBjb3JlIGZ1bmN0aW9ucyAqL1xuXHRfaW50ZXJzZWN0c1dpdGg6IGZ1bmN0aW9uKCBpdGVtICkge1xuXG5cdFx0dmFyIHgxID0gdGhpcy5wb3NpdGlvbkFicy5sZWZ0LFxuXHRcdFx0eDIgPSB4MSArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG5cdFx0XHR5MSA9IHRoaXMucG9zaXRpb25BYnMudG9wLFxuXHRcdFx0eTIgPSB5MSArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuXHRcdFx0bCA9IGl0ZW0ubGVmdCxcblx0XHRcdHIgPSBsICsgaXRlbS53aWR0aCxcblx0XHRcdHQgPSBpdGVtLnRvcCxcblx0XHRcdGIgPSB0ICsgaXRlbS5oZWlnaHQsXG5cdFx0XHRkeUNsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2sudG9wLFxuXHRcdFx0ZHhDbGljayA9IHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsXG5cdFx0XHRpc092ZXJFbGVtZW50SGVpZ2h0ID0gKCB0aGlzLm9wdGlvbnMuYXhpcyA9PT0gXCJ4XCIgKSB8fCAoICggeTEgKyBkeUNsaWNrICkgPiB0ICYmXG5cdFx0XHRcdCggeTEgKyBkeUNsaWNrICkgPCBiICksXG5cdFx0XHRpc092ZXJFbGVtZW50V2lkdGggPSAoIHRoaXMub3B0aW9ucy5heGlzID09PSBcInlcIiApIHx8ICggKCB4MSArIGR4Q2xpY2sgKSA+IGwgJiZcblx0XHRcdFx0KCB4MSArIGR4Q2xpY2sgKSA8IHIgKSxcblx0XHRcdGlzT3ZlckVsZW1lbnQgPSBpc092ZXJFbGVtZW50SGVpZ2h0ICYmIGlzT3ZlckVsZW1lbnRXaWR0aDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnRvbGVyYW5jZSA9PT0gXCJwb2ludGVyXCIgfHxcblx0XHRcdHRoaXMub3B0aW9ucy5mb3JjZVBvaW50ZXJGb3JDb250YWluZXJzIHx8XG5cdFx0XHQoIHRoaXMub3B0aW9ucy50b2xlcmFuY2UgIT09IFwicG9pbnRlclwiICYmXG5cdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnNbIHRoaXMuZmxvYXRpbmcgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiIF0gPlxuXHRcdFx0XHRpdGVtWyB0aGlzLmZsb2F0aW5nID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIiBdIClcblx0XHQpIHtcblx0XHRcdHJldHVybiBpc092ZXJFbGVtZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiAoIGwgPCB4MSArICggdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIgKSAmJiAvLyBSaWdodCBIYWxmXG5cdFx0XHRcdHgyIC0gKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMiApIDwgciAmJiAvLyBMZWZ0IEhhbGZcblx0XHRcdFx0dCA8IHkxICsgKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIgKSAmJiAvLyBCb3R0b20gSGFsZlxuXHRcdFx0XHR5MiAtICggdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyICkgPCBiICk7IC8vIFRvcCBIYWxmXG5cblx0XHR9XG5cdH0sXG5cblx0X2ludGVyc2VjdHNXaXRoUG9pbnRlcjogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0dmFyIHZlcnRpY2FsRGlyZWN0aW9uLCBob3Jpem9udGFsRGlyZWN0aW9uLFxuXHRcdFx0aXNPdmVyRWxlbWVudEhlaWdodCA9ICggdGhpcy5vcHRpb25zLmF4aXMgPT09IFwieFwiICkgfHxcblx0XHRcdFx0dGhpcy5faXNPdmVyQXhpcyhcblx0XHRcdFx0XHR0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AsIGl0ZW0uaGVpZ2h0ICksXG5cdFx0XHRpc092ZXJFbGVtZW50V2lkdGggPSAoIHRoaXMub3B0aW9ucy5heGlzID09PSBcInlcIiApIHx8XG5cdFx0XHRcdHRoaXMuX2lzT3ZlckF4aXMoXG5cdFx0XHRcdFx0dGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0LCBpdGVtLndpZHRoICksXG5cdFx0XHRpc092ZXJFbGVtZW50ID0gaXNPdmVyRWxlbWVudEhlaWdodCAmJiBpc092ZXJFbGVtZW50V2lkdGg7XG5cblx0XHRpZiAoICFpc092ZXJFbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5kcmFnRGlyZWN0aW9uLnZlcnRpY2FsO1xuXHRcdGhvcml6b250YWxEaXJlY3Rpb24gPSB0aGlzLmRyYWdEaXJlY3Rpb24uaG9yaXpvbnRhbDtcblxuXHRcdHJldHVybiB0aGlzLmZsb2F0aW5nID9cblx0XHRcdCggKCBob3Jpem9udGFsRGlyZWN0aW9uID09PSBcInJpZ2h0XCIgfHwgdmVydGljYWxEaXJlY3Rpb24gPT09IFwiZG93blwiICkgPyAyIDogMSApIDpcblx0XHRcdCggdmVydGljYWxEaXJlY3Rpb24gJiYgKCB2ZXJ0aWNhbERpcmVjdGlvbiA9PT0gXCJkb3duXCIgPyAyIDogMSApICk7XG5cblx0fSxcblxuXHRfaW50ZXJzZWN0c1dpdGhTaWRlczogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cblx0XHR2YXIgaXNPdmVyQm90dG9tSGFsZiA9IHRoaXMuX2lzT3ZlckF4aXMoIHRoaXMucG9zaXRpb25BYnMudG9wICtcblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2sudG9wLCBpdGVtLnRvcCArICggaXRlbS5oZWlnaHQgLyAyICksIGl0ZW0uaGVpZ2h0ICksXG5cdFx0XHRpc092ZXJSaWdodEhhbGYgPSB0aGlzLl9pc092ZXJBeGlzKCB0aGlzLnBvc2l0aW9uQWJzLmxlZnQgK1xuXHRcdFx0XHR0aGlzLm9mZnNldC5jbGljay5sZWZ0LCBpdGVtLmxlZnQgKyAoIGl0ZW0ud2lkdGggLyAyICksIGl0ZW0ud2lkdGggKSxcblx0XHRcdHZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5kcmFnRGlyZWN0aW9uLnZlcnRpY2FsLFxuXHRcdFx0aG9yaXpvbnRhbERpcmVjdGlvbiA9IHRoaXMuZHJhZ0RpcmVjdGlvbi5ob3Jpem9udGFsO1xuXG5cdFx0aWYgKCB0aGlzLmZsb2F0aW5nICYmIGhvcml6b250YWxEaXJlY3Rpb24gKSB7XG5cdFx0XHRyZXR1cm4gKCAoIGhvcml6b250YWxEaXJlY3Rpb24gPT09IFwicmlnaHRcIiAmJiBpc092ZXJSaWdodEhhbGYgKSB8fFxuXHRcdFx0XHQoIGhvcml6b250YWxEaXJlY3Rpb24gPT09IFwibGVmdFwiICYmICFpc092ZXJSaWdodEhhbGYgKSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdmVydGljYWxEaXJlY3Rpb24gJiYgKCAoIHZlcnRpY2FsRGlyZWN0aW9uID09PSBcImRvd25cIiAmJiBpc092ZXJCb3R0b21IYWxmICkgfHxcblx0XHRcdFx0KCB2ZXJ0aWNhbERpcmVjdGlvbiA9PT0gXCJ1cFwiICYmICFpc092ZXJCb3R0b21IYWxmICkgKTtcblx0XHR9XG5cblx0fSxcblxuXHRfZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGVsdGEgPSB0aGlzLnBvc2l0aW9uQWJzLnRvcCAtIHRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDtcblx0XHRyZXR1cm4gZGVsdGEgIT09IDAgJiYgKCBkZWx0YSA+IDAgPyBcImRvd25cIiA6IFwidXBcIiApO1xuXHR9LFxuXG5cdF9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRlbHRhID0gdGhpcy5wb3NpdGlvbkFicy5sZWZ0IC0gdGhpcy5sYXN0UG9zaXRpb25BYnMubGVmdDtcblx0XHRyZXR1cm4gZGVsdGEgIT09IDAgJiYgKCBkZWx0YSA+IDAgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiApO1xuXHR9LFxuXG5cdHJlZnJlc2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLl9yZWZyZXNoSXRlbXMoIGV2ZW50ICk7XG5cdFx0dGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCk7XG5cdFx0dGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X2Nvbm5lY3RXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblx0XHRyZXR1cm4gb3B0aW9ucy5jb25uZWN0V2l0aC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nID9cblx0XHRcdFsgb3B0aW9ucy5jb25uZWN0V2l0aCBdIDpcblx0XHRcdG9wdGlvbnMuY29ubmVjdFdpdGg7XG5cdH0sXG5cblx0X2dldEl0ZW1zQXNqUXVlcnk6IGZ1bmN0aW9uKCBjb25uZWN0ZWQgKSB7XG5cblx0XHR2YXIgaSwgaiwgY3VyLCBpbnN0LFxuXHRcdFx0aXRlbXMgPSBbXSxcblx0XHRcdHF1ZXJpZXMgPSBbXSxcblx0XHRcdGNvbm5lY3RXaXRoID0gdGhpcy5fY29ubmVjdFdpdGgoKTtcblxuXHRcdGlmICggY29ubmVjdFdpdGggJiYgY29ubmVjdGVkICkge1xuXHRcdFx0Zm9yICggaSA9IGNvbm5lY3RXaXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0XHRjdXIgPSAkKCBjb25uZWN0V2l0aFsgaSBdLCB0aGlzLmRvY3VtZW50WyAwIF0gKTtcblx0XHRcdFx0Zm9yICggaiA9IGN1ci5sZW5ndGggLSAxOyBqID49IDA7IGotLSApIHtcblx0XHRcdFx0XHRpbnN0ID0gJC5kYXRhKCBjdXJbIGogXSwgdGhpcy53aWRnZXRGdWxsTmFtZSApO1xuXHRcdFx0XHRcdGlmICggaW5zdCAmJiBpbnN0ICE9PSB0aGlzICYmICFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHRcdFx0XHRxdWVyaWVzLnB1c2goIFsgdHlwZW9mIGluc3Qub3B0aW9ucy5pdGVtcyA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdFx0XHRcdFx0aW5zdC5vcHRpb25zLml0ZW1zLmNhbGwoIGluc3QuZWxlbWVudCApIDpcblx0XHRcdFx0XHRcdFx0JCggaW5zdC5vcHRpb25zLml0ZW1zLCBpbnN0LmVsZW1lbnQgKVxuXHRcdFx0XHRcdFx0XHRcdC5ub3QoIFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiIClcblx0XHRcdFx0XHRcdFx0XHQubm90KCBcIi51aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiICksIGluc3QgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHF1ZXJpZXMucHVzaCggWyB0eXBlb2YgdGhpcy5vcHRpb25zLml0ZW1zID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0dGhpcy5vcHRpb25zLml0ZW1zXG5cdFx0XHRcdC5jYWxsKCB0aGlzLmVsZW1lbnQsIG51bGwsIHsgb3B0aW9uczogdGhpcy5vcHRpb25zLCBpdGVtOiB0aGlzLmN1cnJlbnRJdGVtIH0gKSA6XG5cdFx0XHQkKCB0aGlzLm9wdGlvbnMuaXRlbXMsIHRoaXMuZWxlbWVudCApXG5cdFx0XHRcdC5ub3QoIFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiIClcblx0XHRcdFx0Lm5vdCggXCIudWktc29ydGFibGUtcGxhY2Vob2xkZXJcIiApLCB0aGlzIF0gKTtcblxuXHRcdGZ1bmN0aW9uIGFkZEl0ZW1zKCkge1xuXHRcdFx0aXRlbXMucHVzaCggdGhpcyApO1xuXHRcdH1cblx0XHRmb3IgKCBpID0gcXVlcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdHF1ZXJpZXNbIGkgXVsgMCBdLmVhY2goIGFkZEl0ZW1zICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICQoIGl0ZW1zICk7XG5cblx0fSxcblxuXHRfcmVtb3ZlQ3VycmVudHNGcm9tSXRlbXM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIGxpc3QgPSB0aGlzLmN1cnJlbnRJdGVtLmZpbmQoIFwiOmRhdGEoXCIgKyB0aGlzLndpZGdldE5hbWUgKyBcIi1pdGVtKVwiICk7XG5cblx0XHR0aGlzLml0ZW1zID0gJC5ncmVwKCB0aGlzLml0ZW1zLCBmdW5jdGlvbiggaXRlbSApIHtcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IGxpc3QubGVuZ3RoOyBqKysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFsgaiBdID09PSBpdGVtLml0ZW1bIDAgXSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gKTtcblxuXHR9LFxuXG5cdF9yZWZyZXNoSXRlbXM6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdHRoaXMuaXRlbXMgPSBbXTtcblx0XHR0aGlzLmNvbnRhaW5lcnMgPSBbIHRoaXMgXTtcblxuXHRcdHZhciBpLCBqLCBjdXIsIGluc3QsIHRhcmdldERhdGEsIF9xdWVyaWVzLCBpdGVtLCBxdWVyaWVzTGVuZ3RoLFxuXHRcdFx0aXRlbXMgPSB0aGlzLml0ZW1zLFxuXHRcdFx0cXVlcmllcyA9IFsgWyB0eXBlb2YgdGhpcy5vcHRpb25zLml0ZW1zID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCggdGhpcy5lbGVtZW50WyAwIF0sIGV2ZW50LCB7IGl0ZW06IHRoaXMuY3VycmVudEl0ZW0gfSApIDpcblx0XHRcdFx0JCggdGhpcy5vcHRpb25zLml0ZW1zLCB0aGlzLmVsZW1lbnQgKSwgdGhpcyBdIF0sXG5cdFx0XHRjb25uZWN0V2l0aCA9IHRoaXMuX2Nvbm5lY3RXaXRoKCk7XG5cblx0XHQvL1Nob3VsZG4ndCBiZSBydW4gdGhlIGZpcnN0IHRpbWUgdGhyb3VnaCBkdWUgdG8gbWFzc2l2ZSBzbG93LWRvd25cblx0XHRpZiAoIGNvbm5lY3RXaXRoICYmIHRoaXMucmVhZHkgKSB7XG5cdFx0XHRmb3IgKCBpID0gY29ubmVjdFdpdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRcdGN1ciA9ICQoIGNvbm5lY3RXaXRoWyBpIF0sIHRoaXMuZG9jdW1lbnRbIDAgXSApO1xuXHRcdFx0XHRmb3IgKCBqID0gY3VyLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICkge1xuXHRcdFx0XHRcdGluc3QgPSAkLmRhdGEoIGN1clsgaiBdLCB0aGlzLndpZGdldEZ1bGxOYW1lICk7XG5cdFx0XHRcdFx0aWYgKCBpbnN0ICYmIGluc3QgIT09IHRoaXMgJiYgIWluc3Qub3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRcdHF1ZXJpZXMucHVzaCggWyB0eXBlb2YgaW5zdC5vcHRpb25zLml0ZW1zID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0XHRcdFx0XHRpbnN0Lm9wdGlvbnMuaXRlbXNcblx0XHRcdFx0XHRcdFx0XHQuY2FsbCggaW5zdC5lbGVtZW50WyAwIF0sIGV2ZW50LCB7IGl0ZW06IHRoaXMuY3VycmVudEl0ZW0gfSApIDpcblx0XHRcdFx0XHRcdFx0JCggaW5zdC5vcHRpb25zLml0ZW1zLCBpbnN0LmVsZW1lbnQgKSwgaW5zdCBdICk7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcnMucHVzaCggaW5zdCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoIGkgPSBxdWVyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0dGFyZ2V0RGF0YSA9IHF1ZXJpZXNbIGkgXVsgMSBdO1xuXHRcdFx0X3F1ZXJpZXMgPSBxdWVyaWVzWyBpIF1bIDAgXTtcblxuXHRcdFx0Zm9yICggaiA9IDAsIHF1ZXJpZXNMZW5ndGggPSBfcXVlcmllcy5sZW5ndGg7IGogPCBxdWVyaWVzTGVuZ3RoOyBqKysgKSB7XG5cdFx0XHRcdGl0ZW0gPSAkKCBfcXVlcmllc1sgaiBdICk7XG5cblx0XHRcdFx0Ly8gRGF0YSBmb3IgdGFyZ2V0IGNoZWNraW5nIChtb3VzZSBtYW5hZ2VyKVxuXHRcdFx0XHRpdGVtLmRhdGEoIHRoaXMud2lkZ2V0TmFtZSArIFwiLWl0ZW1cIiwgdGFyZ2V0RGF0YSApO1xuXG5cdFx0XHRcdGl0ZW1zLnB1c2goIHtcblx0XHRcdFx0XHRpdGVtOiBpdGVtLFxuXHRcdFx0XHRcdGluc3RhbmNlOiB0YXJnZXREYXRhLFxuXHRcdFx0XHRcdHdpZHRoOiAwLCBoZWlnaHQ6IDAsXG5cdFx0XHRcdFx0bGVmdDogMCwgdG9wOiAwXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0fSxcblxuXHRfcmVmcmVzaEl0ZW1Qb3NpdGlvbnM6IGZ1bmN0aW9uKCBmYXN0ICkge1xuXHRcdHZhciBpLCBpdGVtLCB0LCBwO1xuXG5cdFx0Zm9yICggaSA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRpdGVtID0gdGhpcy5pdGVtc1sgaSBdO1xuXG5cdFx0XHQvL1dlIGlnbm9yZSBjYWxjdWxhdGluZyBwb3NpdGlvbnMgb2YgYWxsIGNvbm5lY3RlZCBjb250YWluZXJzIHdoZW4gd2UncmUgbm90IG92ZXIgdGhlbVxuXHRcdFx0aWYgKCB0aGlzLmN1cnJlbnRDb250YWluZXIgJiYgaXRlbS5pbnN0YW5jZSAhPT0gdGhpcy5jdXJyZW50Q29udGFpbmVyICYmXG5cdFx0XHRcdFx0aXRlbS5pdGVtWyAwIF0gIT09IHRoaXMuY3VycmVudEl0ZW1bIDAgXSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHQgPSB0aGlzLm9wdGlvbnMudG9sZXJhbmNlRWxlbWVudCA/XG5cdFx0XHRcdCQoIHRoaXMub3B0aW9ucy50b2xlcmFuY2VFbGVtZW50LCBpdGVtLml0ZW0gKSA6XG5cdFx0XHRcdGl0ZW0uaXRlbTtcblxuXHRcdFx0aWYgKCAhZmFzdCApIHtcblx0XHRcdFx0aXRlbS53aWR0aCA9IHQub3V0ZXJXaWR0aCgpO1xuXHRcdFx0XHRpdGVtLmhlaWdodCA9IHQub3V0ZXJIZWlnaHQoKTtcblx0XHRcdH1cblxuXHRcdFx0cCA9IHQub2Zmc2V0KCk7XG5cdFx0XHRpdGVtLmxlZnQgPSBwLmxlZnQ7XG5cdFx0XHRpdGVtLnRvcCA9IHAudG9wO1xuXHRcdH1cblx0fSxcblxuXHRyZWZyZXNoUG9zaXRpb25zOiBmdW5jdGlvbiggZmFzdCApIHtcblxuXHRcdC8vIERldGVybWluZSB3aGV0aGVyIGl0ZW1zIGFyZSBiZWluZyBkaXNwbGF5ZWQgaG9yaXpvbnRhbGx5XG5cdFx0dGhpcy5mbG9hdGluZyA9IHRoaXMuaXRlbXMubGVuZ3RoID9cblx0XHRcdHRoaXMub3B0aW9ucy5heGlzID09PSBcInhcIiB8fCB0aGlzLl9pc0Zsb2F0aW5nKCB0aGlzLml0ZW1zWyAwIF0uaXRlbSApIDpcblx0XHRcdGZhbHNlO1xuXG5cdFx0Ly8gVGhpcyBoYXMgdG8gYmUgcmVkb25lIGJlY2F1c2UgZHVlIHRvIHRoZSBpdGVtIGJlaW5nIG1vdmVkIG91dC9pbnRvIHRoZSBvZmZzZXRQYXJlbnQsXG5cdFx0Ly8gdGhlIG9mZnNldFBhcmVudCdzIHBvc2l0aW9uIHdpbGwgY2hhbmdlXG5cdFx0aWYgKCB0aGlzLm9mZnNldFBhcmVudCAmJiB0aGlzLmhlbHBlciApIHtcblx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudCA9IHRoaXMuX2dldFBhcmVudE9mZnNldCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3JlZnJlc2hJdGVtUG9zaXRpb25zKCBmYXN0ICk7XG5cblx0XHR2YXIgaSwgcDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmN1c3RvbSAmJiB0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLmN1c3RvbS5yZWZyZXNoQ29udGFpbmVycy5jYWxsKCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRcdHAgPSB0aGlzLmNvbnRhaW5lcnNbIGkgXS5lbGVtZW50Lm9mZnNldCgpO1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5sZWZ0ID0gcC5sZWZ0O1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS50b3AgPSBwLnRvcDtcblx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpIF0uY29udGFpbmVyQ2FjaGUud2lkdGggPVxuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmVsZW1lbnQub3V0ZXJXaWR0aCgpO1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5oZWlnaHQgPVxuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmVsZW1lbnQub3V0ZXJIZWlnaHQoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfY3JlYXRlUGxhY2Vob2xkZXI6IGZ1bmN0aW9uKCB0aGF0ICkge1xuXHRcdHRoYXQgPSB0aGF0IHx8IHRoaXM7XG5cdFx0dmFyIGNsYXNzTmFtZSwgbm9kZU5hbWUsXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zO1xuXG5cdFx0aWYgKCAhby5wbGFjZWhvbGRlciB8fCBvLnBsYWNlaG9sZGVyLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBvLnBsYWNlaG9sZGVyO1xuXHRcdFx0bm9kZU5hbWUgPSB0aGF0LmN1cnJlbnRJdGVtWyAwIF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdG8ucGxhY2Vob2xkZXIgPSB7XG5cdFx0XHRcdGVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0dmFyIGVsZW1lbnQgPSAkKCBcIjxcIiArIG5vZGVOYW1lICsgXCI+XCIsIHRoYXQuZG9jdW1lbnRbIDAgXSApO1xuXG5cdFx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoIGVsZW1lbnQsIFwidWktc29ydGFibGUtcGxhY2Vob2xkZXJcIixcblx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHRoYXQuY3VycmVudEl0ZW1bIDAgXS5jbGFzc05hbWUgKVxuXHRcdFx0XHRcdFx0Ll9yZW1vdmVDbGFzcyggZWxlbWVudCwgXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIiApO1xuXG5cdFx0XHRcdFx0aWYgKCBub2RlTmFtZSA9PT0gXCJ0Ym9keVwiICkge1xuXHRcdFx0XHRcdFx0dGhhdC5fY3JlYXRlVHJQbGFjZWhvbGRlcihcblx0XHRcdFx0XHRcdFx0dGhhdC5jdXJyZW50SXRlbS5maW5kKCBcInRyXCIgKS5lcSggMCApLFxuXHRcdFx0XHRcdFx0XHQkKCBcIjx0cj5cIiwgdGhhdC5kb2N1bWVudFsgMCBdICkuYXBwZW5kVG8oIGVsZW1lbnQgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJ0clwiICkge1xuXHRcdFx0XHRcdFx0dGhhdC5fY3JlYXRlVHJQbGFjZWhvbGRlciggdGhhdC5jdXJyZW50SXRlbSwgZWxlbWVudCApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImltZ1wiICkge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5hdHRyKCBcInNyY1wiLCB0aGF0LmN1cnJlbnRJdGVtLmF0dHIoIFwic3JjXCIgKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggIWNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHRcdGVsZW1lbnQuY3NzKCBcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR1cGRhdGU6IGZ1bmN0aW9uKCBjb250YWluZXIsIHAgKSB7XG5cblx0XHRcdFx0XHQvLyAxLiBJZiBhIGNsYXNzTmFtZSBpcyBzZXQgYXMgJ3BsYWNlaG9sZGVyIG9wdGlvbiwgd2UgZG9uJ3QgZm9yY2Ugc2l6ZXMgLVxuXHRcdFx0XHRcdC8vIHRoZSBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgdGhhdFxuXHRcdFx0XHRcdC8vIDIuIFRoZSBvcHRpb24gJ2ZvcmNlUGxhY2Vob2xkZXJTaXplIGNhbiBiZSBlbmFibGVkIHRvIGZvcmNlIGl0IGV2ZW4gaWYgYVxuXHRcdFx0XHRcdC8vIGNsYXNzIG5hbWUgaXMgc3BlY2lmaWVkXG5cdFx0XHRcdFx0aWYgKCBjbGFzc05hbWUgJiYgIW8uZm9yY2VQbGFjZWhvbGRlclNpemUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgYWN0dWFsIGhlaWdodCBvciB3aWR0aCBieSBpdHNlbGYgKHdpdGhvdXRcblx0XHRcdFx0XHQvLyBzdHlsZXMgY29taW5nIGZyb20gYSBzdHlsZXNoZWV0KSwgaXQgcmVjZWl2ZXMgdGhlIGlubGluZSBoZWlnaHQgYW5kIHdpZHRoXG5cdFx0XHRcdFx0Ly8gZnJvbSB0aGUgZHJhZ2dlZCBpdGVtLiBPciwgaWYgaXQncyBhIHRib2R5IG9yIHRyLCBpdCdzIGdvaW5nIHRvIGhhdmUgYSBoZWlnaHRcblx0XHRcdFx0XHQvLyBhbnl3YXkgc2luY2Ugd2UncmUgcG9wdWxhdGluZyB0aGVtIHdpdGggPHRkPnMgYWJvdmUsIGJ1dCB0aGV5J3JlIHVubGlrZWx5IHRvXG5cdFx0XHRcdFx0Ly8gYmUgdGhlIGNvcnJlY3QgaGVpZ2h0IG9uIHRoZWlyIG93biBpZiB0aGUgcm93IGhlaWdodHMgYXJlIGR5bmFtaWMsIHNvIHdlJ2xsXG5cdFx0XHRcdFx0Ly8gYWx3YXlzIGFzc2lnbiB0aGUgaGVpZ2h0IG9mIHRoZSBkcmFnZ2VkIGl0ZW0gZ2l2ZW4gZm9yY2VQbGFjZWhvbGRlclNpemVcblx0XHRcdFx0XHQvLyBpcyB0cnVlLlxuXHRcdFx0XHRcdGlmICggIXAuaGVpZ2h0KCkgfHwgKCBvLmZvcmNlUGxhY2Vob2xkZXJTaXplICYmXG5cdFx0XHRcdFx0XHRcdCggbm9kZU5hbWUgPT09IFwidGJvZHlcIiB8fCBub2RlTmFtZSA9PT0gXCJ0clwiICkgKSApIHtcblx0XHRcdFx0XHRcdHAuaGVpZ2h0KFxuXHRcdFx0XHRcdFx0XHR0aGF0LmN1cnJlbnRJdGVtLmlubmVySGVpZ2h0KCkgLVxuXHRcdFx0XHRcdFx0XHRwYXJzZUludCggdGhhdC5jdXJyZW50SXRlbS5jc3MoIFwicGFkZGluZ1RvcFwiICkgfHwgMCwgMTAgKSAtXG5cdFx0XHRcdFx0XHRcdHBhcnNlSW50KCB0aGF0LmN1cnJlbnRJdGVtLmNzcyggXCJwYWRkaW5nQm90dG9tXCIgKSB8fCAwLCAxMCApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggIXAud2lkdGgoKSApIHtcblx0XHRcdFx0XHRcdHAud2lkdGgoXG5cdFx0XHRcdFx0XHRcdHRoYXQuY3VycmVudEl0ZW0uaW5uZXJXaWR0aCgpIC1cblx0XHRcdFx0XHRcdFx0cGFyc2VJbnQoIHRoYXQuY3VycmVudEl0ZW0uY3NzKCBcInBhZGRpbmdMZWZ0XCIgKSB8fCAwLCAxMCApIC1cblx0XHRcdFx0XHRcdFx0cGFyc2VJbnQoIHRoYXQuY3VycmVudEl0ZW0uY3NzKCBcInBhZGRpbmdSaWdodFwiICkgfHwgMCwgMTAgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvL0NyZWF0ZSB0aGUgcGxhY2Vob2xkZXJcblx0XHR0aGF0LnBsYWNlaG9sZGVyID0gJCggby5wbGFjZWhvbGRlci5lbGVtZW50LmNhbGwoIHRoYXQuZWxlbWVudCwgdGhhdC5jdXJyZW50SXRlbSApICk7XG5cblx0XHQvL0FwcGVuZCBpdCBhZnRlciB0aGUgYWN0dWFsIGN1cnJlbnQgaXRlbVxuXHRcdHRoYXQuY3VycmVudEl0ZW0uYWZ0ZXIoIHRoYXQucGxhY2Vob2xkZXIgKTtcblxuXHRcdC8vVXBkYXRlIHRoZSBzaXplIG9mIHRoZSBwbGFjZWhvbGRlciAoVE9ETzogTG9naWMgdG8gZnV6enksIHNlZSBsaW5lIDMxNi8zMTcpXG5cdFx0by5wbGFjZWhvbGRlci51cGRhdGUoIHRoYXQsIHRoYXQucGxhY2Vob2xkZXIgKTtcblxuXHR9LFxuXG5cdF9jcmVhdGVUclBsYWNlaG9sZGVyOiBmdW5jdGlvbiggc291cmNlVHIsIHRhcmdldFRyICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHNvdXJjZVRyLmNoaWxkcmVuKCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHQkKCBcIjx0ZD4mIzE2MDs8L3RkPlwiLCB0aGF0LmRvY3VtZW50WyAwIF0gKVxuXHRcdFx0XHQuYXR0ciggXCJjb2xzcGFuXCIsICQoIHRoaXMgKS5hdHRyKCBcImNvbHNwYW5cIiApIHx8IDEgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIHRhcmdldFRyICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9jb250YWN0Q29udGFpbmVyczogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpLCBqLCBkaXN0LCBpdGVtV2l0aExlYXN0RGlzdGFuY2UsIHBvc1Byb3BlcnR5LCBzaXplUHJvcGVydHksIGN1ciwgbmVhckJvdHRvbSxcblx0XHRcdGZsb2F0aW5nLCBheGlzLFxuXHRcdFx0aW5uZXJtb3N0Q29udGFpbmVyID0gbnVsbCxcblx0XHRcdGlubmVybW9zdEluZGV4ID0gbnVsbDtcblxuXHRcdC8vIEdldCBpbm5lcm1vc3QgY29udGFpbmVyIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGl0ZW1cblx0XHRmb3IgKCBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXG5cdFx0XHQvLyBOZXZlciBjb25zaWRlciBhIGNvbnRhaW5lciB0aGF0J3MgbG9jYXRlZCB3aXRoaW4gdGhlIGl0ZW0gaXRzZWxmXG5cdFx0XHRpZiAoICQuY29udGFpbnMoIHRoaXMuY3VycmVudEl0ZW1bIDAgXSwgdGhpcy5jb250YWluZXJzWyBpIF0uZWxlbWVudFsgMCBdICkgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuX2ludGVyc2VjdHNXaXRoKCB0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZSApICkge1xuXG5cdFx0XHRcdC8vIElmIHdlJ3ZlIGFscmVhZHkgZm91bmQgYSBjb250YWluZXIgYW5kIGl0J3MgbW9yZSBcImlubmVyXCIgdGhhbiB0aGlzLCB0aGVuIGNvbnRpbnVlXG5cdFx0XHRcdGlmICggaW5uZXJtb3N0Q29udGFpbmVyICYmXG5cdFx0XHRcdFx0XHQkLmNvbnRhaW5zKFxuXHRcdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5lbGVtZW50WyAwIF0sXG5cdFx0XHRcdFx0XHRcdGlubmVybW9zdENvbnRhaW5lci5lbGVtZW50WyAwIF0gKSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlubmVybW9zdENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1sgaSBdO1xuXHRcdFx0XHRpbm5lcm1vc3RJbmRleCA9IGk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gY29udGFpbmVyIGRvZXNuJ3QgaW50ZXJzZWN0LiB0cmlnZ2VyIFwib3V0XCIgZXZlbnQgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdGlmICggdGhpcy5jb250YWluZXJzWyBpIF0uY29udGFpbmVyQ2FjaGUub3ZlciApIHtcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5fdHJpZ2dlciggXCJvdXRcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpIF0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIElmIG5vIGludGVyc2VjdGluZyBjb250YWluZXJzIGZvdW5kLCByZXR1cm5cblx0XHRpZiAoICFpbm5lcm1vc3RDb250YWluZXIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTW92ZSB0aGUgaXRlbSBpbnRvIHRoZSBjb250YWluZXIgaWYgaXQncyBub3QgdGhlcmUgYWxyZWFkeVxuXHRcdGlmICggdGhpcy5jb250YWluZXJzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGlmICggIXRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGlubmVybW9zdEluZGV4IF0uX3RyaWdnZXIoIFwib3ZlclwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAxO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdoZW4gZW50ZXJpbmcgYSBuZXcgY29udGFpbmVyLCB3ZSB3aWxsIGZpbmQgdGhlIGl0ZW0gd2l0aCB0aGUgbGVhc3QgZGlzdGFuY2UgYW5kXG5cdFx0XHQvLyBhcHBlbmQgb3VyIGl0ZW0gbmVhciBpdFxuXHRcdFx0ZGlzdCA9IDEwMDAwO1xuXHRcdFx0aXRlbVdpdGhMZWFzdERpc3RhbmNlID0gbnVsbDtcblx0XHRcdGZsb2F0aW5nID0gaW5uZXJtb3N0Q29udGFpbmVyLmZsb2F0aW5nIHx8IHRoaXMuX2lzRmxvYXRpbmcoIHRoaXMuY3VycmVudEl0ZW0gKTtcblx0XHRcdHBvc1Byb3BlcnR5ID0gZmxvYXRpbmcgPyBcImxlZnRcIiA6IFwidG9wXCI7XG5cdFx0XHRzaXplUHJvcGVydHkgPSBmbG9hdGluZyA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCI7XG5cdFx0XHRheGlzID0gZmxvYXRpbmcgPyBcInBhZ2VYXCIgOiBcInBhZ2VZXCI7XG5cblx0XHRcdGZvciAoIGogPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICkge1xuXHRcdFx0XHRpZiAoICEkLmNvbnRhaW5zKFxuXHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLmVsZW1lbnRbIDAgXSwgdGhpcy5pdGVtc1sgaiBdLml0ZW1bIDAgXSApXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGhpcy5pdGVtc1sgaiBdLml0ZW1bIDAgXSA9PT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VyID0gdGhpcy5pdGVtc1sgaiBdLml0ZW0ub2Zmc2V0KClbIHBvc1Byb3BlcnR5IF07XG5cdFx0XHRcdG5lYXJCb3R0b20gPSBmYWxzZTtcblx0XHRcdFx0aWYgKCBldmVudFsgYXhpcyBdIC0gY3VyID4gdGhpcy5pdGVtc1sgaiBdWyBzaXplUHJvcGVydHkgXSAvIDIgKSB7XG5cdFx0XHRcdFx0bmVhckJvdHRvbSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBldmVudFsgYXhpcyBdIC0gY3VyICkgPCBkaXN0ICkge1xuXHRcdFx0XHRcdGRpc3QgPSBNYXRoLmFicyggZXZlbnRbIGF4aXMgXSAtIGN1ciApO1xuXHRcdFx0XHRcdGl0ZW1XaXRoTGVhc3REaXN0YW5jZSA9IHRoaXMuaXRlbXNbIGogXTtcblx0XHRcdFx0XHR0aGlzLmRpcmVjdGlvbiA9IG5lYXJCb3R0b20gPyBcInVwXCIgOiBcImRvd25cIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL0NoZWNrIGlmIGRyb3BPbkVtcHR5IGlzIGVuYWJsZWRcblx0XHRcdGlmICggIWl0ZW1XaXRoTGVhc3REaXN0YW5jZSAmJiAhdGhpcy5vcHRpb25zLmRyb3BPbkVtcHR5ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5jdXJyZW50Q29udGFpbmVyID09PSB0aGlzLmNvbnRhaW5lcnNbIGlubmVybW9zdEluZGV4IF0gKSB7XG5cdFx0XHRcdGlmICggIXRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5fdHJpZ2dlciggXCJvdmVyXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0XHRcdHRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXRlbVdpdGhMZWFzdERpc3RhbmNlICkge1xuXHRcdFx0XHR0aGlzLl9yZWFycmFuZ2UoIGV2ZW50LCBpdGVtV2l0aExlYXN0RGlzdGFuY2UsIG51bGwsIHRydWUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3JlYXJyYW5nZSggZXZlbnQsIG51bGwsIHRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5lbGVtZW50LCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTtcblx0XHRcdHRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHR0aGlzLmN1cnJlbnRDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcnNbIGlubmVybW9zdEluZGV4IF07XG5cblx0XHRcdC8vVXBkYXRlIHRoZSBwbGFjZWhvbGRlclxuXHRcdFx0dGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyLnVwZGF0ZSggdGhpcy5jdXJyZW50Q29udGFpbmVyLCB0aGlzLnBsYWNlaG9sZGVyICk7XG5cblx0XHRcdC8vVXBkYXRlIHNjcm9sbFBhcmVudFxuXHRcdFx0dGhpcy5zY3JvbGxQYXJlbnQgPSB0aGlzLnBsYWNlaG9sZGVyLnNjcm9sbFBhcmVudCgpO1xuXG5cdFx0XHQvL1VwZGF0ZSBvdmVyZmxvd09mZnNldFxuXHRcdFx0aWYgKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLmRvY3VtZW50WyAwIF0gJiZcblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFsgMCBdLnRhZ05hbWUgIT09IFwiSFRNTFwiICkge1xuXHRcdFx0XHR0aGlzLm92ZXJmbG93T2Zmc2V0ID0gdGhpcy5zY3JvbGxQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5fdHJpZ2dlciggXCJvdmVyXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goIHRoaXMgKSApO1xuXHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAxO1xuXHRcdH1cblxuXHR9LFxuXG5cdF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdHZhciBvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0aGVscGVyID0gdHlwZW9mIG8uaGVscGVyID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0XHQkKCBvLmhlbHBlci5hcHBseSggdGhpcy5lbGVtZW50WyAwIF0sIFsgZXZlbnQsIHRoaXMuY3VycmVudEl0ZW0gXSApICkgOlxuXHRcdFx0XHQoIG8uaGVscGVyID09PSBcImNsb25lXCIgPyB0aGlzLmN1cnJlbnRJdGVtLmNsb25lKCkgOiB0aGlzLmN1cnJlbnRJdGVtICk7XG5cblx0XHQvL0FkZCB0aGUgaGVscGVyIHRvIHRoZSBET00gaWYgdGhhdCBkaWRuJ3QgaGFwcGVuIGFscmVhZHlcblx0XHRpZiAoICFoZWxwZXIucGFyZW50cyggXCJib2R5XCIgKS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmFwcGVuZFRvWyAwIF0uYXBwZW5kQ2hpbGQoIGhlbHBlclsgMCBdICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBoZWxwZXJbIDAgXSA9PT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0dGhpcy5fc3RvcmVkQ1NTID0ge1xuXHRcdFx0XHR3aWR0aDogdGhpcy5jdXJyZW50SXRlbVsgMCBdLnN0eWxlLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuY3VycmVudEl0ZW1bIDAgXS5zdHlsZS5oZWlnaHQsXG5cdFx0XHRcdHBvc2l0aW9uOiB0aGlzLmN1cnJlbnRJdGVtLmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0XHRcdHRvcDogdGhpcy5jdXJyZW50SXRlbS5jc3MoIFwidG9wXCIgKSxcblx0XHRcdFx0bGVmdDogdGhpcy5jdXJyZW50SXRlbS5jc3MoIFwibGVmdFwiIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKCAhaGVscGVyWyAwIF0uc3R5bGUud2lkdGggfHwgby5mb3JjZUhlbHBlclNpemUgKSB7XG5cdFx0XHRoZWxwZXIud2lkdGgoIHRoaXMuY3VycmVudEl0ZW0ud2lkdGgoKSApO1xuXHRcdH1cblx0XHRpZiAoICFoZWxwZXJbIDAgXS5zdHlsZS5oZWlnaHQgfHwgby5mb3JjZUhlbHBlclNpemUgKSB7XG5cdFx0XHRoZWxwZXIuaGVpZ2h0KCB0aGlzLmN1cnJlbnRJdGVtLmhlaWdodCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhlbHBlcjtcblxuXHR9LFxuXG5cdF9hZGp1c3RPZmZzZXRGcm9tSGVscGVyOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggdHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IG9iai5zcGxpdCggXCIgXCIgKTtcblx0XHR9XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblx0XHRcdG9iaiA9IHsgbGVmdDogK29ialsgMCBdLCB0b3A6ICtvYmpbIDEgXSB8fCAwIH07XG5cdFx0fVxuXHRcdGlmICggXCJsZWZ0XCIgaW4gb2JqICkge1xuXHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmICggXCJyaWdodFwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gb2JqLnJpZ2h0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmICggXCJ0b3BcIiBpbiBvYmogKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDtcblx0XHR9XG5cdFx0aWYgKCBcImJvdHRvbVwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7XG5cdFx0fVxuXHR9LFxuXG5cdF9nZXRQYXJlbnRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly9HZXQgdGhlIG9mZnNldFBhcmVudCBhbmQgY2FjaGUgaXRzIHBvc2l0aW9uXG5cdFx0dGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTtcblx0XHR2YXIgcG8gPSB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTtcblxuXHRcdC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBtb2RpZnkgYSBvZmZzZXQgY2FsY3VsYXRlZCBvbiBzdGFydCwgc2luY2UgdGhlXG5cdFx0Ly8gZm9sbG93aW5nIGhhcHBlbmVkOlxuXHRcdC8vIDEuIFRoZSBwb3NpdGlvbiBvZiB0aGUgaGVscGVyIGlzIGFic29sdXRlLCBzbyBpdCdzIHBvc2l0aW9uIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlXG5cdFx0Ly8gbmV4dCBwb3NpdGlvbmVkIHBhcmVudFxuXHRcdC8vIDIuIFRoZSBhY3R1YWwgb2Zmc2V0IHBhcmVudCBpcyBhIGNoaWxkIG9mIHRoZSBzY3JvbGwgcGFyZW50LCBhbmQgdGhlIHNjcm9sbCBwYXJlbnQgaXNuJ3Rcblx0XHQvLyB0aGUgZG9jdW1lbnQsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIHNjcm9sbCBpcyBpbmNsdWRlZCBpbiB0aGUgaW5pdGlhbCBjYWxjdWxhdGlvbiBvZiB0aGVcblx0XHQvLyBvZmZzZXQgb2YgdGhlIHBhcmVudCwgYW5kIG5ldmVyIHJlY2FsY3VsYXRlZCB1cG9uIGRyYWdcblx0XHRpZiAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiAmJiB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLmRvY3VtZW50WyAwIF0gJiZcblx0XHRcdFx0JC5jb250YWlucyggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSwgdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkge1xuXHRcdFx0cG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7XG5cdFx0XHRwby50b3AgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyBuZWVkcyB0byBiZSBhY3R1YWxseSBkb25lIGZvciBhbGwgYnJvd3NlcnMsIHNpbmNlIHBhZ2VYL3BhZ2VZIGluY2x1ZGVzIHRoaXNcblx0XHQvLyBpbmZvcm1hdGlvbiB3aXRoIGFuIHVnbHkgSUUgZml4XG5cdFx0aWYgKCB0aGlzLm9mZnNldFBhcmVudFsgMCBdID09PSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSB8fFxuXHRcdFx0XHQoIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0udGFnTmFtZSAmJlxuXHRcdFx0XHR0aGlzLm9mZnNldFBhcmVudFsgMCBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJodG1sXCIgJiYgJC51aS5pZSApICkge1xuXHRcdFx0cG8gPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHBvLnRvcCArICggcGFyc2VJbnQoIHRoaXMub2Zmc2V0UGFyZW50LmNzcyggXCJib3JkZXJUb3BXaWR0aFwiICksIDEwICkgfHwgMCApLFxuXHRcdFx0bGVmdDogcG8ubGVmdCArICggcGFyc2VJbnQoIHRoaXMub2Zmc2V0UGFyZW50LmNzcyggXCJib3JkZXJMZWZ0V2lkdGhcIiApLCAxMCApIHx8IDAgKVxuXHRcdH07XG5cblx0fSxcblxuXHRfZ2V0UmVsYXRpdmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcInJlbGF0aXZlXCIgKSB7XG5cdFx0XHR2YXIgcCA9IHRoaXMuY3VycmVudEl0ZW0ucG9zaXRpb24oKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRvcDogcC50b3AgLSAoIHBhcnNlSW50KCB0aGlzLmhlbHBlci5jc3MoIFwidG9wXCIgKSwgMTAgKSB8fCAwICkgK1xuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpLFxuXHRcdFx0XHRsZWZ0OiBwLmxlZnQgLSAoIHBhcnNlSW50KCB0aGlzLmhlbHBlci5jc3MoIFwibGVmdFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KClcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHR9LFxuXG5cdF9jYWNoZU1hcmdpbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMubWFyZ2lucyA9IHtcblx0XHRcdGxlZnQ6ICggcGFyc2VJbnQoIHRoaXMuY3VycmVudEl0ZW0uY3NzKCBcIm1hcmdpbkxlZnRcIiApLCAxMCApIHx8IDAgKSxcblx0XHRcdHRvcDogKCBwYXJzZUludCggdGhpcy5jdXJyZW50SXRlbS5jc3MoIFwibWFyZ2luVG9wXCIgKSwgMTAgKSB8fCAwIClcblx0XHR9O1xuXHR9LFxuXG5cdF9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmhlbHBlclByb3BvcnRpb25zID0ge1xuXHRcdFx0d2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSxcblx0XHRcdGhlaWdodDogdGhpcy5oZWxwZXIub3V0ZXJIZWlnaHQoKVxuXHRcdH07XG5cdH0sXG5cblx0X3NldENvbnRhaW5tZW50OiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBjZSwgY28sIG92ZXIsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zO1xuXHRcdGlmICggby5jb250YWlubWVudCA9PT0gXCJwYXJlbnRcIiApIHtcblx0XHRcdG8uY29udGFpbm1lbnQgPSB0aGlzLmhlbHBlclsgMCBdLnBhcmVudE5vZGU7XG5cdFx0fVxuXHRcdGlmICggby5jb250YWlubWVudCA9PT0gXCJkb2N1bWVudFwiIHx8IG8uY29udGFpbm1lbnQgPT09IFwid2luZG93XCIgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gW1xuXHRcdFx0XHQwIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0LFxuXHRcdFx0XHQwIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCxcblx0XHRcdFx0by5jb250YWlubWVudCA9PT0gXCJkb2N1bWVudFwiID9cblx0XHRcdFx0XHR0aGlzLmRvY3VtZW50LndpZHRoKCkgOlxuXHRcdFx0XHRcdHRoaXMud2luZG93LndpZHRoKCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRcdCggby5jb250YWlubWVudCA9PT0gXCJkb2N1bWVudFwiID9cblx0XHRcdFx0XHQoIHRoaXMuZG9jdW1lbnQuaGVpZ2h0KCkgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCApIDpcblx0XHRcdFx0XHR0aGlzLndpbmRvdy5oZWlnaHQoKSB8fCB0aGlzLmRvY3VtZW50WyAwIF0uYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodFxuXHRcdFx0XHQpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wXG5cdFx0XHRdO1xuXHRcdH1cblxuXHRcdGlmICggISggL14oZG9jdW1lbnR8d2luZG93fHBhcmVudCkkLyApLnRlc3QoIG8uY29udGFpbm1lbnQgKSApIHtcblx0XHRcdGNlID0gJCggby5jb250YWlubWVudCApWyAwIF07XG5cdFx0XHRjbyA9ICQoIG8uY29udGFpbm1lbnQgKS5vZmZzZXQoKTtcblx0XHRcdG92ZXIgPSAoICQoIGNlICkuY3NzKCBcIm92ZXJmbG93XCIgKSAhPT0gXCJoaWRkZW5cIiApO1xuXG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gW1xuXHRcdFx0XHRjby5sZWZ0ICsgKCBwYXJzZUludCggJCggY2UgKS5jc3MoIFwiYm9yZGVyTGVmdFdpZHRoXCIgKSwgMTAgKSB8fCAwICkgK1xuXHRcdFx0XHRcdCggcGFyc2VJbnQoICQoIGNlICkuY3NzKCBcInBhZGRpbmdMZWZ0XCIgKSwgMTAgKSB8fCAwICkgLSB0aGlzLm1hcmdpbnMubGVmdCxcblx0XHRcdFx0Y28udG9wICsgKCBwYXJzZUludCggJCggY2UgKS5jc3MoIFwiYm9yZGVyVG9wV2lkdGhcIiApLCAxMCApIHx8IDAgKSArXG5cdFx0XHRcdFx0KCBwYXJzZUludCggJCggY2UgKS5jc3MoIFwicGFkZGluZ1RvcFwiICksIDEwICkgfHwgMCApIC0gdGhpcy5tYXJnaW5zLnRvcCxcblx0XHRcdFx0Y28ubGVmdCArICggb3ZlciA/IE1hdGgubWF4KCBjZS5zY3JvbGxXaWR0aCwgY2Uub2Zmc2V0V2lkdGggKSA6IGNlLm9mZnNldFdpZHRoICkgLVxuXHRcdFx0XHRcdCggcGFyc2VJbnQoICQoIGNlICkuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggXCJwYWRkaW5nUmlnaHRcIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LFxuXHRcdFx0XHRjby50b3AgKyAoIG92ZXIgPyBNYXRoLm1heCggY2Uuc2Nyb2xsSGVpZ2h0LCBjZS5vZmZzZXRIZWlnaHQgKSA6IGNlLm9mZnNldEhlaWdodCApIC1cblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggXCJib3JkZXJUb3BXaWR0aFwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggXCJwYWRkaW5nQm90dG9tXCIgKSwgMTAgKSB8fCAwICkgLVxuXHRcdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHR9XG5cblx0fSxcblxuXHRfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uKCBkLCBwb3MgKSB7XG5cblx0XHRpZiAoICFwb3MgKSB7XG5cdFx0XHRwb3MgPSB0aGlzLnBvc2l0aW9uO1xuXHRcdH1cblx0XHR2YXIgbW9kID0gZCA9PT0gXCJhYnNvbHV0ZVwiID8gMSA6IC0xLFxuXHRcdFx0c2Nyb2xsID0gdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiICYmXG5cdFx0XHRcdCEoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMuZG9jdW1lbnRbIDAgXSAmJlxuXHRcdFx0XHQkLmNvbnRhaW5zKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLCB0aGlzLm9mZnNldFBhcmVudFsgMCBdICkgKSA/XG5cdFx0XHRcdFx0dGhpcy5vZmZzZXRQYXJlbnQgOlxuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50LFxuXHRcdFx0c2Nyb2xsSXNSb290Tm9kZSA9ICggLyhodG1sfGJvZHkpL2kgKS50ZXN0KCBzY3JvbGxbIDAgXS50YWdOYW1lICk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAoXG5cblx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHBvcy50b3BcdCtcblxuXHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogbW9kICtcblxuXHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQudG9wICogbW9kIC1cblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/XG5cdFx0XHRcdFx0LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDpcblx0XHRcdFx0XHQoIHNjcm9sbElzUm9vdE5vZGUgPyAwIDogc2Nyb2xsLnNjcm9sbFRvcCgpICkgKSAqIG1vZCApXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwb3MubGVmdCArXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgKiBtb2QgK1xuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICogbW9kXHQtXG5cdFx0XHRcdCggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgP1xuXHRcdFx0XHRcdC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6XG5cdFx0XHRcdFx0c2Nyb2xsLnNjcm9sbExlZnQoKSApICogbW9kIClcblx0XHRcdClcblx0XHR9O1xuXG5cdH0sXG5cblx0X2dlbmVyYXRlUG9zaXRpb246IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdHZhciB0b3AsIGxlZnQsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0cGFnZVggPSBldmVudC5wYWdlWCxcblx0XHRcdHBhZ2VZID0gZXZlbnQucGFnZVksXG5cdFx0XHRzY3JvbGwgPSB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiZcblx0XHRcdFx0ISggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gdGhpcy5kb2N1bWVudFsgMCBdICYmXG5cdFx0XHRcdCQuY29udGFpbnMoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0sIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApID9cblx0XHRcdFx0XHR0aGlzLm9mZnNldFBhcmVudCA6XG5cdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnQsXG5cdFx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSAoIC8oaHRtbHxib2R5KS9pICkudGVzdCggc2Nyb2xsWyAwIF0udGFnTmFtZSApO1xuXG5cdFx0Ly8gVGhpcyBpcyBhbm90aGVyIHZlcnkgd2VpcmQgc3BlY2lhbCBjYXNlIHRoYXQgb25seSBoYXBwZW5zIGZvciByZWxhdGl2ZSBlbGVtZW50czpcblx0XHQvLyAxLiBJZiB0aGUgY3NzIHBvc2l0aW9uIGlzIHJlbGF0aXZlXG5cdFx0Ly8gMi4gYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzIHRoZSBkb2N1bWVudCBvciBzaW1pbGFyIHRvIHRoZSBvZmZzZXQgcGFyZW50XG5cdFx0Ly8gd2UgaGF2ZSB0byByZWZyZXNoIHRoZSByZWxhdGl2ZSBvZmZzZXQgZHVyaW5nIHRoZSBzY3JvbGwgc28gdGhlcmUgYXJlIG5vIGp1bXBzXG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcInJlbGF0aXZlXCIgJiYgISggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gdGhpcy5kb2N1bWVudFsgMCBdICYmXG5cdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApIHtcblx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlID0gdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKTtcblx0XHR9XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC1cblx0XHQgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LlxuXHRcdCAqL1xuXG5cdFx0aWYgKCB0aGlzLm9yaWdpbmFsUG9zaXRpb24gKSB7IC8vSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zXG5cblx0XHRcdGlmICggdGhpcy5jb250YWlubWVudCApIHtcblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPCB0aGlzLmNvbnRhaW5tZW50WyAwIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVggPSB0aGlzLmNvbnRhaW5tZW50WyAwIF0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCB0aGlzLmNvbnRhaW5tZW50WyAxIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50WyAxIF0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiB0aGlzLmNvbnRhaW5tZW50WyAyIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVggPSB0aGlzLmNvbnRhaW5tZW50WyAyIF0gKyB0aGlzLm9mZnNldC5jbGljay5sZWZ0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiB0aGlzLmNvbnRhaW5tZW50WyAzIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50WyAzIF0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvLmdyaWQgKSB7XG5cdFx0XHRcdHRvcCA9IHRoaXMub3JpZ2luYWxQYWdlWSArIE1hdGgucm91bmQoICggcGFnZVkgLSB0aGlzLm9yaWdpbmFsUGFnZVkgKSAvXG5cdFx0XHRcdFx0by5ncmlkWyAxIF0gKSAqIG8uZ3JpZFsgMSBdO1xuXHRcdFx0XHRwYWdlWSA9IHRoaXMuY29udGFpbm1lbnQgP1xuXHRcdFx0XHRcdCggKCB0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPj0gdGhpcy5jb250YWlubWVudFsgMSBdICYmXG5cdFx0XHRcdFx0XHR0b3AgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPD0gdGhpcy5jb250YWlubWVudFsgMyBdICkgP1xuXHRcdFx0XHRcdFx0XHR0b3AgOlxuXHRcdFx0XHRcdFx0XHQoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IHRoaXMuY29udGFpbm1lbnRbIDEgXSApID9cblx0XHRcdFx0XHRcdFx0XHR0b3AgLSBvLmdyaWRbIDEgXSA6IHRvcCArIG8uZ3JpZFsgMSBdICkgKSA6XG5cdFx0XHRcdFx0XHRcdFx0dG9wO1xuXG5cdFx0XHRcdGxlZnQgPSB0aGlzLm9yaWdpbmFsUGFnZVggKyBNYXRoLnJvdW5kKCAoIHBhZ2VYIC0gdGhpcy5vcmlnaW5hbFBhZ2VYICkgL1xuXHRcdFx0XHRcdG8uZ3JpZFsgMCBdICkgKiBvLmdyaWRbIDAgXTtcblx0XHRcdFx0cGFnZVggPSB0aGlzLmNvbnRhaW5tZW50ID9cblx0XHRcdFx0XHQoICggbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gdGhpcy5jb250YWlubWVudFsgMCBdICYmXG5cdFx0XHRcdFx0XHRsZWZ0IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8PSB0aGlzLmNvbnRhaW5tZW50WyAyIF0gKSA/XG5cdFx0XHRcdFx0XHRcdGxlZnQgOlxuXHRcdFx0XHRcdFx0XHQoICggbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gdGhpcy5jb250YWlubWVudFsgMCBdICkgP1xuXHRcdFx0XHRcdFx0XHRcdGxlZnQgLSBvLmdyaWRbIDAgXSA6IGxlZnQgKyBvLmdyaWRbIDAgXSApICkgOlxuXHRcdFx0XHRcdFx0XHRcdGxlZnQ7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAoXG5cblx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHBhZ2VZIC1cblxuXHRcdFx0XHQvLyBDbGljayBvZmZzZXQgKHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50KVxuXHRcdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgLVxuXG5cdFx0XHRcdC8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudFxuXHRcdFx0XHR0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgLVxuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC50b3AgK1xuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID9cblx0XHRcdFx0XHQtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkgOlxuXHRcdFx0XHRcdCggc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsVG9wKCkgKSApIClcblx0XHRcdCksXG5cdFx0XHRsZWZ0OiAoXG5cblx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHBhZ2VYIC1cblxuXHRcdFx0XHQvLyBDbGljayBvZmZzZXQgKHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50KVxuXHRcdFx0XHR0aGlzLm9mZnNldC5jbGljay5sZWZ0IC1cblxuXHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtXG5cblx0XHRcdFx0Ly8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcilcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LmxlZnQgK1xuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID9cblx0XHRcdFx0XHQtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDpcblx0XHRcdFx0XHRzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxMZWZ0KCkgKSApXG5cdFx0XHQpXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9yZWFycmFuZ2U6IGZ1bmN0aW9uKCBldmVudCwgaSwgYSwgaGFyZFJlZnJlc2ggKSB7XG5cblx0XHRpZiAoIGEgKSB7XG5cdFx0XHRhWyAwIF0uYXBwZW5kQ2hpbGQoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpLml0ZW1bIDAgXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggdGhpcy5wbGFjZWhvbGRlclsgMCBdLFxuXHRcdFx0XHQoIHRoaXMuZGlyZWN0aW9uID09PSBcImRvd25cIiA/IGkuaXRlbVsgMCBdIDogaS5pdGVtWyAwIF0ubmV4dFNpYmxpbmcgKSApO1xuXHRcdH1cblxuXHRcdC8vVmFyaW91cyB0aGluZ3MgZG9uZSBoZXJlIHRvIGltcHJvdmUgdGhlIHBlcmZvcm1hbmNlOlxuXHRcdC8vIDEuIHdlIGNyZWF0ZSBhIHNldFRpbWVvdXQsIHRoYXQgY2FsbHMgcmVmcmVzaFBvc2l0aW9uc1xuXHRcdC8vIDIuIG9uIHRoZSBpbnN0YW5jZSwgd2UgaGF2ZSBhIGNvdW50ZXIgdmFyaWFibGUsIHRoYXQgZ2V0J3MgaGlnaGVyIGFmdGVyIGV2ZXJ5IGFwcGVuZFxuXHRcdC8vIDMuIG9uIHRoZSBsb2NhbCBzY29wZSwgd2UgY29weSB0aGUgY291bnRlciB2YXJpYWJsZSwgYW5kIGNoZWNrIGluIHRoZSB0aW1lb3V0LFxuXHRcdC8vIGlmIGl0J3Mgc3RpbGwgdGhlIHNhbWVcblx0XHQvLyA0LiB0aGlzIGxldHMgb25seSB0aGUgbGFzdCBhZGRpdGlvbiB0byB0aGUgdGltZW91dCBzdGFjayB0aHJvdWdoXG5cdFx0dGhpcy5jb3VudGVyID0gdGhpcy5jb3VudGVyID8gKyt0aGlzLmNvdW50ZXIgOiAxO1xuXHRcdHZhciBjb3VudGVyID0gdGhpcy5jb3VudGVyO1xuXG5cdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb3VudGVyID09PSB0aGlzLmNvdW50ZXIgKSB7XG5cblx0XHRcdFx0Ly9QcmVjb21wdXRlIGFmdGVyIGVhY2ggRE9NIGluc2VydGlvbiwgTk9UIG9uIG1vdXNlbW92ZVxuXHRcdFx0XHR0aGlzLnJlZnJlc2hQb3NpdGlvbnMoICFoYXJkUmVmcmVzaCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9LFxuXG5cdF9jbGVhcjogZnVuY3Rpb24oIGV2ZW50LCBub1Byb3BhZ2F0aW9uICkge1xuXG5cdFx0dGhpcy5yZXZlcnRpbmcgPSBmYWxzZTtcblxuXHRcdC8vIFdlIGRlbGF5IGFsbCBldmVudHMgdGhhdCBoYXZlIHRvIGJlIHRyaWdnZXJlZCB0byBhZnRlciB0aGUgcG9pbnQgd2hlcmUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0Ly8gaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZXZlcnl0aGluZyBlbHNlIG5vcm1hbGl6ZWQgYWdhaW5cblx0XHR2YXIgaSxcblx0XHRcdGRlbGF5ZWRUcmlnZ2VycyA9IFtdO1xuXG5cdFx0Ly8gV2UgZmlyc3QgaGF2ZSB0byB1cGRhdGUgdGhlIGRvbSBwb3NpdGlvbiBvZiB0aGUgYWN0dWFsIGN1cnJlbnRJdGVtXG5cdFx0Ly8gTm90ZTogZG9uJ3QgZG8gaXQgaWYgdGhlIGN1cnJlbnQgaXRlbSBpcyBhbHJlYWR5IHJlbW92ZWQgKGJ5IGEgdXNlciksIG9yIGl0IGdldHNcblx0XHQvLyByZWFwcGVuZGVkIChzZWUgIzQwODgpXG5cdFx0aWYgKCAhdGhpcy5fbm9GaW5hbFNvcnQgJiYgdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSggdGhpcy5jdXJyZW50SXRlbSApO1xuXHRcdH1cblx0XHR0aGlzLl9ub0ZpbmFsU29ydCA9IG51bGw7XG5cblx0XHRpZiAoIHRoaXMuaGVscGVyWyAwIF0gPT09IHRoaXMuY3VycmVudEl0ZW1bIDAgXSApIHtcblx0XHRcdGZvciAoIGkgaW4gdGhpcy5fc3RvcmVkQ1NTICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuX3N0b3JlZENTU1sgaSBdID09PSBcImF1dG9cIiB8fCB0aGlzLl9zdG9yZWRDU1NbIGkgXSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0XHR0aGlzLl9zdG9yZWRDU1NbIGkgXSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuY3VycmVudEl0ZW0uY3NzKCB0aGlzLl9zdG9yZWRDU1MgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmN1cnJlbnRJdGVtLCBcInVpLXNvcnRhYmxlLWhlbHBlclwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY3VycmVudEl0ZW0uc2hvdygpO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mcm9tT3V0c2lkZSAmJiAhbm9Qcm9wYWdhdGlvbiApIHtcblx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwicmVjZWl2ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzLmZyb21PdXRzaWRlICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0aWYgKCAoIHRoaXMuZnJvbU91dHNpZGUgfHxcblx0XHRcdFx0dGhpcy5kb21Qb3NpdGlvbi5wcmV2ICE9PVxuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoIFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiIClbIDAgXSB8fFxuXHRcdFx0XHR0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCAhPT0gdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVsgMCBdICkgJiYgIW5vUHJvcGFnYXRpb24gKSB7XG5cblx0XHRcdC8vIFRyaWdnZXIgdXBkYXRlIGNhbGxiYWNrIGlmIHRoZSBET00gcG9zaXRpb24gaGFzIGNoYW5nZWRcblx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwidXBkYXRlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHRoZSBpdGVtcyBDb250YWluZXIgaGFzIENoYW5nZWQgYW5kIHRyaWdnZXIgYXBwcm9wcmlhdGVcblx0XHQvLyBldmVudHMuXG5cdFx0aWYgKCB0aGlzICE9PSB0aGlzLmN1cnJlbnRDb250YWluZXIgKSB7XG5cdFx0XHRpZiAoICFub1Byb3BhZ2F0aW9uICkge1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaCggZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwicmVtb3ZlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCAoIGZ1bmN0aW9uKCBjICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRjLl90cmlnZ2VyKCBcInJlY2VpdmVcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSApLmNhbGwoIHRoaXMsIHRoaXMuY3VycmVudENvbnRhaW5lciApICk7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCAoIGZ1bmN0aW9uKCBjICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRjLl90cmlnZ2VyKCBcInVwZGF0ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ICkuY2FsbCggdGhpcywgdGhpcy5jdXJyZW50Q29udGFpbmVyICkgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1Bvc3QgZXZlbnRzIHRvIGNvbnRhaW5lcnNcblx0XHRmdW5jdGlvbiBkZWxheUV2ZW50KCB0eXBlLCBpbnN0YW5jZSwgY29udGFpbmVyICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0Y29udGFpbmVyLl90cmlnZ2VyKCB0eXBlLCBldmVudCwgaW5zdGFuY2UuX3VpSGFzaCggaW5zdGFuY2UgKSApO1xuXHRcdFx0fTtcblx0XHR9XG5cdFx0Zm9yICggaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdGlmICggIW5vUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBkZWxheUV2ZW50KCBcImRlYWN0aXZhdGVcIiwgdGhpcywgdGhpcy5jb250YWluZXJzWyBpIF0gKSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaCggZGVsYXlFdmVudCggXCJvdXRcIiwgdGhpcywgdGhpcy5jb250YWluZXJzWyBpIF0gKSApO1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5vdmVyID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL0RvIHdoYXQgd2FzIG9yaWdpbmFsbHkgaW4gcGx1Z2luc1xuXHRcdGlmICggdGhpcy5zdG9yZWRDdXJzb3IgKSB7XG5cdFx0XHR0aGlzLmRvY3VtZW50LmZpbmQoIFwiYm9keVwiICkuY3NzKCBcImN1cnNvclwiLCB0aGlzLnN0b3JlZEN1cnNvciApO1xuXHRcdFx0dGhpcy5zdG9yZWRTdHlsZXNoZWV0LnJlbW92ZSgpO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuX3N0b3JlZE9wYWNpdHkgKSB7XG5cdFx0XHR0aGlzLmhlbHBlci5jc3MoIFwib3BhY2l0eVwiLCB0aGlzLl9zdG9yZWRPcGFjaXR5ICk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5fc3RvcmVkWkluZGV4ICkge1xuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKCBcInpJbmRleFwiLCB0aGlzLl9zdG9yZWRaSW5kZXggPT09IFwiYXV0b1wiID8gXCJcIiA6IHRoaXMuX3N0b3JlZFpJbmRleCApO1xuXHRcdH1cblxuXHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblxuXHRcdGlmICggIW5vUHJvcGFnYXRpb24gKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImJlZm9yZVN0b3BcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7XG5cdFx0fVxuXG5cdFx0Ly8kKHRoaXMucGxhY2Vob2xkZXJbMF0pLnJlbW92ZSgpOyB3b3VsZCBoYXZlIGJlZW4gdGhlIGpRdWVyeSB3YXkgLSB1bmZvcnR1bmF0ZWx5LFxuXHRcdC8vIGl0IHVuYmluZHMgQUxMIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIVxuXHRcdHRoaXMucGxhY2Vob2xkZXJbIDAgXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0gKTtcblxuXHRcdGlmICggIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCApIHtcblx0XHRcdGlmICggdGhpcy5oZWxwZXJbIDAgXSAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0XHR0aGlzLmhlbHBlci5yZW1vdmUoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuaGVscGVyID0gbnVsbDtcblx0XHR9XG5cblx0XHRpZiAoICFub1Byb3BhZ2F0aW9uICkge1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxheWVkVHJpZ2dlcnMubGVuZ3RoOyBpKysgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlciBhbGwgZGVsYXllZCBldmVudHNcblx0XHRcdFx0ZGVsYXllZFRyaWdnZXJzWyBpIF0uY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTtcblx0XHR9XG5cblx0XHR0aGlzLmZyb21PdXRzaWRlID0gZmFsc2U7XG5cdFx0cmV0dXJuICF0aGlzLmNhbmNlbEhlbHBlclJlbW92YWw7XG5cblx0fSxcblxuXHRfdHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAkLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApID09PSBmYWxzZSApIHtcblx0XHRcdHRoaXMuY2FuY2VsKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF91aUhhc2g6IGZ1bmN0aW9uKCBfaW5zdCApIHtcblx0XHR2YXIgaW5zdCA9IF9pbnN0IHx8IHRoaXM7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlbHBlcjogaW5zdC5oZWxwZXIsXG5cdFx0XHRwbGFjZWhvbGRlcjogaW5zdC5wbGFjZWhvbGRlciB8fCAkKCBbXSApLFxuXHRcdFx0cG9zaXRpb246IGluc3QucG9zaXRpb24sXG5cdFx0XHRvcmlnaW5hbFBvc2l0aW9uOiBpbnN0Lm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRvZmZzZXQ6IGluc3QucG9zaXRpb25BYnMsXG5cdFx0XHRpdGVtOiBpbnN0LmN1cnJlbnRJdGVtLFxuXHRcdFx0c2VuZGVyOiBfaW5zdCA/IF9pbnN0LmVsZW1lbnQgOiBudWxsXG5cdFx0fTtcblx0fVxuXG59ICk7XG5cbn0gKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbIFwianF1ZXJ5XCIgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKSggZnVuY3Rpb24oICQgKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuJC51aSA9ICQudWkgfHwge307XG5cbnJldHVybiAkLnVpLnZlcnNpb24gPSBcIjEuMTMuMlwiO1xuXG59ICk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIi8qIVxuICAqIEJvb3RzdHJhcCB2NC42LjEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAyMSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgncG9wcGVyLmpzJykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdqcXVlcnknLCAncG9wcGVyLmpzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuYm9vdHN0cmFwID0ge30sIGdsb2JhbC5qUXVlcnksIGdsb2JhbC5Qb3BwZXIpKTtcbn0pKHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cywgJCwgUG9wcGVyKSB7ICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHRMZWdhY3kgKGUpIHsgcmV0dXJuIGUgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmICdkZWZhdWx0JyBpbiBlID8gZSA6IHsgJ2RlZmF1bHQnOiBlIH07IH1cblxuICB2YXIgJF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koJCk7XG4gIHZhciBQb3BwZXJfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KFBvcHBlcik7XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG5cbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG5cbiAgICBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICAgIG8uX19wcm90b19fID0gcDtcbiAgICAgIHJldHVybiBvO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuNi4xKTogdXRpbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIC8qKlxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKi9cblxuICB2YXIgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7XG4gIHZhciBNQVhfVUlEID0gMTAwMDAwMDtcbiAgdmFyIE1JTExJU0VDT05EU19NVUxUSVBMSUVSID0gMTAwMDsgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuXG4gIGZ1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmluZFR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgICAgIGlmICgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XG4gICAgICB9XG4gICAgfSwgZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3I7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZXZlbnQuc3BlY2lhbFtVdGlsLlRSQU5TSVRJT05fRU5EXSA9IGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKTtcbiAgfVxuICAvKipcbiAgICogUHVibGljIFV0aWwgQVBJXG4gICAqL1xuXG5cbiAgdmFyIFV0aWwgPSB7XG4gICAgVFJBTlNJVElPTl9FTkQ6ICdic1RyYW5zaXRpb25FbmQnLFxuICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkge1xuICAgICAgZG8ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcblxuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9LFxuICAgIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgICAgICB2YXIgaHJlZkF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICBzZWxlY3RvciA9IGhyZWZBdHRyICYmIGhyZWZBdHRyICE9PSAnIycgPyBocmVmQXR0ci50cmltKCkgOiAnJztcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBudWxsO1xuICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XG5cblxuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xuICAgICAgdmFyIHRyYW5zaXRpb25EZWxheSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kZWxheScpO1xuICAgICAgdmFyIGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgdmFyIGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpOyAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG5cbiAgICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gJiYgIWZsb2F0VHJhbnNpdGlvbkRlbGF5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG5cblxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KCcsJylbMF07XG4gICAgICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXTtcbiAgICAgIHJldHVybiAocGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICsgcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpKSAqIE1JTExJU0VDT05EU19NVUxUSVBMSUVSO1xuICAgIH0sXG4gICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIH0sXG4gICAgdHJpZ2dlclRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLnRyaWdnZXIoVFJBTlNJVElPTl9FTkQpO1xuICAgIH0sXG4gICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORCk7XG4gICAgfSxcbiAgICBpc0VsZW1lbnQ6IGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGU7XG4gICAgfSxcbiAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBVdGlsLmlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKSArIFwiOiBcIiArIChcIk9wdGlvbiBcXFwiXCIgKyBwcm9wZXJ0eSArIFwiXFxcIiBwcm92aWRlZCB0eXBlIFxcXCJcIiArIHZhbHVlVHlwZSArIFwiXFxcIiBcIikgKyAoXCJidXQgZXhwZWN0ZWQgdHlwZSBcXFwiXCIgKyBleHBlY3RlZFR5cGVzICsgXCJcXFwiLlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmaW5kU2hhZG93Um9vdDogZnVuY3Rpb24gZmluZFNoYWRvd1Jvb3QoZWxlbWVudCkge1xuICAgICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcblxuXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9IC8vIHdoZW4gd2UgZG9uJ3QgZmluZCBhIHNoYWRvdyByb290XG5cblxuICAgICAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBVdGlsLmZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgfSxcbiAgICBqUXVlcnlEZXRlY3Rpb246IGZ1bmN0aW9uIGpRdWVyeURldGVjdGlvbigpIHtcbiAgICAgIGlmICh0eXBlb2YgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2ZXJzaW9uID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKTtcbiAgICAgIHZhciBtaW5NYWpvciA9IDE7XG4gICAgICB2YXIgbHRNYWpvciA9IDI7XG4gICAgICB2YXIgbWluTWlub3IgPSA5O1xuICAgICAgdmFyIG1pblBhdGNoID0gMTtcbiAgICAgIHZhciBtYXhNYWpvciA9IDQ7XG5cbiAgICAgIGlmICh2ZXJzaW9uWzBdIDwgbHRNYWpvciAmJiB2ZXJzaW9uWzFdIDwgbWluTWlub3IgfHwgdmVyc2lvblswXSA9PT0gbWluTWFqb3IgJiYgdmVyc2lvblsxXSA9PT0gbWluTWlub3IgJiYgdmVyc2lvblsyXSA8IG1pblBhdGNoIHx8IHZlcnNpb25bMF0gPj0gbWF4TWFqb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgVXRpbC5qUXVlcnlEZXRlY3Rpb24oKTtcbiAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJGEgPSAnYWxlcnQnO1xuICB2YXIgVkVSU0lPTiRhID0gJzQuNi4xJztcbiAgdmFyIERBVEFfS0VZJGEgPSAnYnMuYWxlcnQnO1xuICB2YXIgRVZFTlRfS0VZJGEgPSBcIi5cIiArIERBVEFfS0VZJGE7XG4gIHZhciBEQVRBX0FQSV9LRVkkNyA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJGEgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJGFdO1xuICB2YXIgQ0xBU1NfTkFNRV9BTEVSVCA9ICdhbGVydCc7XG4gIHZhciBDTEFTU19OQU1FX0ZBREUkNSA9ICdmYWRlJztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQ3ID0gJ3Nob3cnO1xuICB2YXIgRVZFTlRfQ0xPU0UgPSBcImNsb3NlXCIgKyBFVkVOVF9LRVkkYTtcbiAgdmFyIEVWRU5UX0NMT1NFRCA9IFwiY2xvc2VkXCIgKyBFVkVOVF9LRVkkYTtcbiAgdmFyIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDYgPSBcImNsaWNrXCIgKyBFVkVOVF9LRVkkYSArIERBVEFfQVBJX0tFWSQ3O1xuICB2YXIgU0VMRUNUT1JfRElTTUlTUyA9ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nO1xuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cblxuICB2YXIgQWxlcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFsZXJ0KGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQWxlcnQucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZWxlbWVudCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgcm9vdEVsZW1lbnQgPSB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpO1xuXG4gICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSRhKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Um9vdEVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgdmFyIHBhcmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLmNsb3Nlc3QoXCIuXCIgKyBDTEFTU19OQU1FX0FMRVJUKVswXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmlnZ2VyQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgICB2YXIgY2xvc2VFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX0NMT1NFKTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudCk7XG4gICAgICByZXR1cm4gY2xvc2VFdmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDcpO1xuXG4gICAgICBpZiAoISRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQ1KSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgfTtcblxuICAgIF9wcm90by5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZWxlbWVudCkuZGV0YWNoKCkudHJpZ2dlcihFVkVOVF9DTE9TRUQpLnJlbW92ZSgpO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQWxlcnQuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSRhKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEFsZXJ0KHRoaXMpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVkkYSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQWxlcnQuX2hhbmRsZURpc21pc3MgPSBmdW5jdGlvbiBfaGFuZGxlRGlzbWlzcyhhbGVydEluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBhbGVydEluc3RhbmNlLmNsb3NlKHRoaXMpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKEFsZXJ0LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiRhO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBbGVydDtcbiAgfSgpO1xuICAvKipcbiAgICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAgICovXG5cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkb2N1bWVudCkub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNiwgU0VMRUNUT1JfRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJGFdID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSRhXS5Db25zdHJ1Y3RvciA9IEFsZXJ0O1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkYV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJGFdID0gSlFVRVJZX05PX0NPTkZMSUNUJGE7XG4gICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cblxuICB2YXIgTkFNRSQ5ID0gJ2J1dHRvbic7XG4gIHZhciBWRVJTSU9OJDkgPSAnNC42LjEnO1xuICB2YXIgREFUQV9LRVkkOSA9ICdicy5idXR0b24nO1xuICB2YXIgRVZFTlRfS0VZJDkgPSBcIi5cIiArIERBVEFfS0VZJDk7XG4gIHZhciBEQVRBX0FQSV9LRVkkNiA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDkgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDldO1xuICB2YXIgQ0xBU1NfTkFNRV9BQ1RJVkUkMyA9ICdhY3RpdmUnO1xuICB2YXIgQ0xBU1NfTkFNRV9CVVRUT04gPSAnYnRuJztcbiAgdmFyIENMQVNTX05BTUVfRk9DVVMgPSAnZm9jdXMnO1xuICB2YXIgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNSA9IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ5ICsgREFUQV9BUElfS0VZJDY7XG4gIHZhciBFVkVOVF9GT0NVU19CTFVSX0RBVEFfQVBJID0gXCJmb2N1c1wiICsgRVZFTlRfS0VZJDkgKyBEQVRBX0FQSV9LRVkkNiArIFwiIFwiICsgKFwiYmx1clwiICsgRVZFTlRfS0VZJDkgKyBEQVRBX0FQSV9LRVkkNik7XG4gIHZhciBFVkVOVF9MT0FEX0RBVEFfQVBJJDIgPSBcImxvYWRcIiArIEVWRU5UX0tFWSQ5ICsgREFUQV9BUElfS0VZJDY7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRV9DQVJST1QgPSAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRVMgPSAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0ID0gJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvblwiXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRVNfQlVUVE9OUyA9ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdIC5idG4nO1xuICB2YXIgU0VMRUNUT1JfSU5QVVQgPSAnaW5wdXQ6bm90KFt0eXBlPVwiaGlkZGVuXCJdKSc7XG4gIHZhciBTRUxFQ1RPUl9BQ1RJVkUkMiA9ICcuYWN0aXZlJztcbiAgdmFyIFNFTEVDVE9SX0JVVFRPTiA9ICcuYnRuJztcbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG5cbiAgdmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5zaG91bGRBdm9pZFRyaWdnZXJDaGFuZ2UgPSBmYWxzZTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdmFyIHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlO1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuY2xvc2VzdChTRUxFQ1RPUl9EQVRBX1RPR0dMRVMpWzBdO1xuXG4gICAgICBpZiAocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX0lOUFVUKTtcblxuICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUkMykpIHtcbiAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfQUNUSVZFJDIpO1xuXG4gICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICAvLyBpZiBpdCdzIG5vdCBhIHJhZGlvIGJ1dHRvbiBvciBjaGVja2JveCBkb24ndCBhZGQgYSBwb2ludGxlc3MvaW52YWxpZCBjaGVja2VkIHByb3BlcnR5IHRvIHRoZSBpbnB1dFxuICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdjaGVja2JveCcgfHwgaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQUNUSVZFJDMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkQXZvaWRUcmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCEodGhpcy5fZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpKSB7XG4gICAgICAgIGlmIChhZGRBcmlhUHJlc3NlZCkge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUkMykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFJDMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkOSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIGF2b2lkVHJpZ2dlckNoYW5nZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkkOSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSQ5LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuc2hvdWxkQXZvaWRUcmlnZ2VyQ2hhbmdlID0gYXZvaWRUcmlnZ2VyQ2hhbmdlO1xuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ5O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b247XG4gIH0oKTtcbiAgLyoqXG4gICAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQpLm9uKEVWRU5UX0NMSUNLX0RBVEFfQVBJJDUsIFNFTEVDVE9SX0RBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgaW5pdGlhbEJ1dHRvbiA9IGJ1dHRvbjtcblxuICAgIGlmICghJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYnV0dG9uKS5oYXNDbGFzcyhDTEFTU19OQU1FX0JVVFRPTikpIHtcbiAgICAgIGJ1dHRvbiA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGJ1dHRvbikuY2xvc2VzdChTRUxFQ1RPUl9CVVRUT04pWzBdO1xuICAgIH1cblxuICAgIGlmICghYnV0dG9uIHx8IGJ1dHRvbi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gd29yayBhcm91bmQgRmlyZWZveCBidWcgIzE1NDA5OTVcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlucHV0QnRuID0gYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfSU5QVVQpO1xuXG4gICAgICBpZiAoaW5wdXRCdG4gJiYgKGlucHV0QnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBpbnB1dEJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIHdvcmsgYXJvdW5kIEZpcmVmb3ggYnVnICMxNTQwOTk1XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5pdGlhbEJ1dHRvbi50YWdOYW1lID09PSAnSU5QVVQnIHx8IGJ1dHRvbi50YWdOYW1lICE9PSAnTEFCRUwnKSB7XG4gICAgICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYnV0dG9uKSwgJ3RvZ2dsZScsIGluaXRpYWxCdXR0b24udGFnTmFtZSA9PT0gJ0lOUFVUJyk7XG4gICAgICB9XG4gICAgfVxuICB9KS5vbihFVkVOVF9GT0NVU19CTFVSX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShldmVudC50YXJnZXQpLmNsb3Nlc3QoU0VMRUNUT1JfQlVUVE9OKVswXTtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShidXR0b24pLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfRk9DVVMsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZXZlbnQudHlwZSkpO1xuICB9KTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0od2luZG93KS5vbihFVkVOVF9MT0FEX0RBVEFfQVBJJDIsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlbnN1cmUgY29ycmVjdCBhY3RpdmUgY2xhc3MgaXMgc2V0IHRvIG1hdGNoIHRoZSBjb250cm9scycgYWN0dWFsIHZhbHVlcy9zdGF0ZXNcbiAgICAvLyBmaW5kIGFsbCBjaGVja2JveGVzL3JlYWRpbyBidXR0b25zIGluc2lkZSBkYXRhLXRvZ2dsZSBncm91cHNcbiAgICB2YXIgYnV0dG9ucyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1RPR0dMRVNfQlVUVE9OUykpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1dHRvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBidXR0b24gPSBidXR0b25zW2ldO1xuICAgICAgdmFyIGlucHV0ID0gYnV0dG9uLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfSU5QVVQpO1xuXG4gICAgICBpZiAoaW5wdXQuY2hlY2tlZCB8fCBpbnB1dC5oYXNBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDMpO1xuICAgICAgfVxuICAgIH0gLy8gZmluZCBhbGwgYnV0dG9uIHRvZ2dsZXNcblxuXG4gICAgYnV0dG9ucyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0KSk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSBidXR0b25zLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICB2YXIgX2J1dHRvbiA9IGJ1dHRvbnNbX2ldO1xuXG4gICAgICBpZiAoX2J1dHRvbi5nZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgX2J1dHRvbi5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ5XSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDldLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkOV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDldID0gSlFVRVJZX05PX0NPTkZMSUNUJDk7XG4gICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkOCA9ICdjYXJvdXNlbCc7XG4gIHZhciBWRVJTSU9OJDggPSAnNC42LjEnO1xuICB2YXIgREFUQV9LRVkkOCA9ICdicy5jYXJvdXNlbCc7XG4gIHZhciBFVkVOVF9LRVkkOCA9IFwiLlwiICsgREFUQV9LRVkkODtcbiAgdmFyIERBVEFfQVBJX0tFWSQ1ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkOCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkOF07XG4gIHZhciBBUlJPV19MRUZUX0tFWUNPREUgPSAzNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgbGVmdCBhcnJvdyBrZXlcblxuICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcblxuICB2YXIgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbiAgdmFyIFNXSVBFX1RIUkVTSE9MRCA9IDQwO1xuICB2YXIgQ0xBU1NfTkFNRV9DQVJPVVNFTCA9ICdjYXJvdXNlbCc7XG4gIHZhciBDTEFTU19OQU1FX0FDVElWRSQyID0gJ2FjdGl2ZSc7XG4gIHZhciBDTEFTU19OQU1FX1NMSURFID0gJ3NsaWRlJztcbiAgdmFyIENMQVNTX05BTUVfUklHSFQgPSAnY2Fyb3VzZWwtaXRlbS1yaWdodCc7XG4gIHZhciBDTEFTU19OQU1FX0xFRlQgPSAnY2Fyb3VzZWwtaXRlbS1sZWZ0JztcbiAgdmFyIENMQVNTX05BTUVfTkVYVCA9ICdjYXJvdXNlbC1pdGVtLW5leHQnO1xuICB2YXIgQ0xBU1NfTkFNRV9QUkVWID0gJ2Nhcm91c2VsLWl0ZW0tcHJldic7XG4gIHZhciBDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQgPSAncG9pbnRlci1ldmVudCc7XG4gIHZhciBESVJFQ1RJT05fTkVYVCA9ICduZXh0JztcbiAgdmFyIERJUkVDVElPTl9QUkVWID0gJ3ByZXYnO1xuICB2YXIgRElSRUNUSU9OX0xFRlQgPSAnbGVmdCc7XG4gIHZhciBESVJFQ1RJT05fUklHSFQgPSAncmlnaHQnO1xuICB2YXIgRVZFTlRfU0xJREUgPSBcInNsaWRlXCIgKyBFVkVOVF9LRVkkODtcbiAgdmFyIEVWRU5UX1NMSUQgPSBcInNsaWRcIiArIEVWRU5UX0tFWSQ4O1xuICB2YXIgRVZFTlRfS0VZRE9XTiA9IFwia2V5ZG93blwiICsgRVZFTlRfS0VZJDg7XG4gIHZhciBFVkVOVF9NT1VTRUVOVEVSID0gXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVkkODtcbiAgdmFyIEVWRU5UX01PVVNFTEVBVkUgPSBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSQ4O1xuICB2YXIgRVZFTlRfVE9VQ0hTVEFSVCA9IFwidG91Y2hzdGFydFwiICsgRVZFTlRfS0VZJDg7XG4gIHZhciBFVkVOVF9UT1VDSE1PVkUgPSBcInRvdWNobW92ZVwiICsgRVZFTlRfS0VZJDg7XG4gIHZhciBFVkVOVF9UT1VDSEVORCA9IFwidG91Y2hlbmRcIiArIEVWRU5UX0tFWSQ4O1xuICB2YXIgRVZFTlRfUE9JTlRFUkRPV04gPSBcInBvaW50ZXJkb3duXCIgKyBFVkVOVF9LRVkkODtcbiAgdmFyIEVWRU5UX1BPSU5URVJVUCA9IFwicG9pbnRlcnVwXCIgKyBFVkVOVF9LRVkkODtcbiAgdmFyIEVWRU5UX0RSQUdfU1RBUlQgPSBcImRyYWdzdGFydFwiICsgRVZFTlRfS0VZJDg7XG4gIHZhciBFVkVOVF9MT0FEX0RBVEFfQVBJJDEgPSBcImxvYWRcIiArIEVWRU5UX0tFWSQ4ICsgREFUQV9BUElfS0VZJDU7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQ0ID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDggKyBEQVRBX0FQSV9LRVkkNTtcbiAgdmFyIFNFTEVDVE9SX0FDVElWRSQxID0gJy5hY3RpdmUnO1xuICB2YXIgU0VMRUNUT1JfQUNUSVZFX0lURU0gPSAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJztcbiAgdmFyIFNFTEVDVE9SX0lURU0gPSAnLmNhcm91c2VsLWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfSVRFTV9JTUcgPSAnLmNhcm91c2VsLWl0ZW0gaW1nJztcbiAgdmFyIFNFTEVDVE9SX05FWFRfUFJFViA9ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JztcbiAgdmFyIFNFTEVDVE9SX0lORElDQVRPUlMgPSAnLmNhcm91c2VsLWluZGljYXRvcnMnO1xuICB2YXIgU0VMRUNUT1JfREFUQV9TTElERSA9ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1JJREUgPSAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJztcbiAgdmFyIERlZmF1bHQkNyA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzbGlkZTogZmFsc2UsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICB0b3VjaDogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkNyA9IHtcbiAgICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHdyYXA6ICdib29sZWFuJyxcbiAgICB0b3VjaDogJ2Jvb2xlYW4nXG4gIH07XG4gIHZhciBQb2ludGVyVHlwZSA9IHtcbiAgICBUT1VDSDogJ3RvdWNoJyxcbiAgICBQRU46ICdwZW4nXG4gIH07XG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuXG4gIHZhciBDYXJvdXNlbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcbiAgICAgIHRoaXMudG91Y2hTdGFydFggPSAwO1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfSU5ESUNBVE9SUyk7XG4gICAgICB0aGlzLl90b3VjaFN1cHBvcnRlZCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuICAgICAgdGhpcy5fcG9pbnRlckV2ZW50ID0gQm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50IHx8IHdpbmRvdy5NU1BvaW50ZXJFdmVudCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDYXJvdXNlbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShESVJFQ1RJT05fTkVYVCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5uZXh0V2hlblZpc2libGUgPSBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KTsgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuXG4gICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiAkZWxlbWVudC5pcygnOnZpc2libGUnKSAmJiAkZWxlbWVudC5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERJUkVDVElPTl9QUkVWKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX05FWFRfUFJFVikpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCgpO1xuXG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udG8gPSBmdW5jdGlvbiB0byhpbmRleCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9BQ1RJVkVfSVRFTSk7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uZShFVkVOVF9TTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRvKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERJUkVDVElPTl9ORVhUIDogRElSRUNUSU9OX1BSRVY7XG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ4KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkOCk7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQkNywgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkOCwgY29uZmlnLCBEZWZhdWx0VHlwZSQ3KTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5faGFuZGxlU3dpcGUgPSBmdW5jdGlvbiBfaGFuZGxlU3dpcGUoKSB7XG4gICAgICB2YXIgYWJzRGVsdGF4ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7XG5cbiAgICAgIGlmIChhYnNEZWx0YXggPD0gU1dJUEVfVEhSRVNIT0xEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGFic0RlbHRheCAvIHRoaXMudG91Y2hEZWx0YVg7XG4gICAgICB0aGlzLnRvdWNoRGVsdGFYID0gMDsgLy8gc3dpcGUgbGVmdFxuXG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCkge1xuICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgIH0gLy8gc3dpcGUgcmlnaHRcblxuXG4gICAgICBpZiAoZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX0tFWURPV04sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2tleWRvd24oZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9NT1VTRUVOVEVSLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnBhdXNlKGV2ZW50KTtcbiAgICAgICAgfSkub24oRVZFTlRfTU9VU0VMRUFWRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5jeWNsZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvdWNoKSB7XG4gICAgICAgIHRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLl90b3VjaFN1cHBvcnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpczMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoU3RhcnRYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYO1xuICAgICAgICB9IGVsc2UgaWYgKCFfdGhpczMuX3BvaW50ZXJFdmVudCkge1xuICAgICAgICAgIF90aGlzMy50b3VjaFN0YXJ0WCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgbW92ZSA9IGZ1bmN0aW9uIG1vdmUoZXZlbnQpIHtcbiAgICAgICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgICAgICBfdGhpczMudG91Y2hEZWx0YVggPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA+IDEgPyAwIDogZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFggLSBfdGhpczMudG91Y2hTdGFydFg7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZW5kID0gZnVuY3Rpb24gZW5kKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpczMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoRGVsdGFYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLl9oYW5kbGVTd2lwZSgpO1xuXG4gICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG4gICAgICAgICAgX3RoaXMzLnBhdXNlKCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMzLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMy50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5jeWNsZShldmVudCk7XG4gICAgICAgICAgfSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIF90aGlzMy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0lURU1fSU1HKSkub24oRVZFTlRfRFJBR19TVEFSVCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX1BPSU5URVJET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub24oRVZFTlRfUE9JTlRFUlVQLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gZW5kKGV2ZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9UT1VDSFNUQVJULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub24oRVZFTlRfVE9VQ0hNT1ZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gbW92ZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9UT1VDSEVORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGVuZChldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMucHJldigpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgICAgdGhpcy5faXRlbXMgPSBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZSA/IFtdLnNsaWNlLmNhbGwoZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfSVRFTSkpIDogW107XG4gICAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRJdGVtQnlEaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCkge1xuICAgICAgdmFyIGlzTmV4dERpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX05FWFQ7XG4gICAgICB2YXIgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fUFJFVjtcblxuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbGFzdEl0ZW1JbmRleCA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaXNHb2luZ1RvV3JhcCA9IGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXg7XG5cbiAgICAgIGlmIChpc0dvaW5nVG9XcmFwICYmICF0aGlzLl9jb25maWcud3JhcCkge1xuICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fUFJFViA/IC0xIDogMTtcbiAgICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLl9pdGVtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMSA/IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdIDogdGhpcy5faXRlbXNbaXRlbUluZGV4XTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmlnZ2VyU2xpZGVFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyU2xpZGVFdmVudChyZWxhdGVkVGFyZ2V0LCBldmVudERpcmVjdGlvbk5hbWUpIHtcbiAgICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgdmFyIGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfQUNUSVZFX0lURU0pKTtcblxuICAgICAgdmFyIHNsaWRlRXZlbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9TTElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuICAgICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICAgIH0pO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcbiAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfQUNUSVZFJDEpKTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oaW5kaWNhdG9ycykucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG5cbiAgICAgICAgdmFyIG5leHRJbmRpY2F0b3IgPSB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXG4gICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0obmV4dEluZGljYXRvcikuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl91cGRhdGVJbnRlcnZhbCA9IGZ1bmN0aW9uIF91cGRhdGVJbnRlcnZhbCgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fYWN0aXZlRWxlbWVudCB8fCB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfQUNUSVZFX0lURU0pO1xuXG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudEludGVydmFsID0gcGFyc2VJbnQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJ2YWwnKSwgMTApO1xuXG4gICAgICBpZiAoZWxlbWVudEludGVydmFsKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbDtcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gZWxlbWVudEludGVydmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2xpZGUgPSBmdW5jdGlvbiBfc2xpZGUoZGlyZWN0aW9uLCBlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfQUNUSVZFX0lURU0pO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBlbGVtZW50IHx8IGFjdGl2ZUVsZW1lbnQgJiYgdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTtcblxuICAgICAgdmFyIGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdmFyIGRpcmVjdGlvbmFsQ2xhc3NOYW1lO1xuICAgICAgdmFyIG9yZGVyQ2xhc3NOYW1lO1xuICAgICAgdmFyIGV2ZW50RGlyZWN0aW9uTmFtZTtcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX05FWFQpIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDTEFTU19OQU1FX0xFRlQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ0xBU1NfTkFNRV9ORVhUO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBESVJFQ1RJT05fTEVGVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ0xBU1NfTkFNRV9SSUdIVDtcbiAgICAgICAgb3JkZXJDbGFzc05hbWUgPSBDTEFTU19OQU1FX1BSRVY7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERJUkVDVElPTl9SSUdIVDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRFbGVtZW50ICYmICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQyKSkge1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9IHRoaXMuX3RyaWdnZXJTbGlkZUV2ZW50KG5leHRFbGVtZW50LCBldmVudERpcmVjdGlvbk5hbWUpO1xuXG4gICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xuXG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgICB2YXIgc2xpZEV2ZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRXZlbnQoRVZFTlRfU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TTElERSkpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0obmV4dEVsZW1lbnQpLmFkZENsYXNzKG9yZGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGFjdGl2ZUVsZW1lbnQpO1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShhY3RpdmVFbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKG5leHRFbGVtZW50KS5yZW1vdmVDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFJDIgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lICsgXCIgXCIgKyBkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICAgX3RoaXM0Ll9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpczQuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShuZXh0RWxlbWVudCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzKS5kYXRhKERBVEFfS0VZJDgpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQkNywgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuZGF0YSgpKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBfY29uZmlnID0gX2V4dGVuZHMoe30sIF9jb25maWcsIGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aW9uID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyBjb25maWcgOiBfY29uZmlnLnNsaWRlO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuZGF0YShEQVRBX0tFWSQ4LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGRhdGEudG8oY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBhY3Rpb24gKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVthY3Rpb25dKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5pbnRlcnZhbCAmJiBfY29uZmlnLnJpZGUpIHtcbiAgICAgICAgICBkYXRhLnBhdXNlKCk7XG4gICAgICAgICAgZGF0YS5jeWNsZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHNlbGVjdG9yKVswXTtcblxuICAgICAgaWYgKCF0YXJnZXQgfHwgISRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRhcmdldCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9DQVJPVVNFTCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlnID0gX2V4dGVuZHMoe30sICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRhcmdldCkuZGF0YSgpLCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzKS5kYXRhKCkpO1xuXG4gICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGFyZ2V0KSwgY29uZmlnKTtcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGFyZ2V0KS5kYXRhKERBVEFfS0VZJDgpLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ3O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYXJvdXNlbDtcbiAgfSgpO1xuICAvKipcbiAgICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAgICovXG5cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkb2N1bWVudCkub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCwgU0VMRUNUT1JfREFUQV9TTElERSwgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIpO1xuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh3aW5kb3cpLm9uKEVWRU5UX0xPQURfREFUQV9BUEkkMSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYXJvdXNlbHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfREFUQV9SSURFKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oY2Fyb3VzZWxzW2ldKTtcblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDhdID0gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ4XS5Db25zdHJ1Y3RvciA9IENhcm91c2VsO1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkOF0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDhdID0gSlFVRVJZX05PX0NPTkZMSUNUJDg7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cblxuICB2YXIgTkFNRSQ3ID0gJ2NvbGxhcHNlJztcbiAgdmFyIFZFUlNJT04kNyA9ICc0LjYuMSc7XG4gIHZhciBEQVRBX0tFWSQ3ID0gJ2JzLmNvbGxhcHNlJztcbiAgdmFyIEVWRU5UX0tFWSQ3ID0gXCIuXCIgKyBEQVRBX0tFWSQ3O1xuICB2YXIgREFUQV9BUElfS0VZJDQgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQ3ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ3XTtcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQ2ID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9ICdjb2xsYXBzZSc7XG4gIHZhciBDTEFTU19OQU1FX0NPTExBUFNJTkcgPSAnY29sbGFwc2luZyc7XG4gIHZhciBDTEFTU19OQU1FX0NPTExBUFNFRCA9ICdjb2xsYXBzZWQnO1xuICB2YXIgRElNRU5TSU9OX1dJRFRIID0gJ3dpZHRoJztcbiAgdmFyIERJTUVOU0lPTl9IRUlHSFQgPSAnaGVpZ2h0JztcbiAgdmFyIEVWRU5UX1NIT1ckNCA9IFwic2hvd1wiICsgRVZFTlRfS0VZJDc7XG4gIHZhciBFVkVOVF9TSE9XTiQ0ID0gXCJzaG93blwiICsgRVZFTlRfS0VZJDc7XG4gIHZhciBFVkVOVF9ISURFJDQgPSBcImhpZGVcIiArIEVWRU5UX0tFWSQ3O1xuICB2YXIgRVZFTlRfSElEREVOJDQgPSBcImhpZGRlblwiICsgRVZFTlRfS0VZJDc7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQzID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDcgKyBEQVRBX0FQSV9LRVkkNDtcbiAgdmFyIFNFTEVDVE9SX0FDVElWRVMgPSAnLnNob3csIC5jb2xsYXBzaW5nJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMgPSAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nO1xuICB2YXIgRGVmYXVsdCQ2ID0ge1xuICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICBwYXJlbnQ6ICcnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQ2ID0ge1xuICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuICAgIHBhcmVudDogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuXG4gIHZhciBDb2xsYXBzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1baHJlZj1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl0sXCIgKyAoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS10YXJnZXQ9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdXCIpKSk7XG4gICAgICB2YXIgdG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtID0gdG9nZ2xlTGlzdFtpXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuICAgICAgICB2YXIgZmlsdGVyRWxlbWVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAoZm91bmRFbGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kRWxlbSA9PT0gZWxlbWVudDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmIGZpbHRlckVsZW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQ2KSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQ2KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3RpdmVzO1xuICAgICAgdmFyIGFjdGl2ZXNEYXRhO1xuXG4gICAgICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgICAgIGFjdGl2ZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0FDVElWRVMpKS5maWx0ZXIoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLl9jb25maWcucGFyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudCcpID09PSBfdGhpcy5fY29uZmlnLnBhcmVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9DT0xMQVBTRSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhY3RpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGFjdGl2ZXMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICAgIGFjdGl2ZXNEYXRhID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZJDcpO1xuXG4gICAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRXZlbnQoRVZFTlRfU0hPVyQ0KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvciksICdoaWRlJyk7XG5cbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVkkNywgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFKS5hZGRDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKS5hZGRDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFICsgXCIgXCIgKyBDTEFTU19OQU1FX1NIT1ckNik7XG4gICAgICAgIF90aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgICBfdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFVkVOVF9TSE9XTiQ0KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICAgICAgdmFyIHNjcm9sbFNpemUgPSBcInNjcm9sbFwiICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV0gKyBcInB4XCI7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICEkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckNikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX0hJREUkNCk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgXCJweFwiO1xuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNJTkcpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfQ09MTEFQU0UgKyBcIiBcIiArIENMQVNTX05BTUVfU0hPVyQ2KTtcbiAgICAgIHZhciB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5TGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJBcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSk7XG5cbiAgICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDYpKSB7XG4gICAgICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRyaWdnZXIpLmFkZENsYXNzKENMQVNTX05BTUVfQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXMyLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNJTkcpLmFkZENsYXNzKENMQVNTX05BTUVfQ09MTEFQU0UpLnRyaWdnZXIoRVZFTlRfSElEREVOJDQpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDcpO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IG51bGw7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0JDYsIGNvbmZpZyk7XG4gICAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQ3LCBjb25maWcsIERlZmF1bHRUeXBlJDYpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgdmFyIGhhc1dpZHRoID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRElNRU5TSU9OX1dJRFRIKTtcbiAgICAgIHJldHVybiBoYXNXaWR0aCA/IERJTUVOU0lPTl9XSURUSCA6IERJTUVOU0lPTl9IRUlHSFQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyZW50O1xuXG4gICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudDsgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvciA9IFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCI7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShjaGlsZHJlbikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIHZhciBpc09wZW4gPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckNik7XG5cbiAgICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ0xBU1NfTkFNRV9DT0xMQVBTRUQsICFpc09wZW4pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHJldHVybiBzZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogbnVsbDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSQ3KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0JDYsICRlbGVtZW50LmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiBfY29uZmlnLnRvZ2dsZSAmJiB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZJDcsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDb2xsYXBzZSwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDY7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENvbGxhcHNlO1xuICB9KCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50KS5vbihFVkVOVF9DTElDS19EQVRBX0FQSSQzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdHJpZ2dlciA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpO1xuICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3JzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0YXJnZXQuZGF0YShEQVRBX0tFWSQ3KTtcbiAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG5cbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDddID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ3XS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkN10ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDddID0gSlFVRVJZX05PX0NPTkZMSUNUJDc7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cblxuICB2YXIgTkFNRSQ2ID0gJ2Ryb3Bkb3duJztcbiAgdmFyIFZFUlNJT04kNiA9ICc0LjYuMSc7XG4gIHZhciBEQVRBX0tFWSQ2ID0gJ2JzLmRyb3Bkb3duJztcbiAgdmFyIEVWRU5UX0tFWSQ2ID0gXCIuXCIgKyBEQVRBX0tFWSQ2O1xuICB2YXIgREFUQV9BUElfS0VZJDMgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQ2ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ2XTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFJDEgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBTUEFDRV9LRVlDT0RFID0gMzI7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuXG4gIHZhciBUQUJfS0VZQ09ERSA9IDk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcblxuICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcblxuICB2YXIgQVJST1dfRE9XTl9LRVlDT0RFID0gNDA7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG5cbiAgdmFyIFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDM7IC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuXG4gIHZhciBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoQVJST1dfVVBfS0VZQ09ERSArIFwifFwiICsgQVJST1dfRE9XTl9LRVlDT0RFICsgXCJ8XCIgKyBFU0NBUEVfS0VZQ09ERSQxKTtcbiAgdmFyIENMQVNTX05BTUVfRElTQUJMRUQkMSA9ICdkaXNhYmxlZCc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckNSA9ICdzaG93JztcbiAgdmFyIENMQVNTX05BTUVfRFJPUFVQID0gJ2Ryb3B1cCc7XG4gIHZhciBDTEFTU19OQU1FX0RST1BSSUdIVCA9ICdkcm9wcmlnaHQnO1xuICB2YXIgQ0xBU1NfTkFNRV9EUk9QTEVGVCA9ICdkcm9wbGVmdCc7XG4gIHZhciBDTEFTU19OQU1FX01FTlVSSUdIVCA9ICdkcm9wZG93bi1tZW51LXJpZ2h0JztcbiAgdmFyIENMQVNTX05BTUVfUE9TSVRJT05fU1RBVElDID0gJ3Bvc2l0aW9uLXN0YXRpYyc7XG4gIHZhciBFVkVOVF9ISURFJDMgPSBcImhpZGVcIiArIEVWRU5UX0tFWSQ2O1xuICB2YXIgRVZFTlRfSElEREVOJDMgPSBcImhpZGRlblwiICsgRVZFTlRfS0VZJDY7XG4gIHZhciBFVkVOVF9TSE9XJDMgPSBcInNob3dcIiArIEVWRU5UX0tFWSQ2O1xuICB2YXIgRVZFTlRfU0hPV04kMyA9IFwic2hvd25cIiArIEVWRU5UX0tFWSQ2O1xuICB2YXIgRVZFTlRfQ0xJQ0sgPSBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNjtcbiAgdmFyIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIgPSBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNiArIERBVEFfQVBJX0tFWSQzO1xuICB2YXIgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSA9IFwia2V5ZG93blwiICsgRVZFTlRfS0VZJDYgKyBEQVRBX0FQSV9LRVkkMztcbiAgdmFyIEVWRU5UX0tFWVVQX0RBVEFfQVBJID0gXCJrZXl1cFwiICsgRVZFTlRfS0VZJDYgKyBEQVRBX0FQSV9LRVkkMztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIgPSAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nO1xuICB2YXIgU0VMRUNUT1JfRk9STV9DSElMRCA9ICcuZHJvcGRvd24gZm9ybSc7XG4gIHZhciBTRUxFQ1RPUl9NRU5VID0gJy5kcm9wZG93bi1tZW51JztcbiAgdmFyIFNFTEVDVE9SX05BVkJBUl9OQVYgPSAnLm5hdmJhci1uYXYnO1xuICB2YXIgU0VMRUNUT1JfVklTSUJMRV9JVEVNUyA9ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSc7XG4gIHZhciBQTEFDRU1FTlRfVE9QID0gJ3RvcC1zdGFydCc7XG4gIHZhciBQTEFDRU1FTlRfVE9QRU5EID0gJ3RvcC1lbmQnO1xuICB2YXIgUExBQ0VNRU5UX0JPVFRPTSA9ICdib3R0b20tc3RhcnQnO1xuICB2YXIgUExBQ0VNRU5UX0JPVFRPTUVORCA9ICdib3R0b20tZW5kJztcbiAgdmFyIFBMQUNFTUVOVF9SSUdIVCA9ICdyaWdodC1zdGFydCc7XG4gIHZhciBQTEFDRU1FTlRfTEVGVCA9ICdsZWZ0LXN0YXJ0JztcbiAgdmFyIERlZmF1bHQkNSA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgZmxpcDogdHJ1ZSxcbiAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gICAgcmVmZXJlbmNlOiAndG9nZ2xlJyxcbiAgICBkaXNwbGF5OiAnZHluYW1pYycsXG4gICAgcG9wcGVyQ29uZmlnOiBudWxsXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQ1ID0ge1xuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgZmxpcDogJ2Jvb2xlYW4nLFxuICAgIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gICAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50KScsXG4gICAgZGlzcGxheTogJ3N0cmluZycsXG4gICAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0KSdcbiAgfTtcbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG5cbiAgdmFyIERyb3Bkb3duID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEcm9wZG93bihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KCk7XG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRElTQUJMRUQkMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckNSk7XG5cbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2hvdyh0cnVlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KHVzZVBvcHBlcikge1xuICAgICAgaWYgKHVzZVBvcHBlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHVzZVBvcHBlciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0RJU0FCTEVEJDEpIHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX21lbnUpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQ1KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX1NIT1ckMywgcmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVG90YWxseSBkaXNhYmxlIFBvcHBlciBmb3IgRHJvcGRvd25zIGluIE5hdmJhclxuXG5cbiAgICAgIGlmICghdGhpcy5faW5OYXZiYXIgJiYgdXNlUG9wcGVyKSB7XG4gICAgICAgIC8vIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICBpZiAodHlwZW9mIFBvcHBlcl9fZGVmYXVsdFtcImRlZmF1bHRcIl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBkcm9wZG93bnMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xuICAgICAgICB9IGVsc2UgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7IC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxuICAgICAgICAvLyB0byBhbGxvdyB0aGUgbWVudSB0byBcImVzY2FwZVwiIHRoZSBzY3JvbGwgcGFyZW50J3MgYm91bmRhcmllc1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG5cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcl9fZGVmYXVsdFtcImRlZmF1bHRcIl0ocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpO1xuICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ocGFyZW50KS5jbG9zZXN0KFNFTEVDVE9SX05BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5ub29wKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDTEFTU19OQU1FX1NIT1ckNSk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShwYXJlbnQpLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfU0hPVyQ1KS50cmlnZ2VyKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX1NIT1dOJDMsIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9ESVNBQkxFRCQxKSB8fCAhJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fbWVudSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRXZlbnQoRVZFTlRfSElERSQzLCByZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfU0hPVyQ1KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDUpLnRyaWdnZXIoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRXZlbnQoRVZFTlRfSElEREVOJDMsIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQ2KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkkNik7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX21lbnUgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX0NMSUNLLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgX3RoaXMudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQ2LCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRNZW51RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRNZW51RWxlbWVudCgpIHtcbiAgICAgIGlmICghdGhpcy5fbWVudSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfTUVOVSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX21lbnU7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UGxhY2VtZW50ID0gZnVuY3Rpb24gX2dldFBsYWNlbWVudCgpIHtcbiAgICAgIHZhciAkcGFyZW50RHJvcGRvd24gPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgdmFyIHBsYWNlbWVudCA9IFBMQUNFTUVOVF9CT1RUT007IC8vIEhhbmRsZSBkcm9wdXBcblxuICAgICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDTEFTU19OQU1FX0RST1BVUCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fbWVudSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9NRU5VUklHSFQpID8gUExBQ0VNRU5UX1RPUEVORCA6IFBMQUNFTUVOVF9UT1A7XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDTEFTU19OQU1FX0RST1BSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gUExBQ0VNRU5UX1JJR0hUO1xuICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ0xBU1NfTkFNRV9EUk9QTEVGVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gUExBQ0VNRU5UX0xFRlQ7XG4gICAgICB9IGVsc2UgaWYgKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX21lbnUpLmhhc0NsYXNzKENMQVNTX05BTUVfTUVOVVJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBQTEFDRU1FTlRfQk9UVE9NRU5EO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGxhY2VtZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2RldGVjdE5hdmJhciA9IGZ1bmN0aW9uIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgICByZXR1cm4gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDA7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gX2dldE9mZnNldCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvZmZzZXQuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMsIF90aGlzMi5fY29uZmlnLm9mZnNldChkYXRhLm9mZnNldHMsIF90aGlzMi5fZWxlbWVudCkpO1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0Lm9mZnNldCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UG9wcGVyQ29uZmlnID0gZnVuY3Rpb24gX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICAgIHZhciBwb3BwZXJDb25maWcgPSB7XG4gICAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCksXG4gICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5fY29uZmlnLmZsaXBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTsgLy8gRGlzYWJsZSBQb3BwZXIgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcG9wcGVyQ29uZmlnLCB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKTtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuZGF0YShEQVRBX0tFWSQ2KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLmRhdGEoREFUQV9LRVkkNiwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKTtcblxuICAgICAgICB2YXIgY29udGV4dCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkkNik7XG4gICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRvZ2dsZXNbaV1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudTtcblxuICAgICAgICBpZiAoISRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX0hJREUkMywgcmVsYXRlZFRhcmdldCk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuX3BvcHBlcikge1xuICAgICAgICAgIGNvbnRleHQuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQ1KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ocGFyZW50KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX1NIT1ckNSkudHJpZ2dlcigkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9ISURERU4kMywgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHBhcmVudDtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgO1xuXG4gICAgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgIC8vIElmIG5vdCBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAvLyAgLSBJZiBzcGFjZSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXG4gICAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgICAtIElmIHRyaWdnZXIgaW5zaWRlIHRoZSBtZW51ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSQxICYmIChldmVudC53aGljaCAhPT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGV2ZW50LndoaWNoICE9PSBBUlJPV19VUF9LRVlDT0RFIHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTRUxFQ1RPUl9NRU5VKS5sZW5ndGgpIDogIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQud2hpY2gpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9ESVNBQkxFRCQxKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDUpO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSQxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlIHx8IGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSQxIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSB7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUkMSkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHBhcmVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIpKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMpKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGl0ZW0pLmlzKCc6dmlzaWJsZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSBpdGVtcy5pbmRleE9mKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgLy8gVXBcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgaW5kZXggPCBpdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIERvd25cbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGl0ZW1zW2luZGV4XS5mb2N1cygpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ1O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQ1O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEcm9wZG93bjtcbiAgfSgpO1xuICAvKipcbiAgICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAgICovXG5cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkb2N1bWVudCkub24oRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUkMiwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSwgU0VMRUNUT1JfTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMiArIFwiIFwiICsgRVZFTlRfS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFVkVOVF9DTElDS19EQVRBX0FQSSQyLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQyLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLCAndG9nZ2xlJyk7XG4gIH0pLm9uKEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIsIFNFTEVDVE9SX0ZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ2XSA9IERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNl0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDZdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ2XSA9IEpRVUVSWV9OT19DT05GTElDVCQ2O1xuICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkNSA9ICdtb2RhbCc7XG4gIHZhciBWRVJTSU9OJDUgPSAnNC42LjEnO1xuICB2YXIgREFUQV9LRVkkNSA9ICdicy5tb2RhbCc7XG4gIHZhciBFVkVOVF9LRVkkNSA9IFwiLlwiICsgREFUQV9LRVkkNTtcbiAgdmFyIERBVEFfQVBJX0tFWSQyID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNV07XG4gIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgdmFyIENMQVNTX05BTUVfU0NST0xMQUJMRSA9ICdtb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZSc7XG4gIHZhciBDTEFTU19OQU1FX1NDUk9MTEJBUl9NRUFTVVJFUiA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSc7XG4gIHZhciBDTEFTU19OQU1FX0JBQ0tEUk9QID0gJ21vZGFsLWJhY2tkcm9wJztcbiAgdmFyIENMQVNTX05BTUVfT1BFTiA9ICdtb2RhbC1vcGVuJztcbiAgdmFyIENMQVNTX05BTUVfRkFERSQ0ID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDQgPSAnc2hvdyc7XG4gIHZhciBDTEFTU19OQU1FX1NUQVRJQyA9ICdtb2RhbC1zdGF0aWMnO1xuICB2YXIgRVZFTlRfSElERSQyID0gXCJoaWRlXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX0hJREVfUFJFVkVOVEVEID0gXCJoaWRlUHJldmVudGVkXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX0hJRERFTiQyID0gXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ1O1xuICB2YXIgRVZFTlRfU0hPVyQyID0gXCJzaG93XCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX1NIT1dOJDIgPSBcInNob3duXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX0ZPQ1VTSU4gPSBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSQ1O1xuICB2YXIgRVZFTlRfUkVTSVpFID0gXCJyZXNpemVcIiArIEVWRU5UX0tFWSQ1O1xuICB2YXIgRVZFTlRfQ0xJQ0tfRElTTUlTUyQxID0gXCJjbGljay5kaXNtaXNzXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX0tFWURPV05fRElTTUlTUyA9IFwia2V5ZG93bi5kaXNtaXNzXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX01PVVNFVVBfRElTTUlTUyA9IFwibW91c2V1cC5kaXNtaXNzXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTID0gXCJtb3VzZWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZJDU7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQxID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDUgKyBEQVRBX0FQSV9LRVkkMjtcbiAgdmFyIFNFTEVDVE9SX0RJQUxPRyA9ICcubW9kYWwtZGlhbG9nJztcbiAgdmFyIFNFTEVDVE9SX01PREFMX0JPRFkgPSAnLm1vZGFsLWJvZHknO1xuICB2YXIgU0VMRUNUT1JfREFUQV9UT0dHTEUkMSA9ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX0RJU01JU1MkMSA9ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nO1xuICB2YXIgU0VMRUNUT1JfRklYRURfQ09OVEVOVCA9ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJztcbiAgdmFyIFNFTEVDVE9SX1NUSUNLWV9DT05URU5UID0gJy5zdGlja3ktdG9wJztcbiAgdmFyIERlZmF1bHQkNCA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBmb2N1czogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQ0ID0ge1xuICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBmb2N1czogJ2Jvb2xlYW4nLFxuICAgIHNob3c6ICdib29sZWFuJ1xuICB9O1xuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cblxuICB2YXIgTW9kYWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vZGFsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2RpYWxvZyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9ESUFMT0cpO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSAwO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gTW9kYWwucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX1NIT1ckMiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgICBpZiAoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDQpKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCk7XG5cbiAgICAgIHRoaXMuX3NldFNjcm9sbGJhcigpO1xuXG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub24oRVZFTlRfQ0xJQ0tfRElTTUlTUyQxLCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MkMSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oaWRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZGlhbG9nKS5vbihFVkVOVF9NT1VTRURPV05fRElTTUlTUywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpcy5fZWxlbWVudCkub25lKEVWRU5UX01PVVNFVVBfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGV2ZW50LnRhcmdldCkuaXMoX3RoaXMuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICBfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX0hJREUkMik7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQ0KTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQpLm9mZihFVkVOVF9GT0NVU0lOKTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQ0KTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9DTElDS19ESVNNSVNTJDEpO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZGlhbG9nKS5vZmYoRVZFTlRfTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2hpZGVNb2RhbChldmVudCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9oaWRlTW9kYWwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgW3dpbmRvdywgdGhpcy5fZWxlbWVudCwgdGhpcy5fZGlhbG9nXS5mb3JFYWNoKGZ1bmN0aW9uIChodG1sRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oaHRtbEVsZW1lbnQpLm9mZihFVkVOVF9LRVkkNSk7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogYGRvY3VtZW50YCBoYXMgMiBldmVudHMgYEVWRU5UX0ZPQ1VTSU5gIGFuZCBgRVZFTlRfQ0xJQ0tfREFUQV9BUElgXG4gICAgICAgKiBEbyBub3QgbW92ZSBgZG9jdW1lbnRgIGluIGBodG1sRWxlbWVudHNgIGFycmF5XG4gICAgICAgKiBJdCB3aWxsIHJlbW92ZSBgRVZFTlRfQ0xJQ0tfREFUQV9BUElgIGV2ZW50IHRoYXQgc2hvdWxkIHJlbWFpblxuICAgICAgICovXG5cbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50KS5vZmYoRVZFTlRfRk9DVVNJTik7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDUpO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZGlhbG9nID0gbnVsbDtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBudWxsO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBudWxsO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGw7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSBudWxsO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gaGFuZGxlVXBkYXRlKCkge1xuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQkNCwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkNSwgY29uZmlnLCBEZWZhdWx0VHlwZSQ0KTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBoaWRlRXZlbnRQcmV2ZW50ZWQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9ISURFX1BSRVZFTlRFRCk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudFByZXZlbnRlZCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnRQcmV2ZW50ZWQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuXG4gICAgICB2YXIgbW9kYWxUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2RpYWxvZyk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vZmYoVXRpbC5UUkFOU0lUSU9OX0VORCk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NUQVRJQyk7XG5cbiAgICAgICAgaWYgKCFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpczMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZID0gJyc7XG4gICAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoX3RoaXMzLl9lbGVtZW50LCBtb2RhbFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKG1vZGFsVHJhbnNpdGlvbkR1cmF0aW9uKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dFbGVtZW50ID0gZnVuY3Rpb24gX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQ0KTtcbiAgICAgIHZhciBtb2RhbEJvZHkgPSB0aGlzLl9kaWFsb2cgPyB0aGlzLl9kaWFsb2cucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9NT0RBTF9CT0RZKSA6IG51bGw7XG5cbiAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG5cbiAgICAgIGlmICgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9kaWFsb2cpLmhhc0NsYXNzKENMQVNTX05BTUVfU0NST0xMQUJMRSkgJiYgbW9kYWxCb2R5KSB7XG4gICAgICAgIG1vZGFsQm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDQpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd25FdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX1NIT1dOJDIsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczQuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICAgIF90aGlzNC5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM0Ll9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXM0Ll9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZGlhbG9nKTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZGlhbG9nKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkb2N1bWVudCkub2ZmKEVWRU5UX0ZPQ1VTSU4pIC8vIEd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKEVWRU5UX0ZPQ1VTSU4sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiBfdGhpczUuX2VsZW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJiAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpczUuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIF90aGlzNS5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczYuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIF90aGlzNi5oaWRlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghX3RoaXM2Ll9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgICBfdGhpczYuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93bikge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh3aW5kb3cpLm9uKEVWRU5UX1JFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNy5oYW5kbGVVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHdpbmRvdykub2ZmKEVWRU5UX1JFU0laRSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5faGlkZU1vZGFsID0gZnVuY3Rpb24gX2hpZGVNb2RhbCgpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcblxuICAgICAgdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9PUEVOKTtcblxuICAgICAgICBfdGhpczguX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgICBfdGhpczguX3Jlc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXM4Ll9lbGVtZW50KS50cmlnZ2VyKEVWRU5UX0hJRERFTiQyKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dCYWNrZHJvcCA9IGZ1bmN0aW9uIF9zaG93QmFja2Ryb3AoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICB2YXIgYW5pbWF0ZSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQ0KSA/IENMQVNTX05BTUVfRkFERSQ0IDogJyc7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5iYWNrZHJvcCkge1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDTEFTU19OQU1FX0JBQ0tEUk9QO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChhbmltYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub24oRVZFTlRfQ0xJQ0tfRElTTUlTUyQxLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoX3RoaXM5Ll9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBfdGhpczkuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzOS5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgX3RoaXM5Ll90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzOS5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2JhY2tkcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDTEFTU19OQU1FX1NIT1ckNCk7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fYmFja2Ryb3ApLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQ0KTtcblxuICAgICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiBjYWxsYmFja1JlbW92ZSgpIHtcbiAgICAgICAgICBfdGhpczkuX3JlbW92ZUJhY2tkcm9wKCk7XG5cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0ZBREUkNCkpIHtcbiAgICAgICAgICB2YXIgX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG5cbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAgIC8vIHRvZG8gKGZhdCk6IHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCBvZiBtb2RhbC5qc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICA7XG5cbiAgICBfcHJvdG8uX2FkanVzdERpYWxvZyA9IGZ1bmN0aW9uIF9hZGp1c3REaWFsb2coKSB7XG4gICAgICB2YXIgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBpZiAoIXRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uIF9yZXNldEFkanVzdG1lbnRzKCkge1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9ICcnO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uIF9jaGVja1Njcm9sbGJhcigpIHtcbiAgICAgIHZhciByZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gTWF0aC5yb3VuZChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSA8IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSB0aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxiYXIoKSB7XG4gICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcbiAgICAgICAgdmFyIGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9GSVhFRF9DT05URU5UKSk7XG4gICAgICAgIHZhciBzdGlja3lDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX1NUSUNLWV9DT05URU5UKSk7IC8vIEFkanVzdCBmaXhlZCBjb250ZW50IHBhZGRpbmdcblxuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShmaXhlZENvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyBfdGhpczEwLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3Qgc3RpY2t5IGNvbnRlbnQgbWFyZ2luXG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oc3RpY2t5Q29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gZWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0JywgYWN0dWFsTWFyZ2luKS5jc3MoJ21hcmdpbi1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZE1hcmdpbikgLSBfdGhpczEwLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG5cbiAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQuYm9keSkuY3NzKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9PUEVOKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9yZXNldFNjcm9sbGJhcigpIHtcbiAgICAgIC8vIFJlc3RvcmUgZml4ZWQgY29udGVudCBwYWRkaW5nXG4gICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGZpeGVkQ29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgICAgfSk7IC8vIFJlc3RvcmUgc3RpY2t5IGNvbnRlbnRcblxuICAgICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiXCIgKyBTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCkpO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZWxlbWVudHMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBtYXJnaW4gPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcsIG1hcmdpbikucmVtb3ZlRGF0YSgnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuXG4gICAgICB2YXIgcGFkZGluZyA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50LmJvZHkpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICAgIC8vIHRoeCBkLndhbHNoXG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ0xBU1NfTkFNRV9TQ1JPTExCQVJfTUVBU1VSRVI7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLmRhdGEoREFUQV9LRVkkNSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCQ0LCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzKS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IE1vZGFsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLmRhdGEoREFUQV9LRVkkNSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHtcbiAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNb2RhbDtcbiAgfSgpO1xuICAvKipcbiAgICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAgICovXG5cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkb2N1bWVudCkub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMSwgU0VMRUNUT1JfREFUQV9UT0dHTEUkMSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldDtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0YXJnZXQpLmRhdGEoREFUQV9LRVkkNSkgPyAndG9nZ2xlJyA6IF9leHRlbmRzKHt9LCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0YXJnZXQpLmRhdGEoKSwgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuZGF0YSgpKTtcblxuICAgIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRhcmdldCkub25lKEVWRU5UX1NIT1ckMiwgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJHRhcmdldC5vbmUoRVZFTlRfSElEREVOJDIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKF90aGlzMTEpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgX3RoaXMxMS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0YXJnZXQpLCBjb25maWcsIHRoaXMpO1xuICB9KTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDVdID0gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQ1XS5Db25zdHJ1Y3RvciA9IE1vZGFsO1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDVdID0gSlFVRVJZX05PX0NPTkZMSUNUJDU7XG4gICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuNi4xKTogdG9vbHMvc2FuaXRpemVyLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIHVyaUF0dHJzID0gWydiYWNrZ3JvdW5kJywgJ2NpdGUnLCAnaHJlZicsICdpdGVtdHlwZScsICdsb25nZGVzYycsICdwb3N0ZXInLCAnc3JjJywgJ3hsaW5rOmhyZWYnXTtcbiAgdmFyIEFSSUFfQVRUUklCVVRFX1BBVFRFUk4gPSAvXmFyaWEtW1xcdy1dKiQvaTtcbiAgdmFyIERlZmF1bHRXaGl0ZWxpc3QgPSB7XG4gICAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICAgIGE6IFsndGFyZ2V0JywgJ2hyZWYnLCAndGl0bGUnLCAncmVsJ10sXG4gICAgYXJlYTogW10sXG4gICAgYjogW10sXG4gICAgYnI6IFtdLFxuICAgIGNvbDogW10sXG4gICAgY29kZTogW10sXG4gICAgZGl2OiBbXSxcbiAgICBlbTogW10sXG4gICAgaHI6IFtdLFxuICAgIGgxOiBbXSxcbiAgICBoMjogW10sXG4gICAgaDM6IFtdLFxuICAgIGg0OiBbXSxcbiAgICBoNTogW10sXG4gICAgaDY6IFtdLFxuICAgIGk6IFtdLFxuICAgIGltZzogWydzcmMnLCAnc3Jjc2V0JywgJ2FsdCcsICd0aXRsZScsICd3aWR0aCcsICdoZWlnaHQnXSxcbiAgICBsaTogW10sXG4gICAgb2w6IFtdLFxuICAgIHA6IFtdLFxuICAgIHByZTogW10sXG4gICAgczogW10sXG4gICAgc21hbGw6IFtdLFxuICAgIHNwYW46IFtdLFxuICAgIHN1YjogW10sXG4gICAgc3VwOiBbXSxcbiAgICBzdHJvbmc6IFtdLFxuICAgIHU6IFtdLFxuICAgIHVsOiBbXVxuICB9O1xuICAvKipcbiAgICogQSBwYXR0ZXJuIHRoYXQgcmVjb2duaXplcyBhIGNvbW1vbmx5IHVzZWZ1bCBzdWJzZXQgb2YgVVJMcyB0aGF0IGFyZSBzYWZlLlxuICAgKlxuICAgKiBTaG91dG91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAgICovXG5cbiAgdmFyIFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlfHNtcyk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9pO1xuICAvKipcbiAgICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIGRhdGEgVVJMcy4gT25seSBtYXRjaGVzIGltYWdlLCB2aWRlbyBhbmQgYXVkaW8gdHlwZXMuXG4gICAqXG4gICAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzEyLjIueC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICAgKi9cblxuICB2YXIgREFUQV9VUkxfUEFUVEVSTiA9IC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFtcXGQrL2Etel0rPSokL2k7XG5cbiAgZnVuY3Rpb24gYWxsb3dlZEF0dHJpYnV0ZShhdHRyLCBhbGxvd2VkQXR0cmlidXRlTGlzdCkge1xuICAgIHZhciBhdHRyTmFtZSA9IGF0dHIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChhbGxvd2VkQXR0cmlidXRlTGlzdC5pbmRleE9mKGF0dHJOYW1lKSAhPT0gLTEpIHtcbiAgICAgIGlmICh1cmlBdHRycy5pbmRleE9mKGF0dHJOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oU0FGRV9VUkxfUEFUVEVSTi50ZXN0KGF0dHIubm9kZVZhbHVlKSB8fCBEQVRBX1VSTF9QQVRURVJOLnRlc3QoYXR0ci5ub2RlVmFsdWUpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJlZ0V4cCA9IGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoYXR0clJlZ2V4KSB7XG4gICAgICByZXR1cm4gYXR0clJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIH0pOyAvLyBDaGVjayBpZiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWxpZGF0ZXMgdGhlIGF0dHJpYnV0ZS5cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZWdFeHAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChyZWdFeHBbaV0udGVzdChhdHRyTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2FuaXRpemVIdG1sKHVuc2FmZUh0bWwsIHdoaXRlTGlzdCwgc2FuaXRpemVGbikge1xuICAgIGlmICh1bnNhZmVIdG1sLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuc2FmZUh0bWw7XG4gICAgfVxuXG4gICAgaWYgKHNhbml0aXplRm4gJiYgdHlwZW9mIHNhbml0aXplRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzYW5pdGl6ZUZuKHVuc2FmZUh0bWwpO1xuICAgIH1cblxuICAgIHZhciBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuICAgIHZhciBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKTtcbiAgICB2YXIgd2hpdGVsaXN0S2V5cyA9IE9iamVjdC5rZXlzKHdoaXRlTGlzdCk7XG4gICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChjcmVhdGVkRG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSwgbGVuKSB7XG4gICAgICB2YXIgZWwgPSBlbGVtZW50c1tpXTtcbiAgICAgIHZhciBlbE5hbWUgPSBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAod2hpdGVsaXN0S2V5cy5pbmRleE9mKGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMSkge1xuICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIGF0dHJpYnV0ZUxpc3QgPSBbXS5zbGljZS5jYWxsKGVsLmF0dHJpYnV0ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItc3ByZWFkXG5cbiAgICAgIHZhciB3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQod2hpdGVMaXN0WycqJ10gfHwgW10sIHdoaXRlTGlzdFtlbE5hbWVdIHx8IFtdKTtcbiAgICAgIGF0dHJpYnV0ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICBpZiAoIWFsbG93ZWRBdHRyaWJ1dGUoYXR0ciwgd2hpdGVsaXN0ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5vZGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChpKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkNCA9ICd0b29sdGlwJztcbiAgdmFyIFZFUlNJT04kNCA9ICc0LjYuMSc7XG4gIHZhciBEQVRBX0tFWSQ0ID0gJ2JzLnRvb2x0aXAnO1xuICB2YXIgRVZFTlRfS0VZJDQgPSBcIi5cIiArIERBVEFfS0VZJDQ7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNF07XG4gIHZhciBDTEFTU19QUkVGSVgkMSA9ICdicy10b29sdGlwJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCQxID0gbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgQ0xBU1NfUFJFRklYJDEgKyBcIlxcXFxTK1wiLCAnZycpO1xuICB2YXIgRElTQUxMT1dFRF9BVFRSSUJVVEVTID0gWydzYW5pdGl6ZScsICd3aGl0ZUxpc3QnLCAnc2FuaXRpemVGbiddO1xuICB2YXIgQ0xBU1NfTkFNRV9GQURFJDMgPSAnZmFkZSc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckMyA9ICdzaG93JztcbiAgdmFyIEhPVkVSX1NUQVRFX1NIT1cgPSAnc2hvdyc7XG4gIHZhciBIT1ZFUl9TVEFURV9PVVQgPSAnb3V0JztcbiAgdmFyIFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIgPSAnLnRvb2x0aXAtaW5uZXInO1xuICB2YXIgU0VMRUNUT1JfQVJST1cgPSAnLmFycm93JztcbiAgdmFyIFRSSUdHRVJfSE9WRVIgPSAnaG92ZXInO1xuICB2YXIgVFJJR0dFUl9GT0NVUyA9ICdmb2N1cyc7XG4gIHZhciBUUklHR0VSX0NMSUNLID0gJ2NsaWNrJztcbiAgdmFyIFRSSUdHRVJfTUFOVUFMID0gJ21hbnVhbCc7XG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIEFVVE86ICdhdXRvJyxcbiAgICBUT1A6ICd0b3AnLFxuICAgIFJJR0hUOiAncmlnaHQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogJ2xlZnQnXG4gIH07XG4gIHZhciBEZWZhdWx0JDMgPSB7XG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgc2VsZWN0b3I6IGZhbHNlLFxuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgb2Zmc2V0OiAwLFxuICAgIGNvbnRhaW5lcjogZmFsc2UsXG4gICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICdmbGlwJyxcbiAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gICAgY3VzdG9tQ2xhc3M6ICcnLFxuICAgIHNhbml0aXplOiB0cnVlLFxuICAgIHNhbml0aXplRm46IG51bGwsXG4gICAgd2hpdGVMaXN0OiBEZWZhdWx0V2hpdGVsaXN0LFxuICAgIHBvcHBlckNvbmZpZzogbnVsbFxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMyA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyOiAnc3RyaW5nJyxcbiAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIGN1c3RvbUNsYXNzOiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIHNhbml0aXplOiAnYm9vbGVhbicsXG4gICAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gICAgd2hpdGVMaXN0OiAnb2JqZWN0JyxcbiAgICBwb3BwZXJDb25maWc6ICcobnVsbHxvYmplY3QpJ1xuICB9O1xuICB2YXIgRXZlbnQkMSA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSQ0LFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ0LFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJDQsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSQ0LFxuICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDQsXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZJDQsXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSQ0XG4gIH07XG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuXG4gIHZhciBUb29sdGlwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb29sdGlwKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXJfX2RlZmF1bHRbXCJkZWZhdWx0XCJdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gICAgICB9IC8vIFByaXZhdGVcblxuXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fdGltZW91dCA9IDA7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsOyAvLyBQcm90ZWN0ZWRcblxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gVG9vbHRpcC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF9wcm90by50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZCgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWQ7XG4gICAgfTtcblxuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrO1xuXG4gICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckMykpIHtcbiAgICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VudGVyKG51bGwsIHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9mZignaGlkZS5icy5tb2RhbCcsIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpO1xuXG4gICAgICBpZiAodGhpcy50aXApIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy50aXApLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5lbGVtZW50KS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG4gICAgICAgIHZhciBzaGFkb3dSb290ID0gVXRpbC5maW5kU2hhZG93Um9vdCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB2YXIgaXNJblRoZURvbSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNvbnRhaW5zKHNoYWRvd1Jvb3QgIT09IG51bGwgPyBzaGFkb3dSb290IDogdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgIHZhciB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGlwKS5hZGRDbGFzcyhDTEFTU19OQU1FX0ZBREUkMyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMuY29uZmlnLnBsYWNlbWVudCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnBsYWNlbWVudDtcblxuICAgICAgICB2YXIgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KTtcblxuICAgICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTtcblxuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5fZ2V0Q29udGFpbmVyKCk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGlwKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xuXG4gICAgICAgIGlmICghJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLnRpcCkpIHtcbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aXApLmFwcGVuZFRvKGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXJfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuZWxlbWVudCwgdGlwLCB0aGlzLl9nZXRQb3BwZXJDb25maWcoYXR0YWNobWVudCkpO1xuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aXApLmFkZENsYXNzKENMQVNTX05BTUVfU0hPVyQzKTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGlwKS5hZGRDbGFzcyh0aGlzLmNvbmZpZy5jdXN0b21DbGFzcyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKF90aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9maXhUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gX3RoaXMuX2hvdmVyU3RhdGU7XG4gICAgICAgICAgX3RoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKF90aGlzLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXG4gICAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgICAgIF90aGlzLl9sZWF2ZShudWxsLCBfdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLnRpcCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDMpKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApO1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMudGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczIuX2hvdmVyU3RhdGUgIT09IEhPVkVSX1NUQVRFX1NIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgX3RoaXMyLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXMyLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMyLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG5cbiAgICAgICAgaWYgKF90aGlzMi5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aXApLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQzKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfQ0xJQ0tdID0gZmFsc2U7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfRk9DVVNdID0gZmFsc2U7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfSE9WRVJdID0gZmFsc2U7XG5cbiAgICAgIGlmICgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLnRpcCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDMpKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRpcCk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFByb3RlY3RlZFxuICAgIDtcblxuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCQxICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICByZXR1cm4gdGhpcy50aXA7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGlwLnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfVE9PTFRJUF9JTk5FUikpLCB0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGlwKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0ZBREUkMyArIFwiIFwiICsgQ0xBU1NfTkFNRV9TSE9XJDMpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0RWxlbWVudENvbnRlbnQgPSBmdW5jdGlvbiBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5odG1sKSB7XG4gICAgICAgICAgaWYgKCEkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShjb250ZW50KS5wYXJlbnQoKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmVtcHR5KCkuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxlbWVudC50ZXh0KCRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGNvbnRlbnQpLnRleHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5odG1sKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5zYW5pdGl6ZSkge1xuICAgICAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoY29udGVudCwgdGhpcy5jb25maWcud2hpdGVMaXN0LCB0aGlzLmNvbmZpZy5zYW5pdGl6ZUZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50Lmh0bWwoY29udGVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxlbWVudC50ZXh0KGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnRpdGxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGl0bGU7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRQb3BwZXJDb25maWcgPSBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgZGVmYXVsdEJzQ29uZmlnID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCksXG4gICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgYmVoYXZpb3I6IHRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgZWxlbWVudDogU0VMRUNUT1JfQVJST1dcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuICAgICAgICAgIGlmIChkYXRhLm9yaWdpbmFsUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgX3RoaXMzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdEJzQ29uZmlnLCB0aGlzLmNvbmZpZy5wb3BwZXJDb25maWcpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE9mZnNldCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXQoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIG9mZnNldCA9IHt9O1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvZmZzZXQuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMsIF90aGlzNC5jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgX3RoaXM0LmVsZW1lbnQpKTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLmNvbmZpZy5vZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0Q29udGFpbmVyID0gZnVuY3Rpb24gX2dldENvbnRhaW5lcigpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICAgICAgfVxuXG4gICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5jb25maWcuY29udGFpbmVyKSkge1xuICAgICAgICByZXR1cm4gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRvY3VtZW50KS5maW5kKHRoaXMuY29uZmlnLmNvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0QXR0YWNobWVudCA9IGZ1bmN0aW9uIF9nZXRBdHRhY2htZW50KHBsYWNlbWVudCkge1xuICAgICAgcmV0dXJuIEF0dGFjaG1lbnRNYXBbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIHRyaWdnZXJzID0gdGhpcy5jb25maWcudHJpZ2dlci5zcGxpdCgnICcpO1xuICAgICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKF90aGlzNS5lbGVtZW50KS5vbihfdGhpczUuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIF90aGlzNS5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNS50b2dnbGUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRSSUdHRVJfTUFOVUFMKSB7XG4gICAgICAgICAgdmFyIGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID8gX3RoaXM1LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiBfdGhpczUuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcbiAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID8gX3RoaXM1LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczUuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXM1LmVsZW1lbnQpLm9uKGV2ZW50SW4sIF90aGlzNS5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5fZW50ZXIoZXZlbnQpO1xuICAgICAgICAgIH0pLm9uKGV2ZW50T3V0LCBfdGhpczUuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczUuX2xlYXZlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpczUuZWxlbWVudCkge1xuICAgICAgICAgIF90aGlzNS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub24oJ2hpZGUuYnMubW9kYWwnLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gX2V4dGVuZHMoe30sIHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgICAgc2VsZWN0b3I6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZml4VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9maXhUaXRsZSA9IGZ1bmN0aW9uIF9maXhUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCB0aXRsZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShjb250ZXh0LmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDMpIHx8IGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX1NIT1cpIHtcbiAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1c7XG5cbiAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpIHtcbiAgICAgICAgY29udGV4dC5zaG93KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3Vzb3V0JyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX09VVDtcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5faXNXaXRoQWN0aXZlVHJpZ2dlciA9IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICB2YXIgZGF0YUF0dHJpYnV0ZXMgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmVsZW1lbnQpLmRhdGEoKTtcbiAgICAgIE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhQXR0cikge1xuICAgICAgICBpZiAoRElTQUxMT1dFRF9BVFRSSUJVVEVTLmluZGV4T2YoZGF0YUF0dHIpICE9PSAtMSkge1xuICAgICAgICAgIGRlbGV0ZSBkYXRhQXR0cmlidXRlc1tkYXRhQXR0cl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgZGF0YUF0dHJpYnV0ZXMsIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuY29udGVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDQsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cbiAgICAgIGlmIChjb25maWcuc2FuaXRpemUpIHtcbiAgICAgICAgY29uZmlnLnRlbXBsYXRlID0gc2FuaXRpemVIdG1sKGNvbmZpZy50ZW1wbGF0ZSwgY29uZmlnLndoaXRlTGlzdCwgY29uZmlnLnNhbml0aXplRm4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7XG4gICAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuY29uZmlnW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG4gICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYJDEpO1xuXG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgICAgdGhpcy50aXAgPSBwb3BwZXJEYXRhLmluc3RhbmNlLnBvcHBlcjtcblxuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHBvcHBlckRhdGEucGxhY2VtZW50KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG5cbiAgICAgIGlmICh0aXAuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGlwKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0ZBREUkMyk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZJDQpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSQ0LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWSQ0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFdmVudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudCQxO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZJDQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oKTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNF0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNF0uQ29uc3RydWN0b3IgPSBUb29sdGlwO1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkNF0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDRdID0gSlFVRVJZX05PX0NPTkZMSUNUJDQ7XG4gICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJDMgPSAncG9wb3Zlcic7XG4gIHZhciBWRVJTSU9OJDMgPSAnNC42LjEnO1xuICB2YXIgREFUQV9LRVkkMyA9ICdicy5wb3BvdmVyJztcbiAgdmFyIEVWRU5UX0tFWSQzID0gXCIuXCIgKyBEQVRBX0tFWSQzO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDMgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDNdO1xuICB2YXIgQ0xBU1NfUFJFRklYID0gJ2JzLXBvcG92ZXInO1xuICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgQ0xBU1NfUFJFRklYICsgXCJcXFxcUytcIiwgJ2cnKTtcbiAgdmFyIENMQVNTX05BTUVfRkFERSQyID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDIgPSAnc2hvdyc7XG4gIHZhciBTRUxFQ1RPUl9USVRMRSA9ICcucG9wb3Zlci1oZWFkZXInO1xuICB2YXIgU0VMRUNUT1JfQ09OVEVOVCA9ICcucG9wb3Zlci1ib2R5JztcblxuICB2YXIgRGVmYXVsdCQyID0gX2V4dGVuZHMoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J1xuICB9KTtcblxuICB2YXIgRGVmYXVsdFR5cGUkMiA9IF9leHRlbmRzKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH0pO1xuXG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSQzLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQzLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJDMsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSQzLFxuICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVkkMyxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDMsXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkMyxcbiAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZJDMsXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVkkMyxcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSQzXG4gIH07XG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuXG4gIHZhciBQb3BvdmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfVG9vbHRpcCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFBvcG92ZXIsIF9Ub29sdGlwKTtcblxuICAgIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgICByZXR1cm4gX1Rvb2x0aXAuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQb3BvdmVyLnByb3RvdHlwZTtcblxuICAgIC8vIE92ZXJyaWRlc1xuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyBcIi1cIiArIGF0dGFjaG1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyICR0aXAgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7IC8vIFdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU0VMRUNUT1JfVElUTEUpLCB0aGlzLmdldFRpdGxlKCkpO1xuXG4gICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNhbGwodGhpcy5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU0VMRUNUT1JfQ09OVEVOVCksIGNvbnRlbnQpO1xuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0ZBREUkMiArIFwiIFwiICsgQ0xBU1NfTkFNRV9TSE9XJDIpO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG4gICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcblxuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuZGF0YShEQVRBX0tFWSQzKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLmRhdGEoREFUQV9LRVkkMywgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFBvcG92ZXIsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiAvLyBHZXR0ZXJzXG4gICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkMztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiREFUQV9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gREFUQV9LRVkkMztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRXZlbnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRXZlbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVkkMztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkMjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9wb3ZlcjtcbiAgfShUb29sdGlwKTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkM10gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkM10uQ29uc3RydWN0b3IgPSBQb3BvdmVyO1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkM10ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDNdID0gSlFVRVJZX05PX0NPTkZMSUNUJDM7XG4gICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJDIgPSAnc2Nyb2xsc3B5JztcbiAgdmFyIFZFUlNJT04kMiA9ICc0LjYuMSc7XG4gIHZhciBEQVRBX0tFWSQyID0gJ2JzLnNjcm9sbHNweSc7XG4gIHZhciBFVkVOVF9LRVkkMiA9IFwiLlwiICsgREFUQV9LRVkkMjtcbiAgdmFyIERBVEFfQVBJX0tFWSQxID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkMiA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkMl07XG4gIHZhciBDTEFTU19OQU1FX0RST1BET1dOX0lURU0gPSAnZHJvcGRvd24taXRlbSc7XG4gIHZhciBDTEFTU19OQU1FX0FDVElWRSQxID0gJ2FjdGl2ZSc7XG4gIHZhciBFVkVOVF9BQ1RJVkFURSA9IFwiYWN0aXZhdGVcIiArIEVWRU5UX0tFWSQyO1xuICB2YXIgRVZFTlRfU0NST0xMID0gXCJzY3JvbGxcIiArIEVWRU5UX0tFWSQyO1xuICB2YXIgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IFwibG9hZFwiICsgRVZFTlRfS0VZJDIgKyBEQVRBX0FQSV9LRVkkMTtcbiAgdmFyIE1FVEhPRF9PRkZTRVQgPSAnb2Zmc2V0JztcbiAgdmFyIE1FVEhPRF9QT1NJVElPTiA9ICdwb3NpdGlvbic7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nO1xuICB2YXIgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAkMSA9ICcubmF2LCAubGlzdC1ncm91cCc7XG4gIHZhciBTRUxFQ1RPUl9OQVZfTElOS1MgPSAnLm5hdi1saW5rJztcbiAgdmFyIFNFTEVDVE9SX05BVl9JVEVNUyA9ICcubmF2LWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJztcbiAgdmFyIFNFTEVDVE9SX0RST1BET1dOJDEgPSAnLmRyb3Bkb3duJztcbiAgdmFyIFNFTEVDVE9SX0RST1BET1dOX0lURU1TID0gJy5kcm9wZG93bi1pdGVtJztcbiAgdmFyIFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSQxID0gJy5kcm9wZG93bi10b2dnbGUnO1xuICB2YXIgRGVmYXVsdCQxID0ge1xuICAgIG9mZnNldDogMTAsXG4gICAgbWV0aG9kOiAnYXV0bycsXG4gICAgdGFyZ2V0OiAnJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMSA9IHtcbiAgICBvZmZzZXQ6ICdudW1iZXInLFxuICAgIG1ldGhvZDogJ3N0cmluZycsXG4gICAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfTtcbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG5cbiAgdmFyIFNjcm9sbFNweSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gZWxlbWVudC50YWdOYW1lID09PSAnQk9EWScgPyB3aW5kb3cgOiBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9zZWxlY3RvciA9IHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNFTEVDVE9SX05BVl9MSU5LUyArIFwiLFwiICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNFTEVDVE9SX0xJU1RfSVRFTVMgKyBcIixcIikgKyAodGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU0VMRUNUT1JfRFJPUERPV05fSVRFTVMpO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IDA7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFVkVOVF9TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3MoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gU2Nyb2xsU3B5LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gTUVUSE9EX09GRlNFVCA6IE1FVEhPRF9QT1NJVElPTjtcbiAgICAgIHZhciBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcbiAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBNRVRIT0RfUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgIHZhciB0YXJnZXRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSk7XG4gICAgICB0YXJnZXRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdmFyIHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xuICAgICAgICAgICAgLy8gVE9ETyAoZmF0KTogcmVtb3ZlIHNrZXRjaCByZWxpYW5jZSBvbiBqUXVlcnkgcG9zaXRpb24vb2Zmc2V0XG4gICAgICAgICAgICByZXR1cm4gWyRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsIHRhcmdldFNlbGVjdG9yXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBfdGhpczIuX29mZnNldHMucHVzaChpdGVtWzBdKTtcblxuICAgICAgICBfdGhpczIuX3RhcmdldHMucHVzaChpdGVtWzFdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDIpO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSQyKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0JDEsIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJyAmJiBVdGlsLmlzRWxlbWVudChjb25maWcudGFyZ2V0KSkge1xuICAgICAgICB2YXIgaWQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpO1xuXG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICBpZCA9IFV0aWwuZ2V0VUlEKE5BTUUkMik7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oY29uZmlnLnRhcmdldCkuYXR0cignaWQnLCBpZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcudGFyZ2V0ID0gXCIjXCIgKyBpZDtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQyLCBjb25maWcsIERlZmF1bHRUeXBlJDEpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRPZmZzZXRIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3Byb2Nlc3MgPSBmdW5jdGlvbiBfcHJvY2VzcygpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG5cbiAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgICAgdmFyIG1heFNjcm9sbCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcblxuICAgICAgaWYgKHRoaXMuX3Njcm9sbEhlaWdodCAhPT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgdmFyIGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgKyBcIltkYXRhLXRhcmdldD1cXFwiXCIgKyB0YXJnZXQgKyBcIlxcXCJdLFwiICsgc2VsZWN0b3IgKyBcIltocmVmPVxcXCJcIiArIHRhcmdldCArIFwiXFxcIl1cIjtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgJGxpbmsgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcmllcy5qb2luKCcsJykpKSk7XG5cbiAgICAgIGlmICgkbGluay5oYXNDbGFzcyhDTEFTU19OQU1FX0RST1BET1dOX0lURU0pKSB7XG4gICAgICAgICRsaW5rLmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04kMSkuZmluZChTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUkMSkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICAgICRsaW5rLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgICAkbGluay5hZGRDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQxKTsgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcblxuICAgICAgICAkbGluay5wYXJlbnRzKFNFTEVDVE9SX05BVl9MSVNUX0dST1VQJDEpLnByZXYoU0VMRUNUT1JfTkFWX0xJTktTICsgXCIsIFwiICsgU0VMRUNUT1JfTElTVF9JVEVNUykuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7IC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAkMSkucHJldihTRUxFQ1RPUl9OQVZfSVRFTVMpLmNoaWxkcmVuKFNFTEVDVE9SX05BVl9MSU5LUykuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICB9XG5cbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRVZFTlRfQUNUSVZBVEUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhciA9IGZ1bmN0aW9uIF9jbGVhcigpIHtcbiAgICAgIFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICB9KTtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpLmRhdGEoREFUQV9LRVkkMik7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcykuZGF0YShEQVRBX0tFWSQyLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsU3B5LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkMTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2Nyb2xsU3B5O1xuICB9KCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHdpbmRvdykub24oRVZFTlRfTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxTcHlzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0RBVEFfU1BZKSk7XG4gICAgdmFyIHNjcm9sbFNweXNMZW5ndGggPSBzY3JvbGxTcHlzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSBzY3JvbGxTcHlzTGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgJHNweSA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHNjcm9sbFNweXNbaV0pO1xuXG4gICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKTtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogalF1ZXJ5XG4gICAqL1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkMl0gPSBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQyXS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweTtcblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDJdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQyXSA9IEpRVUVSWV9OT19DT05GTElDVCQyO1xuICAgIHJldHVybiBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJDEgPSAndGFiJztcbiAgdmFyIFZFUlNJT04kMSA9ICc0LjYuMSc7XG4gIHZhciBEQVRBX0tFWSQxID0gJ2JzLnRhYic7XG4gIHZhciBFVkVOVF9LRVkkMSA9IFwiLlwiICsgREFUQV9LRVkkMTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDEgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDFdO1xuICB2YXIgQ0xBU1NfTkFNRV9EUk9QRE9XTl9NRU5VID0gJ2Ryb3Bkb3duLW1lbnUnO1xuICB2YXIgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJztcbiAgdmFyIENMQVNTX05BTUVfRElTQUJMRUQgPSAnZGlzYWJsZWQnO1xuICB2YXIgQ0xBU1NfTkFNRV9GQURFJDEgPSAnZmFkZSc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckMSA9ICdzaG93JztcbiAgdmFyIEVWRU5UX0hJREUkMSA9IFwiaGlkZVwiICsgRVZFTlRfS0VZJDE7XG4gIHZhciBFVkVOVF9ISURERU4kMSA9IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkMTtcbiAgdmFyIEVWRU5UX1NIT1ckMSA9IFwic2hvd1wiICsgRVZFTlRfS0VZJDE7XG4gIHZhciBFVkVOVF9TSE9XTiQxID0gXCJzaG93blwiICsgRVZFTlRfS0VZJDE7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSA9IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQxICsgREFUQV9BUElfS0VZO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV04gPSAnLmRyb3Bkb3duJztcbiAgdmFyIFNFTEVDVE9SX05BVl9MSVNUX0dST1VQID0gJy5uYXYsIC5saXN0LWdyb3VwJztcbiAgdmFyIFNFTEVDVE9SX0FDVElWRSA9ICcuYWN0aXZlJztcbiAgdmFyIFNFTEVDVE9SX0FDVElWRV9VTCA9ICc+IGxpID4gLmFjdGl2ZSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxEID0gJz4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSc7XG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuXG4gIHZhciBUYWIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRhYihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRhYi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUpIHx8ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIHZhciBwcmV2aW91cztcbiAgICAgIHZhciBsaXN0RWxlbWVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVApWzBdO1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGl0ZW1TZWxlY3RvciA9IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnVUwnIHx8IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnT0wnID8gU0VMRUNUT1JfQUNUSVZFX1VMIDogU0VMRUNUT1JfQUNUSVZFO1xuICAgICAgICBwcmV2aW91cyA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLm1ha2VBcnJheSgkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShsaXN0RWxlbWVudCkuZmluZChpdGVtU2VsZWN0b3IpKTtcbiAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLkV2ZW50KEVWRU5UX0hJREUkMSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KTtcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9TSE9XJDEsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgbGlzdEVsZW1lbnQpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uRXZlbnQoRVZFTlRfSElEREVOJDEsIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBfdGhpcy5fZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNob3duRXZlbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9TSE9XTiQxLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgICAgfSk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHByZXZpb3VzKS50cmlnZ2VyKGhpZGRlbkV2ZW50KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkMSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudHMgPSBjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBjb250YWluZXIubm9kZU5hbWUgPT09ICdPTCcpID8gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oY29udGFpbmVyKS5maW5kKFNFTEVDVE9SX0FDVElWRV9VTCkgOiAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShjb250YWluZXIpLmNoaWxkcmVuKFNFTEVDVE9SX0FDVElWRSk7XG4gICAgICB2YXIgYWN0aXZlID0gYWN0aXZlRWxlbWVudHNbMF07XG4gICAgICB2YXIgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgYWN0aXZlICYmICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGFjdGl2ZSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDEpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlKTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYWN0aXZlKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX1NIT1ckMSkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYWN0aXZlKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0FDVElWRSk7XG4gICAgICAgIHZhciBkcm9wZG93bkNoaWxkID0gJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGRyb3Bkb3duQ2hpbGQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3RpdmUuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgICAgYWN0aXZlLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShlbGVtZW50KS5hZGRDbGFzcyhDTEFTU19OQU1FX0FDVElWRSk7XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnJlZmxvdyhlbGVtZW50KTtcblxuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQxKSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgICBpZiAocGFyZW50ICYmIHBhcmVudC5ub2RlTmFtZSA9PT0gJ0xJJykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudCAmJiAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShwYXJlbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRFJPUERPV05fTUVOVSkpIHtcbiAgICAgICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKGVsZW1lbnQpLmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pWzBdO1xuXG4gICAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZHJvcGRvd25Ub2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkcm9wZG93bkVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUpKTtcbiAgICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShkcm9wZG93blRvZ2dsZUxpc3QpLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkkMSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBUYWIodGhpcyk7XG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSQxLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFiLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQxO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUYWI7XG4gIH0oKTtcbiAgLyoqXG4gICAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oZG9jdW1lbnQpLm9uKEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcyksICdzaG93Jyk7XG4gIH0pO1xuICAvKipcbiAgICogalF1ZXJ5XG4gICAqL1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUUkMV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQxXS5Db25zdHJ1Y3RvciA9IFRhYjtcblxuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FJDFdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRSQxXSA9IEpRVUVSWV9OT19DT05GTElDVCQxO1xuICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ3RvYXN0JztcbiAgdmFyIFZFUlNJT04gPSAnNC42LjEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMudG9hc3QnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUVdO1xuICB2YXIgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9ISURFID0gJ2hpZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XSU5HID0gJ3Nob3dpbmcnO1xuICB2YXIgRVZFTlRfQ0xJQ0tfRElTTUlTUyA9IFwiY2xpY2suZGlzbWlzc1wiICsgRVZFTlRfS0VZO1xuICB2YXIgRVZFTlRfSElERSA9IFwiaGlkZVwiICsgRVZFTlRfS0VZO1xuICB2YXIgRVZFTlRfSElEREVOID0gXCJoaWRkZW5cIiArIEVWRU5UX0tFWTtcbiAgdmFyIEVWRU5UX1NIT1cgPSBcInNob3dcIiArIEVWRU5UX0tFWTtcbiAgdmFyIEVWRU5UX1NIT1dOID0gXCJzaG93blwiICsgRVZFTlRfS0VZO1xuICB2YXIgU0VMRUNUT1JfREFUQV9ESVNNSVNTID0gJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXSc7XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBhdXRvaGlkZTogdHJ1ZSxcbiAgICBkZWxheTogNTAwXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICBhdXRvaGlkZTogJ2Jvb2xlYW4nLFxuICAgIGRlbGF5OiAnbnVtYmVyJ1xuICB9O1xuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cblxuICB2YXIgVG9hc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRvYXN0KGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuXG4gICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRvYXN0LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9TSE9XKTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NsZWFyVGltZW91dCgpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIF90aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcblxuICAgICAgICBfdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0oX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRVZFTlRfU0hPV04pO1xuXG4gICAgICAgIGlmIChfdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICAgICAgX3RoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgICAgICB9LCBfdGhpcy5fY29uZmlnLmRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfSElERSk7XG5cbiAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIGlmICghdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5FdmVudChFVkVOVF9ISURFKTtcbiAgICAgICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIHRoaXMuX2NsZWFyVGltZW91dCgpO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKTtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0NMSUNLX0RJU01JU1MpO1xuICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQsICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gX3NldExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9DTElDS19ESVNNSVNTLCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5oaWRlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbG9zZSA9IGZ1bmN0aW9uIF9jbG9zZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXMzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURFKTtcblxuICAgICAgICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXShfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoRVZFTlRfSElEREVOKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0odGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiBfY2xlYXJUaW1lb3V0KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBUb2FzdC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXSh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvYXN0KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVG9hc3QsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUb2FzdDtcbiAgfSgpO1xuICAvKipcbiAgICogalF1ZXJ5XG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRV0gPSBUb2FzdC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkX19kZWZhdWx0W1wiZGVmYXVsdFwiXS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvYXN0O1xuXG4gICRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgZXhwb3J0cy5BbGVydCA9IEFsZXJ0O1xuICBleHBvcnRzLkJ1dHRvbiA9IEJ1dHRvbjtcbiAgZXhwb3J0cy5DYXJvdXNlbCA9IENhcm91c2VsO1xuICBleHBvcnRzLkNvbGxhcHNlID0gQ29sbGFwc2U7XG4gIGV4cG9ydHMuRHJvcGRvd24gPSBEcm9wZG93bjtcbiAgZXhwb3J0cy5Nb2RhbCA9IE1vZGFsO1xuICBleHBvcnRzLlBvcG92ZXIgPSBQb3BvdmVyO1xuICBleHBvcnRzLlNjcm9sbHNweSA9IFNjcm9sbFNweTtcbiAgZXhwb3J0cy5UYWIgPSBUYWI7XG4gIGV4cG9ydHMuVG9hc3QgPSBUb2FzdDtcbiAgZXhwb3J0cy5Ub29sdGlwID0gVG9vbHRpcDtcbiAgZXhwb3J0cy5VdGlsID0gVXRpbDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknLCAncGFyYW1zJ107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3RpbWVvdXRNZXNzYWdlJywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJywgJ2RlY29tcHJlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ21heEJvZHlMZW5ndGgnLCAnbWF4UmVkaXJlY3RzJywgJ3RyYW5zcG9ydCcsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnLCAncmVzcG9uc2VFbmNvZGluZydcbiAgXTtcbiAgdmFyIGRpcmVjdE1lcmdlS2V5cyA9IFsndmFsaWRhdGVTdGF0dXMnXTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkaXJlY3RNZXJnZUtleXMsIGZ1bmN0aW9uIG1lcmdlKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cylcbiAgICAuY29uY2F0KGRpcmVjdE1lcmdlS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzEpXG4gICAgLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyAzMDk5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MDc3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTExKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDEyMjM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG52YXIgY3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNzApO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE1MzA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjaGFyQXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3MTApLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTc4Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTY3MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MDE5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIERhdGFWaWV3ICE9PSAndW5kZWZpbmVkJztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjYwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IF9fd2VicGFja19yZXF1aXJlX18oNDAxOSk7XG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3ODEpO1xudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjU2KTtcbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDgpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODg4MCk7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMjApO1xudmFyIGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDcwKS5mO1xudmFyIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTE4KTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNzY3NCk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcbnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3MTEpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciBVaW50OENsYW1wZWRBcnJheSA9IGdsb2JhbC5VaW50OENsYW1wZWRBcnJheTtcbnZhciBVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSA9IFVpbnQ4Q2xhbXBlZEFycmF5ICYmIFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZTtcbnZhciBUeXBlZEFycmF5ID0gSW50OEFycmF5ICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheSk7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEludDhBcnJheVByb3RvdHlwZSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXlQcm90b3R5cGUpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgaXNQcm90b3R5cGVPZiA9IE9iamVjdFByb3RvdHlwZS5pc1Byb3RvdHlwZU9mO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSB1aWQoJ1RZUEVEX0FSUkFZX1RBRycpO1xuLy8gRml4aW5nIG5hdGl2ZSB0eXBlZCBhcnJheXMgaW4gT3BlcmEgUHJlc3RvIGNyYXNoZXMgdGhlIGJyb3dzZXIsIHNlZSAjNTk1XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IE5BVElWRV9BUlJBWV9CVUZGRVIgJiYgISFzZXRQcm90b3R5cGVPZiAmJiBjbGFzc29mKGdsb2JhbC5vcGVyYSkgIT09ICdPcGVyYSc7XG52YXIgVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgPSBmYWxzZTtcbnZhciBOQU1FO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEludDhBcnJheTogMSxcbiAgVWludDhBcnJheTogMSxcbiAgVWludDhDbGFtcGVkQXJyYXk6IDEsXG4gIEludDE2QXJyYXk6IDIsXG4gIFVpbnQxNkFycmF5OiAyLFxuICBJbnQzMkFycmF5OiA0LFxuICBVaW50MzJBcnJheTogNCxcbiAgRmxvYXQzMkFycmF5OiA0LFxuICBGbG9hdDY0QXJyYXk6IDhcbn07XG5cbnZhciBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEJpZ0ludDY0QXJyYXk6IDgsXG4gIEJpZ1VpbnQ2NEFycmF5OiA4XG59O1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4ga2xhc3MgPT09ICdEYXRhVmlldydcbiAgICB8fCBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKVxuICAgIHx8IGhhcyhCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTtcbn07XG5cbnZhciBpc1R5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKVxuICAgIHx8IGhhcyhCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNUeXBlZEFycmF5KGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgYSB0eXBlZCBhcnJheScpO1xufTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoQykge1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZi5jYWxsKFR5cGVkQXJyYXksIEMpKSByZXR1cm4gQztcbiAgfSBlbHNlIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSBpZiAoaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBOQU1FKSkge1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKEMgPT09IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciB8fCBpc1Byb3RvdHlwZU9mLmNhbGwoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBDKSkpIHtcbiAgICAgIHJldHVybiBDO1xuICAgIH1cbiAgfSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcicpO1xufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKGZvcmNlZCkgZm9yICh2YXIgQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlLCBLRVkpKSB7XG4gICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldO1xuICAgIH1cbiAgfVxuICBpZiAoIVR5cGVkQXJyYXlQcm90b3R5cGVbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICByZWRlZmluZShUeXBlZEFycmF5UHJvdG90eXBlLCBLRVksIGZvcmNlZCA/IHByb3BlcnR5XG4gICAgICA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5UHJvdG90eXBlW0tFWV0gfHwgcHJvcGVydHkpO1xuICB9XG59O1xuXG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQpIHtcbiAgdmFyIEFSUkFZLCBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgaWYgKGZvcmNlZCkgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZKSkge1xuICAgICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghVHlwZWRBcnJheVtLRVldIHx8IGZvcmNlZCkge1xuICAgICAgLy8gVjggfiBDaHJvbWUgNDktNTAgYCVUeXBlZEFycmF5JWAgbWV0aG9kcyBhcmUgbm9uLXdyaXRhYmxlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWRlZmluZShUeXBlZEFycmF5LCBLRVksIGZvcmNlZCA/IHByb3BlcnR5IDogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBJbnQ4QXJyYXlbS0VZXSB8fCBwcm9wZXJ0eSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfSBlbHNlIHJldHVybjtcbiAgfVxuICBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmICghVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV0gfHwgZm9yY2VkKSkge1xuICAgICAgcmVkZWZpbmUoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVksIHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn07XG5cbmZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICBpZiAoIWdsb2JhbFtOQU1FXSkgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IGZhbHNlO1xufVxuXG4vLyBXZWJLaXQgYnVnIC0gdHlwZWQgYXJyYXlzIGNvbnN0cnVjdG9ycyBwcm90b3R5cGUgaXMgT2JqZWN0LnByb3RvdHlwZVxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8IHR5cGVvZiBUeXBlZEFycmF5ICE9ICdmdW5jdGlvbicgfHwgVHlwZWRBcnJheSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3cgLS0gc2FmZVxuICBUeXBlZEFycmF5ID0gZnVuY3Rpb24gVHlwZWRBcnJheSgpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH07XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0sIFR5cGVkQXJyYXkpO1xuICB9XG59XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhVHlwZWRBcnJheVByb3RvdHlwZSB8fCBUeXBlZEFycmF5UHJvdG90eXBlID09PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkucHJvdG90eXBlO1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gIH1cbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIG9uZSBtb3JlIG9iamVjdCBpbiBVaW50OENsYW1wZWRBcnJheSBwcm90b3R5cGUgY2hhaW5cbmlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlKSAhPT0gVHlwZWRBcnJheVByb3RvdHlwZSkge1xuICBzZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG59XG5cbmlmIChERVNDUklQVE9SUyAmJiAhaGFzKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIFRZUEVEX0FSUkFZX1RBR19SRVFJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsXG4gIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLFxuICBhVHlwZWRBcnJheTogYVR5cGVkQXJyYXksXG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3I6IGFUeXBlZEFycmF5Q29uc3RydWN0b3IsXG4gIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsXG4gIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QsXG4gIGlzVmlldzogaXNWaWV3LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheTogVHlwZWRBcnJheSxcbiAgVHlwZWRBcnJheVByb3RvdHlwZTogVHlwZWRBcnJheVByb3RvdHlwZVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzMzMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3ODEpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwMTkpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODg4MCk7XG52YXIgcmVkZWZpbmVBbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNDgpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcbnZhciBhbkluc3RhbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nzg3KTtcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5NTgpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDY2KTtcbnZhciB0b0luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDY3KTtcbnZhciBJRUVFNzU0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTc5KTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oOTUxOCk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NzQpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwMDYpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNzApLmY7XG52YXIgYXJyYXlGaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjg1KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oODAwMyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwOSk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCc7XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkQXJyYXlCdWZmZXIgPSBOYXRpdmVBcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciAkRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbnZhciBwYWNrSUVFRTc1NCA9IElFRUU3NTQucGFjaztcbnZhciB1bnBhY2tJRUVFNzU0ID0gSUVFRTc1NC51bnBhY2s7XG5cbnZhciBwYWNrSW50OCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MTYgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGXTtcbn07XG5cbnZhciBwYWNrSW50MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRiwgbnVtYmVyID4+IDggJiAweEZGLCBudW1iZXIgPj4gMTYgJiAweEZGLCBudW1iZXIgPj4gMjQgJiAweEZGXTtcbn07XG5cbnZhciB1bnBhY2tJbnQzMiA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlclszXSA8PCAyNCB8IGJ1ZmZlclsyXSA8PCAxNiB8IGJ1ZmZlclsxXSA8PCA4IHwgYnVmZmVyWzBdO1xufTtcblxudmFyIHBhY2tGbG9hdDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCAyMywgNCk7XG59O1xuXG52YXIgcGFja0Zsb2F0NjQgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDUyLCA4KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGtleSkge1xuICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvcltQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07IH0gfSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGJ5dGVzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCksXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoXG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICBieXRlT2Zmc2V0OiBvZmZzZXRcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBOYXRpdmVBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvdHlwZSA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gTmF0aXZlQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQXJyYXlCdWZmZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cblxuICAvLyBXZWJLaXQgYnVnIC0gdGhlIHNhbWUgcGFyZW50IHByb3RvdHlwZSBmb3IgdHlwZWQgYXJyYXlzIGFuZCBkYXRhIHZpZXdcbiAgaWYgKHNldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKCREYXRhVmlld1Byb3RvdHlwZSkgIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIHNldFByb3RvdHlwZU9mKCREYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgbmF0aXZlU2V0SW50OCA9ICREYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4O1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgbmF0aXZlU2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgbmF0aXZlU2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyLFxuICBEYXRhVmlldzogJERhdGFWaWV3XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMDQ4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5MDgpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQwMCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjYpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTI4NTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTA4KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0MDApO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDY2KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NTMzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGZvckVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOTIpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IF9fd2VicGFja19yZXF1aXJlX18oOTM0MSk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAhU1RSSUNUX01FVEhPRCA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NDU3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTk3NCk7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5MDgpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0MTEpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oNzY1OSk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjYpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTM1KTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0Nik7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDEzMTg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNTY1Nik7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjYpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQwMCk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDkyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTc0KTtcbnZhciBJbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzYxKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNzkwOCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjYpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTQxNyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJPdXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX09VVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9PVVQgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlck91dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlck91dDogY3JlYXRlTWV0aG9kKDcpXG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NTgzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjU2KTtcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5NTgpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDY2KTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MzQxKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIG5hdGl2ZUxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlTGFzdEluZGV4T2YgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdsYXN0SW5kZXhPZicpO1xudmFyIEZPUkNFRCA9IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0Q7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAvLyBjb252ZXJ0IC0wIHRvICswXG4gIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gbmF0aXZlTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiBuYXRpdmVMYXN0SW5kZXhPZjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTE5NDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG52YXIgVjhfVkVSU0lPTiA9IF9fd2VicGFja19yZXF1aXJlX18oNzM5Mik7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTM0MTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNjcxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwOTkpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTA4KTtcbnZhciBJbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzYxKTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyByZWR1Y2UsIHJlZHVjZVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfUklHSFQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhcmd1bWVudHNMZW5ndGgsIG1lbW8pIHtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTQxNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG52YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzE1Nyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM0MTE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcbnZhciBpdGVyYXRvckNsb3NlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MjEyKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcwNzI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDMyNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NDg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IF9fd2VicGFja19yZXF1aXJlX18oMTY5NCk7XG52YXIgY2xhc3NvZlJhdyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMyNik7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk5MjA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjY1Nik7XG52YXIgb3duS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzg4Nyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjM2KTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzA3MCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NTQ0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ5OTQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzM4MykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MTE0KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oODAwMyk7XG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDk3KTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4ODgwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oOTc4MSk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNzApO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTExNCk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MTE0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MTM1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgdG9QcmltaXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1OTMpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDcwKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMTQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NTQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTA5KTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTk0KTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oOTUxOCk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NzQpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDAzKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4ODApO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzIwKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxMTIpO1xudmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MTMpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ5Nyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzM4Myk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5NzgxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzE3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4NTQpO1xudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODMyNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDgxMTM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdldEJ1aWx0SW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwMDUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzM5Mjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciB1c2VyQWdlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxMTMpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc0ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIxMDk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjM2KS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODg4MCk7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMjApO1xudmFyIHNldEdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUwNSk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTkyMCk7XG52YXIgaXNGb3JjZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MDUpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcyOTM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcwMDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ5MTYpO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzIwKTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcbnZhciByZWdleHBFeGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjYxKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4ODApO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSwge1xuICAgICAgUkVQTEFDRV9LRUVQU18kMDogUkVQTEFDRV9LRUVQU18kMCxcbiAgICAgIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFOiBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgIH0pO1xuICAgIHZhciBzdHJpbmdNZXRob2QgPSBtZXRob2RzWzBdO1xuICAgIHZhciByZWdleE1ldGhvZCA9IG1ldGhvZHNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmluZ01ldGhvZCk7XG4gICAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cblxuICBpZiAoc2hhbSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk5NzQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzA5OSk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUwMDU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1Nyk7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTI0Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjQ4KTtcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0OTcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODU1NDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2NzApO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjQ2KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gIH0gcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY0Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5MDgpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHJlcGxhY2UgPSAnJy5yZXBsYWNlO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkXFxkPykvZztcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3ODU0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLyogZ2xvYmFsIGdsb2JhbFRoaXMgLS0gc2FmZSAqL1xuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18uZyA9PSAnb2JqZWN0JyAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fLmcpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBmYWxsYmFja1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NjU2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM1MDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ5MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTAwNSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ2NjQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NzgxKTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG52YXIgY3JlYXRlRWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzE3KTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMTc5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShieXRlcyk7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1hbnRpc3NhTGVuZ3RoID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgfHwgbnVtYmVyID09PSAwICYmIDEgLyBudW1iZXIgPCAwID8gMSA6IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBleHBvbmVudCwgbWFudGlzc2EsIGM7XG4gIG51bWJlciA9IGFicyhudW1iZXIpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICBpZiAobnVtYmVyICE9IG51bWJlciB8fCBudW1iZXIgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBtYW50aXNzYSA9IG51bWJlciAhPSBudW1iZXIgPyAxIDogMDtcbiAgICBleHBvbmVudCA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZXhwb25lbnQgPSBmbG9vcihsb2cobnVtYmVyKSAvIExOMik7XG4gICAgaWYgKG51bWJlciAqIChjID0gcG93KDIsIC1leHBvbmVudCkpIDwgMSkge1xuICAgICAgZXhwb25lbnQtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gMSkge1xuICAgICAgbnVtYmVyICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtYmVyICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmIChudW1iZXIgKiBjID49IDIpIHtcbiAgICAgIGV4cG9uZW50Kys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChleHBvbmVudCArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG1hbnRpc3NhID0gMDtcbiAgICAgIGV4cG9uZW50ID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gMSkge1xuICAgICAgbWFudGlzc2EgPSAobnVtYmVyICogYyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gZXhwb25lbnQgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbWFudGlzc2EgPSBudW1iZXIgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgICBleHBvbmVudCA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtYW50aXNzYUxlbmd0aCA+PSA4OyBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NSwgbWFudGlzc2EgLz0gMjU2LCBtYW50aXNzYUxlbmd0aCAtPSA4KTtcbiAgZXhwb25lbnQgPSBleHBvbmVudCA8PCBtYW50aXNzYUxlbmd0aCB8IG1hbnRpc3NhO1xuICBleHBvbmVudExlbmd0aCArPSBtYW50aXNzYUxlbmd0aDtcbiAgZm9yICg7IGV4cG9uZW50TGVuZ3RoID4gMDsgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTUsIGV4cG9uZW50IC89IDI1NiwgZXhwb25lbnRMZW5ndGggLT0gOCk7XG4gIGJ1ZmZlclstLWluZGV4XSB8PSBzaWduICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufTtcblxudmFyIHVucGFjayA9IGZ1bmN0aW9uIChidWZmZXIsIG1hbnRpc3NhTGVuZ3RoKSB7XG4gIHZhciBieXRlcyA9IGJ1ZmZlci5sZW5ndGg7XG4gIHZhciBleHBvbmVudExlbmd0aCA9IGJ5dGVzICogOCAtIG1hbnRpc3NhTGVuZ3RoIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBleHBvbmVudExlbmd0aCkgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGV4cG9uZW50TGVuZ3RoIC0gNztcbiAgdmFyIGluZGV4ID0gYnl0ZXMgLSAxO1xuICB2YXIgc2lnbiA9IGJ1ZmZlcltpbmRleC0tXTtcbiAgdmFyIGV4cG9uZW50ID0gc2lnbiAmIDEyNztcbiAgdmFyIG1hbnRpc3NhO1xuICBzaWduID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4XSwgaW5kZXgtLSwgbkJpdHMgLT0gOCk7XG4gIG1hbnRpc3NhID0gZXhwb25lbnQgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZXhwb25lbnQgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbWFudGlzc2FMZW5ndGg7XG4gIGZvciAoOyBuQml0cyA+IDA7IG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXhdLCBpbmRleC0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGV4cG9uZW50ID09PSAwKSB7XG4gICAgZXhwb25lbnQgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZXhwb25lbnQgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbWFudGlzc2EgPyBOYU4gOiBzaWduID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbWFudGlzc2EgPSBtYW50aXNzYSArIHBvdygyLCBtYW50aXNzYUxlbmd0aCk7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCAtIGVCaWFzO1xuICB9IHJldHVybiAoc2lnbiA/IC0xIDogMSkgKiBtYW50aXNzYSAqIHBvdygyLCBleHBvbmVudCAtIG1hbnRpc3NhTGVuZ3RoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYWNrOiBwYWNrLFxuICB1bnBhY2s6IHVucGFja1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODM2MTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xudmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzMjYpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk1ODc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xudmFyIHNldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Njc0KTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjc4ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0NjUpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk5MDk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIE5BVElWRV9XRUFLX01BUCA9IF9fd2VicGFja19yZXF1aXJlX18oODUzNik7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTExKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4ODApO1xudmFyIG9iamVjdEhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjY1Nik7XG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NDY1KTtcbnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyMDApO1xudmFyIGhpZGRlbktleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1MDEpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzY1OTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0OTcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzE1Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMyNik7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjbGFzc29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ3MDU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTExOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTkxMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzg1MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMyNik7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTIxMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2NzApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvcikge1xuICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKS52YWx1ZTtcbiAgfVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzM4Mzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oOTUxOCk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4ODgwKTtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2NTYpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG52YXIgSVNfUFVSRSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCghSVNfUFVSRSB8fCBORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc0OTc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDEzMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvKiBnbG9iYWwgU3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxMTIpO1xudmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MTMpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IG5ldyBVUkwoJ2I/YT0xJmI9MiZjPTMnLCAnaHR0cDovL2EnKTtcbiAgdmFyIHNlYXJjaFBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXM7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdXJsLnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgc2VhcmNoUGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBzZWFyY2hQYXJhbXNbJ2RlbGV0ZSddKCdiJyk7XG4gICAgcmVzdWx0ICs9IGtleSArIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIChJU19QVVJFICYmICF1cmwudG9KU09OKVxuICAgIHx8ICFzZWFyY2hQYXJhbXMuc29ydFxuICAgIHx8IHVybC5ocmVmICE9PSAnaHR0cDovL2EvYyUyMGQ/YT0xJmM9MydcbiAgICB8fCBzZWFyY2hQYXJhbXMuZ2V0KCdjJykgIT09ICczJ1xuICAgIHx8IFN0cmluZyhuZXcgVVJMU2VhcmNoUGFyYW1zKCc/YT0xJykpICE9PSAnYT0xJ1xuICAgIHx8ICFzZWFyY2hQYXJhbXNbSVRFUkFUT1JdXG4gICAgLy8gdGhyb3dzIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwczovL2FAYicpLnVzZXJuYW1lICE9PSAnYSdcbiAgICB8fCBuZXcgVVJMU2VhcmNoUGFyYW1zKG5ldyBVUkxTZWFyY2hQYXJhbXMoJ2E9YicpKS5nZXQoJ2EnKSAhPT0gJ2InXG4gICAgLy8gbm90IHB1bnljb2RlZCBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL9GC0LXRgdGCJykuaG9zdCAhPT0gJ3huLS1lMWF5YmMnXG4gICAgLy8gbm90IGVzY2FwZWQgaW4gQ2hyb21lIDYyLVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly9hI9CxJykuaGFzaCAhPT0gJyMlRDAlQjEnXG4gICAgLy8gZmFpbHMgaW4gQ2hyb21lIDY2LVxuICAgIHx8IHJlc3VsdCAhPT0gJ2ExYzMnXG4gICAgLy8gdGhyb3dzIGluIFNhZmFyaVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly94JywgdW5kZWZpbmVkKS5ob3N0ICE9PSAneCc7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODUzNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciBpbnNwZWN0U291cmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzg4KTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE1NzQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oOTc4MSk7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xudmFyIG9iamVjdEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5NTYpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTE4MSk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOTYpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTA4KTtcbnZhciBJbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzYxKTtcblxudmFyIG5hdGl2ZUFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxubW9kdWxlLmV4cG9ydHMgPSAhbmF0aXZlQXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmIG5hdGl2ZUFzc2lnbih7IGI6IDEgfSwgbmF0aXZlQXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTtcbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8qIGdsb2JhbCBTeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBvYmplY3RLZXlzKFMpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6IG5hdGl2ZUFzc2lnbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDQ4KTtcbnZhciBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ4KTtcbnZhciBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTAxKTtcbnZhciBodG1sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTApO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzE3KTtcbnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyMDApO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjA0ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3ODEpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDcwKTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOTY3MCk7XG52YXIgb2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTk1Nik7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMDcwOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oOTc4MSk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2NjQpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzU5Myk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMjM2OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oOTc4MSk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOTYpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTExNCk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjU2KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzU5Myk7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjU2KTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oNDY2NCk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODAwNjpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MzI0KTtcbnZhciBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ4KTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTE4MTpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykge1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5NTE4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2NTYpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTA4KTtcbnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyMDApO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IF9fd2VicGFja19yZXF1aXJlX18oODU0NCk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjMyNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjU2KTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2NTYpO1xudmFyIGluZGV4T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMTgpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzUwMSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5NTY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGludGVybmFsT2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNjMyNCk7XG52YXIgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0OCk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUyOTY6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3Njc0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOTY3MCk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDc3KTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyODg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2OTQpO1xudmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0OCk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzODg3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnZXRCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDA1KTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDA2KTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxODEpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg1Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIyNDg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzIwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDEzMjA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4ODgwKTtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2NTYpO1xudmFyIHNldEdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUwNSk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjc4OCk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwOSk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICB9XG4gICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFzdGF0ZS5zb3VyY2UpIHtcbiAgICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgICB9XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzY1MTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMyNik7XG52YXIgcmVnZXhwRXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMjI2MSk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIyNjE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciByZWdleHBGbGFncyA9IF9fd2VicGFja19yZXF1aXJlX18oNzA2Nik7XG52YXIgc3RpY2t5SGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMjk5OSk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1kgfHwgc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tYXNzZXJ0aW9uLWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gcmVnZXhwRmxhZ3MuY2FsbChyZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IGZsYWdzLnJlcGxhY2UoJ3knLCAnJyk7XG4gICAgICBpZiAoZmxhZ3MuaW5kZXhPZignZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBTdHJpbmcoc3RyKS5zbGljZShyZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgc3RyW3JlLmxhc3RJbmRleCAtIDFdICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwoc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gbWF0Y2guaW5wdXQuc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzA2Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjk5OTpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvcixcbi8vIHNvIHdlIHVzZSBhbiBpbnRlcm1lZGlhdGUgZnVuY3Rpb24uXG5mdW5jdGlvbiBSRShzLCBmKSB7XG4gIHJldHVybiBSZWdFeHAocywgZik7XG59XG5cbmV4cG9ydHMuVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbiAgdmFyIHJlID0gUkUoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuZXhwb3J0cy5CUk9LRU5fQ0FSRVQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSBSRSgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9IG51bGw7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDQ4ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzUwNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4ODApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MzQwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTAwNSk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNzApO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3ODEpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODAwMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNzApLmY7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjU2KTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxMTIpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MjAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzMDkpO1xudmFyIHVpZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTcxMSk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NDY1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4NTQpO1xudmFyIHNldEdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUwNSk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjMwOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSVNfUFVSRSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMyk7XG52YXIgc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0NjUpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuOS4wJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIxIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY3MDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwOTkpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NzEwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5NTgpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0ODgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMxOTc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bLlxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xudmFyIE9WRVJGTE9XX0VSUk9SID0gJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJztcbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICovXG52YXIgdWNzMmRlY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gSXQncyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIHZhciBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gTG93IHN1cnJvZ2F0ZS5cbiAgICAgICAgb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKi9cbnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiAoZGlnaXQpIHtcbiAgLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcbiAgLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG4gIHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNik7XG59O1xuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICovXG52YXIgYWRhcHQgPSBmdW5jdGlvbiAoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG4gIHZhciBrID0gMDtcbiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcbiAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuICBmb3IgKDsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcbiAgICBkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG4gIH1cbiAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuICAvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gIHZhciBuID0gaW5pdGlhbE47XG4gIHZhciBkZWx0YSA9IDA7XG4gIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG4gIHZhciBpLCBjdXJyZW50VmFsdWU7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG4gIHZhciBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoOyAvLyBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblxuICAvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuICAgIC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHQgbGFyZ2VyIG9uZTpcbiAgICB2YXIgbSA9IG1heEludDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93LlxuICAgIHZhciBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cbiAgICAgICAgdmFyIHEgPSBkZWx0YTtcbiAgICAgICAgZm9yICh2YXIgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG4gICAgICAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7XG4gICAgICAgICAgdmFyIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICB2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNUKSkpO1xuICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEpKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgKytoYW5kbGVkQ1BDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICArK2RlbHRhO1xuICAgICsrbjtcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGVuY29kZWQgPSBbXTtcbiAgdmFyIGxhYmVscyA9IGlucHV0LnRvTG93ZXJDYXNlKCkucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHUwMDJFJykuc3BsaXQoJy4nKTtcbiAgdmFyIGksIGxhYmVsO1xuICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWwgPSBsYWJlbHNbaV07XG4gICAgZW5jb2RlZC5wdXNoKHJlZ2V4Tm9uQVNDSUkudGVzdChsYWJlbCkgPyAneG4tLScgKyBlbmNvZGUobGFiZWwpIDogbGFiZWwpO1xuICB9XG4gIHJldHVybiBlbmNvZGVkLmpvaW4oJy4nKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDYwOTE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcbnZhciB3aGl0ZXNwYWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTM2MSk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9IG5vbiB8fCB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUU7XG4gIH0pO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzExMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ4OCk7XG52YXIgd2hpdGVzcGFjZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNjEpO1xuXG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE0MDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oOTk1OCk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzA2Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTU4KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIG9yIGluZGV4Jyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NjU2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODM2MSk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ4OCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk5NTg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NDY2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5NTgpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzkwODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ4OCk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ1OTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDAyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMDAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5NTgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgaWYgKHJlc3VsdCA8IDApIHRocm93IFJhbmdlRXJyb3IoXCJUaGUgYXJndW1lbnQgY2FuJ3QgYmUgbGVzcyB0aGFuIDBcIik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NTkzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTExKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNjk0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxMTIpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk4NDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTA5KTtcbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4NTQpO1xudmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NzgxKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzODMyKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzMxKTtcbnZhciBhbkluc3RhbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nzg3KTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMTQpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oODg4MCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjYpO1xudmFyIHRvSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNjcpO1xudmFyIHRvT2Zmc2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NTkwKTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzU5Myk7XG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjU2KTtcbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDgpO1xudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xudmFyIGNyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xudmFyIHNldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Njc0KTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDA2KS5mO1xudmFyIHR5cGVkQXJyYXlGcm9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzIxKTtcbnZhciBmb3JFYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDkyKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzNDApO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDcwKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMzYpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5MDkpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTg3KTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9UQUc7XG52YXIgVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheTtcbnZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5UHJvdG90eXBlO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgaXNUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5pc1R5cGVkQXJyYXk7XG52YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xuXG52YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGl0KSkgPT0gJ0FycmF5QnVmZmVyJyB8fCBrbGFzcyA9PSAnU2hhcmVkQXJyYXlCdWZmZXInO1xufTtcblxudmFyIGlzVHlwZWRBcnJheUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBpc1R5cGVkQXJyYXkodGFyZ2V0KVxuICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICA/IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigyLCB0YXJnZXRba2V5XSlcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG59O1xuXG52YXIgd3JhcHBlZERlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAmJiBpc09iamVjdChkZXNjcmlwdG9yKVxuICAgICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKVxuICAgICYmICFoYXMoZGVzY3JpcHRvciwgJ2dldCcpXG4gICAgJiYgIWhhcyhkZXNjcmlwdG9yLCAnc2V0JylcbiAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZVxuICAgICYmICghaGFzKGRlc2NyaXB0b3IsICd3cml0YWJsZScpIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUpXG4gICAgJiYgKCFoYXMoZGVzY3JpcHRvciwgJ2VudW1lcmFibGUnKSB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUpXG4gICkge1xuICAgIHRhcmdldFtrZXldID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSB3cmFwcGVkRGVmaW5lUHJvcGVydHk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVPZmZzZXQnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2xlbmd0aCcpO1xuICB9XG5cbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfSwge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBkZWZpbmVQcm9wZXJ0eTogd3JhcHBlZERlZmluZVByb3BlcnR5XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICB2YXIgQllURVMgPSBUWVBFLm1hdGNoKC9cXGQrJC8pWzBdIC8gODtcbiAgICB2YXIgQ09OU1RSVUNUT1JfTkFNRSA9IFRZUEUgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgVFlQRTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBUWVBFO1xuICAgIHZhciBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICByZXR1cm4gZGF0YS52aWV3W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSByb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4RkYgPyAweEZGIDogdmFsdWUgJiAweEZGO1xuICAgICAgZGF0YS52aWV3W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEuYnl0ZU9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgbmF0aXZlRGVmaW5lUHJvcGVydHkodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCBvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aDtcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBieXRlT2Zmc2V0ID0gdG9PZmZzZXQob2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBieXRlT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBieXRlT2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVkQXJyYXlGcm9tLmNhbGwoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gdHlwZWRBcnJheUZyb20uY2FsbChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9KCksIGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIGZvckVhY2goZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwga2V5LCBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3Jba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgICQoe1xuICAgICAgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAhPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IsIHNoYW06ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTXG4gICAgfSwgZXhwb3J0ZWQpO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM4MzI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDcyKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbnZhciBBcnJheUJ1ZmZlciA9IGdsb2JhbC5BcnJheUJ1ZmZlcjtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheSgxKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5ldyBJbnQ4QXJyYXkoLTEpO1xufSkgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgbmV3IEludDhBcnJheSgpO1xuICBuZXcgSW50OEFycmF5KG51bGwpO1xuICBuZXcgSW50OEFycmF5KDEuNSk7XG4gIG5ldyBJbnQ4QXJyYXkoaXRlcmFibGUpO1xufSwgdHJ1ZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBTYWZhcmkgKDExKykgYnVnIC0gYSByZWFzb24gd2h5IGV2ZW4gU2FmYXJpIDEzIHNob3VsZCBsb2FkIGEgdHlwZWQgYXJyYXkgcG9seWZpbGxcbiAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKDIpLCAxLCB1bmRlZmluZWQpLmxlbmd0aCAhPT0gMTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMDc0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzA3KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGxpc3QpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IoaW5zdGFuY2UsIGluc3RhbmNlLmNvbnN0cnVjdG9yKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzMyMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5MDgpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDY2KTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0Nik7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NjU5KTtcbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTc0KTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaSwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0O1xuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKE8pO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIE8gPSBbXTtcbiAgICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgTy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgIH1cbiAgfVxuICBpZiAobWFwcGluZyAmJiBhcmd1bWVudHNMZW5ndGggPiAyKSB7XG4gICAgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICB9XG4gIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRoaXMpKShsZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5NzExOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMzMDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIE5BVElWRV9TWU1CT0wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAvKiBnbG9iYWwgU3ltYm9sIC0tIHNhZmUgKi9cbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUxMTI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzA5KTtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2NTYpO1xudmFyIHVpZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTcxMSk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMzKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IF9fd2VicGFja19yZXF1aXJlX18oMzMwNyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMzYxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG4vLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODI2NDpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciBhcnJheUJ1ZmZlck1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMzMSk7XG52YXIgc2V0U3BlY2llcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjM0MCk7XG5cbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIEFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJNb2R1bGVbQVJSQVlfQlVGRkVSXTtcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xuXG4vLyBgQXJyYXlCdWZmZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IE5hdGl2ZUFycmF5QnVmZmVyICE9PSBBcnJheUJ1ZmZlciB9LCB7XG4gIEFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlclxufSk7XG5cbnNldFNwZWNpZXMoQVJSQVlfQlVGRkVSKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjIyMjpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxNTcpO1xudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTA4KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxMzUpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTQxNyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5NCk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcbnZhciBWOF9WRVJTSU9OID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzkyKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzMyNzpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgJGZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjA5MikuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOTQpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjc3Mjpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgJGluZGV4T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMTgpLmluZGV4T2Y7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IF9fd2VicGFja19yZXF1aXJlX18oOTM0MSk7XG5cbnZhciBuYXRpdmVJbmRleE9mID0gW10uaW5kZXhPZjtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUluZGV4T2YgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gbmF0aXZlSW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjk5Mjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNTY1Nik7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIyMyk7XG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDk3KTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTA5KTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjU0KTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTI0OTpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgJG1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjA5MikubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOTQpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzA0Mjpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG52YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzE1Nyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDAwKTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjU2KTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNjEzNSk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTk0KTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NjE6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDkpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQwMCk7XG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTU4KTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5MDgpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTQxNyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxMzUpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOTQpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgbGVuZ3RoIGV4Y2VlZGVkJztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDgzMDk6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3ODEpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDcwKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZy5jYWxsKHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDg5OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDkpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNzkwOCk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1MTgpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IF9fd2VicGFja19yZXF1aXJlX18oODU0NCk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTUzOTpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2OTQpO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzIwKTtcbnZhciB0b1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjg4KTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ5MTY6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMDkpO1xudmFyIGV4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNjEpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTcxNDpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMjApO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG52YXIgZmxhZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNjYpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NzgzOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjaGFyQXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3MTApLmNoYXJBdDtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTA5KTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjU0KTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ3MjM6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDA3KTtcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOTY3MCk7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjYpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0ODgpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzMCk7XG52YXIgcmVnRXhwRXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oNzY1MSk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChNQVRDSCwgbmF0aXZlTWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBtYXRjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gbWF0Y2hlciAhPT0gdW5kZWZpbmVkID8gbWF0Y2hlci5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1MzA2OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNzAwNyk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2NzApO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDY2KTtcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5NTgpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0ODgpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzMCk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDcpO1xudmFyIHJlZ0V4cEV4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NTEpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChSRVBMQUNFLCBuYXRpdmVSZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUsIHJlYXNvbikge1xuICB2YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSByZWFzb24uUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU7XG4gIHZhciBSRVBMQUNFX0tFRVBTXyQwID0gcmVhc29uLlJFUExBQ0VfS0VFUFNfJDA7XG4gIHZhciBVTlNBRkVfU1VCU1RJVFVURSA9IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID8gJyQnIDogJyQwJztcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiByZXBsYWNlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcmVwbGFjZXIuY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IG5hdGl2ZVJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgaWYgKFxuICAgICAgICAoIVJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFICYmIFJFUExBQ0VfS0VFUFNfJDApIHx8XG4gICAgICAgICh0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnc3RyaW5nJyAmJiByZXBsYWNlVmFsdWUuaW5kZXhPZihVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xKVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlUmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMxMjM6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDA3KTtcbnZhciBpc1JlZ0V4cCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1MCk7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2NzApO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0ODgpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjcwNyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTMwKTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NTEpO1xudmFyIHJlZ2V4cEV4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNjEpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcblxudmFyIGFycmF5UHVzaCA9IFtdLnB1c2g7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiAhUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCAyLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFycmF5UHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IG91dHB1dC5zbGljZSgwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogbmF0aXZlU3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNVUFBPUlRTX1kpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMjEwOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTA5KTtcbnZhciAkdHJpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMzExMSkudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDkxKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW0nKSB9LCB7XG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjk5MDpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYwKTtcbnZhciAkY29weVdpdGhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0OCk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuY29weXdpdGhpblxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnY29weVdpdGhpbicsIGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICByZXR1cm4gJGNvcHlXaXRoaW4uY2FsbChhVHlwZWRBcnJheSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg5Mjc6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJGV2ZXJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDkyKS5ldmVyeTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZXZlcnlcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2V2ZXJ5JywgZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRldmVyeShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMxMDU6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJGZpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyODUpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbGxcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgcmV0dXJuICRmaWxsLmFwcGx5KGFUeXBlZEFycmF5KHRoaXMpLCBhcmd1bWVudHMpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUwMzU6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJGZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjA5MikuZmlsdGVyO1xudmFyIGZyb21TcGVjaWVzQW5kTGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzA3NCk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWx0ZXJcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbHRlcicsIGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICB2YXIgbGlzdCA9ICRmaWx0ZXIoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIGZyb21TcGVjaWVzQW5kTGlzdCh0aGlzLCBsaXN0KTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3MTc0OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyICRmaW5kSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOTIpLmZpbmRJbmRleDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQzNDU6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJGZpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOTIpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmluZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZCcsIGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmQoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI4NDY6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJGZvckVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOTIpLmZvckVhY2g7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZm9yZWFjaFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZm9yRWFjaCcsIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgJGZvckVhY2goYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NzMxOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyICRpbmNsdWRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTMxOCkuaW5jbHVkZXM7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmluY2x1ZGVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmNsdWRlcycsIGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgcmV0dXJuICRpbmNsdWRlcyhhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcyMDk6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJGluZGV4T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMTgpLmluZGV4T2Y7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuaW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5kZXhPZicsIGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGluZGV4T2YoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MzE5OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4NTQpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgQXJyYXlJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5OTIpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTExMik7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG52YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbnZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIG5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvciA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGVbSVRFUkFUT1JdO1xuXG52YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhIW5hdGl2ZVR5cGVkQXJyYXlJdGVyYXRvclxuICAmJiAobmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgbmF0aXZlVHlwZWRBcnJheUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmVudHJpZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2VudHJpZXMnLCBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpO1xufSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5rZXlzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdrZXlzJywgZnVuY3Rpb24ga2V5cygpIHtcbiAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0pO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS52YWx1ZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsICFDT1JSRUNUX0lURVJfTkFNRSk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUtQEBpdGVyYXRvclxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZChJVEVSQVRPUiwgdHlwZWRBcnJheVZhbHVlcywgIUNPUlJFQ1RfSVRFUl9OQU1FKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODg2Nzpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYwKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRqb2luID0gW10uam9pbjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuam9pblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2pvaW4nLCBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICByZXR1cm4gJGpvaW4uYXBwbHkoYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzc4OTpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYwKTtcbnZhciAkbGFzdEluZGV4T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1ODMpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2xhc3RJbmRleE9mJywgZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICByZXR1cm4gJGxhc3RJbmRleE9mLmFwcGx5KGFUeXBlZEFycmF5KHRoaXMpLCBhcmd1bWVudHMpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM3Mzk6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJG1hcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjA5MikubWFwO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjcwNyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLm1hcFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbWFwJywgZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJG1hcChhVHlwZWRBcnJheSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzcGVjaWVzQ29uc3RydWN0b3IoTywgTy5jb25zdHJ1Y3RvcikpKShsZW5ndGgpO1xuICB9KTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NDgzOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyICRyZWR1Y2VSaWdodCA9IF9fd2VicGFja19yZXF1aXJlX18oMzY3MSkucmlnaHQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlUmljaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2VSaWdodCcsIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgcmV0dXJuICRyZWR1Y2VSaWdodChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkzNjg6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG52YXIgJHJlZHVjZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzY3MSkubGVmdDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnJlZHVjZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlJywgZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDU2OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZXZlcnNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZXZlcnNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZXZlcnNlJywgZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgbGVuZ3RoID0gYVR5cGVkQXJyYXkodGhhdCkubGVuZ3RoO1xuICB2YXIgbWlkZGxlID0gZmxvb3IobGVuZ3RoIC8gMik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciB2YWx1ZTtcbiAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gIH0gcmV0dXJuIHRoYXQ7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzQ2Mjpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYwKTtcbnZhciB0b0xlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2Nik7XG52YXIgdG9PZmZzZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1OTApO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTA4KTtcbnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5Myk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLyogZ2xvYmFsIEludDhBcnJheSAtLSBzYWZlICovXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSAwO1xuICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGgnKTtcbiAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbn0sIEZPUkNFRCk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY3ODpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYwKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3MDcpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJHNsaWNlID0gW10uc2xpY2U7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8qIGdsb2JhbCBJbnQ4QXJyYXkgLS0gc2FmZSAqL1xuICBuZXcgSW50OEFycmF5KDEpLnNsaWNlKCk7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNsaWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxpc3QgPSAkc2xpY2UuY2FsbChhVHlwZWRBcnJheSh0aGlzKSwgc3RhcnQsIGVuZCk7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBGT1JDRUQpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NDYyOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyICRzb21lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDkyKS5zb21lO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvbWVcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvbWUnLCBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkc29tZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM4MjQ6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2MCk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvcnRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvcnQnLCBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICByZXR1cm4gJHNvcnQuY2FsbChhVHlwZWRBcnJheSh0aGlzKSwgY29tcGFyZWZuKTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1MDIxOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDY2KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0MDApO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjcwNyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnN1YmFycmF5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzdWJhcnJheScsIGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgdmFyIE8gPSBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICB2YXIgYmVnaW5JbmRleCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE8uY29uc3RydWN0b3IpKShcbiAgICBPLmJ1ZmZlcixcbiAgICBPLmJ5dGVPZmZzZXQgKyBiZWdpbkluZGV4ICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtIGJlZ2luSW5kZXgpXG4gICk7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjk3NDpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODU0KTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjkzKTtcblxudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJHRvTG9jYWxlU3RyaW5nID0gW10udG9Mb2NhbGVTdHJpbmc7XG52YXIgJHNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbnZhciBUT19MT0NBTEVfU1RSSU5HX0JVRyA9ICEhSW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IEludDhBcnJheSgxKSk7XG59KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBJbnQ4QXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5LnByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvbG9jYWxlc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b0xvY2FsZVN0cmluZycsIGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICByZXR1cm4gJHRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9TVFJJTkdfQlVHID8gJHNsaWNlLmNhbGwoYVR5cGVkQXJyYXkodGhpcykpIDogYVR5cGVkQXJyYXkodGhpcyksIGFyZ3VtZW50cyk7XG59LCBGT1JDRUQpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1MDE2OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjApLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTMpO1xudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG5cbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgVWludDhBcnJheVByb3RvdHlwZSA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGUgfHwge307XG52YXIgYXJyYXlUb1N0cmluZyA9IFtdLnRvU3RyaW5nO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gIGFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gIH07XG59XG5cbnZhciBJU19OT1RfQVJSQVlfTUVUSE9EID0gVWludDhBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9zdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvU3RyaW5nJywgYXJyYXlUb1N0cmluZywgSVNfTk9UX0FSUkFZX01FVEhPRCk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI0NzI6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5ODQzKTtcblxuLy8gYFVpbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDc0Nzpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4NTQpO1xudmFyIERPTUl0ZXJhYmxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oODMyNCk7XG52YXIgZm9yRWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oODUzMyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4ODgwKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOTQ4OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgRE9NSXRlcmFibGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzI0KTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjk5Mik7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4ODgwKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxMTIpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTYzNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbl9fd2VicGFja19yZXF1aXJlX18oNjk5Mik7XG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTAwNSk7XG52YXIgVVNFX05BVElWRV9VUkwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5MCk7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMjApO1xudmFyIHJlZGVmaW5lQWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjQ4KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oODAwMyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDk5NCk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwOSk7XG52YXIgYW5JbnN0YW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTc4Nyk7XG52YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjU2KTtcbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTc0KTtcbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDgpO1xudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjcwKTtcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTExKTtcbnZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMTQpO1xudmFyIGdldEl0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTU0KTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0Nik7XG52YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MTEyKTtcblxudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgSGVhZGVycyA9IGdldEJ1aWx0SW4oJ0hlYWRlcnMnKTtcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcblxudmFyIHBsdXMgPSAvXFwrL2c7XG52YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7XG5cbnZhciBwZXJjZW50U2VxdWVuY2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxcXGRhLWZdezJ9KXsnICsgYnl0ZXMgKyAnfSknLCAnZ2knKSk7XG59O1xuXG52YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2VxdWVuY2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgfVxufTtcblxudmFyIGRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBpdC5yZXBsYWNlKHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2UgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlW21hdGNoXTtcbn07XG5cbnZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpdCkucmVwbGFjZShmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgcGFyc2VTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocmVzdWx0LCBxdWVyeSkge1xuICBpZiAocXVlcnkpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgIGVudHJ5ID0gYXR0cmlidXRlLnNwbGl0KCc9Jyk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICBrZXk6IGRlc2VyaWFsaXplKGVudHJ5LnNoaWZ0KCkpLFxuICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShlbnRyeS5qb2luKCc9JykpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHVwZGF0ZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgcGFyc2VTZWFyY2hQYXJhbXModGhpcy5lbnRyaWVzLCBxdWVyeSk7XG59O1xuXG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICBpZiAocGFzc2VkIDwgcmVxdWlyZWQpIHRocm93IFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kLCBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kLCBrZXk7XG5cbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICB1cGRhdGVVUkw6IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSxcbiAgICB1cGRhdGVTZWFyY2hQYXJhbXM6IHVwZGF0ZVNlYXJjaFBhcmFtc1xuICB9KTtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGluaXQpO1xuICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoaW5pdCk7XG4gICAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICAgIGVudHJ5SXRlcmF0b3IgPSBnZXRJdGVyYXRvcihhbk9iamVjdChzdGVwLnZhbHVlKSk7XG4gICAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChmaXJzdCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgICAoc2Vjb25kID0gZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAgICFlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICAgKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlcXVlbmNlIHdpdGggbGVuZ3RoIDInKTtcbiAgICAgICAgICBlbnRyaWVzLnB1c2goeyBrZXk6IGZpcnN0LnZhbHVlICsgJycsIHZhbHVlOiBzZWNvbmQudmFsdWUgKyAnJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoa2V5IGluIGluaXQpIGlmIChoYXNPd24oaW5pdCwga2V5KSkgZW50cmllcy5wdXNoKHsga2V5OiBrZXksIHZhbHVlOiBpbml0W2tleV0gKyAnJyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VTZWFyY2hQYXJhbXMoZW50cmllcywgdHlwZW9mIGluaXQgPT09ICdzdHJpbmcnID8gaW5pdC5jaGFyQXQoMCkgPT09ICc/JyA/IGluaXQuc2xpY2UoMSkgOiBpbml0IDogaW5pdCArICcnKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnJlZGVmaW5lQWxsKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBzdGF0ZS5lbnRyaWVzLnB1c2goeyBrZXk6IG5hbWUgKyAnJywgdmFsdWU6IHZhbHVlICsgJycgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGVsc2UgaW5kZXgrKztcbiAgICB9XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRcbiAgZ2V0OiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXR1cm4gZW50cmllc1tpbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRBbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0YWxsXG4gIGdldEFsbDogZnVuY3Rpb24gZ2V0QWxsKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJlc3VsdC5wdXNoKGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIHZhbCA9IHZhbHVlICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBlbnRyaWVzLnNwbGljZShpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogdmFsIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zb3J0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNvcnRcbiAgc29ydDogZnVuY3Rpb24gc29ydCgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICAvLyBBcnJheSNzb3J0IGlzIG5vdCBzdGFibGUgaW4gc29tZSBlbmdpbmVzXG4gICAgdmFyIHNsaWNlID0gZW50cmllcy5zbGljZSgpO1xuICAgIHZhciBlbnRyeSwgZW50cmllc0luZGV4LCBzbGljZUluZGV4O1xuICAgIGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICBmb3IgKHNsaWNlSW5kZXggPSAwOyBzbGljZUluZGV4IDwgc2xpY2UubGVuZ3RoOyBzbGljZUluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gc2xpY2Vbc2xpY2VJbmRleF07XG4gICAgICBmb3IgKGVudHJpZXNJbmRleCA9IDA7IGVudHJpZXNJbmRleCA8IHNsaWNlSW5kZXg7IGVudHJpZXNJbmRleCsrKSB7XG4gICAgICAgIGlmIChlbnRyaWVzW2VudHJpZXNJbmRleF0ua2V5ID4gZW50cnkua2V5KSB7XG4gICAgICAgICAgZW50cmllcy5zcGxpY2UoZW50cmllc0luZGV4LCAwLCBlbnRyeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbnRyaWVzSW5kZXggPT09IHNsaWNlSW5kZXgpIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcyk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGVudHJ5O1xuICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICByZXN1bHQucHVzaChzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICB9IHJldHVybiByZXN1bHQuam9pbignJicpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHBvbHlmaWxsZWQgYFVSTFNlYXJjaFBhcmFtc2Bcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzRcbmlmICghVVNFX05BVElWRV9VUkwgJiYgdHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBIZWFkZXJzID09ICdmdW5jdGlvbicpIHtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICB2YXIgYXJncyA9IFtpbnB1dF07XG4gICAgICB2YXIgaW5pdCwgYm9keSwgaGVhZGVycztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBpbml0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgICAgICBib2R5ID0gaW5pdC5ib2R5O1xuICAgICAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpO1xuICAgICAgICAgICAgaWYgKCFoZWFkZXJzLmhhcygnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgICAgICAgaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdCA9IGNyZWF0ZShpbml0LCB7XG4gICAgICAgICAgICAgIGJvZHk6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBTdHJpbmcoYm9keSkpLFxuICAgICAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goaW5pdCk7XG4gICAgICB9IHJldHVybiAkZmV0Y2guYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsXG4gIGdldFN0YXRlOiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlXG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyODU6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbl9fd2VicGFja19yZXF1aXJlX18oODc4Myk7XG52YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEwOSk7XG52YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3ODEpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OTApO1xudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1NCk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjA0OCk7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMjApO1xudmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3ODcpO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjY1Nik7XG52YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTc0KTtcbnZhciBhcnJheUZyb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0NTcpO1xudmFyIGNvZGVBdCA9IF9fd2VicGFja19yZXF1aXJlX18oODcxMCkuY29kZUF0O1xudmFyIHRvQVNDSUkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxOTcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDAzKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MzcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5MDkpO1xuXG52YXIgTmF0aXZlVVJMID0gZ2xvYmFsLlVSTDtcbnZhciBVUkxTZWFyY2hQYXJhbXMgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuVVJMU2VhcmNoUGFyYW1zO1xudmFyIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuZ2V0U3RhdGU7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsVVJMU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcignVVJMJyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHBvdyA9IE1hdGgucG93O1xuXG52YXIgSU5WQUxJRF9BVVRIT1JJVFkgPSAnSW52YWxpZCBhdXRob3JpdHknO1xudmFyIElOVkFMSURfU0NIRU1FID0gJ0ludmFsaWQgc2NoZW1lJztcbnZhciBJTlZBTElEX0hPU1QgPSAnSW52YWxpZCBob3N0JztcbnZhciBJTlZBTElEX1BPUlQgPSAnSW52YWxpZCBwb3J0JztcblxudmFyIEFMUEhBID0gL1tBLVphLXpdLztcbnZhciBBTFBIQU5VTUVSSUMgPSAvW1xcZCstLkEtWmEtel0vO1xudmFyIERJR0lUID0gL1xcZC87XG52YXIgSEVYX1NUQVJUID0gL14oMHh8MFgpLztcbnZhciBPQ1QgPSAvXlswLTddKyQvO1xudmFyIERFQyA9IC9eXFxkKyQvO1xudmFyIEhFWCA9IC9eW1xcZEEtRmEtZl0rJC87XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb250cm9sLXJlZ2V4IC0tIHNhZmUgKi9cbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXHUwMDAwXFx0XFx1MDAwQVxcdTAwMEQgIyUvOj9AW1xcXFxdXS87XG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCA9IC9bXFx1MDAwMFxcdFxcdTAwMEFcXHUwMDBEICMvOj9AW1xcXFxdXS87XG52YXIgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSA9IC9eW1xcdTAwMDAtXFx1MDAxRiBdK3xbXFx1MDAwMC1cXHUwMDFGIF0rJC9nO1xudmFyIFRBQl9BTkRfTkVXX0xJTkUgPSAvW1xcdFxcdTAwMEFcXHUwMDBEXS9nO1xuLyogZXNsaW50LWVuYWJsZSBuby1jb250cm9sLXJlZ2V4IC0tIHNhZmUgKi9cbnZhciBFT0Y7XG5cbnZhciBwYXJzZUhvc3QgPSBmdW5jdGlvbiAodXJsLCBpbnB1dCkge1xuICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDtcbiAgaWYgKGlucHV0LmNoYXJBdCgwKSA9PSAnWycpIHtcbiAgICBpZiAoaW5wdXQuY2hhckF0KGlucHV0Lmxlbmd0aCAtIDEpICE9ICddJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSBwYXJzZUlQdjYoaW5wdXQuc2xpY2UoMSwgLTEpKTtcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgLy8gb3BhcXVlIGhvc3RcbiAgfSBlbHNlIGlmICghaXNTcGVjaWFsKHVybCkpIHtcbiAgICBpZiAoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVC50ZXN0KGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2RlUG9pbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0ICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpbmRleF0sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpO1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgfVxufTtcblxudmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgcGFydHMgPSBpbnB1dC5zcGxpdCgnLicpO1xuICB2YXIgcGFydHNMZW5ndGgsIG51bWJlcnMsIGluZGV4LCBwYXJ0LCByYWRpeCwgbnVtYmVyLCBpcHY0O1xuICBpZiAocGFydHMubGVuZ3RoICYmIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdID09ICcnKSB7XG4gICAgcGFydHMucG9wKCk7XG4gIH1cbiAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChwYXJ0c0xlbmd0aCA+IDQpIHJldHVybiBpbnB1dDtcbiAgbnVtYmVycyA9IFtdO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIHBhcnQgPSBwYXJ0c1tpbmRleF07XG4gICAgaWYgKHBhcnQgPT0gJycpIHJldHVybiBpbnB1dDtcbiAgICByYWRpeCA9IDEwO1xuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgcGFydC5jaGFyQXQoMCkgPT0gJzAnKSB7XG4gICAgICByYWRpeCA9IEhFWF9TVEFSVC50ZXN0KHBhcnQpID8gMTYgOiA4O1xuICAgICAgcGFydCA9IHBhcnQuc2xpY2UocmFkaXggPT0gOCA/IDEgOiAyKTtcbiAgICB9XG4gICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgpLnRlc3QocGFydCkpIHJldHVybiBpbnB1dDtcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTtcbiAgICB9XG4gICAgbnVtYmVycy5wdXNoKG51bWJlcik7XG4gIH1cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBudW1iZXIgPSBudW1iZXJzW2luZGV4XTtcbiAgICBpZiAoaW5kZXggPT0gcGFydHNMZW5ndGggLSAxKSB7XG4gICAgICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyID4gMjU1KSByZXR1cm4gbnVsbDtcbiAgfVxuICBpcHY0ID0gbnVtYmVycy5wb3AoKTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbnVtYmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTtcbiAgfVxuICByZXR1cm4gaXB2NDtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlucHV0LmNoYXJBdChwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNoYXIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIEhFWC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNoYXIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaGFyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hhcigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hhcigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURJR0lULnRlc3QoY2hhcigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoRElHSVQudGVzdChjaGFyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hhcigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNoYXIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hhcigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBob3N0W2luZGV4XS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNoYXIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaGFyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXMoc2V0LCBjaGFyKSA/IGNoYXIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hhcik7XG59O1xuXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG52YXIgaXNTcGVjaWFsID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gaGFzKHNwZWNpYWxTY2hlbWVzLCB1cmwuc2NoZW1lKTtcbn07XG5cbnZhciBpbmNsdWRlc0NyZWRlbnRpYWxzID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gdXJsLnVzZXJuYW1lICE9ICcnIHx8IHVybC5wYXNzd29yZCAhPSAnJztcbn07XG5cbnZhciBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAhdXJsLmhvc3QgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PSAnZmlsZSc7XG59O1xuXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgQUxQSEEudGVzdChzdHJpbmcuY2hhckF0KDApKVxuICAgICYmICgoc2Vjb25kID0gc3RyaW5nLmNoYXJBdCgxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nLnNsaWNlKDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IHN0cmluZy5jaGFyQXQoMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG52YXIgc2hvcnRlblVSTHNQYXRoID0gZnVuY3Rpb24gKHVybCkge1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgaWYgKHBhdGhTaXplICYmICh1cmwuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICBwYXRoLnBvcCgpO1xuICB9XG59O1xuXG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHNlZ21lbnQudG9Mb3dlckNhc2UoKSA9PT0gJyUyZSc7XG59O1xuXG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gc2VnbWVudC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xudmFyIHBhcnNlVVJMID0gZnVuY3Rpb24gKHVybCwgaW5wdXQsIHN0YXRlT3ZlcnJpZGUsIGJhc2UpIHtcbiAgdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIGJ1ZmZlciA9ICcnO1xuICB2YXIgc2VlbkF0ID0gZmFsc2U7XG4gIHZhciBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICB2YXIgc2VlblBhc3N3b3JkVG9rZW4gPSBmYWxzZTtcbiAgdmFyIGNvZGVQb2ludHMsIGNoYXIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgdXJsLnBhdGggPSBbXTtcbiAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSBmYWxzZTtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJycpO1xuICB9XG5cbiAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkge1xuICAgIGNoYXIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdO1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOlxuICAgICAgICBpZiAoY2hhciAmJiBBTFBIQS50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTQ0hFTUU6XG4gICAgICAgIGlmIChjaGFyICYmIChBTFBIQU5VTUVSSUMudGVzdChjaGFyKSB8fCBjaGFyID09ICcrJyB8fCBjaGFyID09ICctJyB8fCBjaGFyID09ICcuJykpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonKSB7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgKFxuICAgICAgICAgICAgKGlzU3BlY2lhbCh1cmwpICE9IGhhcyhzcGVjaWFsU2NoZW1lcywgYnVmZmVyKSkgfHxcbiAgICAgICAgICAgIChidWZmZXIgPT0gJ2ZpbGUnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSB8fFxuICAgICAgICAgICAgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwuaG9zdClcbiAgICAgICAgICApKSByZXR1cm47XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJ1ZmZlcjtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHVybCkgJiYgYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSB1cmwuc2NoZW1lKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHVybCkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgcG9pbnRlciA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIE5PX1NDSEVNRTpcbiAgICAgICAgaWYgKCFiYXNlIHx8IChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnID8gRklMRSA6IFJFTEFUSVZFO1xuICAgICAgICBjb250aW51ZTtcblxuICAgICAgY2FzZSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nICYmIGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9PUl9BVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgIGlmIChjaGFyID09IEVPRikge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnLycgfHwgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5wYXRoLnBvcCgpO1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBSRUxBVElWRV9TTEFTSDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJy8nKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOlxuICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICBpZiAoY2hhciAhPSAnLycgfHwgYnVmZmVyLmNoYXJBdChwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmIGNoYXIgIT0gJ1xcXFwnKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnQCcpIHtcbiAgICAgICAgICBpZiAoc2VlbkF0KSBidWZmZXIgPSAnJTQwJyArIGJ1ZmZlcjtcbiAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludCwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfQVVUSE9SSVRZO1xuICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEhPU1Q7XG4gICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgSE9TVDpcbiAgICAgIGNhc2UgSE9TVE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnOicgJiYgIXNlZW5CcmFja2V0KSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTtcbiAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBQT1JUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlID09IEhPU1ROQU1FKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFyID09ICdbJykgc2VlbkJyYWNrZXQgPSB0cnVlO1xuICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJ10nKSBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBPUlQ6XG4gICAgICAgIGlmIChESUdJVC50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpIHx8XG4gICAgICAgICAgc3RhdGVPdmVycmlkZVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoYnVmZmVyICE9ICcnKSB7XG4gICAgICAgICAgICB2YXIgcG9ydCA9IHBhcnNlSW50KGJ1ZmZlciwgMTApO1xuICAgICAgICAgICAgaWYgKHBvcnQgPiAweEZGRkYpIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgICB1cmwucG9ydCA9IChpc1NwZWNpYWwodXJsKSAmJiBwb3J0ID09PSBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSkgPyBudWxsIDogcG9ydDtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEZJTEU6XG4gICAgICAgIHVybC5zY2hlbWUgPSAnZmlsZSc7XG4gICAgICAgIGlmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykgc3RhdGUgPSBGSUxFX1NMQVNIO1xuICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIGlmIChjaGFyID09IEVPRikge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpIHVybC5wYXRoLnB1c2goYmFzZS5wYXRoWzBdKTtcbiAgICAgICAgICBlbHNlIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgRklMRV9IT1NUOlxuICAgICAgICBpZiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyID09ICcnKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBpZiAodXJsLmhvc3QgPT0gJ2xvY2FsaG9zdCcpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgfSBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQQVRIX1NUQVJUOlxuICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmIGNoYXIgIT0gJ1xcXFwnKSBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICc/Jykge1xuICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaGFyICE9ICcvJykgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSDpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB8fFxuICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgc2hvcnRlblVSTHNQYXRoKHVybCk7XG4gICAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgIShjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgIShjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5ob3N0KSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBidWZmZXIgPSBidWZmZXIuY2hhckF0KDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goYnVmZmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmIChjaGFyID09IEVPRiB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJykpIHtcbiAgICAgICAgICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykge1xuICAgICAgICAgICAgICB1cmwucGF0aC5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNoYXIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOlxuICAgICAgICBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUVVFUlk6XG4gICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSBcIidcIiAmJiBpc1NwZWNpYWwodXJsKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB1cmwucXVlcnkgKz0gJyUyMyc7XG4gICAgICAgICAgZWxzZSB1cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShjaGFyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBGUkFHTUVOVDpcbiAgICAgICAgaWYgKGNoYXIgIT0gRU9GKSB1cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZShjaGFyLCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb2ludGVyKys7XG4gIH1cbn07XG5cbi8vIGBVUkxgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1jbGFzc1xudmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHtcbiAgdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG4gIHZhciBiYXNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciB1cmxTdHJpbmcgPSBTdHJpbmcodXJsKTtcbiAgdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7IHR5cGU6ICdVUkwnIH0pO1xuICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlO1xuICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGJhc2UgaW5zdGFuY2VvZiBVUkxDb25zdHJ1Y3RvcikgYmFzZVN0YXRlID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZShiYXNlKTtcbiAgICBlbHNlIHtcbiAgICAgIGZhaWx1cmUgPSBwYXJzZVVSTChiYXNlU3RhdGUgPSB7fSwgU3RyaW5nKGJhc2UpKTtcbiAgICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgfVxuICB9XG4gIGZhaWx1cmUgPSBwYXJzZVVSTChzdGF0ZSwgdXJsU3RyaW5nLCBudWxsLCBiYXNlU3RhdGUpO1xuICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gc3RhdGUuc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICB2YXIgc2VhcmNoUGFyYW1zU3RhdGUgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHNlYXJjaFBhcmFtcyk7XG4gIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVNlYXJjaFBhcmFtcyhzdGF0ZS5xdWVyeSk7XG4gIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzdGF0ZS5xdWVyeSA9IFN0cmluZyhzZWFyY2hQYXJhbXMpIHx8IG51bGw7XG4gIH07XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGF0LmhyZWYgPSBzZXJpYWxpemVVUkwuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lm9yaWdpbiA9IGdldE9yaWdpbi5jYWxsKHRoYXQpO1xuICAgIHRoYXQucHJvdG9jb2wgPSBnZXRQcm90b2NvbC5jYWxsKHRoYXQpO1xuICAgIHRoYXQudXNlcm5hbWUgPSBnZXRVc2VybmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQucGFzc3dvcmQgPSBnZXRQYXNzd29yZC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaG9zdCA9IGdldEhvc3QuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhvc3RuYW1lID0gZ2V0SG9zdG5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBvcnQgPSBnZXRQb3J0LmNhbGwodGhhdCk7XG4gICAgdGhhdC5wYXRobmFtZSA9IGdldFBhdGhuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5zZWFyY2ggPSBnZXRTZWFyY2guY2FsbCh0aGF0KTtcbiAgICB0aGF0LnNlYXJjaFBhcmFtcyA9IGdldFNlYXJjaFBhcmFtcy5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaGFzaCA9IGdldEhhc2guY2FsbCh0aGF0KTtcbiAgfVxufTtcblxudmFyIFVSTFByb3RvdHlwZSA9IFVSTENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxudmFyIHNlcmlhbGl6ZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7XG4gIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDtcbiAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgdmFyIHF1ZXJ5ID0gdXJsLnF1ZXJ5O1xuICB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7XG4gIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7XG4gIGlmIChob3N0ICE9PSBudWxsKSB7XG4gICAgb3V0cHV0ICs9ICcvLyc7XG4gICAgaWYgKGluY2x1ZGVzQ3JlZGVudGlhbHModXJsKSkge1xuICAgICAgb3V0cHV0ICs9IHVzZXJuYW1lICsgKHBhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCc7XG4gICAgfVxuICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICAgIGlmIChwb3J0ICE9PSBudWxsKSBvdXRwdXQgKz0gJzonICsgcG9ydDtcbiAgfSBlbHNlIGlmIChzY2hlbWUgPT0gJ2ZpbGUnKSBvdXRwdXQgKz0gJy8vJztcbiAgb3V0cHV0ICs9IHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgcGF0aC5qb2luKCcvJykgOiAnJztcbiAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7XG4gIGlmIChmcmFnbWVudCAhPT0gbnVsbCkgb3V0cHV0ICs9ICcjJyArIGZyYWdtZW50O1xuICByZXR1cm4gb3V0cHV0O1xufTtcblxudmFyIGdldE9yaWdpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICBpZiAoc2NoZW1lID09ICdibG9iJykgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChzY2hlbWUucGF0aFswXSkub3JpZ2luO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH1cbiAgaWYgKHNjaGVtZSA9PSAnZmlsZScgfHwgIWlzU3BlY2lhbCh1cmwpKSByZXR1cm4gJ251bGwnO1xuICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHVybC5ob3N0KSArIChwb3J0ICE9PSBudWxsID8gJzonICsgcG9ydCA6ICcnKTtcbn07XG5cbnZhciBnZXRQcm90b2NvbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2NoZW1lICsgJzonO1xufTtcblxudmFyIGdldFVzZXJuYW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS51c2VybmFtZTtcbn07XG5cbnZhciBnZXRQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykucGFzc3dvcmQ7XG59O1xuXG52YXIgZ2V0SG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIHJldHVybiBob3N0ID09PSBudWxsID8gJydcbiAgICA6IHBvcnQgPT09IG51bGwgPyBzZXJpYWxpemVIb3N0KGhvc3QpXG4gICAgOiBzZXJpYWxpemVIb3N0KGhvc3QpICsgJzonICsgcG9ydDtcbn07XG5cbnZhciBnZXRIb3N0bmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvc3QgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLmhvc3Q7XG4gIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpO1xufTtcblxudmFyIGdldFBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwb3J0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5wb3J0O1xuICByZXR1cm4gcG9ydCA9PT0gbnVsbCA/ICcnIDogU3RyaW5nKHBvcnQpO1xufTtcblxudmFyIGdldFBhdGhuYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgcmV0dXJuIHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgcGF0aC5qb2luKCcvJykgOiAnJztcbn07XG5cbnZhciBnZXRTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucXVlcnk7XG4gIHJldHVybiBxdWVyeSA/ICc/JyArIHF1ZXJ5IDogJyc7XG59O1xuXG52YXIgZ2V0U2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZWFyY2hQYXJhbXM7XG59O1xuXG52YXIgZ2V0SGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZyYWdtZW50ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5mcmFnbWVudDtcbiAgcmV0dXJuIGZyYWdtZW50ID8gJyMnICsgZnJhZ21lbnQgOiAnJztcbn07XG5cbnZhciBhY2Nlc3NvckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHsgZ2V0OiBnZXR0ZXIsIHNldDogc2V0dGVyLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUgfTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBkZWZpbmVQcm9wZXJ0aWVzKFVSTFByb3RvdHlwZSwge1xuICAgIC8vIGBVUkwucHJvdG90eXBlLmhyZWZgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgICBocmVmOiBhY2Nlc3NvckRlc2NyaXB0b3Ioc2VyaWFsaXplVVJMLCBmdW5jdGlvbiAoaHJlZikge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgdXJsU3RyaW5nID0gU3RyaW5nKGhyZWYpO1xuICAgICAgdmFyIGZhaWx1cmUgPSBwYXJzZVVSTCh1cmwsIHVybFN0cmluZyk7XG4gICAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgICAgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSh1cmwuc2VhcmNoUGFyYW1zKS51cGRhdGVTZWFyY2hQYXJhbXModXJsLnF1ZXJ5KTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5vcmlnaW5gIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgICBvcmlnaW46IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRPcmlnaW4pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnByb3RvY29sYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICAgIHByb3RvY29sOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UHJvdG9jb2wsIGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhwcm90b2NvbCkgKyAnOicsIFNDSEVNRV9TVEFSVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUudXNlcm5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gICAgdXNlcm5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRVc2VybmFtZSwgZnVuY3Rpb24gKHVzZXJuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKFN0cmluZyh1c2VybmFtZSkpO1xuICAgICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKSByZXR1cm47XG4gICAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cmwudXNlcm5hbWUgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhc3N3b3JkYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICAgIHBhc3N3b3JkOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UGFzc3dvcmQsIGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbShTdHJpbmcocGFzc3dvcmQpKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgdXJsLnBhc3N3b3JkID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXJsLnBhc3N3b3JkICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0XG4gICAgaG9zdDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhvc3QsIGZ1bmN0aW9uIChob3N0KSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcoaG9zdCksIEhPU1QpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhvc3RuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICAgIGhvc3RuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0SG9zdG5hbWUsIGZ1bmN0aW9uIChob3N0bmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKGhvc3RuYW1lKSwgSE9TVE5BTUUpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBvcnRgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgICBwb3J0OiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UG9ydCwgZnVuY3Rpb24gKHBvcnQpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKSByZXR1cm47XG4gICAgICBwb3J0ID0gU3RyaW5nKHBvcnQpO1xuICAgICAgaWYgKHBvcnQgPT0gJycpIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgIGVsc2UgcGFyc2VVUkwodXJsLCBwb3J0LCBQT1JUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXRobmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgICBwYXRobmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhdGhuYW1lLCBmdW5jdGlvbiAocGF0aG5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICB1cmwucGF0aCA9IFtdO1xuICAgICAgcGFyc2VVUkwodXJsLCBwYXRobmFtZSArICcnLCBQQVRIX1NUQVJUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaFxuICAgIHNlYXJjaDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaCwgZnVuY3Rpb24gKHNlYXJjaCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoKTtcbiAgICAgIGlmIChzZWFyY2ggPT0gJycpIHtcbiAgICAgICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgnPycgPT0gc2VhcmNoLmNoYXJBdCgwKSkgc2VhcmNoID0gc2VhcmNoLnNsaWNlKDEpO1xuICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgcGFyc2VVUkwodXJsLCBzZWFyY2gsIFFVRVJZKTtcbiAgICAgIH1cbiAgICAgIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUodXJsLnNlYXJjaFBhcmFtcykudXBkYXRlU2VhcmNoUGFyYW1zKHVybC5xdWVyeSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoUGFyYW1zYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gICAgc2VhcmNoUGFyYW1zOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0U2VhcmNoUGFyYW1zKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5oYXNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gICAgaGFzaDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhhc2gsIGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGhhc2ggPSBTdHJpbmcoaGFzaCk7XG4gICAgICBpZiAoaGFzaCA9PSAnJykge1xuICAgICAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoJyMnID09IGhhc2guY2hhckF0KDApKSBoYXNoID0gaGFzaC5zbGljZSgxKTtcbiAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgcGFyc2VVUkwodXJsLCBoYXNoLCBGUkFHTUVOVCk7XG4gICAgfSlcbiAgfSk7XG59XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiBzZXJpYWxpemVVUkwuY2FsbCh0aGlzKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNVUkwtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbmlmIChOYXRpdmVVUkwpIHtcbiAgdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5jcmVhdGVPYmplY3RVUkw7XG4gIHZhciBuYXRpdmVSZXZva2VPYmplY3RVUkwgPSBOYXRpdmVVUkwucmV2b2tlT2JqZWN0VVJMO1xuICAvLyBgVVJMLmNyZWF0ZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvY3JlYXRlT2JqZWN0VVJMXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGlmIChuYXRpdmVDcmVhdGVPYmplY3RVUkwpIHJlZGVmaW5lKFVSTENvbnN0cnVjdG9yLCAnY3JlYXRlT2JqZWN0VVJMJywgZnVuY3Rpb24gY3JlYXRlT2JqZWN0VVJMKGJsb2IpIHtcbiAgICByZXR1cm4gbmF0aXZlQ3JlYXRlT2JqZWN0VVJMLmFwcGx5KE5hdGl2ZVVSTCwgYXJndW1lbnRzKTtcbiAgfSk7XG4gIC8vIGBVUkwucmV2b2tlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9yZXZva2VPYmplY3RVUkxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBmdW5jdGlvbiByZXZva2VPYmplY3RVUkwodXJsKSB7XG4gICAgcmV0dXJuIG5hdGl2ZVJldm9rZU9iamVjdFVSTC5hcHBseShOYXRpdmVVUkwsIGFyZ3VtZW50cyk7XG4gIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZyhVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgVVJMOiBVUkxDb25zdHJ1Y3RvclxufSk7XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0XHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcbi8qKioqKiovIFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuLyoqKioqKi8gXHRcdFx0fSBjYXRjaCAoZSkge1xuLyoqKioqKi8gXHRcdFx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fSkoKTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWQgdG8gYmUgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2UgaXQgbmVlZCB0byBiZSBpbiBzdHJpY3QgbW9kZS5cbiFmdW5jdGlvbigpIHtcblwidXNlIHN0cmljdFwiO1xuLy8gRVNNIENPTVBBVCBGTEFHXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIEVYUE9SVFNcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4gIFwiRHJvcHpvbmVcIjogZnVuY3Rpb24oKSB7IHJldHVybiAvKiByZWV4cG9ydCAqLyBEcm9wem9uZTsgfSxcbiAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBkcm9wem9uZV9kaXN0OyB9XG59KTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzXG52YXIgZXNfYXJyYXlfY29uY2F0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMjIyKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qc1xudmFyIGVzX2FycmF5X2ZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNzMyNyk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qc1xudmFyIGVzX2FycmF5X2luZGV4X29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzcyKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzXG52YXIgZXNfYXJyYXlfaXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5OTIpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzXG52YXIgZXNfYXJyYXlfbWFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjQ5KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzXG52YXIgZXNfYXJyYXlfc2xpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNDIpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzXG52YXIgZXNfYXJyYXlfc3BsaWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjEpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yLmpzXG52YXIgZXNfYXJyYXlfYnVmZmVyX2NvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjY0KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanNcbnZhciBlc19mdW5jdGlvbl9uYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzA5KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXG52YXIgZXNfb2JqZWN0X2dldF9wcm90b3R5cGVfb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4OSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzXG52YXIgZXNfb2JqZWN0X3RvX3N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzOSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qc1xudmFyIGVzX3JlZ2V4cF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTE2KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanNcbnZhciBlc19yZWdleHBfdG9fc3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NzE0KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qc1xudmFyIGVzX3N0cmluZ19pdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oODc4Myk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanNcbnZhciBlc19zdHJpbmdfbWF0Y2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MjMpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanNcbnZhciBlc19zdHJpbmdfcmVwbGFjZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTMwNik7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanNcbnZhciBlc19zdHJpbmdfc3BsaXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMjMpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanNcbnZhciBlc19zdHJpbmdfdHJpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMzIxMCk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qc1xudmFyIGVzX3R5cGVkX2FycmF5X3VpbnQ4X2FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDcyKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfY29weV93aXRoaW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5OTApO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanNcbnZhciBlc190eXBlZF9hcnJheV9ldmVyeSA9IF9fd2VicGFja19yZXF1aXJlX18oODkyNyk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfZmlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzEwNSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanNcbnZhciBlc190eXBlZF9hcnJheV9maWx0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwMzUpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qc1xudmFyIGVzX3R5cGVkX2FycmF5X2ZpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzNDUpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qc1xudmFyIGVzX3R5cGVkX2FycmF5X2ZpbmRfaW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxNzQpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2guanNcbnZhciBlc190eXBlZF9hcnJheV9mb3JfZWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjg0Nik7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcy5qc1xudmFyIGVzX3R5cGVkX2FycmF5X2luY2x1ZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzMxKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfaW5kZXhfb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyMDkpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3IuanNcbnZhciBlc190eXBlZF9hcnJheV9pdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjMxOSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfam9pbiA9IF9fd2VicGFja19yZXF1aXJlX18oODg2Nyk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfbGFzdF9pbmRleF9vZiA9IF9fd2VicGFja19yZXF1aXJlX18oNzc4OSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAuanNcbnZhciBlc190eXBlZF9hcnJheV9tYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3MzkpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfcmVkdWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MzY4KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodC5qc1xudmFyIGVzX3R5cGVkX2FycmF5X3JlZHVjZV9yaWdodCA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ4Myk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfcmV2ZXJzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjA1Nik7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQuanNcbnZhciBlc190eXBlZF9hcnJheV9zZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NjIpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanNcbnZhciBlc190eXBlZF9hcnJheV9zbGljZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjc4KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUuanNcbnZhciBlc190eXBlZF9hcnJheV9zb21lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDYyKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanNcbnZhciBlc190eXBlZF9hcnJheV9zb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzODI0KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfc3ViYXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwMjEpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZy5qc1xudmFyIGVzX3R5cGVkX2FycmF5X3RvX2xvY2FsZV9zdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5NzQpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nLmpzXG52YXIgZXNfdHlwZWRfYXJyYXlfdG9fc3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDE2KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanNcbnZhciB3ZWJfZG9tX2NvbGxlY3Rpb25zX2Zvcl9lYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzQ3KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanNcbnZhciB3ZWJfZG9tX2NvbGxlY3Rpb25zX2l0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOTQ4KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanNcbnZhciB3ZWJfdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODUpO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2VtaXR0ZXIuanNcblxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLy8gVGhlIEVtaXR0ZXIgY2xhc3MgcHJvdmlkZXMgdGhlIGFiaWxpdHkgdG8gY2FsbCBgLm9uKClgIG9uIERyb3B6b25lIHRvIGxpc3RlblxuLy8gdG8gZXZlbnRzLlxuLy8gSXQgaXMgc3Ryb25nbHkgYmFzZWQgb24gY29tcG9uZW50J3MgZW1pdHRlciBjbGFzcywgYW5kIEkgcmVtb3ZlZCB0aGVcbi8vIGZ1bmN0aW9uYWxpdHkgYmVjYXVzZSBvZiB0aGUgZGVwZW5kZW5jeSBoZWxsIHdpdGggZGlmZmVyZW50IGZyYW1ld29ya3MuXG52YXIgRW1pdHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVtaXR0ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtaXR0ZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVtaXR0ZXIsIFt7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IC8vIEFkZCBhbiBldmVudCBsaXN0ZW5lciBmb3IgZ2l2ZW4gZXZlbnRcbiAgICBmdW5jdGlvbiBvbihldmVudCwgZm4pIHtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTsgLy8gQ3JlYXRlIG5hbWVzcGFjZSBmb3IgdGhpcyBldmVudFxuXG4gICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrc1tldmVudF0pIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzW2V2ZW50XSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWxsYmFja3NbZXZlbnRdLnB1c2goZm4pO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW1pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2FsbGJhY2tzLCB0cnVlKSxcbiAgICAgICAgICAgIF9zdGVwO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gdHJpZ2dlciBhIGNvcnJlc3BvbmRpbmcgRE9NIGV2ZW50XG5cblxuICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudCh0aGlzLm1ha2VFdmVudChcImRyb3B6b25lOlwiICsgZXZlbnQsIHtcbiAgICAgICAgICBhcmdzOiBhcmdzXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1ha2VFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlRXZlbnQoZXZlbnROYW1lLCBkZXRhaWwpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDogZGV0YWlsXG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSUUgMTEgc3VwcG9ydFxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQvQ3VzdG9tRXZlbnRcbiAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnROYW1lLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgfVxuICAgIH0gLy8gUmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZvciBnaXZlbiBldmVudC4gSWYgZm4gaXMgbm90IHByb3ZpZGVkLCBhbGwgZXZlbnRcbiAgICAvLyBsaXN0ZW5lcnMgZm9yIHRoYXQgZXZlbnQgd2lsbCBiZSByZW1vdmVkLiBJZiBuZWl0aGVyIGlzIHByb3ZpZGVkLCBhbGxcbiAgICAvLyBldmVudCBsaXN0ZW5lcnMgd2lsbCBiZSByZW1vdmVkLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwib2ZmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudCwgZm4pIHtcbiAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSAvLyBzcGVjaWZpYyBldmVudFxuXG5cbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuXG4gICAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuXG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcblxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrID09PSBmbikge1xuICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVtaXR0ZXI7XG59KCk7XG5cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3ByZXZpZXctdGVtcGxhdGUuaHRtbFxuLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBjbGFzcz1cXFwiZHotcHJldmlldyBkei1maWxlLXByZXZpZXdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJkei1pbWFnZVxcXCI+PGltZyBkYXRhLWR6LXRodW1ibmFpbC8+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImR6LWRldGFpbHNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJkei1zaXplXFxcIj48c3BhbiBkYXRhLWR6LXNpemU+PC9zcGFuPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJkei1maWxlbmFtZVxcXCI+PHNwYW4gZGF0YS1kei1uYW1lPjwvc3Bhbj48L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImR6LXByb2dyZXNzXFxcIj4gPHNwYW4gY2xhc3M9XFxcImR6LXVwbG9hZFxcXCIgZGF0YS1kei11cGxvYWRwcm9ncmVzcz48L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJkei1lcnJvci1tZXNzYWdlXFxcIj48c3BhbiBkYXRhLWR6LWVycm9ybWVzc2FnZT48L3NwYW4+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImR6LXN1Y2Nlc3MtbWFya1xcXCI+IDxzdmcgd2lkdGg9XFxcIjU0cHhcXFwiIGhlaWdodD1cXFwiNTRweFxcXCIgdmlld0JveD1cXFwiMCAwIDU0IDU0XFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiPiA8dGl0bGU+Q2hlY2s8L3RpdGxlPiA8ZyBzdHJva2U9XFxcIm5vbmVcXFwiIHN0cm9rZS13aWR0aD1cXFwiMVxcXCIgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj4gPHBhdGggZD1cXFwiTTIzLjUsMzEuODQzMTQ1OCBMMTcuNTg1MjQxOSwyNS45MjgzODc3IEMxNi4wMjQ4MjUzLDI0LjM2Nzk3MTEgMTMuNDkxMDI5NCwyNC4zNjY4MzUgMTEuOTI4OTMyMiwyNS45Mjg5MzIyIEMxMC4zNzAwMTM2LDI3LjQ4Nzg1MDggMTAuMzY2NTkxMiwzMC4wMjM0NDU1IDExLjkyODM4NzcsMzEuNTg1MjQxOSBMMjAuNDE0NzU4MSw0MC4wNzE2MTIzIEMyMC41MTMzOTk5LDQwLjE3MDI1NDEgMjAuNjE1OTMxNSw0MC4yNjI2NjQ5IDIwLjcyMTg2MTUsNDAuMzQ4ODQzNSBDMjIuMjgzNTY2OSw0MS44NzI1NjUxIDI0Ljc5NDIzNCw0MS44NjI2MjAyIDI2LjM0NjE1NjQsNDAuMzEwNjk3OCBMNDMuMzEwNjk3OCwyMy4zNDYxNTY0IEM0NC44NzcxMDIxLDIxLjc3OTc1MjEgNDQuODc1ODA1NywxOS4yNDgzODg3IDQzLjMxMzcwODUsMTcuNjg2MjkxNSBDNDEuNzU0Nzg5OSwxNi4xMjczNzI5IDM5LjIxNzYwMzUsMTYuMTI1NTQyMiAzNy42NTM4NDM2LDE3LjY4OTMwMjIgTDIzLjUsMzEuODQzMTQ1OCBaIE0yNyw1MyBDNDEuMzU5NDAzNSw1MyA1Myw0MS4zNTk0MDM1IDUzLDI3IEM1MywxMi42NDA1OTY1IDQxLjM1OTQwMzUsMSAyNywxIEMxMi42NDA1OTY1LDEgMSwxMi42NDA1OTY1IDEsMjcgQzEsNDEuMzU5NDAzNSAxMi42NDA1OTY1LDUzIDI3LDUzIFpcXFwiIHN0cm9rZS1vcGFjaXR5PVxcXCIwLjE5ODc5NDE1OFxcXCIgc3Ryb2tlPVxcXCIjNzQ3NDc0XFxcIiBmaWxsLW9wYWNpdHk9XFxcIjAuODE2NTE5NDc1XFxcIiBmaWxsPVxcXCIjRkZGRkZGXFxcIj48L3BhdGg+IDwvZz4gPC9zdmc+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJkei1lcnJvci1tYXJrXFxcIj4gPHN2ZyB3aWR0aD1cXFwiNTRweFxcXCIgaGVpZ2h0PVxcXCI1NHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgNTQgNTRcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB4bWxuczp4bGluaz1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCI+IDx0aXRsZT5FcnJvcjwvdGl0bGU+IDxnIHN0cm9rZT1cXFwibm9uZVxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxXFxcIiBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPiA8ZyBzdHJva2U9XFxcIiM3NDc0NzRcXFwiIHN0cm9rZS1vcGFjaXR5PVxcXCIwLjE5ODc5NDE1OFxcXCIgZmlsbD1cXFwiI0ZGRkZGRlxcXCIgZmlsbC1vcGFjaXR5PVxcXCIwLjgxNjUxOTQ3NVxcXCI+IDxwYXRoIGQ9XFxcIk0zMi42NTY4NTQyLDI5IEwzOC4zMTA2OTc4LDIzLjM0NjE1NjQgQzM5Ljg3NzEwMjEsMjEuNzc5NzUyMSAzOS44NzU4MDU3LDE5LjI0ODM4ODcgMzguMzEzNzA4NSwxNy42ODYyOTE1IEMzNi43NTQ3ODk5LDE2LjEyNzM3MjkgMzQuMjE3NjAzNSwxNi4xMjU1NDIyIDMyLjY1Mzg0MzYsMTcuNjg5MzAyMiBMMjcsMjMuMzQzMTQ1OCBMMjEuMzQ2MTU2NCwxNy42ODkzMDIyIEMxOS43ODIzOTY1LDE2LjEyNTU0MjIgMTcuMjQ1MjEwMSwxNi4xMjczNzI5IDE1LjY4NjI5MTUsMTcuNjg2MjkxNSBDMTQuMTI0MTk0MywxOS4yNDgzODg3IDE0LjEyMjg5NzksMjEuNzc5NzUyMSAxNS42ODkzMDIyLDIzLjM0NjE1NjQgTDIxLjM0MzE0NTgsMjkgTDE1LjY4OTMwMjIsMzQuNjUzODQzNiBDMTQuMTIyODk3OSwzNi4yMjAyNDc5IDE0LjEyNDE5NDMsMzguNzUxNjExMyAxNS42ODYyOTE1LDQwLjMxMzcwODUgQzE3LjI0NTIxMDEsNDEuODcyNjI3MSAxOS43ODIzOTY1LDQxLjg3NDQ1NzggMjEuMzQ2MTU2NCw0MC4zMTA2OTc4IEwyNywzNC42NTY4NTQyIEwzMi42NTM4NDM2LDQwLjMxMDY5NzggQzM0LjIxNzYwMzUsNDEuODc0NDU3OCAzNi43NTQ3ODk5LDQxLjg3MjYyNzEgMzguMzEzNzA4NSw0MC4zMTM3MDg1IEMzOS44NzU4MDU3LDM4Ljc1MTYxMTMgMzkuODc3MTAyMSwzNi4yMjAyNDc5IDM4LjMxMDY5NzgsMzQuNjUzODQzNiBMMzIuNjU2ODU0MiwyOSBaIE0yNyw1MyBDNDEuMzU5NDAzNSw1MyA1Myw0MS4zNTk0MDM1IDUzLDI3IEM1MywxMi42NDA1OTY1IDQxLjM1OTQwMzUsMSAyNywxIEMxMi42NDA1OTY1LDEgMSwxMi42NDA1OTY1IDEsMjcgQzEsNDEuMzU5NDAzNSAxMi42NDA1OTY1LDUzIDI3LDUzIFpcXFwiPjwvcGF0aD4gPC9nPiA8L2c+IDwvc3ZnPiA8L2Rpdj4gPC9kaXY+IFwiO1xuLy8gRXhwb3J0c1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcHJldmlld190ZW1wbGF0ZSA9IChjb2RlKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9vcHRpb25zLmpzXG5cblxuXG5cblxuZnVuY3Rpb24gb3B0aW9uc19jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdDsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gb3B0aW9uc191bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBvcHRpb25zX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gb3B0aW9uc19hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gb3B0aW9uc19hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gb3B0aW9uc19hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5cblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAvKipcbiAgICogSGFzIHRvIGJlIHNwZWNpZmllZCBvbiBlbGVtZW50cyBvdGhlciB0aGFuIGZvcm0gKG9yIHdoZW4gdGhlIGZvcm1cbiAgICogZG9lc24ndCBoYXZlIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSkuIFlvdSBjYW4gYWxzb1xuICAgKiBwcm92aWRlIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGBmaWxlc2AgYW5kXG4gICAqIG11c3QgcmV0dXJuIHRoZSB1cmwgKHNpbmNlIGB2My4xMi4wYClcbiAgICovXG4gIHVybDogbnVsbCxcblxuICAvKipcbiAgICogQ2FuIGJlIGNoYW5nZWQgdG8gYFwicHV0XCJgIGlmIG5lY2Vzc2FyeS4gWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBmdW5jdGlvblxuICAgKiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdpdGggYGZpbGVzYCBhbmQgbXVzdCByZXR1cm4gdGhlIG1ldGhvZCAoc2luY2UgYHYzLjEyLjBgKS5cbiAgICovXG4gIG1ldGhvZDogXCJwb3N0XCIsXG5cbiAgLyoqXG4gICAqIFdpbGwgYmUgc2V0IG9uIHRoZSBYSFJlcXVlc3QuXG4gICAqL1xuICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBUaGUgdGltZW91dCBmb3IgdGhlIFhIUiByZXF1ZXN0cyBpbiBtaWxsaXNlY29uZHMgKHNpbmNlIGB2NC40LjBgKS5cbiAgICogSWYgc2V0IHRvIG51bGwgb3IgMCwgbm8gdGltZW91dCBpcyBnb2luZyB0byBiZSBzZXQuXG4gICAqL1xuICB0aW1lb3V0OiBudWxsLFxuXG4gIC8qKlxuICAgKiBIb3cgbWFueSBmaWxlIHVwbG9hZHMgdG8gcHJvY2VzcyBpbiBwYXJhbGxlbCAoU2VlIHRoZVxuICAgKiBFbnF1ZXVpbmcgZmlsZSB1cGxvYWRzIGRvY3VtZW50YXRpb24gc2VjdGlvbiBmb3IgbW9yZSBpbmZvKVxuICAgKi9cbiAgcGFyYWxsZWxVcGxvYWRzOiAyLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHNlbmQgbXVsdGlwbGUgZmlsZXMgaW4gb25lIHJlcXVlc3QuIElmXG4gICAqIHRoaXMgaXQgc2V0IHRvIHRydWUsIHRoZW4gdGhlIGZhbGxiYWNrIGZpbGUgaW5wdXQgZWxlbWVudCB3aWxsXG4gICAqIGhhdmUgdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlIGFzIHdlbGwuIFRoaXMgb3B0aW9uIHdpbGxcbiAgICogYWxzbyB0cmlnZ2VyIGFkZGl0aW9uYWwgZXZlbnRzIChsaWtlIGBwcm9jZXNzaW5nbXVsdGlwbGVgKS4gU2VlIHRoZSBldmVudHNcbiAgICogZG9jdW1lbnRhdGlvbiBzZWN0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgdXBsb2FkTXVsdGlwbGU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHlvdSB3YW50IGZpbGVzIHRvIGJlIHVwbG9hZGVkIGluIGNodW5rcyB0byB5b3VyIHNlcnZlci4gVGhpcyBjYW4ndCBiZVxuICAgKiB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYHVwbG9hZE11bHRpcGxlYC5cbiAgICpcbiAgICogU2VlIFtjaHVua3NVcGxvYWRlZF0oI2NvbmZpZy1jaHVua3NVcGxvYWRlZCkgZm9yIHRoZSBjYWxsYmFjayB0byBmaW5hbGlzZSBhbiB1cGxvYWQuXG4gICAqL1xuICBjaHVua2luZzogZmFsc2UsXG5cbiAgLyoqXG4gICAqIElmIGBjaHVua2luZ2AgaXMgZW5hYmxlZCwgdGhpcyBkZWZpbmVzIHdoZXRoZXIgKipldmVyeSoqIGZpbGUgc2hvdWxkIGJlIGNodW5rZWQsXG4gICAqIGV2ZW4gaWYgdGhlIGZpbGUgc2l6ZSBpcyBiZWxvdyBjaHVua1NpemUuIFRoaXMgbWVhbnMsIHRoYXQgdGhlIGFkZGl0aW9uYWwgY2h1bmtcbiAgICogZm9ybSBkYXRhIHdpbGwgYmUgc3VibWl0dGVkIGFuZCB0aGUgYGNodW5rc1VwbG9hZGVkYCBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQuXG4gICAqL1xuICBmb3JjZUNodW5raW5nOiBmYWxzZSxcblxuICAvKipcbiAgICogSWYgYGNodW5raW5nYCBpcyBgdHJ1ZWAsIHRoZW4gdGhpcyBkZWZpbmVzIHRoZSBjaHVuayBzaXplIGluIGJ5dGVzLlxuICAgKi9cbiAgY2h1bmtTaXplOiAyMDAwMDAwLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbmRpdmlkdWFsIGNodW5rcyBvZiBhIGZpbGUgYXJlIGJlaW5nIHVwbG9hZGVkIHNpbXVsdGFuZW91c2x5LlxuICAgKi9cbiAgcGFyYWxsZWxDaHVua1VwbG9hZHM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGEgY2h1bmsgc2hvdWxkIGJlIHJldHJpZWQgaWYgaXQgZmFpbHMuXG4gICAqL1xuICByZXRyeUNodW5rczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIElmIGByZXRyeUNodW5rc2AgaXMgdHJ1ZSwgaG93IG1hbnkgdGltZXMgc2hvdWxkIGl0IGJlIHJldHJpZWQuXG4gICAqL1xuICByZXRyeUNodW5rc0xpbWl0OiAzLFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBmaWxlc2l6ZSAoaW4gYnl0ZXMpIHRoYXQgaXMgYWxsb3dlZCB0byBiZSB1cGxvYWRlZC5cbiAgICovXG4gIG1heEZpbGVzaXplOiAyNTYsXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHBhcmFtIHRoYXQgZ2V0cyB0cmFuc2ZlcnJlZC5cbiAgICogKipOT1RFKio6IElmIHlvdSBoYXZlIHRoZSBvcHRpb24gIGB1cGxvYWRNdWx0aXBsZWAgc2V0IHRvIGB0cnVlYCwgdGhlblxuICAgKiBEcm9wem9uZSB3aWxsIGFwcGVuZCBgW11gIHRvIHRoZSBuYW1lLlxuICAgKi9cbiAgcGFyYW1OYW1lOiBcImZpbGVcIixcblxuICAvKipcbiAgICogV2hldGhlciB0aHVtYm5haWxzIGZvciBpbWFnZXMgc2hvdWxkIGJlIGdlbmVyYXRlZFxuICAgKi9cbiAgY3JlYXRlSW1hZ2VUaHVtYm5haWxzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBJbiBNQi4gV2hlbiB0aGUgZmlsZW5hbWUgZXhjZWVkcyB0aGlzIGxpbWl0LCB0aGUgdGh1bWJuYWlsIHdpbGwgbm90IGJlIGdlbmVyYXRlZC5cbiAgICovXG4gIG1heFRodW1ibmFpbEZpbGVzaXplOiAxMCxcblxuICAvKipcbiAgICogSWYgYG51bGxgLCB0aGUgcmF0aW8gb2YgdGhlIGltYWdlIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgaXQuXG4gICAqL1xuICB0aHVtYm5haWxXaWR0aDogMTIwLFxuXG4gIC8qKlxuICAgKiBUaGUgc2FtZSBhcyBgdGh1bWJuYWlsV2lkdGhgLiBJZiBib3RoIGFyZSBudWxsLCBpbWFnZXMgd2lsbCBub3QgYmUgcmVzaXplZC5cbiAgICovXG4gIHRodW1ibmFpbEhlaWdodDogMTIwLFxuXG4gIC8qKlxuICAgKiBIb3cgdGhlIGltYWdlcyBzaG91bGQgYmUgc2NhbGVkIGRvd24gaW4gY2FzZSBib3RoLCBgdGh1bWJuYWlsV2lkdGhgIGFuZCBgdGh1bWJuYWlsSGVpZ2h0YCBhcmUgcHJvdmlkZWQuXG4gICAqIENhbiBiZSBlaXRoZXIgYGNvbnRhaW5gIG9yIGBjcm9wYC5cbiAgICovXG4gIHRodW1ibmFpbE1ldGhvZDogXCJjcm9wXCIsXG5cbiAgLyoqXG4gICAqIElmIHNldCwgaW1hZ2VzIHdpbGwgYmUgcmVzaXplZCB0byB0aGVzZSBkaW1lbnNpb25zIGJlZm9yZSBiZWluZyAqKnVwbG9hZGVkKiouXG4gICAqIElmIG9ubHkgb25lLCBgcmVzaXplV2lkdGhgICoqb3IqKiBgcmVzaXplSGVpZ2h0YCBpcyBwcm92aWRlZCwgdGhlIG9yaWdpbmFsIGFzcGVjdFxuICAgKiByYXRpbyBvZiB0aGUgZmlsZSB3aWxsIGJlIHByZXNlcnZlZC5cbiAgICpcbiAgICogVGhlIGBvcHRpb25zLnRyYW5zZm9ybUZpbGVgIGZ1bmN0aW9uIHVzZXMgdGhlc2Ugb3B0aW9ucywgc28gaWYgdGhlIGB0cmFuc2Zvcm1GaWxlYCBmdW5jdGlvblxuICAgKiBpcyBvdmVycmlkZGVuLCB0aGVzZSBvcHRpb25zIGRvbid0IGRvIGFueXRoaW5nLlxuICAgKi9cbiAgcmVzaXplV2lkdGg6IG51bGwsXG5cbiAgLyoqXG4gICAqIFNlZSBgcmVzaXplV2lkdGhgLlxuICAgKi9cbiAgcmVzaXplSGVpZ2h0OiBudWxsLFxuXG4gIC8qKlxuICAgKiBUaGUgbWltZSB0eXBlIG9mIHRoZSByZXNpemVkIGltYWdlIChiZWZvcmUgaXQgZ2V0cyB1cGxvYWRlZCB0byB0aGUgc2VydmVyKS5cbiAgICogSWYgYG51bGxgIHRoZSBvcmlnaW5hbCBtaW1lIHR5cGUgd2lsbCBiZSB1c2VkLiBUbyBmb3JjZSBqcGVnLCBmb3IgZXhhbXBsZSwgdXNlIGBpbWFnZS9qcGVnYC5cbiAgICogU2VlIGByZXNpemVXaWR0aGAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICByZXNpemVNaW1lVHlwZTogbnVsbCxcblxuICAvKipcbiAgICogVGhlIHF1YWxpdHkgb2YgdGhlIHJlc2l6ZWQgaW1hZ2VzLiBTZWUgYHJlc2l6ZVdpZHRoYC5cbiAgICovXG4gIHJlc2l6ZVF1YWxpdHk6IDAuOCxcblxuICAvKipcbiAgICogSG93IHRoZSBpbWFnZXMgc2hvdWxkIGJlIHNjYWxlZCBkb3duIGluIGNhc2UgYm90aCwgYHJlc2l6ZVdpZHRoYCBhbmQgYHJlc2l6ZUhlaWdodGAgYXJlIHByb3ZpZGVkLlxuICAgKiBDYW4gYmUgZWl0aGVyIGBjb250YWluYCBvciBgY3JvcGAuXG4gICAqL1xuICByZXNpemVNZXRob2Q6IFwiY29udGFpblwiLFxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSB0aGF0IGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSAqKmRpc3BsYXllZCoqIGZpbGVzaXplLiBZb3UgY2FuXG4gICAqIGNoYW5nZSB0aGlzIHRvIDEwMjQgaWYgeW91IHdvdWxkIHJhdGhlciBkaXNwbGF5IGtpYmlieXRlcywgbWViaWJ5dGVzLFxuICAgKiBldGMuLi4gMTAyNCBpcyB0ZWNobmljYWxseSBpbmNvcnJlY3QsIGJlY2F1c2UgYDEwMjQgYnl0ZXNgIGFyZSBgMSBraWJpYnl0ZWBcbiAgICogbm90IGAxIGtpbG9ieXRlYC4gWW91IGNhbiBjaGFuZ2UgdGhpcyB0byBgMTAyNGAgaWYgeW91IGRvbid0IGNhcmUgYWJvdXRcbiAgICogdmFsaWRpdHkuXG4gICAqL1xuICBmaWxlc2l6ZUJhc2U6IDEwMDAsXG5cbiAgLyoqXG4gICAqIElmIG5vdCBgbnVsbGAgZGVmaW5lcyBob3cgbWFueSBmaWxlcyB0aGlzIERyb3B6b25lIGhhbmRsZXMuIElmIGl0IGV4Y2VlZHMsXG4gICAqIHRoZSBldmVudCBgbWF4ZmlsZXNleGNlZWRlZGAgd2lsbCBiZSBjYWxsZWQuIFRoZSBkcm9wem9uZSBlbGVtZW50IGdldHMgdGhlXG4gICAqIGNsYXNzIGBkei1tYXgtZmlsZXMtcmVhY2hlZGAgYWNjb3JkaW5nbHkgc28geW91IGNhbiBwcm92aWRlIHZpc3VhbFxuICAgKiBmZWVkYmFjay5cbiAgICovXG4gIG1heEZpbGVzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBvYmplY3QgdG8gc2VuZCBhZGRpdGlvbmFsIGhlYWRlcnMgdG8gdGhlIHNlcnZlci4gRWc6XG4gICAqIGB7IFwiTXktQXdlc29tZS1IZWFkZXJcIjogXCJoZWFkZXIgdmFsdWVcIiB9YFxuICAgKi9cbiAgaGVhZGVyczogbnVsbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZHJvcHpvbmUgZWxlbWVudCBpdHNlbGYgd2lsbCBiZSBjbGlja2FibGUsIGlmIGBmYWxzZWBcbiAgICogbm90aGluZyB3aWxsIGJlIGNsaWNrYWJsZS5cbiAgICpcbiAgICogWW91IGNhbiBhbHNvIHBhc3MgYW4gSFRNTCBlbGVtZW50LCBhIENTUyBzZWxlY3RvciAoZm9yIG11bHRpcGxlIGVsZW1lbnRzKVxuICAgKiBvciBhbiBhcnJheSBvZiB0aG9zZS4gSW4gdGhhdCBjYXNlLCBhbGwgb2YgdGhvc2UgZWxlbWVudHMgd2lsbCB0cmlnZ2VyIGFuXG4gICAqIHVwbG9hZCB3aGVuIGNsaWNrZWQuXG4gICAqL1xuICBjbGlja2FibGU6IHRydWUsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgaGlkZGVuIGZpbGVzIGluIGRpcmVjdG9yaWVzIHNob3VsZCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgaWdub3JlSGlkZGVuRmlsZXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBhY2NlcHRgIGNoZWNrcyB0aGUgZmlsZSdzIG1pbWUgdHlwZSBvclxuICAgKiBleHRlbnNpb24gYWdhaW5zdCB0aGlzIGxpc3QuIFRoaXMgaXMgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBtaW1lXG4gICAqIHR5cGVzIG9yIGZpbGUgZXh0ZW5zaW9ucy5cbiAgICpcbiAgICogRWcuOiBgaW1hZ2UvKixhcHBsaWNhdGlvbi9wZGYsLnBzZGBcbiAgICpcbiAgICogSWYgdGhlIERyb3B6b25lIGlzIGBjbGlja2FibGVgIHRoaXMgb3B0aW9uIHdpbGwgYWxzbyBiZSB1c2VkIGFzXG4gICAqIFtgYWNjZXB0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9IVE1ML0VsZW1lbnQvaW5wdXQjYXR0ci1hY2NlcHQpXG4gICAqIHBhcmFtZXRlciBvbiB0aGUgaGlkZGVuIGZpbGUgaW5wdXQgYXMgd2VsbC5cbiAgICovXG4gIGFjY2VwdGVkRmlsZXM6IG51bGwsXG5cbiAgLyoqXG4gICAqICoqRGVwcmVjYXRlZCEqKlxuICAgKiBVc2UgYWNjZXB0ZWRGaWxlcyBpbnN0ZWFkLlxuICAgKi9cbiAgYWNjZXB0ZWRNaW1lVHlwZXM6IG51bGwsXG5cbiAgLyoqXG4gICAqIElmIGZhbHNlLCBmaWxlcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBxdWV1ZSBidXQgdGhlIHF1ZXVlIHdpbGwgbm90IGJlXG4gICAqIHByb2Nlc3NlZCBhdXRvbWF0aWNhbGx5LlxuICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgaWYgeW91IG5lZWQgc29tZSBhZGRpdGlvbmFsIHVzZXIgaW5wdXQgYmVmb3JlIHNlbmRpbmdcbiAgICogZmlsZXMgKG9yIGlmIHlvdSB3YW50IHdhbnQgYWxsIGZpbGVzIHNlbnQgYXQgb25jZSkuXG4gICAqIElmIHlvdSdyZSByZWFkeSB0byBzZW5kIHRoZSBmaWxlIHNpbXBseSBjYWxsIGBteURyb3B6b25lLnByb2Nlc3NRdWV1ZSgpYC5cbiAgICpcbiAgICogU2VlIHRoZSBbZW5xdWV1aW5nIGZpbGUgdXBsb2Fkc10oI2VucXVldWluZy1maWxlLXVwbG9hZHMpIGRvY3VtZW50YXRpb25cbiAgICogc2VjdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGF1dG9Qcm9jZXNzUXVldWU6IHRydWUsXG5cbiAgLyoqXG4gICAqIElmIGZhbHNlLCBmaWxlcyBhZGRlZCB0byB0aGUgZHJvcHpvbmUgd2lsbCBub3QgYmUgcXVldWVkIGJ5IGRlZmF1bHQuXG4gICAqIFlvdSdsbCBoYXZlIHRvIGNhbGwgYGVucXVldWVGaWxlKGZpbGUpYCBtYW51YWxseS5cbiAgICovXG4gIGF1dG9RdWV1ZTogdHJ1ZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGlzIHdpbGwgYWRkIGEgbGluayB0byBldmVyeSBmaWxlIHByZXZpZXcgdG8gcmVtb3ZlIG9yIGNhbmNlbCAoaWZcbiAgICogYWxyZWFkeSB1cGxvYWRpbmcpIHRoZSBmaWxlLiBUaGUgYGRpY3RDYW5jZWxVcGxvYWRgLCBgZGljdENhbmNlbFVwbG9hZENvbmZpcm1hdGlvbmBcbiAgICogYW5kIGBkaWN0UmVtb3ZlRmlsZWAgb3B0aW9ucyBhcmUgdXNlZCBmb3IgdGhlIHdvcmRpbmcuXG4gICAqL1xuICBhZGRSZW1vdmVMaW5rczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgd2hlcmUgdG8gZGlzcGxheSB0aGUgZmlsZSBwcmV2aWV3cyDigJMgaWYgYG51bGxgIHRoZVxuICAgKiBEcm9wem9uZSBlbGVtZW50IGl0c2VsZiBpcyB1c2VkLiBDYW4gYmUgYSBwbGFpbiBgSFRNTEVsZW1lbnRgIG9yIGEgQ1NTXG4gICAqIHNlbGVjdG9yLiBUaGUgZWxlbWVudCBzaG91bGQgaGF2ZSB0aGUgYGRyb3B6b25lLXByZXZpZXdzYCBjbGFzcyBzb1xuICAgKiB0aGUgcHJldmlld3MgYXJlIGRpc3BsYXllZCBwcm9wZXJseS5cbiAgICovXG4gIHByZXZpZXdzQ29udGFpbmVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byBgdHJ1ZWAgaWYgeW91IGRvbid0IHdhbnQgcHJldmlld3MgdG8gYmUgc2hvd24uXG4gICAqL1xuICBkaXNhYmxlUHJldmlld3M6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBlbGVtZW50IHRoZSBoaWRkZW4gaW5wdXQgZmllbGQgKHdoaWNoIGlzIHVzZWQgd2hlbiBjbGlja2luZyBvbiB0aGVcbiAgICogZHJvcHpvbmUgdG8gdHJpZ2dlciBmaWxlIHNlbGVjdGlvbikgd2lsbCBiZSBhcHBlbmRlZCB0by4gVGhpcyBtaWdodFxuICAgKiBiZSBpbXBvcnRhbnQgaW4gY2FzZSB5b3UgdXNlIGZyYW1ld29ya3MgdG8gc3dpdGNoIHRoZSBjb250ZW50IG9mIHlvdXIgcGFnZS5cbiAgICpcbiAgICogQ2FuIGJlIGEgc2VsZWN0b3Igc3RyaW5nLCBvciBhbiBlbGVtZW50IGRpcmVjdGx5LlxuICAgKi9cbiAgaGlkZGVuSW5wdXRDb250YWluZXI6IFwiYm9keVwiLFxuXG4gIC8qKlxuICAgKiBJZiBudWxsLCBubyBjYXB0dXJlIHR5cGUgd2lsbCBiZSBzcGVjaWZpZWRcbiAgICogSWYgY2FtZXJhLCBtb2JpbGUgZGV2aWNlcyB3aWxsIHNraXAgdGhlIGZpbGUgc2VsZWN0aW9uIGFuZCBjaG9vc2UgY2FtZXJhXG4gICAqIElmIG1pY3JvcGhvbmUsIG1vYmlsZSBkZXZpY2VzIHdpbGwgc2tpcCB0aGUgZmlsZSBzZWxlY3Rpb24gYW5kIGNob29zZSB0aGUgbWljcm9waG9uZVxuICAgKiBJZiBjYW1jb3JkZXIsIG1vYmlsZSBkZXZpY2VzIHdpbGwgc2tpcCB0aGUgZmlsZSBzZWxlY3Rpb24gYW5kIGNob29zZSB0aGUgY2FtZXJhIGluIHZpZGVvIG1vZGVcbiAgICogT24gYXBwbGUgZGV2aWNlcyBtdWx0aXBsZSBtdXN0IGJlIHNldCB0byBmYWxzZS4gIEFjY2VwdGVkRmlsZXMgbWF5IG5lZWQgdG9cbiAgICogYmUgc2V0IHRvIGFuIGFwcHJvcHJpYXRlIG1pbWUgdHlwZSAoZS5nLiBcImltYWdlLypcIiwgXCJhdWRpby8qXCIsIG9yIFwidmlkZW8vKlwiKS5cbiAgICovXG4gIGNhcHR1cmU6IG51bGwsXG5cbiAgLyoqXG4gICAqICoqRGVwcmVjYXRlZCoqLiBVc2UgYHJlbmFtZUZpbGVgIGluc3RlYWQuXG4gICAqL1xuICByZW5hbWVGaWxlbmFtZTogbnVsbCxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgYmVmb3JlIHRoZSBmaWxlIGlzIHVwbG9hZGVkIHRvIHRoZSBzZXJ2ZXIgYW5kIHJlbmFtZXMgdGhlIGZpbGUuXG4gICAqIFRoaXMgZnVuY3Rpb24gZ2V0cyB0aGUgYEZpbGVgIGFzIGFyZ3VtZW50IGFuZCBjYW4gdXNlIHRoZSBgZmlsZS5uYW1lYC4gVGhlIGFjdHVhbCBuYW1lIG9mIHRoZVxuICAgKiBmaWxlIHRoYXQgZ2V0cyB1c2VkIGR1cmluZyB0aGUgdXBsb2FkIGNhbiBiZSBhY2Nlc3NlZCB0aHJvdWdoIGBmaWxlLnVwbG9hZC5maWxlbmFtZWAuXG4gICAqL1xuICByZW5hbWVGaWxlOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgdGhlIGZhbGxiYWNrIHdpbGwgYmUgZm9yY2VkLiBUaGlzIGlzIHZlcnkgdXNlZnVsIHRvIHRlc3QgeW91ciBzZXJ2ZXJcbiAgICogaW1wbGVtZW50YXRpb25zIGZpcnN0IGFuZCBtYWtlIHN1cmUgdGhhdCBldmVyeXRoaW5nIHdvcmtzIGFzXG4gICAqIGV4cGVjdGVkIHdpdGhvdXQgZHJvcHpvbmUgaWYgeW91IGV4cGVyaWVuY2UgcHJvYmxlbXMsIGFuZCB0byB0ZXN0XG4gICAqIGhvdyB5b3VyIGZhbGxiYWNrcyB3aWxsIGxvb2suXG4gICAqL1xuICBmb3JjZUZhbGxiYWNrOiBmYWxzZSxcblxuICAvKipcbiAgICogVGhlIHRleHQgdXNlZCBiZWZvcmUgYW55IGZpbGVzIGFyZSBkcm9wcGVkLlxuICAgKi9cbiAgZGljdERlZmF1bHRNZXNzYWdlOiBcIkRyb3AgZmlsZXMgaGVyZSB0byB1cGxvYWRcIixcblxuICAvKipcbiAgICogVGhlIHRleHQgdGhhdCByZXBsYWNlcyB0aGUgZGVmYXVsdCBtZXNzYWdlIHRleHQgaXQgdGhlIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cbiAgICovXG4gIGRpY3RGYWxsYmFja01lc3NhZ2U6IFwiWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgZHJhZyduJ2Ryb3AgZmlsZSB1cGxvYWRzLlwiLFxuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0aGF0IHdpbGwgYmUgYWRkZWQgYmVmb3JlIHRoZSBmYWxsYmFjayBmb3JtLlxuICAgKiBJZiB5b3UgcHJvdmlkZSBhICBmYWxsYmFjayBlbGVtZW50IHlvdXJzZWxmLCBvciBpZiB0aGlzIG9wdGlvbiBpcyBgbnVsbGAgdGhpcyB3aWxsXG4gICAqIGJlIGlnbm9yZWQuXG4gICAqL1xuICBkaWN0RmFsbGJhY2tUZXh0OiBcIlBsZWFzZSB1c2UgdGhlIGZhbGxiYWNrIGZvcm0gYmVsb3cgdG8gdXBsb2FkIHlvdXIgZmlsZXMgbGlrZSBpbiB0aGUgb2xkZW4gZGF5cy5cIixcblxuICAvKipcbiAgICogSWYgdGhlIGZpbGVzaXplIGlzIHRvbyBiaWcuXG4gICAqIGB7e2ZpbGVzaXplfX1gIGFuZCBge3ttYXhGaWxlc2l6ZX19YCB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIHJlc3BlY3RpdmUgY29uZmlndXJhdGlvbiB2YWx1ZXMuXG4gICAqL1xuICBkaWN0RmlsZVRvb0JpZzogXCJGaWxlIGlzIHRvbyBiaWcgKHt7ZmlsZXNpemV9fU1pQikuIE1heCBmaWxlc2l6ZToge3ttYXhGaWxlc2l6ZX19TWlCLlwiLFxuXG4gIC8qKlxuICAgKiBJZiB0aGUgZmlsZSBkb2Vzbid0IG1hdGNoIHRoZSBmaWxlIHR5cGUuXG4gICAqL1xuICBkaWN0SW52YWxpZEZpbGVUeXBlOiBcIllvdSBjYW4ndCB1cGxvYWQgZmlsZXMgb2YgdGhpcyB0eXBlLlwiLFxuXG4gIC8qKlxuICAgKiBJZiB0aGUgc2VydmVyIHJlc3BvbnNlIHdhcyBpbnZhbGlkLlxuICAgKiBge3tzdGF0dXNDb2RlfX1gIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgc2VydmVycyBzdGF0dXMgY29kZS5cbiAgICovXG4gIGRpY3RSZXNwb25zZUVycm9yOiBcIlNlcnZlciByZXNwb25kZWQgd2l0aCB7e3N0YXR1c0NvZGV9fSBjb2RlLlwiLFxuXG4gIC8qKlxuICAgKiBJZiBgYWRkUmVtb3ZlTGlua3NgIGlzIHRydWUsIHRoZSB0ZXh0IHRvIGJlIHVzZWQgZm9yIHRoZSBjYW5jZWwgdXBsb2FkIGxpbmsuXG4gICAqL1xuICBkaWN0Q2FuY2VsVXBsb2FkOiBcIkNhbmNlbCB1cGxvYWRcIixcblxuICAvKipcbiAgICogVGhlIHRleHQgdGhhdCBpcyBkaXNwbGF5ZWQgaWYgYW4gdXBsb2FkIHdhcyBtYW51YWxseSBjYW5jZWxlZFxuICAgKi9cbiAgZGljdFVwbG9hZENhbmNlbGVkOiBcIlVwbG9hZCBjYW5jZWxlZC5cIixcblxuICAvKipcbiAgICogSWYgYGFkZFJlbW92ZUxpbmtzYCBpcyB0cnVlLCB0aGUgdGV4dCB0byBiZSB1c2VkIGZvciBjb25maXJtYXRpb24gd2hlbiBjYW5jZWxsaW5nIHVwbG9hZC5cbiAgICovXG4gIGRpY3RDYW5jZWxVcGxvYWRDb25maXJtYXRpb246IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNhbmNlbCB0aGlzIHVwbG9hZD9cIixcblxuICAvKipcbiAgICogSWYgYGFkZFJlbW92ZUxpbmtzYCBpcyB0cnVlLCB0aGUgdGV4dCB0byBiZSB1c2VkIHRvIHJlbW92ZSBhIGZpbGUuXG4gICAqL1xuICBkaWN0UmVtb3ZlRmlsZTogXCJSZW1vdmUgZmlsZVwiLFxuXG4gIC8qKlxuICAgKiBJZiB0aGlzIGlzIG5vdCBudWxsLCB0aGVuIHRoZSB1c2VyIHdpbGwgYmUgcHJvbXB0ZWQgYmVmb3JlIHJlbW92aW5nIGEgZmlsZS5cbiAgICovXG4gIGRpY3RSZW1vdmVGaWxlQ29uZmlybWF0aW9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5ZWQgaWYgYG1heEZpbGVzYCBpcyBzdCBhbmQgZXhjZWVkZWQuXG4gICAqIFRoZSBzdHJpbmcgYHt7bWF4RmlsZXN9fWAgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgY29uZmlndXJhdGlvbiB2YWx1ZS5cbiAgICovXG4gIGRpY3RNYXhGaWxlc0V4Y2VlZGVkOiBcIllvdSBjYW4gbm90IHVwbG9hZCBhbnkgbW9yZSBmaWxlcy5cIixcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byB0cmFuc2xhdGUgdGhlIGRpZmZlcmVudCB1bml0cy4gU3RhcnRpbmcgd2l0aCBgdGJgIGZvciB0ZXJhYnl0ZXMgYW5kIGdvaW5nIGRvd24gdG9cbiAgICogYGJgIGZvciBieXRlcy5cbiAgICovXG4gIGRpY3RGaWxlU2l6ZVVuaXRzOiB7XG4gICAgdGI6IFwiVEJcIixcbiAgICBnYjogXCJHQlwiLFxuICAgIG1iOiBcIk1CXCIsXG4gICAga2I6IFwiS0JcIixcbiAgICBiOiBcImJcIlxuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBkcm9wem9uZSBpbml0aWFsaXplZFxuICAgKiBZb3UgY2FuIGFkZCBldmVudCBsaXN0ZW5lcnMgaGVyZVxuICAgKi9cbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYW4gYmUgYW4gKipvYmplY3QqKiBvZiBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdHJhbnNmZXIgdG8gdGhlIHNlcnZlciwgKipvcioqIGEgYEZ1bmN0aW9uYFxuICAgKiB0aGF0IGdldHMgaW52b2tlZCB3aXRoIHRoZSBgZmlsZXNgLCBgeGhyYCBhbmQsIGlmIGl0J3MgYSBjaHVua2VkIHVwbG9hZCwgYGNodW5rYCBhcmd1bWVudHMuIEluIGNhc2VcbiAgICogb2YgYSBmdW5jdGlvbiwgdGhpcyBuZWVkcyB0byByZXR1cm4gYSBtYXAuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZyBmb3Igbm9ybWFsIHVwbG9hZHMsIGJ1dCBhZGRzIHJlbGV2YW50IGluZm9ybWF0aW9uIGZvclxuICAgKiBjaHVua2VkIHVwbG9hZHMuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIHNhbWUgYXMgYWRkaW5nIGhpZGRlbiBpbnB1dCBmaWVsZHMgaW4gdGhlIGZvcm0gZWxlbWVudC5cbiAgICovXG4gIHBhcmFtczogZnVuY3Rpb24gcGFyYW1zKGZpbGVzLCB4aHIsIGNodW5rKSB7XG4gICAgaWYgKGNodW5rKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkenV1aWQ6IGNodW5rLmZpbGUudXBsb2FkLnV1aWQsXG4gICAgICAgIGR6Y2h1bmtpbmRleDogY2h1bmsuaW5kZXgsXG4gICAgICAgIGR6dG90YWxmaWxlc2l6ZTogY2h1bmsuZmlsZS5zaXplLFxuICAgICAgICBkemNodW5rc2l6ZTogdGhpcy5vcHRpb25zLmNodW5rU2l6ZSxcbiAgICAgICAgZHp0b3RhbGNodW5rY291bnQ6IGNodW5rLmZpbGUudXBsb2FkLnRvdGFsQ2h1bmtDb3VudCxcbiAgICAgICAgZHpjaHVua2J5dGVvZmZzZXQ6IGNodW5rLmluZGV4ICogdGhpcy5vcHRpb25zLmNodW5rU2l6ZVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCBnZXRzIGEgW2ZpbGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvRE9NL0ZpbGUpXG4gICAqIGFuZCBhIGBkb25lYCBmdW5jdGlvbiBhcyBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBJZiB0aGUgZG9uZSBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCB0aGUgZmlsZSBpcyBcImFjY2VwdGVkXCIgYW5kIHdpbGxcbiAgICogYmUgcHJvY2Vzc2VkLiBJZiB5b3UgcGFzcyBhbiBlcnJvciBtZXNzYWdlLCB0aGUgZmlsZSBpcyByZWplY3RlZCwgYW5kIHRoZSBlcnJvclxuICAgKiBtZXNzYWdlIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgZmlsZSBpcyB0b28gYmlnIG9yIGRvZXNuJ3QgbWF0Y2ggdGhlIG1pbWUgdHlwZXMuXG4gICAqL1xuICBhY2NlcHQ6IGZ1bmN0aW9uIGFjY2VwdChmaWxlLCBkb25lKSB7XG4gICAgcmV0dXJuIGRvbmUoKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gYWxsIGNodW5rcyBoYXZlIGJlZW4gdXBsb2FkZWQgZm9yIGEgZmlsZS5cbiAgICogSXQgZ2V0cyB0aGUgZmlsZSBmb3Igd2hpY2ggdGhlIGNodW5rcyBoYXZlIGJlZW4gdXBsb2FkZWQgYXMgdGhlIGZpcnN0IHBhcmFtZXRlcixcbiAgICogYW5kIHRoZSBgZG9uZWAgZnVuY3Rpb24gYXMgc2Vjb25kLiBgZG9uZSgpYCBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gZXZlcnl0aGluZ1xuICAgKiBuZWVkZWQgdG8gZmluaXNoIHRoZSB1cGxvYWQgcHJvY2VzcyBpcyBkb25lLlxuICAgKi9cbiAgY2h1bmtzVXBsb2FkZWQ6IGZ1bmN0aW9uIGNodW5rc1VwbG9hZGVkKGZpbGUsIGRvbmUpIHtcbiAgICBkb25lKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cbiAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2hvd3MgdGhlIGZhbGxiYWNrIGlucHV0IGZpZWxkIGFuZCBhZGRzXG4gICAqIGEgdGV4dC5cbiAgICovXG4gIGZhbGxiYWNrOiBmdW5jdGlvbiBmYWxsYmFjaygpIHtcbiAgICAvLyBUaGlzIGNvZGUgc2hvdWxkIHBhc3MgaW4gSUU3Li4uIDooXG4gICAgdmFyIG1lc3NhZ2VFbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBcIlwiLmNvbmNhdCh0aGlzLmVsZW1lbnQuY2xhc3NOYW1lLCBcIiBkei1icm93c2VyLW5vdC1zdXBwb3J0ZWRcIik7XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gb3B0aW9uc19jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKSwgdHJ1ZSksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBjaGlsZCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmICgvKF58IClkei1tZXNzYWdlKCR8ICkvLnRlc3QoY2hpbGQuY2xhc3NOYW1lKSkge1xuICAgICAgICAgIG1lc3NhZ2VFbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgY2hpbGQuY2xhc3NOYW1lID0gXCJkei1tZXNzYWdlXCI7IC8vIFJlbW92ZXMgdGhlICdkei1kZWZhdWx0JyBjbGFzc1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgaWYgKCFtZXNzYWdlRWxlbWVudCkge1xuICAgICAgbWVzc2FnZUVsZW1lbnQgPSBEcm9wem9uZS5jcmVhdGVFbGVtZW50KCc8ZGl2IGNsYXNzPVwiZHotbWVzc2FnZVwiPjxzcGFuPjwvc3Bhbj48L2Rpdj4nKTtcbiAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgdmFyIHNwYW4gPSBtZXNzYWdlRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNwYW5cIilbMF07XG5cbiAgICBpZiAoc3Bhbikge1xuICAgICAgaWYgKHNwYW4udGV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gdGhpcy5vcHRpb25zLmRpY3RGYWxsYmFja01lc3NhZ2U7XG4gICAgICB9IGVsc2UgaWYgKHNwYW4uaW5uZXJUZXh0ICE9IG51bGwpIHtcbiAgICAgICAgc3Bhbi5pbm5lclRleHQgPSB0aGlzLm9wdGlvbnMuZGljdEZhbGxiYWNrTWVzc2FnZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ2V0RmFsbGJhY2tGb3JtKCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB0byBjYWxjdWxhdGUgdGhlIHRodW1ibmFpbCBkaW1lbnNpb25zLlxuICAgKlxuICAgKiBJdCBnZXRzIGBmaWxlYCwgYHdpZHRoYCBhbmQgYGhlaWdodGAgKGJvdGggbWF5IGJlIGBudWxsYCkgYXMgcGFyYW1ldGVycyBhbmQgbXVzdCByZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmc6XG4gICAqXG4gICAqICAtIGBzcmNXaWR0aGAgJiBgc3JjSGVpZ2h0YCAocmVxdWlyZWQpXG4gICAqICAtIGB0cmdXaWR0aGAgJiBgdHJnSGVpZ2h0YCAocmVxdWlyZWQpXG4gICAqICAtIGBzcmNYYCAmIGBzcmNZYCAob3B0aW9uYWwsIGRlZmF1bHQgYDBgKVxuICAgKiAgLSBgdHJnWGAgJiBgdHJnWWAgKG9wdGlvbmFsLCBkZWZhdWx0IGAwYClcbiAgICpcbiAgICogVGhvc2UgdmFsdWVzIGFyZSBnb2luZyB0byBiZSB1c2VkIGJ5IGBjdHguZHJhd0ltYWdlKClgLlxuICAgKi9cbiAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoZmlsZSwgd2lkdGgsIGhlaWdodCwgcmVzaXplTWV0aG9kKSB7XG4gICAgdmFyIGluZm8gPSB7XG4gICAgICBzcmNYOiAwLFxuICAgICAgc3JjWTogMCxcbiAgICAgIHNyY1dpZHRoOiBmaWxlLndpZHRoLFxuICAgICAgc3JjSGVpZ2h0OiBmaWxlLmhlaWdodFxuICAgIH07XG4gICAgdmFyIHNyY1JhdGlvID0gZmlsZS53aWR0aCAvIGZpbGUuaGVpZ2h0OyAvLyBBdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSBkaW1lbnNpb25zIGlmIG5vdCBzcGVjaWZpZWRcblxuICAgIGlmICh3aWR0aCA9PSBudWxsICYmIGhlaWdodCA9PSBudWxsKSB7XG4gICAgICB3aWR0aCA9IGluZm8uc3JjV2lkdGg7XG4gICAgICBoZWlnaHQgPSBpbmZvLnNyY0hlaWdodDtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID09IG51bGwpIHtcbiAgICAgIHdpZHRoID0gaGVpZ2h0ICogc3JjUmF0aW87XG4gICAgfSBlbHNlIGlmIChoZWlnaHQgPT0gbnVsbCkge1xuICAgICAgaGVpZ2h0ID0gd2lkdGggLyBzcmNSYXRpbztcbiAgICB9IC8vIE1ha2Ugc3VyZSBpbWFnZXMgYXJlbid0IHVwc2NhbGVkXG5cblxuICAgIHdpZHRoID0gTWF0aC5taW4od2lkdGgsIGluZm8uc3JjV2lkdGgpO1xuICAgIGhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgaW5mby5zcmNIZWlnaHQpO1xuICAgIHZhciB0cmdSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0O1xuXG4gICAgaWYgKGluZm8uc3JjV2lkdGggPiB3aWR0aCB8fCBpbmZvLnNyY0hlaWdodCA+IGhlaWdodCkge1xuICAgICAgLy8gSW1hZ2UgaXMgYmlnZ2VyIGFuZCBuZWVkcyByZXNjYWxpbmdcbiAgICAgIGlmIChyZXNpemVNZXRob2QgPT09IFwiY3JvcFwiKSB7XG4gICAgICAgIGlmIChzcmNSYXRpbyA+IHRyZ1JhdGlvKSB7XG4gICAgICAgICAgaW5mby5zcmNIZWlnaHQgPSBmaWxlLmhlaWdodDtcbiAgICAgICAgICBpbmZvLnNyY1dpZHRoID0gaW5mby5zcmNIZWlnaHQgKiB0cmdSYXRpbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmZvLnNyY1dpZHRoID0gZmlsZS53aWR0aDtcbiAgICAgICAgICBpbmZvLnNyY0hlaWdodCA9IGluZm8uc3JjV2lkdGggLyB0cmdSYXRpbztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXNpemVNZXRob2QgPT09IFwiY29udGFpblwiKSB7XG4gICAgICAgIC8vIE1ldGhvZCAnY29udGFpbidcbiAgICAgICAgaWYgKHNyY1JhdGlvID4gdHJnUmF0aW8pIHtcbiAgICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIHNyY1JhdGlvO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ICogc3JjUmF0aW87XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gcmVzaXplTWV0aG9kICdcIi5jb25jYXQocmVzaXplTWV0aG9kLCBcIidcIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluZm8uc3JjWCA9IChmaWxlLndpZHRoIC0gaW5mby5zcmNXaWR0aCkgLyAyO1xuICAgIGluZm8uc3JjWSA9IChmaWxlLmhlaWdodCAtIGluZm8uc3JjSGVpZ2h0KSAvIDI7XG4gICAgaW5mby50cmdXaWR0aCA9IHdpZHRoO1xuICAgIGluZm8udHJnSGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiBpbmZvO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGZpbGUgKGZvciBleGFtcGxlLCByZXNpemUgYW4gaW1hZ2UgaWYgbmVjZXNzYXJ5KS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdXNlcyBgcmVzaXplV2lkdGhgIGFuZCBgcmVzaXplSGVpZ2h0YCAoaWYgcHJvdmlkZWQpIGFuZCByZXNpemVzXG4gICAqIGltYWdlcyBhY2NvcmRpbmcgdG8gdGhvc2UgZGltZW5zaW9ucy5cbiAgICpcbiAgICogR2V0cyB0aGUgYGZpbGVgIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsIGFuZCBhIGBkb25lKClgIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQsIHRoYXQgbmVlZHNcbiAgICogdG8gYmUgaW52b2tlZCB3aXRoIHRoZSBmaWxlIHdoZW4gdGhlIHRyYW5zZm9ybWF0aW9uIGlzIGRvbmUuXG4gICAqL1xuICB0cmFuc2Zvcm1GaWxlOiBmdW5jdGlvbiB0cmFuc2Zvcm1GaWxlKGZpbGUsIGRvbmUpIHtcbiAgICBpZiAoKHRoaXMub3B0aW9ucy5yZXNpemVXaWR0aCB8fCB0aGlzLm9wdGlvbnMucmVzaXplSGVpZ2h0KSAmJiBmaWxlLnR5cGUubWF0Y2goL2ltYWdlLiovKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzaXplSW1hZ2UoZmlsZSwgdGhpcy5vcHRpb25zLnJlc2l6ZVdpZHRoLCB0aGlzLm9wdGlvbnMucmVzaXplSGVpZ2h0LCB0aGlzLm9wdGlvbnMucmVzaXplTWV0aG9kLCBkb25lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRvbmUoZmlsZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBIHN0cmluZyB0aGF0IGNvbnRhaW5zIHRoZSB0ZW1wbGF0ZSB1c2VkIGZvciBlYWNoIGRyb3BwZWRcbiAgICogZmlsZS4gQ2hhbmdlIGl0IHRvIGZ1bGZpbGwgeW91ciBuZWVkcyBidXQgbWFrZSBzdXJlIHRvIHByb3Blcmx5XG4gICAqIHByb3ZpZGUgYWxsIGVsZW1lbnRzLlxuICAgKlxuICAgKiBJZiB5b3Ugd2FudCB0byB1c2UgYW4gYWN0dWFsIEhUTUwgZWxlbWVudCBpbnN0ZWFkIG9mIHByb3ZpZGluZyBhIFN0cmluZ1xuICAgKiBhcyBhIGNvbmZpZyBvcHRpb24sIHlvdSBjb3VsZCBjcmVhdGUgYSBkaXYgd2l0aCB0aGUgaWQgYHRwbGAsXG4gICAqIHB1dCB0aGUgdGVtcGxhdGUgaW5zaWRlIGl0IGFuZCBwcm92aWRlIHRoZSBlbGVtZW50IGxpa2UgdGhpczpcbiAgICpcbiAgICogICAgIGRvY3VtZW50XG4gICAqICAgICAgIC5xdWVyeVNlbGVjdG9yKCcjdHBsJylcbiAgICogICAgICAgLmlubmVySFRNTFxuICAgKlxuICAgKi9cbiAgcHJldmlld1RlbXBsYXRlOiBwcmV2aWV3X3RlbXBsYXRlLFxuXG4gIC8qXG4gICBUaG9zZSBmdW5jdGlvbnMgcmVnaXN0ZXIgdGhlbXNlbHZlcyB0byB0aGUgZXZlbnRzIG9uIGluaXQgYW5kIGhhbmRsZSBhbGxcbiAgIHRoZSB1c2VyIGludGVyZmFjZSBzcGVjaWZpYyBzdHVmZi4gT3ZlcndyaXRpbmcgdGhlbSB3b24ndCBicmVhayB0aGUgdXBsb2FkXG4gICBidXQgY2FuIGJyZWFrIHRoZSB3YXkgaXQncyBkaXNwbGF5ZWQuXG4gICBZb3UgY2FuIG92ZXJ3cml0ZSB0aGVtIGlmIHlvdSBkb24ndCBsaWtlIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJZiB5b3UganVzdFxuICAgd2FudCB0byBhZGQgYW4gYWRkaXRpb25hbCBldmVudCBoYW5kbGVyLCByZWdpc3RlciBpdCBvbiB0aGUgZHJvcHpvbmUgb2JqZWN0XG4gICBhbmQgZG9uJ3Qgb3ZlcndyaXRlIHRob3NlIG9wdGlvbnMuXG4gICAqL1xuICAvLyBUaG9zZSBhcmUgc2VsZiBleHBsYW5hdG9yeSBhbmQgc2ltcGx5IGNvbmNlcm4gdGhlIERyYWduRHJvcC5cbiAgZHJvcDogZnVuY3Rpb24gZHJvcChlKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZHotZHJhZy1ob3ZlclwiKTtcbiAgfSxcbiAgZHJhZ3N0YXJ0OiBmdW5jdGlvbiBkcmFnc3RhcnQoZSkge30sXG4gIGRyYWdlbmQ6IGZ1bmN0aW9uIGRyYWdlbmQoZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LWRyYWctaG92ZXJcIik7XG4gIH0sXG4gIGRyYWdlbnRlcjogZnVuY3Rpb24gZHJhZ2VudGVyKGUpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1kcmFnLWhvdmVyXCIpO1xuICB9LFxuICBkcmFnb3ZlcjogZnVuY3Rpb24gZHJhZ292ZXIoZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LWRyYWctaG92ZXJcIik7XG4gIH0sXG4gIGRyYWdsZWF2ZTogZnVuY3Rpb24gZHJhZ2xlYXZlKGUpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkei1kcmFnLWhvdmVyXCIpO1xuICB9LFxuICBwYXN0ZTogZnVuY3Rpb24gcGFzdGUoZSkge30sXG4gIC8vIENhbGxlZCB3aGVuZXZlciB0aGVyZSBhcmUgbm8gZmlsZXMgbGVmdCBpbiB0aGUgZHJvcHpvbmUgYW55bW9yZSwgYW5kIHRoZVxuICAvLyBkcm9wem9uZSBzaG91bGQgYmUgZGlzcGxheWVkIGFzIGlmIGluIHRoZSBpbml0aWFsIHN0YXRlLlxuICByZXNldDogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZHotc3RhcnRlZFwiKTtcbiAgfSxcbiAgLy8gQ2FsbGVkIHdoZW4gYSBmaWxlIGlzIGFkZGVkIHRvIHRoZSBxdWV1ZVxuICAvLyBSZWNlaXZlcyBgZmlsZWBcbiAgYWRkZWRmaWxlOiBmdW5jdGlvbiBhZGRlZGZpbGUoZmlsZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5lbGVtZW50ID09PSB0aGlzLnByZXZpZXdzQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LXN0YXJ0ZWRcIik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJldmlld3NDb250YWluZXIgJiYgIXRoaXMub3B0aW9ucy5kaXNhYmxlUHJldmlld3MpIHtcbiAgICAgIGZpbGUucHJldmlld0VsZW1lbnQgPSBEcm9wem9uZS5jcmVhdGVFbGVtZW50KHRoaXMub3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUudHJpbSgpKTtcbiAgICAgIGZpbGUucHJldmlld1RlbXBsYXRlID0gZmlsZS5wcmV2aWV3RWxlbWVudDsgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuICAgICAgdGhpcy5wcmV2aWV3c0NvbnRhaW5lci5hcHBlbmRDaGlsZChmaWxlLnByZXZpZXdFbGVtZW50KTtcblxuICAgICAgdmFyIF9pdGVyYXRvcjIgPSBvcHRpb25zX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZHotbmFtZV1cIiksIHRydWUpLFxuICAgICAgICAgIF9zdGVwMjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9zdGVwMi52YWx1ZTtcbiAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gZmlsZS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9pdGVyYXRvcjMgPSBvcHRpb25zX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZHotc2l6ZV1cIiksIHRydWUpLFxuICAgICAgICAgIF9zdGVwMztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICBub2RlID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gdGhpcy5maWxlc2l6ZShmaWxlLnNpemUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hZGRSZW1vdmVMaW5rcykge1xuICAgICAgICBmaWxlLl9yZW1vdmVMaW5rID0gRHJvcHpvbmUuY3JlYXRlRWxlbWVudChcIjxhIGNsYXNzPVxcXCJkei1yZW1vdmVcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dW5kZWZpbmVkO1xcXCIgZGF0YS1kei1yZW1vdmU+XCIuY29uY2F0KHRoaXMub3B0aW9ucy5kaWN0UmVtb3ZlRmlsZSwgXCI8L2E+XCIpKTtcbiAgICAgICAgZmlsZS5wcmV2aWV3RWxlbWVudC5hcHBlbmRDaGlsZChmaWxlLl9yZW1vdmVMaW5rKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbW92ZUZpbGVFdmVudCA9IGZ1bmN0aW9uIHJlbW92ZUZpbGVFdmVudChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAoZmlsZS5zdGF0dXMgPT09IERyb3B6b25lLlVQTE9BRElORykge1xuICAgICAgICAgIHJldHVybiBEcm9wem9uZS5jb25maXJtKF90aGlzLm9wdGlvbnMuZGljdENhbmNlbFVwbG9hZENvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZGljdFJlbW92ZUZpbGVDb25maXJtYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBEcm9wem9uZS5jb25maXJtKF90aGlzLm9wdGlvbnMuZGljdFJlbW92ZUZpbGVDb25maXJtYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgX2l0ZXJhdG9yNCA9IG9wdGlvbnNfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1kei1yZW1vdmVdXCIpLCB0cnVlKSxcbiAgICAgICAgICBfc3RlcDQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHJlbW92ZUxpbmsgPSBfc3RlcDQudmFsdWU7XG4gICAgICAgICAgcmVtb3ZlTGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVtb3ZlRmlsZUV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjQuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvLyBDYWxsZWQgd2hlbmV2ZXIgYSBmaWxlIGlzIHJlbW92ZWQuXG4gIHJlbW92ZWRmaWxlOiBmdW5jdGlvbiByZW1vdmVkZmlsZShmaWxlKSB7XG4gICAgaWYgKGZpbGUucHJldmlld0VsZW1lbnQgIT0gbnVsbCAmJiBmaWxlLnByZXZpZXdFbGVtZW50LnBhcmVudE5vZGUgIT0gbnVsbCkge1xuICAgICAgZmlsZS5wcmV2aWV3RWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZpbGUucHJldmlld0VsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpO1xuICB9LFxuICAvLyBDYWxsZWQgd2hlbiBhIHRodW1ibmFpbCBoYXMgYmVlbiBnZW5lcmF0ZWRcbiAgLy8gUmVjZWl2ZXMgYGZpbGVgIGFuZCBgZGF0YVVybGBcbiAgdGh1bWJuYWlsOiBmdW5jdGlvbiB0aHVtYm5haWwoZmlsZSwgZGF0YVVybCkge1xuICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7XG4gICAgICBmaWxlLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkei1maWxlLXByZXZpZXdcIik7XG5cbiAgICAgIHZhciBfaXRlcmF0b3I1ID0gb3B0aW9uc19jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWR6LXRodW1ibmFpbF1cIiksIHRydWUpLFxuICAgICAgICAgIF9zdGVwNTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgdGh1bWJuYWlsRWxlbWVudCA9IF9zdGVwNS52YWx1ZTtcbiAgICAgICAgICB0aHVtYm5haWxFbGVtZW50LmFsdCA9IGZpbGUubmFtZTtcbiAgICAgICAgICB0aHVtYm5haWxFbGVtZW50LnNyYyA9IGRhdGFVcmw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjUuZigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmaWxlLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1pbWFnZS1wcmV2aWV3XCIpO1xuICAgICAgfSwgMSk7XG4gICAgfVxuICB9LFxuICAvLyBDYWxsZWQgd2hlbmV2ZXIgYW4gZXJyb3Igb2NjdXJzXG4gIC8vIFJlY2VpdmVzIGBmaWxlYCBhbmQgYG1lc3NhZ2VgXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihmaWxlLCBtZXNzYWdlKSB7XG4gICAgaWYgKGZpbGUucHJldmlld0VsZW1lbnQpIHtcbiAgICAgIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LWVycm9yXCIpO1xuXG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwic3RyaW5nXCIgJiYgbWVzc2FnZS5lcnJvcikge1xuICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5lcnJvcjtcbiAgICAgIH1cblxuICAgICAgdmFyIF9pdGVyYXRvcjYgPSBvcHRpb25zX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZHotZXJyb3JtZXNzYWdlXVwiKSwgdHJ1ZSksXG4gICAgICAgICAgX3N0ZXA2O1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBub2RlID0gX3N0ZXA2LnZhbHVlO1xuICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I2LmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9ybXVsdGlwbGU6IGZ1bmN0aW9uIGVycm9ybXVsdGlwbGUoKSB7fSxcbiAgLy8gQ2FsbGVkIHdoZW4gYSBmaWxlIGdldHMgcHJvY2Vzc2VkLiBTaW5jZSB0aGVyZSBpcyBhIGN1ZSwgbm90IGFsbCBhZGRlZFxuICAvLyBmaWxlcyBhcmUgcHJvY2Vzc2VkIGltbWVkaWF0ZWx5LlxuICAvLyBSZWNlaXZlcyBgZmlsZWBcbiAgcHJvY2Vzc2luZzogZnVuY3Rpb24gcHJvY2Vzc2luZyhmaWxlKSB7XG4gICAgaWYgKGZpbGUucHJldmlld0VsZW1lbnQpIHtcbiAgICAgIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LXByb2Nlc3NpbmdcIik7XG5cbiAgICAgIGlmIChmaWxlLl9yZW1vdmVMaW5rKSB7XG4gICAgICAgIHJldHVybiBmaWxlLl9yZW1vdmVMaW5rLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5kaWN0Q2FuY2VsVXBsb2FkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcHJvY2Vzc2luZ211bHRpcGxlOiBmdW5jdGlvbiBwcm9jZXNzaW5nbXVsdGlwbGUoKSB7fSxcbiAgLy8gQ2FsbGVkIHdoZW5ldmVyIHRoZSB1cGxvYWQgcHJvZ3Jlc3MgZ2V0cyB1cGRhdGVkLlxuICAvLyBSZWNlaXZlcyBgZmlsZWAsIGBwcm9ncmVzc2AgKHBlcmNlbnRhZ2UgMC0xMDApIGFuZCBgYnl0ZXNTZW50YC5cbiAgLy8gVG8gZ2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb2YgdGhlIGZpbGUsIHVzZSBgZmlsZS5zaXplYFxuICB1cGxvYWRwcm9ncmVzczogZnVuY3Rpb24gdXBsb2FkcHJvZ3Jlc3MoZmlsZSwgcHJvZ3Jlc3MsIGJ5dGVzU2VudCkge1xuICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yNyA9IG9wdGlvbnNfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1kei11cGxvYWRwcm9ncmVzc11cIiksIHRydWUpLFxuICAgICAgICAgIF9zdGVwNztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9zdGVwNy52YWx1ZTtcbiAgICAgICAgICBub2RlLm5vZGVOYW1lID09PSBcIlBST0dSRVNTXCIgPyBub2RlLnZhbHVlID0gcHJvZ3Jlc3MgOiBub2RlLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQocHJvZ3Jlc3MsIFwiJVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjcuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yNy5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvLyBDYWxsZWQgd2hlbmV2ZXIgdGhlIHRvdGFsIHVwbG9hZCBwcm9ncmVzcyBnZXRzIHVwZGF0ZWQuXG4gIC8vIENhbGxlZCB3aXRoIHRvdGFsVXBsb2FkUHJvZ3Jlc3MgKDAtMTAwKSwgdG90YWxCeXRlcyBhbmQgdG90YWxCeXRlc1NlbnRcbiAgdG90YWx1cGxvYWRwcm9ncmVzczogZnVuY3Rpb24gdG90YWx1cGxvYWRwcm9ncmVzcygpIHt9LFxuICAvLyBDYWxsZWQganVzdCBiZWZvcmUgdGhlIGZpbGUgaXMgc2VudC4gR2V0cyB0aGUgYHhocmAgb2JqZWN0IGFzIHNlY29uZFxuICAvLyBwYXJhbWV0ZXIsIHNvIHlvdSBjYW4gbW9kaWZ5IGl0IChmb3IgZXhhbXBsZSB0byBhZGQgYSBDU1JGIHRva2VuKSBhbmQgYVxuICAvLyBgZm9ybURhdGFgIG9iamVjdCB0byBhZGQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbiAgc2VuZGluZzogZnVuY3Rpb24gc2VuZGluZygpIHt9LFxuICBzZW5kaW5nbXVsdGlwbGU6IGZ1bmN0aW9uIHNlbmRpbmdtdWx0aXBsZSgpIHt9LFxuICAvLyBXaGVuIHRoZSBjb21wbGV0ZSB1cGxvYWQgaXMgZmluaXNoZWQgYW5kIHN1Y2Nlc3NmdWxcbiAgLy8gUmVjZWl2ZXMgYGZpbGVgXG4gIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoZmlsZSkge1xuICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZmlsZS5wcmV2aWV3RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotc3VjY2Vzc1wiKTtcbiAgICB9XG4gIH0sXG4gIHN1Y2Nlc3NtdWx0aXBsZTogZnVuY3Rpb24gc3VjY2Vzc211bHRpcGxlKCkge30sXG4gIC8vIFdoZW4gdGhlIHVwbG9hZCBpcyBjYW5jZWxlZC5cbiAgY2FuY2VsZWQ6IGZ1bmN0aW9uIGNhbmNlbGVkKGZpbGUpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIiwgZmlsZSwgdGhpcy5vcHRpb25zLmRpY3RVcGxvYWRDYW5jZWxlZCk7XG4gIH0sXG4gIGNhbmNlbGVkbXVsdGlwbGU6IGZ1bmN0aW9uIGNhbmNlbGVkbXVsdGlwbGUoKSB7fSxcbiAgLy8gV2hlbiB0aGUgdXBsb2FkIGlzIGZpbmlzaGVkLCBlaXRoZXIgd2l0aCBzdWNjZXNzIG9yIGFuIGVycm9yLlxuICAvLyBSZWNlaXZlcyBgZmlsZWBcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKGZpbGUpIHtcbiAgICBpZiAoZmlsZS5fcmVtb3ZlTGluaykge1xuICAgICAgZmlsZS5fcmVtb3ZlTGluay5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMuZGljdFJlbW92ZUZpbGU7XG4gICAgfVxuXG4gICAgaWYgKGZpbGUucHJldmlld0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBmaWxlLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1jb21wbGV0ZVwiKTtcbiAgICB9XG4gIH0sXG4gIGNvbXBsZXRlbXVsdGlwbGU6IGZ1bmN0aW9uIGNvbXBsZXRlbXVsdGlwbGUoKSB7fSxcbiAgbWF4ZmlsZXNleGNlZWRlZDogZnVuY3Rpb24gbWF4ZmlsZXNleGNlZWRlZCgpIHt9LFxuICBtYXhmaWxlc3JlYWNoZWQ6IGZ1bmN0aW9uIG1heGZpbGVzcmVhY2hlZCgpIHt9LFxuICBxdWV1ZWNvbXBsZXRlOiBmdW5jdGlvbiBxdWV1ZWNvbXBsZXRlKCkge30sXG4gIGFkZGVkZmlsZXM6IGZ1bmN0aW9uIGFkZGVkZmlsZXMoKSB7fVxufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19vcHRpb25zID0gKGRlZmF1bHRPcHRpb25zKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kcm9wem9uZS5qc1xuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBkcm9wem9uZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBkcm9wem9uZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGRyb3B6b25lX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBkcm9wem9uZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gZHJvcHpvbmVfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gZHJvcHpvbmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBkcm9wem9uZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gZHJvcHpvbmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkcm9wem9uZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZHJvcHpvbmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cblxuXG5cbnZhciBEcm9wem9uZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0VtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKERyb3B6b25lLCBfRW1pdHRlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEcm9wem9uZSk7XG5cbiAgZnVuY3Rpb24gRHJvcHpvbmUoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBkcm9wem9uZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wem9uZSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIHZhciBmYWxsYmFjaywgbGVmdDtcbiAgICBfdGhpcy5lbGVtZW50ID0gZWw7IC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBzaW5jZSB0aGUgdmVyc2lvbiB3YXMgaW4gdGhlIHByb3RvdHlwZSBwcmV2aW91c2x5XG5cbiAgICBfdGhpcy52ZXJzaW9uID0gRHJvcHpvbmUudmVyc2lvbjtcbiAgICBfdGhpcy5jbGlja2FibGVFbGVtZW50cyA9IFtdO1xuICAgIF90aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIF90aGlzLmZpbGVzID0gW107IC8vIEFsbCBmaWxlc1xuXG4gICAgaWYgKHR5cGVvZiBfdGhpcy5lbGVtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBfdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihfdGhpcy5lbGVtZW50KTtcbiAgICB9IC8vIE5vdCBjaGVja2luZyBpZiBpbnN0YW5jZSBvZiBIVE1MRWxlbWVudCBvciBFbGVtZW50IHNpbmNlIElFOSBpcyBleHRyZW1lbHkgd2VpcmQuXG5cblxuICAgIGlmICghX3RoaXMuZWxlbWVudCB8fCBfdGhpcy5lbGVtZW50Lm5vZGVUeXBlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZHJvcHpvbmUgZWxlbWVudC5cIik7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLmVsZW1lbnQuZHJvcHpvbmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRyb3B6b25lIGFscmVhZHkgYXR0YWNoZWQuXCIpO1xuICAgIH0gLy8gTm93IGFkZCB0aGlzIGRyb3B6b25lIHRvIHRoZSBpbnN0YW5jZXMuXG5cblxuICAgIERyb3B6b25lLmluc3RhbmNlcy5wdXNoKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gUHV0IHRoZSBkcm9wem9uZSBpbnNpZGUgdGhlIGVsZW1lbnQgaXRzZWxmLlxuXG4gICAgX3RoaXMuZWxlbWVudC5kcm9wem9uZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpO1xuICAgIHZhciBlbGVtZW50T3B0aW9ucyA9IChsZWZ0ID0gRHJvcHpvbmUub3B0aW9uc0ZvckVsZW1lbnQoX3RoaXMuZWxlbWVudCkpICE9IG51bGwgPyBsZWZ0IDoge307XG4gICAgX3RoaXMub3B0aW9ucyA9IERyb3B6b25lLmV4dGVuZCh7fSwgc3JjX29wdGlvbnMsIGVsZW1lbnRPcHRpb25zLCBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zIDoge30pO1xuICAgIF90aGlzLm9wdGlvbnMucHJldmlld1RlbXBsYXRlID0gX3RoaXMub3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUucmVwbGFjZSgvXFxuKi9nLCBcIlwiKTsgLy8gSWYgdGhlIGJyb3dzZXIgZmFpbGVkLCBqdXN0IGNhbGwgdGhlIGZhbGxiYWNrIGFuZCBsZWF2ZVxuXG4gICAgaWYgKF90aGlzLm9wdGlvbnMuZm9yY2VGYWxsYmFjayB8fCAhRHJvcHpvbmUuaXNCcm93c2VyU3VwcG9ydGVkKCkpIHtcbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3RoaXMub3B0aW9ucy5mYWxsYmFjay5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgfSAvLyBAb3B0aW9ucy51cmwgPSBAZWxlbWVudC5nZXRBdHRyaWJ1dGUgXCJhY3Rpb25cIiB1bmxlc3MgQG9wdGlvbnMudXJsP1xuXG5cbiAgICBpZiAoX3RoaXMub3B0aW9ucy51cmwgPT0gbnVsbCkge1xuICAgICAgX3RoaXMub3B0aW9ucy51cmwgPSBfdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAoIV90aGlzLm9wdGlvbnMudXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBVUkwgcHJvdmlkZWQuXCIpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5vcHRpb25zLmFjY2VwdGVkRmlsZXMgJiYgX3RoaXMub3B0aW9ucy5hY2NlcHRlZE1pbWVUeXBlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbid0IHByb3ZpZGUgYm90aCAnYWNjZXB0ZWRGaWxlcycgYW5kICdhY2NlcHRlZE1pbWVUeXBlcycuICdhY2NlcHRlZE1pbWVUeXBlcycgaXMgZGVwcmVjYXRlZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUgJiYgX3RoaXMub3B0aW9ucy5jaHVua2luZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbm5vdCBzZXQgYm90aDogdXBsb2FkTXVsdGlwbGUgYW5kIGNodW5raW5nLlwiKTtcbiAgICB9IC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblxuICAgIGlmIChfdGhpcy5vcHRpb25zLmFjY2VwdGVkTWltZVR5cGVzKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLmFjY2VwdGVkRmlsZXMgPSBfdGhpcy5vcHRpb25zLmFjY2VwdGVkTWltZVR5cGVzO1xuICAgICAgZGVsZXRlIF90aGlzLm9wdGlvbnMuYWNjZXB0ZWRNaW1lVHlwZXM7XG4gICAgfSAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG5cbiAgICBpZiAoX3RoaXMub3B0aW9ucy5yZW5hbWVGaWxlbmFtZSAhPSBudWxsKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLnJlbmFtZUZpbGUgPSBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5yZW5hbWVGaWxlbmFtZS5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBmaWxlLm5hbWUsIGZpbGUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMubWV0aG9kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1ldGhvZCA9IF90aGlzLm9wdGlvbnMubWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKChmYWxsYmFjayA9IF90aGlzLmdldEV4aXN0aW5nRmFsbGJhY2soKSkgJiYgZmFsbGJhY2sucGFyZW50Tm9kZSkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBmYWxsYmFja1xuICAgICAgZmFsbGJhY2sucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmYWxsYmFjayk7XG4gICAgfSAvLyBEaXNwbGF5IHByZXZpZXdzIGluIHRoZSBwcmV2aWV3c0NvbnRhaW5lciBlbGVtZW50IG9yIHRoZSBEcm9wem9uZSBlbGVtZW50IHVubGVzcyBleHBsaWNpdGx5IHNldCB0byBmYWxzZVxuXG5cbiAgICBpZiAoX3RoaXMub3B0aW9ucy5wcmV2aWV3c0NvbnRhaW5lciAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChfdGhpcy5vcHRpb25zLnByZXZpZXdzQ29udGFpbmVyKSB7XG4gICAgICAgIF90aGlzLnByZXZpZXdzQ29udGFpbmVyID0gRHJvcHpvbmUuZ2V0RWxlbWVudChfdGhpcy5vcHRpb25zLnByZXZpZXdzQ29udGFpbmVyLCBcInByZXZpZXdzQ29udGFpbmVyXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucHJldmlld3NDb250YWluZXIgPSBfdGhpcy5lbGVtZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfdGhpcy5vcHRpb25zLmNsaWNrYWJsZSkge1xuICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xpY2thYmxlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLmNsaWNrYWJsZUVsZW1lbnRzID0gW190aGlzLmVsZW1lbnRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuY2xpY2thYmxlRWxlbWVudHMgPSBEcm9wem9uZS5nZXRFbGVtZW50cyhfdGhpcy5vcHRpb25zLmNsaWNrYWJsZSwgXCJjbGlja2FibGVcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuaW5pdCgpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9IC8vIFJldHVybnMgYWxsIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIGFjY2VwdGVkXG5cblxuICBkcm9wem9uZV9jcmVhdGVDbGFzcyhEcm9wem9uZSwgW3tcbiAgICBrZXk6IFwiZ2V0QWNjZXB0ZWRGaWxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY2NlcHRlZEZpbGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBmaWxlLmFjY2VwdGVkO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgfSk7XG4gICAgfSAvLyBSZXR1cm5zIGFsbCBmaWxlcyB0aGF0IGhhdmUgYmVlbiByZWplY3RlZFxuICAgIC8vIE5vdCBzdXJlIHdoZW4gdGhhdCdzIGdvaW5nIHRvIGJlIHVzZWZ1bCwgYnV0IGFkZGVkIGZvciBjb21wbGV0ZW5lc3MuXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZWplY3RlZEZpbGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlamVjdGVkRmlsZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWxlcy5maWx0ZXIoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuICFmaWxlLmFjY2VwdGVkO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZpbGVzV2l0aFN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWxlc1dpdGhTdGF0dXMoc3RhdHVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWxlcy5maWx0ZXIoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbGUuc3RhdHVzID09PSBzdGF0dXM7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICB9KTtcbiAgICB9IC8vIFJldHVybnMgYWxsIGZpbGVzIHRoYXQgYXJlIGluIHRoZSBxdWV1ZVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UXVldWVkRmlsZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UXVldWVkRmlsZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRGaWxlc1dpdGhTdGF0dXMoRHJvcHpvbmUuUVVFVUVEKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VXBsb2FkaW5nRmlsZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXBsb2FkaW5nRmlsZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRGaWxlc1dpdGhTdGF0dXMoRHJvcHpvbmUuVVBMT0FESU5HKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QWRkZWRGaWxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBZGRlZEZpbGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlsZXNXaXRoU3RhdHVzKERyb3B6b25lLkFEREVEKTtcbiAgICB9IC8vIEZpbGVzIHRoYXQgYXJlIGVpdGhlciBxdWV1ZWQgb3IgdXBsb2FkaW5nXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRBY3RpdmVGaWxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVGaWxlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbGVzLmZpbHRlcihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gZmlsZS5zdGF0dXMgPT09IERyb3B6b25lLlVQTE9BRElORyB8fCBmaWxlLnN0YXR1cyA9PT0gRHJvcHpvbmUuUVVFVUVEO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgfSk7XG4gICAgfSAvLyBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCB3aGVuIERyb3B6b25lIGlzIGluaXRpYWxpemVkLiBZb3VcbiAgICAvLyBjYW4gKGFuZCBzaG91bGQpIHNldHVwIGV2ZW50IGxpc3RlbmVycyBpbnNpZGUgdGhpcyBmdW5jdGlvbi5cblxuICB9LCB7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBJbiBjYXNlIGl0IGlzbid0IHNldCBhbHJlYWR5XG4gICAgICBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUgPT09IFwiZm9ybVwiKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wem9uZVwiKSAmJiAhdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZHotbWVzc2FnZVwiKSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoRHJvcHpvbmUuY3JlYXRlRWxlbWVudChcIjxkaXYgY2xhc3M9XFxcImR6LWRlZmF1bHQgZHotbWVzc2FnZVxcXCI+PGJ1dHRvbiBjbGFzcz1cXFwiZHotYnV0dG9uXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPlwiLmNvbmNhdCh0aGlzLm9wdGlvbnMuZGljdERlZmF1bHRNZXNzYWdlLCBcIjwvYnV0dG9uPjwvZGl2PlwiKSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jbGlja2FibGVFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHNldHVwSGlkZGVuRmlsZUlucHV0ID0gZnVuY3Rpb24gc2V0dXBIaWRkZW5GaWxlSW5wdXQoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5oaWRkZW5GaWxlSW5wdXQpIHtcbiAgICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfdGhpczIuaGlkZGVuRmlsZUlucHV0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuaGlkZGVuRmlsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG4gICAgICAgICAgX3RoaXMyLmhpZGRlbkZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiZmlsZVwiKTtcblxuICAgICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5tYXhGaWxlcyA9PT0gbnVsbCB8fCBfdGhpczIub3B0aW9ucy5tYXhGaWxlcyA+IDEpIHtcbiAgICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQuc2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIiwgXCJtdWx0aXBsZVwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuaGlkZGVuRmlsZUlucHV0LmNsYXNzTmFtZSA9IFwiZHotaGlkZGVuLWlucHV0XCI7XG5cbiAgICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuYWNjZXB0ZWRGaWxlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMyLmhpZGRlbkZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJhY2NlcHRcIiwgX3RoaXMyLm9wdGlvbnMuYWNjZXB0ZWRGaWxlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLmNhcHR1cmUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQuc2V0QXR0cmlidXRlKFwiY2FwdHVyZVwiLCBfdGhpczIub3B0aW9ucy5jYXB0dXJlKTtcbiAgICAgICAgICB9IC8vIE1ha2luZyBzdXJlIHRoYXQgbm8gb25lIGNhbiBcInRhYlwiIGludG8gdGhpcyBmaWVsZC5cblxuXG4gICAgICAgICAgX3RoaXMyLmhpZGRlbkZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpOyAvLyBOb3Qgc2V0dGluZyBgZGlzcGxheT1cIm5vbmVcImAgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGRvbid0IGFjY2VwdCBjbGlja3NcbiAgICAgICAgICAvLyBvbiBlbGVtZW50cyB0aGF0IGFyZW4ndCBkaXNwbGF5ZWQuXG5cblxuICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgX3RoaXMyLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICBfdGhpczIuaGlkZGVuRmlsZUlucHV0LnN0eWxlLnRvcCA9IFwiMFwiO1xuICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgICAgICAgX3RoaXMyLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS53aWR0aCA9IFwiMFwiO1xuICAgICAgICAgIERyb3B6b25lLmdldEVsZW1lbnQoX3RoaXMyLm9wdGlvbnMuaGlkZGVuSW5wdXRDb250YWluZXIsIFwiaGlkZGVuSW5wdXRDb250YWluZXJcIikuYXBwZW5kQ2hpbGQoX3RoaXMyLmhpZGRlbkZpbGVJbnB1dCk7XG5cbiAgICAgICAgICBfdGhpczIuaGlkZGVuRmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZpbGVzID0gX3RoaXMyLmhpZGRlbkZpbGVJbnB1dC5maWxlcztcblxuICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlcywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICBfc3RlcDtcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICBfdGhpczIuYWRkRmlsZShmaWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczIuZW1pdChcImFkZGVkZmlsZXNcIiwgZmlsZXMpO1xuXG4gICAgICAgICAgICBzZXR1cEhpZGRlbkZpbGVJbnB1dCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNldHVwSGlkZGVuRmlsZUlucHV0KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuVVJMID0gd2luZG93LlVSTCAhPT0gbnVsbCA/IHdpbmRvdy5VUkwgOiB3aW5kb3cud2Via2l0VVJMOyAvLyBTZXR1cCBhbGwgZXZlbnQgbGlzdGVuZXJzIG9uIHRoZSBEcm9wem9uZSBvYmplY3QgaXRzZWxmLlxuICAgICAgLy8gVGhleSdyZSBub3QgaW4gQHNldHVwRXZlbnRMaXN0ZW5lcnMoKSBiZWNhdXNlIHRoZXkgc2hvdWxkbid0IGJlIHJlbW92ZWRcbiAgICAgIC8vIGFnYWluIHdoZW4gdGhlIGRyb3B6b25lIGdldHMgZGlzYWJsZWQuXG5cbiAgICAgIHZhciBfaXRlcmF0b3IyID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmV2ZW50cywgdHJ1ZSksXG4gICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBldmVudE5hbWUgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgICAgdGhpcy5vbihldmVudE5hbWUsIHRoaXMub3B0aW9uc1tldmVudE5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub24oXCJ1cGxvYWRwcm9ncmVzc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIudXBkYXRlVG90YWxVcGxvYWRQcm9ncmVzcygpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9uKFwicmVtb3ZlZGZpbGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnVwZGF0ZVRvdGFsVXBsb2FkUHJvZ3Jlc3MoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vbihcImNhbmNlbGVkXCIsIGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZW1pdChcImNvbXBsZXRlXCIsIGZpbGUpO1xuICAgICAgfSk7IC8vIEVtaXQgYSBgcXVldWVjb21wbGV0ZWAgZXZlbnQgaWYgYWxsIGZpbGVzIGZpbmlzaGVkIHVwbG9hZGluZy5cblxuICAgICAgdGhpcy5vbihcImNvbXBsZXRlXCIsIGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIGlmIChfdGhpczIuZ2V0QWRkZWRGaWxlcygpLmxlbmd0aCA9PT0gMCAmJiBfdGhpczIuZ2V0VXBsb2FkaW5nRmlsZXMoKS5sZW5ndGggPT09IDAgJiYgX3RoaXMyLmdldFF1ZXVlZEZpbGVzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBkZWZlcnJlZCBzbyB0aGF0IGBxdWV1ZWNvbXBsZXRlYCByZWFsbHkgdHJpZ2dlcnMgYWZ0ZXIgYGNvbXBsZXRlYFxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuZW1pdChcInF1ZXVlY29tcGxldGVcIik7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY29udGFpbnNGaWxlcyA9IGZ1bmN0aW9uIGNvbnRhaW5zRmlsZXMoZSkge1xuICAgICAgICBpZiAoZS5kYXRhVHJhbnNmZXIudHlwZXMpIHtcbiAgICAgICAgICAvLyBCZWNhdXNlIGUuZGF0YVRyYW5zZmVyLnR5cGVzIGlzIGFuIE9iamVjdCBpblxuICAgICAgICAgIC8vIElFLCB3ZSBuZWVkIHRvIGl0ZXJhdGUgbGlrZSB0aGlzIGluc3RlYWQgb2ZcbiAgICAgICAgICAvLyB1c2luZyBlLmRhdGFUcmFuc2Zlci50eXBlcy5zb21lKClcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLnR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5kYXRhVHJhbnNmZXIudHlwZXNbaV0gPT09IFwiRmlsZXNcIikgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgdmFyIG5vUHJvcGFnYXRpb24gPSBmdW5jdGlvbiBub1Byb3BhZ2F0aW9uKGUpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGZpbGVzLCB3ZSBkb24ndCB3YW50IHRvIHN0b3BcbiAgICAgICAgLy8gcHJvcGFnYXRpb24gc28gd2UgZG9uJ3QgaW50ZXJmZXJlIHdpdGggb3RoZXJcbiAgICAgICAgLy8gZHJhZyBhbmQgZHJvcCBiZWhhdmlvdXIuXG4gICAgICAgIGlmICghY29udGFpbnNGaWxlcyhlKSkgcmV0dXJuO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBDcmVhdGUgdGhlIGxpc3RlbmVyc1xuXG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gW3tcbiAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICBkcmFnc3RhcnQ6IGZ1bmN0aW9uIGRyYWdzdGFydChlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoXCJkcmFnc3RhcnRcIiwgZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkcmFnZW50ZXI6IGZ1bmN0aW9uIGRyYWdlbnRlcihlKSB7XG4gICAgICAgICAgICBub1Byb3BhZ2F0aW9uKGUpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5lbWl0KFwiZHJhZ2VudGVyXCIsIGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZHJhZ292ZXI6IGZ1bmN0aW9uIGRyYWdvdmVyKGUpIHtcbiAgICAgICAgICAgIC8vIE1ha2VzIGl0IHBvc3NpYmxlIHRvIGRyYWcgZmlsZXMgZnJvbSBjaHJvbWUncyBkb3dubG9hZCBiYXJcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTk1MjY0MzAvZHJhZy1hbmQtZHJvcC1maWxlLXVwbG9hZHMtZnJvbS1jaHJvbWUtZG93bmxvYWRzLWJhclxuICAgICAgICAgICAgLy8gVHJ5IGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDExIChTQ1JJUFQ2NTUzNSBleGNlcHRpb24pXG4gICAgICAgICAgICB2YXIgZWZjdDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZWZjdCA9IGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQ7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge31cblxuICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibW92ZVwiID09PSBlZmN0IHx8IFwibGlua01vdmVcIiA9PT0gZWZjdCA/IFwibW92ZVwiIDogXCJjb3B5XCI7XG4gICAgICAgICAgICBub1Byb3BhZ2F0aW9uKGUpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5lbWl0KFwiZHJhZ292ZXJcIiwgZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkcmFnbGVhdmU6IGZ1bmN0aW9uIGRyYWdsZWF2ZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoXCJkcmFnbGVhdmVcIiwgZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKGUpIHtcbiAgICAgICAgICAgIG5vUHJvcGFnYXRpb24oZSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmRyb3AoZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkcmFnZW5kOiBmdW5jdGlvbiBkcmFnZW5kKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuZW1pdChcImRyYWdlbmRcIiwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFRoaXMgaXMgZGlzYWJsZWQgcmlnaHQgbm93LCBiZWNhdXNlIHRoZSBicm93c2VycyBkb24ndCBpbXBsZW1lbnQgaXQgcHJvcGVybHkuXG4gICAgICAgIC8vIFwicGFzdGVcIjogKGUpID0+XG4gICAgICAgIC8vICAgbm9Qcm9wYWdhdGlvbiBlXG4gICAgICAgIC8vICAgQHBhc3RlIGVcblxuICAgICAgfV07XG4gICAgICB0aGlzLmNsaWNrYWJsZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGNsaWNrYWJsZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5saXN0ZW5lcnMucHVzaCh7XG4gICAgICAgICAgZWxlbWVudDogY2xpY2thYmxlRWxlbWVudCxcbiAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhldnQpIHtcbiAgICAgICAgICAgICAgLy8gT25seSB0aGUgYWN0dWFsIGRyb3B6b25lIG9yIHRoZSBtZXNzYWdlIGVsZW1lbnQgc2hvdWxkIHRyaWdnZXIgZmlsZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgaWYgKGNsaWNrYWJsZUVsZW1lbnQgIT09IF90aGlzMi5lbGVtZW50IHx8IGV2dC50YXJnZXQgPT09IF90aGlzMi5lbGVtZW50IHx8IERyb3B6b25lLmVsZW1lbnRJbnNpZGUoZXZ0LnRhcmdldCwgX3RoaXMyLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5kei1tZXNzYWdlXCIpKSkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5oaWRkZW5GaWxlSW5wdXQuY2xpY2soKTsgLy8gRm9yd2FyZCB0aGUgY2xpY2tcblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbmFibGUoKTtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaW5pdC5jYWxsKHRoaXMpO1xuICAgIH0gLy8gTm90IGZ1bGx5IHRlc3RlZCB5ZXRcblxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgICAgdGhpcy5yZW1vdmVBbGxGaWxlcyh0cnVlKTtcblxuICAgICAgaWYgKHRoaXMuaGlkZGVuRmlsZUlucHV0ICE9IG51bGwgPyB0aGlzLmhpZGRlbkZpbGVJbnB1dC5wYXJlbnROb2RlIDogdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuaGlkZGVuRmlsZUlucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5oaWRkZW5GaWxlSW5wdXQpO1xuICAgICAgICB0aGlzLmhpZGRlbkZpbGVJbnB1dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZHJvcHpvbmU7XG4gICAgICByZXR1cm4gRHJvcHpvbmUuaW5zdGFuY2VzLnNwbGljZShEcm9wem9uZS5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKSwgMSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVRvdGFsVXBsb2FkUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVG90YWxVcGxvYWRQcm9ncmVzcygpIHtcbiAgICAgIHZhciB0b3RhbFVwbG9hZFByb2dyZXNzO1xuICAgICAgdmFyIHRvdGFsQnl0ZXNTZW50ID0gMDtcbiAgICAgIHZhciB0b3RhbEJ5dGVzID0gMDtcbiAgICAgIHZhciBhY3RpdmVGaWxlcyA9IHRoaXMuZ2V0QWN0aXZlRmlsZXMoKTtcblxuICAgICAgaWYgKGFjdGl2ZUZpbGVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMyA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5nZXRBY3RpdmVGaWxlcygpLCB0cnVlKSxcbiAgICAgICAgICAgIF9zdGVwMztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwMy52YWx1ZTtcbiAgICAgICAgICAgIHRvdGFsQnl0ZXNTZW50ICs9IGZpbGUudXBsb2FkLmJ5dGVzU2VudDtcbiAgICAgICAgICAgIHRvdGFsQnl0ZXMgKz0gZmlsZS51cGxvYWQudG90YWw7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvdGFsVXBsb2FkUHJvZ3Jlc3MgPSAxMDAgKiB0b3RhbEJ5dGVzU2VudCAvIHRvdGFsQnl0ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3RhbFVwbG9hZFByb2dyZXNzID0gMTAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5lbWl0KFwidG90YWx1cGxvYWRwcm9ncmVzc1wiLCB0b3RhbFVwbG9hZFByb2dyZXNzLCB0b3RhbEJ5dGVzLCB0b3RhbEJ5dGVzU2VudCk7XG4gICAgfSAvLyBAb3B0aW9ucy5wYXJhbU5hbWUgY2FuIGJlIGEgZnVuY3Rpb24gdGFraW5nIG9uZSBwYXJhbWV0ZXIgcmF0aGVyIHRoYW4gYSBzdHJpbmcuXG4gICAgLy8gQSBwYXJhbWV0ZXIgbmFtZSBmb3IgYSBmaWxlIGlzIG9idGFpbmVkIHNpbXBseSBieSBjYWxsaW5nIHRoaXMgd2l0aCBhbiBpbmRleCBudW1iZXIuXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0UGFyYW1OYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRQYXJhbU5hbWUobikge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMucGFyYW1OYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wYXJhbU5hbWUobik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5vcHRpb25zLnBhcmFtTmFtZSkuY29uY2F0KHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSA/IFwiW1wiLmNvbmNhdChuLCBcIl1cIikgOiBcIlwiKTtcbiAgICAgIH1cbiAgICB9IC8vIElmIEBvcHRpb25zLnJlbmFtZUZpbGUgaXMgYSBmdW5jdGlvbixcbiAgICAvLyB0aGUgZnVuY3Rpb24gd2lsbCBiZSB1c2VkIHRvIHJlbmFtZSB0aGUgZmlsZS5uYW1lIGJlZm9yZSBhcHBlbmRpbmcgaXQgdG8gdGhlIGZvcm1EYXRhXG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVuYW1lRmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuYW1lRmlsZShmaWxlKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5yZW5hbWVGaWxlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZpbGUubmFtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZW5hbWVGaWxlKGZpbGUpO1xuICAgIH0gLy8gUmV0dXJucyBhIGZvcm0gdGhhdCBjYW4gYmUgdXNlZCBhcyBmYWxsYmFjayBpZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IERyYWduRHJvcFxuICAgIC8vXG4gICAgLy8gSWYgdGhlIGRyb3B6b25lIGlzIGFscmVhZHkgYSBmb3JtLCBvbmx5IHRoZSBpbnB1dCBmaWVsZCBhbmQgYnV0dG9uIGFyZSByZXR1cm5lZC4gT3RoZXJ3aXNlIGEgY29tcGxldGUgZm9ybSBlbGVtZW50IGlzIHByb3ZpZGVkLlxuICAgIC8vIFRoaXMgY29kZSBoYXMgdG8gcGFzcyBpbiBJRTcgOihcblxuICB9LCB7XG4gICAga2V5OiBcImdldEZhbGxiYWNrRm9ybVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGYWxsYmFja0Zvcm0oKSB7XG4gICAgICB2YXIgZXhpc3RpbmdGYWxsYmFjaywgZm9ybTtcblxuICAgICAgaWYgKGV4aXN0aW5nRmFsbGJhY2sgPSB0aGlzLmdldEV4aXN0aW5nRmFsbGJhY2soKSkge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdGYWxsYmFjaztcbiAgICAgIH1cblxuICAgICAgdmFyIGZpZWxkc1N0cmluZyA9ICc8ZGl2IGNsYXNzPVwiZHotZmFsbGJhY2tcIj4nO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpY3RGYWxsYmFja1RleHQpIHtcbiAgICAgICAgZmllbGRzU3RyaW5nICs9IFwiPHA+XCIuY29uY2F0KHRoaXMub3B0aW9ucy5kaWN0RmFsbGJhY2tUZXh0LCBcIjwvcD5cIik7XG4gICAgICB9XG5cbiAgICAgIGZpZWxkc1N0cmluZyArPSBcIjxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBuYW1lPVxcXCJcIi5jb25jYXQodGhpcy5fZ2V0UGFyYW1OYW1lKDApLCBcIlxcXCIgXCIpLmNvbmNhdCh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUgPyAnbXVsdGlwbGU9XCJtdWx0aXBsZVwiJyA6IHVuZGVmaW5lZCwgXCIgLz48aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiVXBsb2FkIVxcXCI+PC9kaXY+XCIpO1xuICAgICAgdmFyIGZpZWxkcyA9IERyb3B6b25lLmNyZWF0ZUVsZW1lbnQoZmllbGRzU3RyaW5nKTtcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC50YWdOYW1lICE9PSBcIkZPUk1cIikge1xuICAgICAgICBmb3JtID0gRHJvcHpvbmUuY3JlYXRlRWxlbWVudChcIjxmb3JtIGFjdGlvbj1cXFwiXCIuY29uY2F0KHRoaXMub3B0aW9ucy51cmwsIFwiXFxcIiBlbmN0eXBlPVxcXCJtdWx0aXBhcnQvZm9ybS1kYXRhXFxcIiBtZXRob2Q9XFxcIlwiKS5jb25jYXQodGhpcy5vcHRpb25zLm1ldGhvZCwgXCJcXFwiPjwvZm9ybT5cIikpO1xuICAgICAgICBmb3JtLmFwcGVuZENoaWxkKGZpZWxkcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgZW5jdHlwZSBhbmQgbWV0aG9kIGF0dHJpYnV0ZXMgYXJlIHNldCBwcm9wZXJseVxuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIiwgdGhpcy5vcHRpb25zLm1ldGhvZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtICE9IG51bGwgPyBmb3JtIDogZmllbGRzO1xuICAgIH0gLy8gUmV0dXJucyB0aGUgZmFsbGJhY2sgZWxlbWVudHMgaWYgdGhleSBleGlzdCBhbHJlYWR5XG4gICAgLy9cbiAgICAvLyBUaGlzIGNvZGUgaGFzIHRvIHBhc3MgaW4gSUU3IDooXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRFeGlzdGluZ0ZhbGxiYWNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEV4aXN0aW5nRmFsbGJhY2soKSB7XG4gICAgICB2YXIgZ2V0RmFsbGJhY2sgPSBmdW5jdGlvbiBnZXRGYWxsYmFjayhlbGVtZW50cykge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yNCA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZWxlbWVudHMsIHRydWUpLFxuICAgICAgICAgICAgX3N0ZXA0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBlbCA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKC8oXnwgKWZhbGxiYWNrKCR8ICkvLnRlc3QoZWwuY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gW1wiZGl2XCIsIFwiZm9ybVwiXTsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgdGFnTmFtZSA9IF9hcnJbX2ldO1xuICAgICAgICB2YXIgZmFsbGJhY2s7XG5cbiAgICAgICAgaWYgKGZhbGxiYWNrID0gZ2V0RmFsbGJhY2sodGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gQWN0aXZhdGVzIGFsbCBsaXN0ZW5lcnMgc3RvcmVkIGluIEBsaXN0ZW5lcnNcblxuICB9LCB7XG4gICAga2V5OiBcInNldHVwRXZlbnRMaXN0ZW5lcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5tYXAoZnVuY3Rpb24gKGVsZW1lbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBldmVudCBpbiBlbGVtZW50TGlzdGVuZXJzLmV2ZW50cykge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gZWxlbWVudExpc3RlbmVycy5ldmVudHNbZXZlbnRdO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudExpc3RlbmVycy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0oKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gRGVhY3RpdmF0ZXMgYWxsIGxpc3RlbmVycyBzdG9yZWQgaW4gQGxpc3RlbmVyc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMubWFwKGZ1bmN0aW9uIChlbGVtZW50TGlzdGVuZXJzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgZm9yICh2YXIgZXZlbnQgaW4gZWxlbWVudExpc3RlbmVycy5ldmVudHMpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGVsZW1lbnRMaXN0ZW5lcnMuZXZlbnRzW2V2ZW50XTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnRMaXN0ZW5lcnMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KCk7XG4gICAgICB9KTtcbiAgICB9IC8vIFJlbW92ZXMgYWxsIGV2ZW50IGxpc3RlbmVycyBhbmQgY2FuY2VscyBhbGwgZmlsZXMgaW4gdGhlIHF1ZXVlIG9yIGJlaW5nIHByb2Nlc3NlZC5cblxuICB9LCB7XG4gICAga2V5OiBcImRpc2FibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmNsaWNrYWJsZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LWNsaWNrYWJsZVwiKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5maWxlcy5tYXAoZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5jYW5jZWxVcGxvYWQoZmlsZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW5hYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmRpc2FibGVkO1xuICAgICAgdGhpcy5jbGlja2FibGVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1jbGlja2FibGVcIik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIFJldHVybnMgYSBuaWNlbHkgZm9ybWF0dGVkIGZpbGVzaXplXG5cbiAgfSwge1xuICAgIGtleTogXCJmaWxlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxlc2l6ZShzaXplKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRTaXplID0gMDtcbiAgICAgIHZhciBzZWxlY3RlZFVuaXQgPSBcImJcIjtcblxuICAgICAgaWYgKHNpemUgPiAwKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtcInRiXCIsIFwiZ2JcIiwgXCJtYlwiLCBcImtiXCIsIFwiYlwiXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHVuaXQgPSB1bml0c1tpXTtcbiAgICAgICAgICB2YXIgY3V0b2ZmID0gTWF0aC5wb3codGhpcy5vcHRpb25zLmZpbGVzaXplQmFzZSwgNCAtIGkpIC8gMTA7XG5cbiAgICAgICAgICBpZiAoc2l6ZSA+PSBjdXRvZmYpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkU2l6ZSA9IHNpemUgLyBNYXRoLnBvdyh0aGlzLm9wdGlvbnMuZmlsZXNpemVCYXNlLCA0IC0gaSk7XG4gICAgICAgICAgICBzZWxlY3RlZFVuaXQgPSB1bml0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRTaXplID0gTWF0aC5yb3VuZCgxMCAqIHNlbGVjdGVkU2l6ZSkgLyAxMDsgLy8gQ3V0dGluZyBvZiBkaWdpdHNcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFwiPHN0cm9uZz5cIi5jb25jYXQoc2VsZWN0ZWRTaXplLCBcIjwvc3Ryb25nPiBcIikuY29uY2F0KHRoaXMub3B0aW9ucy5kaWN0RmlsZVNpemVVbml0c1tzZWxlY3RlZFVuaXRdKTtcbiAgICB9IC8vIEFkZHMgb3IgcmVtb3ZlcyB0aGUgYGR6LW1heC1maWxlcy1yZWFjaGVkYCBjbGFzcyBmcm9tIHRoZSBmb3JtLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3VwZGF0ZU1heEZpbGVzUmVhY2hlZENsYXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubWF4RmlsZXMgIT0gbnVsbCAmJiB0aGlzLmdldEFjY2VwdGVkRmlsZXMoKS5sZW5ndGggPj0gdGhpcy5vcHRpb25zLm1heEZpbGVzKSB7XG4gICAgICAgIGlmICh0aGlzLmdldEFjY2VwdGVkRmlsZXMoKS5sZW5ndGggPT09IHRoaXMub3B0aW9ucy5tYXhGaWxlcykge1xuICAgICAgICAgIHRoaXMuZW1pdChcIm1heGZpbGVzcmVhY2hlZFwiLCB0aGlzLmZpbGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LW1heC1maWxlcy1yZWFjaGVkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZHotbWF4LWZpbGVzLXJlYWNoZWRcIik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRyb3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJvcChlKSB7XG4gICAgICBpZiAoIWUuZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbWl0KFwiZHJvcFwiLCBlKTsgLy8gQ29udmVydCB0aGUgRmlsZUxpc3QgdG8gYW4gQXJyYXlcbiAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBJRTExXG5cbiAgICAgIHZhciBmaWxlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZpbGVzW2ldID0gZS5kYXRhVHJhbnNmZXIuZmlsZXNbaV07XG4gICAgICB9IC8vIEV2ZW4gaWYgaXQncyBhIGZvbGRlciwgZmlsZXMubGVuZ3RoIHdpbGwgY29udGFpbiB0aGUgZm9sZGVycy5cblxuXG4gICAgICBpZiAoZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IGUuZGF0YVRyYW5zZmVyLml0ZW1zO1xuXG4gICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggJiYgaXRlbXNbMF0ud2Via2l0R2V0QXNFbnRyeSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gVGhlIGJyb3dzZXIgc3VwcG9ydHMgZHJvcHBpbmcgb2YgZm9sZGVycywgc28gaGFuZGxlIGl0ZW1zIGluc3RlYWQgb2YgZmlsZXNcbiAgICAgICAgICB0aGlzLl9hZGRGaWxlc0Zyb21JdGVtcyhpdGVtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVGaWxlcyhmaWxlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5lbWl0KFwiYWRkZWRmaWxlc1wiLCBmaWxlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhc3RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhc3RlKGUpIHtcbiAgICAgIGlmIChfX2d1YXJkX18oZSAhPSBudWxsID8gZS5jbGlwYm9hcmREYXRhIDogdW5kZWZpbmVkLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geC5pdGVtcztcbiAgICAgIH0pID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVtaXQoXCJwYXN0ZVwiLCBlKTtcbiAgICAgIHZhciBpdGVtcyA9IGUuY2xpcGJvYXJkRGF0YS5pdGVtcztcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkRmlsZXNGcm9tSXRlbXMoaXRlbXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYW5kbGVGaWxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVGaWxlcyhmaWxlcykge1xuICAgICAgdmFyIF9pdGVyYXRvcjUgPSBkcm9wem9uZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGZpbGVzLCB0cnVlKSxcbiAgICAgICAgICBfc3RlcDU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcDUudmFsdWU7XG4gICAgICAgICAgdGhpcy5hZGRGaWxlKGZpbGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICAgIH1cbiAgICB9IC8vIFdoZW4gYSBmb2xkZXIgaXMgZHJvcHBlZCAob3IgZmlsZXMgYXJlIHBhc3RlZCksIGl0ZW1zIG11c3QgYmUgaGFuZGxlZFxuICAgIC8vIGluc3RlYWQgb2YgZmlsZXMuXG5cbiAgfSwge1xuICAgIGtleTogXCJfYWRkRmlsZXNGcm9tSXRlbXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZEZpbGVzRnJvbUl0ZW1zKGl0ZW1zKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3I2ID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpdGVtcywgdHJ1ZSksXG4gICAgICAgICAgICBfc3RlcDY7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcDYudmFsdWU7XG4gICAgICAgICAgICB2YXIgZW50cnk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtLndlYmtpdEdldEFzRW50cnkgIT0gbnVsbCAmJiAoZW50cnkgPSBpdGVtLndlYmtpdEdldEFzRW50cnkoKSkpIHtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRmlsZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKF90aGlzNC5hZGRGaWxlKGl0ZW0uZ2V0QXNGaWxlKCkpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbnRyeS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBhbGwgZmlsZXMgZnJvbSB0aGF0IGRpcmVjdG9yeSB0byBmaWxlc1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKF90aGlzNC5fYWRkRmlsZXNGcm9tRGlyZWN0b3J5KGVudHJ5LCBlbnRyeS5uYW1lKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmdldEFzRmlsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChpdGVtLmtpbmQgPT0gbnVsbCB8fCBpdGVtLmtpbmQgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goX3RoaXM0LmFkZEZpbGUoaXRlbS5nZXRBc0ZpbGUoKSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I2LmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KCk7XG4gICAgfSAvLyBHb2VzIHRocm91Z2ggdGhlIGRpcmVjdG9yeSwgYW5kIGFkZHMgZWFjaCBmaWxlIGl0IGZpbmRzIHJlY3Vyc2l2ZWx5XG5cbiAgfSwge1xuICAgIGtleTogXCJfYWRkRmlsZXNGcm9tRGlyZWN0b3J5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRGaWxlc0Zyb21EaXJlY3RvcnkoZGlyZWN0b3J5LCBwYXRoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIGRpclJlYWRlciA9IGRpcmVjdG9yeS5jcmVhdGVSZWFkZXIoKTtcblxuICAgICAgdmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnJvcikge1xuICAgICAgICByZXR1cm4gX19ndWFyZE1ldGhvZF9fKGNvbnNvbGUsIFwibG9nXCIsIGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8ubG9nKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVhZEVudHJpZXMgPSBmdW5jdGlvbiByZWFkRW50cmllcygpIHtcbiAgICAgICAgcmV0dXJuIGRpclJlYWRlci5yZWFkRW50cmllcyhmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3I3ID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlbnRyaWVzLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBfc3RlcDc7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gX3N0ZXA3LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRmlsZSkge1xuICAgICAgICAgICAgICAgICAgZW50cnkuZmlsZShmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM1Lm9wdGlvbnMuaWdub3JlSGlkZGVuRmlsZXMgJiYgZmlsZS5uYW1lLnN1YnN0cmluZygwLCAxKSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmaWxlLmZ1bGxQYXRoID0gXCJcIi5jb25jYXQocGF0aCwgXCIvXCIpLmNvbmNhdChmaWxlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmFkZEZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICBfdGhpczUuX2FkZEZpbGVzRnJvbURpcmVjdG9yeShlbnRyeSwgXCJcIi5jb25jYXQocGF0aCwgXCIvXCIpLmNvbmNhdChlbnRyeS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IC8vIFJlY3Vyc2l2ZWx5IGNhbGwgcmVhZEVudHJpZXMoKSBhZ2Fpbiwgc2luY2UgYnJvd3NlciBvbmx5IGhhbmRsZVxuICAgICAgICAgICAgICAvLyB0aGUgZmlyc3QgMTAwIGVudHJpZXMuXG4gICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RpcmVjdG9yeVJlYWRlciNyZWFkRW50cmllc1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yNy5lKGVycik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3I3LmYoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiByZWFkRW50cmllcygpO1xuICAgIH0gLy8gSWYgYGRvbmUoKWAgaXMgY2FsbGVkIHdpdGhvdXQgYXJndW1lbnQgdGhlIGZpbGUgaXMgYWNjZXB0ZWRcbiAgICAvLyBJZiB5b3UgY2FsbCBpdCB3aXRoIGFuIGVycm9yIG1lc3NhZ2UsIHRoZSBmaWxlIGlzIHJlamVjdGVkXG4gICAgLy8gKFRoaXMgYWxsb3dzIGZvciBhc3luY2hyb25vdXMgdmFsaWRhdGlvbilcbiAgICAvL1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gY2hlY2tzIHRoZSBmaWxlc2l6ZSwgYW5kIGlmIHRoZSBmaWxlLnR5cGUgcGFzc2VzIHRoZVxuICAgIC8vIGBhY2NlcHRlZEZpbGVzYCBjaGVjay5cblxuICB9LCB7XG4gICAga2V5OiBcImFjY2VwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhY2NlcHQoZmlsZSwgZG9uZSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXhGaWxlc2l6ZSAmJiBmaWxlLnNpemUgPiB0aGlzLm9wdGlvbnMubWF4RmlsZXNpemUgKiAxMDI0ICogMTAyNCkge1xuICAgICAgICBkb25lKHRoaXMub3B0aW9ucy5kaWN0RmlsZVRvb0JpZy5yZXBsYWNlKFwie3tmaWxlc2l6ZX19XCIsIE1hdGgucm91bmQoZmlsZS5zaXplIC8gMTAyNCAvIDEwLjI0KSAvIDEwMCkucmVwbGFjZShcInt7bWF4RmlsZXNpemV9fVwiLCB0aGlzLm9wdGlvbnMubWF4RmlsZXNpemUpKTtcbiAgICAgIH0gZWxzZSBpZiAoIURyb3B6b25lLmlzVmFsaWRGaWxlKGZpbGUsIHRoaXMub3B0aW9ucy5hY2NlcHRlZEZpbGVzKSkge1xuICAgICAgICBkb25lKHRoaXMub3B0aW9ucy5kaWN0SW52YWxpZEZpbGVUeXBlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLm1heEZpbGVzICE9IG51bGwgJiYgdGhpcy5nZXRBY2NlcHRlZEZpbGVzKCkubGVuZ3RoID49IHRoaXMub3B0aW9ucy5tYXhGaWxlcykge1xuICAgICAgICBkb25lKHRoaXMub3B0aW9ucy5kaWN0TWF4RmlsZXNFeGNlZWRlZC5yZXBsYWNlKFwie3ttYXhGaWxlc319XCIsIHRoaXMub3B0aW9ucy5tYXhGaWxlcykpO1xuICAgICAgICB0aGlzLmVtaXQoXCJtYXhmaWxlc2V4Y2VlZGVkXCIsIGZpbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmFjY2VwdC5jYWxsKHRoaXMsIGZpbGUsIGRvbmUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRGaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEZpbGUoZmlsZSkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGZpbGUudXBsb2FkID0ge1xuICAgICAgICB1dWlkOiBEcm9wem9uZS51dWlkdjQoKSxcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIHRvdGFsIHVwbG9hZCBzaXplIHRvIGZpbGUuc2l6ZSBmb3IgdGhlIGJlZ2lubmluZ1xuICAgICAgICAvLyBJdCdzIGFjdHVhbCBkaWZmZXJlbnQgdGhhbiB0aGUgc2l6ZSB0byBiZSB0cmFuc21pdHRlZC5cbiAgICAgICAgdG90YWw6IGZpbGUuc2l6ZSxcbiAgICAgICAgYnl0ZXNTZW50OiAwLFxuICAgICAgICBmaWxlbmFtZTogdGhpcy5fcmVuYW1lRmlsZShmaWxlKSAvLyBOb3Qgc2V0dGluZyBjaHVua2luZyBpbmZvcm1hdGlvbiBoZXJlLCBiZWNhdXNlIHRoZSBhY3V0YWwgZGF0YSDigJQgYW5kXG4gICAgICAgIC8vIHRodXMgdGhlIGNodW5rcyDigJQgbWlnaHQgY2hhbmdlIGlmIGBvcHRpb25zLnRyYW5zZm9ybUZpbGVgIGlzIHNldFxuICAgICAgICAvLyBhbmQgZG9lcyBzb21ldGhpbmcgdG8gdGhlIGRhdGEuXG5cbiAgICAgIH07XG4gICAgICB0aGlzLmZpbGVzLnB1c2goZmlsZSk7XG4gICAgICBmaWxlLnN0YXR1cyA9IERyb3B6b25lLkFEREVEO1xuICAgICAgdGhpcy5lbWl0KFwiYWRkZWRmaWxlXCIsIGZpbGUpO1xuXG4gICAgICB0aGlzLl9lbnF1ZXVlVGh1bWJuYWlsKGZpbGUpO1xuXG4gICAgICB0aGlzLmFjY2VwdChmaWxlLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgZmlsZS5hY2NlcHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgX3RoaXM2Ll9lcnJvclByb2Nlc3NpbmcoW2ZpbGVdLCBlcnJvcik7IC8vIFdpbGwgc2V0IHRoZSBmaWxlLnN0YXR1c1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsZS5hY2NlcHRlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoX3RoaXM2Lm9wdGlvbnMuYXV0b1F1ZXVlKSB7XG4gICAgICAgICAgICBfdGhpczYuZW5xdWV1ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgfSAvLyBXaWxsIHNldCAuYWNjZXB0ZWQgPSB0cnVlXG5cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNi5fdXBkYXRlTWF4RmlsZXNSZWFjaGVkQ2xhc3MoKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gV3JhcHBlciBmb3IgZW5xdWV1ZUZpbGVcblxuICB9LCB7XG4gICAga2V5OiBcImVucXVldWVGaWxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbnF1ZXVlRmlsZXMoZmlsZXMpIHtcbiAgICAgIHZhciBfaXRlcmF0b3I4ID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlcywgdHJ1ZSksXG4gICAgICAgICAgX3N0ZXA4O1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBmaWxlID0gX3N0ZXA4LnZhbHVlO1xuICAgICAgICAgIHRoaXMuZW5xdWV1ZUZpbGUoZmlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3I4LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjguZigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW5xdWV1ZUZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5xdWV1ZUZpbGUoZmlsZSkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIGlmIChmaWxlLnN0YXR1cyA9PT0gRHJvcHpvbmUuQURERUQgJiYgZmlsZS5hY2NlcHRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBmaWxlLnN0YXR1cyA9IERyb3B6b25lLlFVRVVFRDtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Qcm9jZXNzUXVldWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM3LnByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH0sIDApOyAvLyBEZWZlcnJpbmcgdGhlIGNhbGxcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBmaWxlIGNhbid0IGJlIHF1ZXVlZCBiZWNhdXNlIGl0IGhhcyBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkIG9yIHdhcyByZWplY3RlZC5cIik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9lbnF1ZXVlVGh1bWJuYWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbnF1ZXVlVGh1bWJuYWlsKGZpbGUpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNyZWF0ZUltYWdlVGh1bWJuYWlscyAmJiBmaWxlLnR5cGUubWF0Y2goL2ltYWdlLiovKSAmJiBmaWxlLnNpemUgPD0gdGhpcy5vcHRpb25zLm1heFRodW1ibmFpbEZpbGVzaXplICogMTAyNCAqIDEwMjQpIHtcbiAgICAgICAgdGhpcy5fdGh1bWJuYWlsUXVldWUucHVzaChmaWxlKTtcblxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzOC5fcHJvY2Vzc1RodW1ibmFpbFF1ZXVlKCk7XG4gICAgICAgIH0sIDApOyAvLyBEZWZlcnJpbmcgdGhlIGNhbGxcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3Byb2Nlc3NUaHVtYm5haWxRdWV1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvY2Vzc1RodW1ibmFpbFF1ZXVlKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9wcm9jZXNzaW5nVGh1bWJuYWlsIHx8IHRoaXMuX3RodW1ibmFpbFF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Byb2Nlc3NpbmdUaHVtYm5haWwgPSB0cnVlO1xuXG4gICAgICB2YXIgZmlsZSA9IHRoaXMuX3RodW1ibmFpbFF1ZXVlLnNoaWZ0KCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRodW1ibmFpbChmaWxlLCB0aGlzLm9wdGlvbnMudGh1bWJuYWlsV2lkdGgsIHRoaXMub3B0aW9ucy50aHVtYm5haWxIZWlnaHQsIHRoaXMub3B0aW9ucy50aHVtYm5haWxNZXRob2QsIHRydWUsIGZ1bmN0aW9uIChkYXRhVXJsKSB7XG4gICAgICAgIF90aGlzOS5lbWl0KFwidGh1bWJuYWlsXCIsIGZpbGUsIGRhdGFVcmwpO1xuXG4gICAgICAgIF90aGlzOS5fcHJvY2Vzc2luZ1RodW1ibmFpbCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM5Ll9wcm9jZXNzVGh1bWJuYWlsUXVldWUoKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2FuIGJlIGNhbGxlZCBieSB0aGUgdXNlciB0byByZW1vdmUgYSBmaWxlXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVGaWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZpbGUoZmlsZSkge1xuICAgICAgaWYgKGZpbGUuc3RhdHVzID09PSBEcm9wem9uZS5VUExPQURJTkcpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxVcGxvYWQoZmlsZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmlsZXMgPSB3aXRob3V0KHRoaXMuZmlsZXMsIGZpbGUpO1xuICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlZGZpbGVcIiwgZmlsZSk7XG5cbiAgICAgIGlmICh0aGlzLmZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KFwicmVzZXRcIik7XG4gICAgICB9XG4gICAgfSAvLyBSZW1vdmVzIGFsbCBmaWxlcyB0aGF0IGFyZW4ndCBjdXJyZW50bHkgcHJvY2Vzc2VkIGZyb20gdGhlIGxpc3RcblxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZUFsbEZpbGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFsbEZpbGVzKGNhbmNlbElmTmVjZXNzYXJ5KSB7XG4gICAgICAvLyBDcmVhdGUgYSBjb3B5IG9mIGZpbGVzIHNpbmNlIHJlbW92ZUZpbGUoKSBjaGFuZ2VzIHRoZSBAZmlsZXMgYXJyYXkuXG4gICAgICBpZiAoY2FuY2VsSWZOZWNlc3NhcnkgPT0gbnVsbCkge1xuICAgICAgICBjYW5jZWxJZk5lY2Vzc2FyeSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2l0ZXJhdG9yOSA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5maWxlcy5zbGljZSgpLCB0cnVlKSxcbiAgICAgICAgICBfc3RlcDk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yOS5zKCk7ICEoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcDkudmFsdWU7XG5cbiAgICAgICAgICBpZiAoZmlsZS5zdGF0dXMgIT09IERyb3B6b25lLlVQTE9BRElORyB8fCBjYW5jZWxJZk5lY2Vzc2FyeSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVGaWxlKGZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjkuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yOS5mKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gLy8gUmVzaXplcyBhbiBpbWFnZSBiZWZvcmUgaXQgZ2V0cyBzZW50IHRvIHRoZSBzZXJ2ZXIuIFRoaXMgZnVuY3Rpb24gaXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2ZcbiAgICAvLyBgb3B0aW9ucy50cmFuc2Zvcm1GaWxlYCBpZiBgcmVzaXplV2lkdGhgIG9yIGByZXNpemVIZWlnaHRgIGFyZSBzZXQuIFRoZSBjYWxsYmFjayBpcyBpbnZva2VkIHdpdGhcbiAgICAvLyB0aGUgcmVzaXplZCBibG9iLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVzaXplSW1hZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplSW1hZ2UoZmlsZSwgd2lkdGgsIGhlaWdodCwgcmVzaXplTWV0aG9kLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVUaHVtYm5haWwoZmlsZSwgd2lkdGgsIGhlaWdodCwgcmVzaXplTWV0aG9kLCB0cnVlLCBmdW5jdGlvbiAoZGF0YVVybCwgY2FudmFzKSB7XG4gICAgICAgIGlmIChjYW52YXMgPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRoZSBpbWFnZSBoYXMgbm90IGJlZW4gcmVzaXplZFxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmaWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVzaXplTWltZVR5cGUgPSBfdGhpczEwLm9wdGlvbnMucmVzaXplTWltZVR5cGU7XG5cbiAgICAgICAgICBpZiAocmVzaXplTWltZVR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzaXplTWltZVR5cGUgPSBmaWxlLnR5cGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlc2l6ZWREYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTChyZXNpemVNaW1lVHlwZSwgX3RoaXMxMC5vcHRpb25zLnJlc2l6ZVF1YWxpdHkpO1xuXG4gICAgICAgICAgaWYgKHJlc2l6ZU1pbWVUeXBlID09PSBcImltYWdlL2pwZWdcIiB8fCByZXNpemVNaW1lVHlwZSA9PT0gXCJpbWFnZS9qcGdcIikge1xuICAgICAgICAgICAgLy8gTm93IGFkZCB0aGUgb3JpZ2luYWwgRVhJRiBpbmZvcm1hdGlvblxuICAgICAgICAgICAgcmVzaXplZERhdGFVUkwgPSBFeGlmUmVzdG9yZS5yZXN0b3JlKGZpbGUuZGF0YVVSTCwgcmVzaXplZERhdGFVUkwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhEcm9wem9uZS5kYXRhVVJJdG9CbG9iKHJlc2l6ZWREYXRhVVJMKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVUaHVtYm5haWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVGh1bWJuYWlsKGZpbGUsIHdpZHRoLCBoZWlnaHQsIHJlc2l6ZU1ldGhvZCwgZml4T3JpZW50YXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZpbGUuZGF0YVVSTCA9IGZpbGVSZWFkZXIucmVzdWx0OyAvLyBEb24ndCBib3RoZXIgY3JlYXRpbmcgYSB0aHVtYm5haWwgZm9yIFNWRyBpbWFnZXMgc2luY2UgdGhleSdyZSB2ZWN0b3JcblxuICAgICAgICBpZiAoZmlsZS50eXBlID09PSBcImltYWdlL3N2Zyt4bWxcIikge1xuICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhmaWxlUmVhZGVyLnJlc3VsdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMxMS5jcmVhdGVUaHVtYm5haWxGcm9tVXJsKGZpbGUsIHdpZHRoLCBoZWlnaHQsIHJlc2l6ZU1ldGhvZCwgZml4T3JpZW50YXRpb24sIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICB9IC8vIGBtb2NrRmlsZWAgbmVlZHMgdG8gaGF2ZSB0aGVzZSBhdHRyaWJ1dGVzOlxuICAgIC8vXG4gICAgLy8gICAgIHsgbmFtZTogJ25hbWUnLCBzaXplOiAxMjM0NSwgaW1hZ2VVcmw6ICcnIH1cbiAgICAvL1xuICAgIC8vIGBjYWxsYmFja2Agd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGltYWdlIGhhcyBiZWVuIGRvd25sb2FkZWQgYW5kIGRpc3BsYXllZC5cbiAgICAvLyBgY3Jvc3NPcmlnaW5gIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGBpbWdgIHRhZyB3aGVuIGFjY2Vzc2luZyB0aGUgZmlsZS5cblxuICB9LCB7XG4gICAga2V5OiBcImRpc3BsYXlFeGlzdGluZ0ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGxheUV4aXN0aW5nRmlsZShtb2NrRmlsZSwgaW1hZ2VVcmwsIGNhbGxiYWNrLCBjcm9zc09yaWdpbikge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgICB2YXIgcmVzaXplVGh1bWJuYWlsID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0cnVlO1xuICAgICAgdGhpcy5lbWl0KFwiYWRkZWRmaWxlXCIsIG1vY2tGaWxlKTtcbiAgICAgIHRoaXMuZW1pdChcImNvbXBsZXRlXCIsIG1vY2tGaWxlKTtcblxuICAgICAgaWYgKCFyZXNpemVUaHVtYm5haWwpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwidGh1bWJuYWlsXCIsIG1vY2tGaWxlLCBpbWFnZVVybCk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvbkRvbmUgPSBmdW5jdGlvbiBvbkRvbmUodGh1bWJuYWlsKSB7XG4gICAgICAgICAgX3RoaXMxMi5lbWl0KFwidGh1bWJuYWlsXCIsIG1vY2tGaWxlLCB0aHVtYm5haWwpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vY2tGaWxlLmRhdGFVUkwgPSBpbWFnZVVybDtcbiAgICAgICAgdGhpcy5jcmVhdGVUaHVtYm5haWxGcm9tVXJsKG1vY2tGaWxlLCB0aGlzLm9wdGlvbnMudGh1bWJuYWlsV2lkdGgsIHRoaXMub3B0aW9ucy50aHVtYm5haWxIZWlnaHQsIHRoaXMub3B0aW9ucy50aHVtYm5haWxNZXRob2QsIHRoaXMub3B0aW9ucy5maXhPcmllbnRhdGlvbiwgb25Eb25lLCBjcm9zc09yaWdpbik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVRodW1ibmFpbEZyb21VcmxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVGh1bWJuYWlsRnJvbVVybChmaWxlLCB3aWR0aCwgaGVpZ2h0LCByZXNpemVNZXRob2QsIGZpeE9yaWVudGF0aW9uLCBjYWxsYmFjaywgY3Jvc3NPcmlnaW4pIHtcbiAgICAgIHZhciBfdGhpczEzID0gdGhpcztcblxuICAgICAgLy8gTm90IHVzaW5nIGBuZXcgSW1hZ2VgIGhlcmUgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBsYXRlc3QgQ2hyb21lIHZlcnNpb25zLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbnlvL2Ryb3B6b25lL3B1bGwvMjI2XG4gICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcblxuICAgICAgaWYgKGNyb3NzT3JpZ2luKSB7XG4gICAgICAgIGltZy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuICAgICAgfSAvLyBmaXhPcmllbnRhdGlvbiBpcyBub3QgbmVlZGVkIGFueW1vcmUgd2l0aCBicm93c2VycyBoYW5kbGluZyBpbWFnZU9yaWVudGF0aW9uXG5cblxuICAgICAgZml4T3JpZW50YXRpb24gPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpW1wiaW1hZ2VPcmllbnRhdGlvblwiXSA9PSBcImZyb20taW1hZ2VcIiA/IGZhbHNlIDogZml4T3JpZW50YXRpb247XG5cbiAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsb2FkRXhpZiA9IGZ1bmN0aW9uIGxvYWRFeGlmKGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKDEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgRVhJRiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBFWElGICE9PSBudWxsICYmIGZpeE9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgbG9hZEV4aWYgPSBmdW5jdGlvbiBsb2FkRXhpZihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIEVYSUYuZ2V0RGF0YShpbWcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKEVYSUYuZ2V0VGFnKHRoaXMsIFwiT3JpZW50YXRpb25cIikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2FkRXhpZihmdW5jdGlvbiAob3JpZW50YXRpb24pIHtcbiAgICAgICAgICBmaWxlLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgIGZpbGUuaGVpZ2h0ID0gaW1nLmhlaWdodDtcblxuICAgICAgICAgIHZhciByZXNpemVJbmZvID0gX3RoaXMxMy5vcHRpb25zLnJlc2l6ZS5jYWxsKF90aGlzMTMsIGZpbGUsIHdpZHRoLCBoZWlnaHQsIHJlc2l6ZU1ldGhvZCk7XG5cbiAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICBjYW52YXMud2lkdGggPSByZXNpemVJbmZvLnRyZ1dpZHRoO1xuICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSByZXNpemVJbmZvLnRyZ0hlaWdodDtcblxuICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA+IDQpIHtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHJlc2l6ZUluZm8udHJnSGVpZ2h0O1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHJlc2l6ZUluZm8udHJnV2lkdGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoIChvcmllbnRhdGlvbikge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAvLyBob3Jpem9udGFsIGZsaXBcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjYW52YXMud2lkdGgsIDApO1xuICAgICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAvLyAxODDCsCByb3RhdGUgbGVmdFxuICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgIGN0eC5yb3RhdGUoTWF0aC5QSSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIC8vIHZlcnRpY2FsIGZsaXBcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgY3R4LnNjYWxlKDEsIC0xKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgLy8gdmVydGljYWwgZmxpcCArIDkwIHJvdGF0ZSByaWdodFxuICAgICAgICAgICAgICBjdHgucm90YXRlKDAuNSAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAvLyA5MMKwIHJvdGF0ZSByaWdodFxuICAgICAgICAgICAgICBjdHgucm90YXRlKDAuNSAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKDAsIC1jYW52YXMud2lkdGgpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAvLyBob3Jpem9udGFsIGZsaXAgKyA5MCByb3RhdGUgcmlnaHRcbiAgICAgICAgICAgICAgY3R4LnJvdGF0ZSgwLjUgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjYW52YXMuaGVpZ2h0LCAtY2FudmFzLndpZHRoKTtcbiAgICAgICAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgLy8gOTDCsCByb3RhdGUgbGVmdFxuICAgICAgICAgICAgICBjdHgucm90YXRlKC0wLjUgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgtY2FudmFzLmhlaWdodCwgMCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gLy8gVGhpcyBpcyBhIGJ1Z2ZpeCBmb3IgaU9TJyBzY2FsaW5nIGJ1Zy5cblxuXG4gICAgICAgICAgZHJhd0ltYWdlSU9TRml4KGN0eCwgaW1nLCByZXNpemVJbmZvLnNyY1ggIT0gbnVsbCA/IHJlc2l6ZUluZm8uc3JjWCA6IDAsIHJlc2l6ZUluZm8uc3JjWSAhPSBudWxsID8gcmVzaXplSW5mby5zcmNZIDogMCwgcmVzaXplSW5mby5zcmNXaWR0aCwgcmVzaXplSW5mby5zcmNIZWlnaHQsIHJlc2l6ZUluZm8udHJnWCAhPSBudWxsID8gcmVzaXplSW5mby50cmdYIDogMCwgcmVzaXplSW5mby50cmdZICE9IG51bGwgPyByZXNpemVJbmZvLnRyZ1kgOiAwLCByZXNpemVJbmZvLnRyZ1dpZHRoLCByZXNpemVJbmZvLnRyZ0hlaWdodCk7XG4gICAgICAgICAgdmFyIHRodW1ibmFpbCA9IGNhbnZhcy50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIik7XG5cbiAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRodW1ibmFpbCwgY2FudmFzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgaW1nLm9uZXJyb3IgPSBjYWxsYmFjaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGltZy5zcmMgPSBmaWxlLmRhdGFVUkw7XG4gICAgfSAvLyBHb2VzIHRocm91Z2ggdGhlIHF1ZXVlIGFuZCBwcm9jZXNzZXMgZmlsZXMgaWYgdGhlcmUgYXJlbid0IHRvbyBtYW55IGFscmVhZHkuXG5cbiAgfSwge1xuICAgIGtleTogXCJwcm9jZXNzUXVldWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKCkge1xuICAgICAgdmFyIHBhcmFsbGVsVXBsb2FkcyA9IHRoaXMub3B0aW9ucy5wYXJhbGxlbFVwbG9hZHM7XG4gICAgICB2YXIgcHJvY2Vzc2luZ0xlbmd0aCA9IHRoaXMuZ2V0VXBsb2FkaW5nRmlsZXMoKS5sZW5ndGg7XG4gICAgICB2YXIgaSA9IHByb2Nlc3NpbmdMZW5ndGg7IC8vIFRoZXJlIGFyZSBhbHJlYWR5IGF0IGxlYXN0IGFzIG1hbnkgZmlsZXMgdXBsb2FkaW5nIHRoYW4gc2hvdWxkIGJlXG5cbiAgICAgIGlmIChwcm9jZXNzaW5nTGVuZ3RoID49IHBhcmFsbGVsVXBsb2Fkcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBxdWV1ZWRGaWxlcyA9IHRoaXMuZ2V0UXVldWVkRmlsZXMoKTtcblxuICAgICAgaWYgKCEocXVldWVkRmlsZXMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB7XG4gICAgICAgIC8vIFRoZSBmaWxlcyBzaG91bGQgYmUgdXBsb2FkZWQgaW4gb25lIHJlcXVlc3RcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0ZpbGVzKHF1ZXVlZEZpbGVzLnNsaWNlKDAsIHBhcmFsbGVsVXBsb2FkcyAtIHByb2Nlc3NpbmdMZW5ndGgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChpIDwgcGFyYWxsZWxVcGxvYWRzKSB7XG4gICAgICAgICAgaWYgKCFxdWV1ZWRGaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IC8vIE5vdGhpbmcgbGVmdCB0byBwcm9jZXNzXG5cblxuICAgICAgICAgIHRoaXMucHJvY2Vzc0ZpbGUocXVldWVkRmlsZXMuc2hpZnQoKSk7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBXcmFwcGVyIGZvciBgcHJvY2Vzc0ZpbGVzYFxuXG4gIH0sIHtcbiAgICBrZXk6IFwicHJvY2Vzc0ZpbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZmlsZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0ZpbGVzKFtmaWxlXSk7XG4gICAgfSAvLyBMb2FkcyB0aGUgZmlsZSwgdGhlbiBjYWxscyBmaW5pc2hlZExvYWRpbmcoKVxuXG4gIH0sIHtcbiAgICBrZXk6IFwicHJvY2Vzc0ZpbGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3NGaWxlcyhmaWxlcykge1xuICAgICAgdmFyIF9pdGVyYXRvcjEwID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlcywgdHJ1ZSksXG4gICAgICAgICAgX3N0ZXAxMDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxMC5zKCk7ICEoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwMTAudmFsdWU7XG4gICAgICAgICAgZmlsZS5wcm9jZXNzaW5nID0gdHJ1ZTsgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuICAgICAgICAgIGZpbGUuc3RhdHVzID0gRHJvcHpvbmUuVVBMT0FESU5HO1xuICAgICAgICAgIHRoaXMuZW1pdChcInByb2Nlc3NpbmdcIiwgZmlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxMC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxMC5mKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwicHJvY2Vzc2luZ211bHRpcGxlXCIsIGZpbGVzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMudXBsb2FkRmlsZXMoZmlsZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0RmlsZXNXaXRoWGhyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRGaWxlc1dpdGhYaHIoeGhyKSB7XG4gICAgICB2YXIgZmlsZXM7XG4gICAgICByZXR1cm4gZmlsZXMgPSB0aGlzLmZpbGVzLmZpbHRlcihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gZmlsZS54aHIgPT09IHhocjtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2FuY2VscyB0aGUgZmlsZSB1cGxvYWQgYW5kIHNldHMgdGhlIHN0YXR1cyB0byBDQU5DRUxFRFxuICAgIC8vICoqaWYqKiB0aGUgZmlsZSBpcyBhY3R1YWxseSBiZWluZyB1cGxvYWRlZC5cbiAgICAvLyBJZiBpdCdzIHN0aWxsIGluIHRoZSBxdWV1ZSwgdGhlIGZpbGUgaXMgYmVpbmcgcmVtb3ZlZCBmcm9tIGl0IGFuZCB0aGUgc3RhdHVzXG4gICAgLy8gc2V0IHRvIENBTkNFTEVELlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2FuY2VsVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbFVwbG9hZChmaWxlKSB7XG4gICAgICBpZiAoZmlsZS5zdGF0dXMgPT09IERyb3B6b25lLlVQTE9BRElORykge1xuICAgICAgICB2YXIgZ3JvdXBlZEZpbGVzID0gdGhpcy5fZ2V0RmlsZXNXaXRoWGhyKGZpbGUueGhyKTtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yMTEgPSBkcm9wem9uZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGdyb3VwZWRGaWxlcywgdHJ1ZSksXG4gICAgICAgICAgICBfc3RlcDExO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IxMS5zKCk7ICEoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBncm91cGVkRmlsZSA9IF9zdGVwMTEudmFsdWU7XG4gICAgICAgICAgICBncm91cGVkRmlsZS5zdGF0dXMgPSBEcm9wem9uZS5DQU5DRUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjExLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IxMS5mKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGZpbGUueGhyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgZmlsZS54aHIuYWJvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfaXRlcmF0b3IxMiA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZ3JvdXBlZEZpbGVzLCB0cnVlKSxcbiAgICAgICAgICAgIF9zdGVwMTI7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjEyLnMoKTsgIShfc3RlcDEyID0gX2l0ZXJhdG9yMTIubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIF9ncm91cGVkRmlsZSA9IF9zdGVwMTIudmFsdWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjYW5jZWxlZFwiLCBfZ3JvdXBlZEZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTIuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjEyLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJjYW5jZWxlZG11bHRpcGxlXCIsIGdyb3VwZWRGaWxlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZmlsZS5zdGF0dXMgPT09IERyb3B6b25lLkFEREVEIHx8IGZpbGUuc3RhdHVzID09PSBEcm9wem9uZS5RVUVVRUQpIHtcbiAgICAgICAgZmlsZS5zdGF0dXMgPSBEcm9wem9uZS5DQU5DRUxFRDtcbiAgICAgICAgdGhpcy5lbWl0KFwiY2FuY2VsZWRcIiwgZmlsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSkge1xuICAgICAgICAgIHRoaXMuZW1pdChcImNhbmNlbGVkbXVsdGlwbGVcIiwgW2ZpbGVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Qcm9jZXNzUXVldWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc29sdmVPcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbihvcHRpb24pIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBsb2FkRmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGxvYWRGaWxlKGZpbGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwbG9hZEZpbGVzKFtmaWxlXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwbG9hZEZpbGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwbG9hZEZpbGVzKGZpbGVzKSB7XG4gICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX3RyYW5zZm9ybUZpbGVzKGZpbGVzLCBmdW5jdGlvbiAodHJhbnNmb3JtZWRGaWxlcykge1xuICAgICAgICBpZiAoX3RoaXMxNC5vcHRpb25zLmNodW5raW5nKSB7XG4gICAgICAgICAgLy8gQ2h1bmtpbmcgaXMgbm90IGFsbG93ZWQgdG8gYmUgdXNlZCB3aXRoIGB1cGxvYWRNdWx0aXBsZWAgc28gd2Uga25vd1xuICAgICAgICAgIC8vIHRoYXQgdGhlcmUgaXMgb25seSBfX29uZV9fZmlsZS5cbiAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRGaWxlID0gdHJhbnNmb3JtZWRGaWxlc1swXTtcbiAgICAgICAgICBmaWxlc1swXS51cGxvYWQuY2h1bmtlZCA9IF90aGlzMTQub3B0aW9ucy5jaHVua2luZyAmJiAoX3RoaXMxNC5vcHRpb25zLmZvcmNlQ2h1bmtpbmcgfHwgdHJhbnNmb3JtZWRGaWxlLnNpemUgPiBfdGhpczE0Lm9wdGlvbnMuY2h1bmtTaXplKTtcbiAgICAgICAgICBmaWxlc1swXS51cGxvYWQudG90YWxDaHVua0NvdW50ID0gTWF0aC5jZWlsKHRyYW5zZm9ybWVkRmlsZS5zaXplIC8gX3RoaXMxNC5vcHRpb25zLmNodW5rU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsZXNbMF0udXBsb2FkLmNodW5rZWQpIHtcbiAgICAgICAgICAvLyBUaGlzIGZpbGUgc2hvdWxkIGJlIHNlbnQgaW4gY2h1bmtzIVxuICAgICAgICAgIC8vIElmIHRoZSBjaHVua2luZyBvcHRpb24gaXMgc2V0LCB3ZSAqKmtub3cqKiB0aGF0IHRoZXJlIGNhbiBvbmx5IGJlICoqb25lKiogZmlsZSwgc2luY2VcbiAgICAgICAgICAvLyB1cGxvYWRNdWx0aXBsZSBpcyBub3QgYWxsb3dlZCB3aXRoIHRoaXMgb3B0aW9uLlxuICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbMF07XG4gICAgICAgICAgdmFyIF90cmFuc2Zvcm1lZEZpbGUgPSB0cmFuc2Zvcm1lZEZpbGVzWzBdO1xuICAgICAgICAgIHZhciBzdGFydGVkQ2h1bmtDb3VudCA9IDA7XG4gICAgICAgICAgZmlsZS51cGxvYWQuY2h1bmtzID0gW107XG5cbiAgICAgICAgICB2YXIgaGFuZGxlTmV4dENodW5rID0gZnVuY3Rpb24gaGFuZGxlTmV4dENodW5rKCkge1xuICAgICAgICAgICAgdmFyIGNodW5rSW5kZXggPSAwOyAvLyBGaW5kIHRoZSBuZXh0IGl0ZW0gaW4gZmlsZS51cGxvYWQuY2h1bmtzIHRoYXQgaXMgbm90IGRlZmluZWQgeWV0LlxuXG4gICAgICAgICAgICB3aGlsZSAoZmlsZS51cGxvYWQuY2h1bmtzW2NodW5rSW5kZXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY2h1bmtJbmRleCsrO1xuICAgICAgICAgICAgfSAvLyBUaGlzIG1lYW5zLCB0aGF0IGFsbCBjaHVua3MgaGF2ZSBhbHJlYWR5IGJlZW4gc3RhcnRlZC5cblxuXG4gICAgICAgICAgICBpZiAoY2h1bmtJbmRleCA+PSBmaWxlLnVwbG9hZC50b3RhbENodW5rQ291bnQpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXJ0ZWRDaHVua0NvdW50Kys7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBjaHVua0luZGV4ICogX3RoaXMxNC5vcHRpb25zLmNodW5rU2l6ZTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBNYXRoLm1pbihzdGFydCArIF90aGlzMTQub3B0aW9ucy5jaHVua1NpemUsIF90cmFuc2Zvcm1lZEZpbGUuc2l6ZSk7XG4gICAgICAgICAgICB2YXIgZGF0YUJsb2NrID0ge1xuICAgICAgICAgICAgICBuYW1lOiBfdGhpczE0Ll9nZXRQYXJhbU5hbWUoMCksXG4gICAgICAgICAgICAgIGRhdGE6IF90cmFuc2Zvcm1lZEZpbGUud2Via2l0U2xpY2UgPyBfdHJhbnNmb3JtZWRGaWxlLndlYmtpdFNsaWNlKHN0YXJ0LCBlbmQpIDogX3RyYW5zZm9ybWVkRmlsZS5zbGljZShzdGFydCwgZW5kKSxcbiAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGUudXBsb2FkLmZpbGVuYW1lLFxuICAgICAgICAgICAgICBjaHVua0luZGV4OiBjaHVua0luZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZmlsZS51cGxvYWQuY2h1bmtzW2NodW5rSW5kZXhdID0ge1xuICAgICAgICAgICAgICBmaWxlOiBmaWxlLFxuICAgICAgICAgICAgICBpbmRleDogY2h1bmtJbmRleCxcbiAgICAgICAgICAgICAgZGF0YUJsb2NrOiBkYXRhQmxvY2ssXG4gICAgICAgICAgICAgIC8vIEluIGNhc2Ugd2Ugd2FudCB0byByZXRyeS5cbiAgICAgICAgICAgICAgc3RhdHVzOiBEcm9wem9uZS5VUExPQURJTkcsXG4gICAgICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgICAgICByZXRyaWVzOiAwIC8vIFRoZSBudW1iZXIgb2YgdGltZXMgdGhpcyBibG9jayBoYXMgYmVlbiByZXRyaWVkLlxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfdGhpczE0Ll91cGxvYWREYXRhKGZpbGVzLCBbZGF0YUJsb2NrXSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZpbGUudXBsb2FkLmZpbmlzaGVkQ2h1bmtVcGxvYWQgPSBmdW5jdGlvbiAoY2h1bmssIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgYWxsRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2h1bmsuc3RhdHVzID0gRHJvcHpvbmUuU1VDQ0VTUzsgLy8gQ2xlYXIgdGhlIGRhdGEgZnJvbSB0aGUgY2h1bmtcblxuICAgICAgICAgICAgY2h1bmsuZGF0YUJsb2NrID0gbnVsbDsgLy8gTGVhdmluZyB0aGlzIHJlZmVyZW5jZSB0byB4aHIgaW50YWN0IGhlcmUgd2lsbCBjYXVzZSBtZW1vcnkgbGVha3MgaW4gc29tZSBicm93c2Vyc1xuXG4gICAgICAgICAgICBjaHVuay54aHIgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGUudXBsb2FkLnRvdGFsQ2h1bmtDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChmaWxlLnVwbG9hZC5jaHVua3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVOZXh0Q2h1bmsoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmaWxlLnVwbG9hZC5jaHVua3NbaV0uc3RhdHVzICE9PSBEcm9wem9uZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICAgICAgYWxsRmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWxsRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgX3RoaXMxNC5vcHRpb25zLmNodW5rc1VwbG9hZGVkKGZpbGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpczE0Ll9maW5pc2hlZChmaWxlcywgcmVzcG9uc2UsIG51bGwpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKF90aGlzMTQub3B0aW9ucy5wYXJhbGxlbENodW5rVXBsb2Fkcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlLnVwbG9hZC50b3RhbENodW5rQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICBoYW5kbGVOZXh0Q2h1bmsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlTmV4dENodW5rKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBkYXRhQmxvY2tzID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBmaWxlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgICBkYXRhQmxvY2tzW19pMl0gPSB7XG4gICAgICAgICAgICAgIG5hbWU6IF90aGlzMTQuX2dldFBhcmFtTmFtZShfaTIpLFxuICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZEZpbGVzW19pMl0sXG4gICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlc1tfaTJdLnVwbG9hZC5maWxlbmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczE0Ll91cGxvYWREYXRhKGZpbGVzLCBkYXRhQmxvY2tzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSAvLy8gUmV0dXJucyB0aGUgcmlnaHQgY2h1bmsgZm9yIGdpdmVuIGZpbGUgYW5kIHhoclxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldENodW5rXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDaHVuayhmaWxlLCB4aHIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZS51cGxvYWQudG90YWxDaHVua0NvdW50OyBpKyspIHtcbiAgICAgICAgaWYgKGZpbGUudXBsb2FkLmNodW5rc1tpXSAhPT0gdW5kZWZpbmVkICYmIGZpbGUudXBsb2FkLmNodW5rc1tpXS54aHIgPT09IHhocikge1xuICAgICAgICAgIHJldHVybiBmaWxlLnVwbG9hZC5jaHVua3NbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIFRoaXMgZnVuY3Rpb24gYWN0dWFsbHkgdXBsb2FkcyB0aGUgZmlsZShzKSB0byB0aGUgc2VydmVyLlxuICAgIC8vIElmIGRhdGFCbG9ja3MgY29udGFpbnMgdGhlIGFjdHVhbCBkYXRhIHRvIHVwbG9hZCAobWVhbmluZywgdGhhdCB0aGlzIGNvdWxkIGVpdGhlciBiZSB0cmFuc2Zvcm1lZFxuICAgIC8vIGZpbGVzLCBvciBpbmRpdmlkdWFsIGNodW5rcyBmb3IgY2h1bmtlZCB1cGxvYWQpLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3VwbG9hZERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwbG9hZERhdGEoZmlsZXMsIGRhdGFCbG9ja3MpIHtcbiAgICAgIHZhciBfdGhpczE1ID0gdGhpcztcblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyAvLyBQdXQgdGhlIHhociBvYmplY3QgaW4gdGhlIGZpbGUgb2JqZWN0cyB0byBiZSBhYmxlIHRvIHJlZmVyZW5jZSBpdCBsYXRlci5cblxuICAgICAgdmFyIF9pdGVyYXRvcjEzID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlcywgdHJ1ZSksXG4gICAgICAgICAgX3N0ZXAxMztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxMy5zKCk7ICEoX3N0ZXAxMyA9IF9pdGVyYXRvcjEzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwMTMudmFsdWU7XG4gICAgICAgICAgZmlsZS54aHIgPSB4aHI7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxMy5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxMy5mKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWxlc1swXS51cGxvYWQuY2h1bmtlZCkge1xuICAgICAgICAvLyBQdXQgdGhlIHhociBvYmplY3QgaW4gdGhlIHJpZ2h0IGNodW5rIG9iamVjdCwgc28gaXQgY2FuIGJlIGFzc29jaWF0ZWQgbGF0ZXIsIGFuZCBmb3VuZCB3aXRoIF9nZXRDaHVua1xuICAgICAgICBmaWxlc1swXS51cGxvYWQuY2h1bmtzW2RhdGFCbG9ja3NbMF0uY2h1bmtJbmRleF0ueGhyID0geGhyO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWV0aG9kID0gdGhpcy5yZXNvbHZlT3B0aW9uKHRoaXMub3B0aW9ucy5tZXRob2QsIGZpbGVzKTtcbiAgICAgIHZhciB1cmwgPSB0aGlzLnJlc29sdmVPcHRpb24odGhpcy5vcHRpb25zLnVybCwgZmlsZXMpO1xuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpOyAvLyBTZXR0aW5nIHRoZSB0aW1lb3V0IGFmdGVyIG9wZW4gYmVjYXVzZSBvZiBJRTExIGlzc3VlOiBodHRwczovL2dpdGxhYi5jb20vbWVuby9kcm9wem9uZS9pc3N1ZXMvOFxuXG4gICAgICB2YXIgdGltZW91dCA9IHRoaXMucmVzb2x2ZU9wdGlvbih0aGlzLm9wdGlvbnMudGltZW91dCwgZmlsZXMpO1xuICAgICAgaWYgKHRpbWVvdXQpIHhoci50aW1lb3V0ID0gdGhpcy5yZXNvbHZlT3B0aW9uKHRoaXMub3B0aW9ucy50aW1lb3V0LCBmaWxlcyk7IC8vIEhhcyB0byBiZSBhZnRlciBgLm9wZW4oKWAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZW55by9kcm9wem9uZS9pc3N1ZXMvMTc5XG5cbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSAhIXRoaXMub3B0aW9ucy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpczE1Ll9maW5pc2hlZFVwbG9hZGluZyhmaWxlcywgeGhyLCBlKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMTUuX2hhbmRsZVVwbG9hZEVycm9yKGZpbGVzLCB4aHIsIFwiUmVxdWVzdCB0aW1lZG91dCBhZnRlciBcIi5jb25jYXQoX3RoaXMxNS5vcHRpb25zLnRpbWVvdXQgLyAxMDAwLCBcIiBzZWNvbmRzXCIpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczE1Ll9oYW5kbGVVcGxvYWRFcnJvcihmaWxlcywgeGhyKTtcbiAgICAgIH07IC8vIFNvbWUgYnJvd3NlcnMgZG8gbm90IGhhdmUgdGhlIC51cGxvYWQgcHJvcGVydHlcblxuXG4gICAgICB2YXIgcHJvZ3Jlc3NPYmogPSB4aHIudXBsb2FkICE9IG51bGwgPyB4aHIudXBsb2FkIDogeGhyO1xuXG4gICAgICBwcm9ncmVzc09iai5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTUuX3VwZGF0ZUZpbGVzVXBsb2FkUHJvZ3Jlc3MoZmlsZXMsIHhociwgZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJDYWNoZS1Db250cm9sXCI6IFwibm8tY2FjaGVcIixcbiAgICAgICAgXCJYLVJlcXVlc3RlZC1XaXRoXCI6IFwiWE1MSHR0cFJlcXVlc3RcIlxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIERyb3B6b25lLmV4dGVuZChoZWFkZXJzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGhlYWRlck5hbWUgaW4gaGVhZGVycykge1xuICAgICAgICB2YXIgaGVhZGVyVmFsdWUgPSBoZWFkZXJzW2hlYWRlck5hbWVdO1xuXG4gICAgICAgIGlmIChoZWFkZXJWYWx1ZSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlck5hbWUsIGhlYWRlclZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsgLy8gQWRkaW5nIGFsbCBAb3B0aW9ucyBwYXJhbWV0ZXJzXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyYW1zKSB7XG4gICAgICAgIHZhciBhZGRpdGlvbmFsUGFyYW1zID0gdGhpcy5vcHRpb25zLnBhcmFtcztcblxuICAgICAgICBpZiAodHlwZW9mIGFkZGl0aW9uYWxQYXJhbXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGFkZGl0aW9uYWxQYXJhbXMgPSBhZGRpdGlvbmFsUGFyYW1zLmNhbGwodGhpcywgZmlsZXMsIHhociwgZmlsZXNbMF0udXBsb2FkLmNodW5rZWQgPyB0aGlzLl9nZXRDaHVuayhmaWxlc1swXSwgeGhyKSA6IG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxQYXJhbXMpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBhZGRpdGlvbmFsUGFyYW1zW2tleV07XG5cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIFRoZSBhZGRpdGlvbmFsIHBhcmFtZXRlciBjb250YWlucyBhbiBhcnJheSxcbiAgICAgICAgICAgIC8vIHNvIGxldHMgaXRlcmF0ZSBvdmVyIGl0IHRvIGF0dGFjaCBlYWNoIHZhbHVlXG4gICAgICAgICAgICAvLyBpbmRpdmlkdWFsbHkuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBMZXQgdGhlIHVzZXIgYWRkIGFkZGl0aW9uYWwgZGF0YSBpZiBuZWNlc3NhcnlcblxuXG4gICAgICB2YXIgX2l0ZXJhdG9yMTQgPSBkcm9wem9uZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGZpbGVzLCB0cnVlKSxcbiAgICAgICAgICBfc3RlcDE0O1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjE0LnMoKTsgIShfc3RlcDE0ID0gX2l0ZXJhdG9yMTQubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBfZmlsZSA9IF9zdGVwMTQudmFsdWU7XG4gICAgICAgICAgdGhpcy5lbWl0KFwic2VuZGluZ1wiLCBfZmlsZSwgeGhyLCBmb3JtRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IxNC5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IxNC5mKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwic2VuZGluZ211bHRpcGxlXCIsIGZpbGVzLCB4aHIsIGZvcm1EYXRhKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWRkRm9ybUVsZW1lbnREYXRhKGZvcm1EYXRhKTsgLy8gRmluYWxseSBhZGQgdGhlIGZpbGVzXG4gICAgICAvLyBIYXMgdG8gYmUgbGFzdCBiZWNhdXNlIHNvbWUgc2VydmVycyAoZWc6IFMzKSBleHBlY3QgdGhlIGZpbGUgdG8gYmUgdGhlIGxhc3QgcGFyYW1ldGVyXG5cblxuICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgZGF0YUJsb2Nrcy5sZW5ndGg7IF9pMysrKSB7XG4gICAgICAgIHZhciBkYXRhQmxvY2sgPSBkYXRhQmxvY2tzW19pM107XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChkYXRhQmxvY2submFtZSwgZGF0YUJsb2NrLmRhdGEsIGRhdGFCbG9jay5maWxlbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3VibWl0UmVxdWVzdCh4aHIsIGZvcm1EYXRhLCBmaWxlcyk7XG4gICAgfSAvLyBUcmFuc2Zvcm1zIGFsbCBmaWxlcyB3aXRoIHRoaXMub3B0aW9ucy50cmFuc2Zvcm1GaWxlIGFuZCBpbnZva2VzIGRvbmUgd2l0aCB0aGUgdHJhbnNmb3JtZWQgZmlsZXMgd2hlbiBkb25lLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3RyYW5zZm9ybUZpbGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF90cmFuc2Zvcm1GaWxlcyhmaWxlcywgZG9uZSkge1xuICAgICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNmb3JtZWRGaWxlcyA9IFtdOyAvLyBDbHVtc3kgd2F5IG9mIGhhbmRsaW5nIGFzeW5jaHJvbm91cyBjYWxscywgdW50aWwgSSBnZXQgdG8gYWRkIGEgcHJvcGVyIEZ1dHVyZSBsaWJyYXJ5LlxuXG4gICAgICB2YXIgZG9uZUNvdW50ZXIgPSAwO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICAgIF90aGlzMTYub3B0aW9ucy50cmFuc2Zvcm1GaWxlLmNhbGwoX3RoaXMxNiwgZmlsZXNbaV0sIGZ1bmN0aW9uICh0cmFuc2Zvcm1lZEZpbGUpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1lZEZpbGVzW2ldID0gdHJhbnNmb3JtZWRGaWxlO1xuXG4gICAgICAgICAgaWYgKCsrZG9uZUNvdW50ZXIgPT09IGZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZG9uZSh0cmFuc2Zvcm1lZEZpbGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBfbG9vcChpKTtcbiAgICAgIH1cbiAgICB9IC8vIFRha2VzIGNhcmUgb2YgYWRkaW5nIG90aGVyIGlucHV0IGVsZW1lbnRzIG9mIHRoZSBmb3JtIHRvIHRoZSBBSkFYIHJlcXVlc3RcblxuICB9LCB7XG4gICAga2V5OiBcIl9hZGRGb3JtRWxlbWVudERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZEZvcm1FbGVtZW50RGF0YShmb3JtRGF0YSkge1xuICAgICAgLy8gVGFrZSBjYXJlIG9mIG90aGVyIGlucHV0IGVsZW1lbnRzXG4gICAgICBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUgPT09IFwiRk9STVwiKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3IxNSA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgYnV0dG9uXCIpLCB0cnVlKSxcbiAgICAgICAgICAgIF9zdGVwMTU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE1LnMoKTsgIShfc3RlcDE1ID0gX2l0ZXJhdG9yMTUubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gX3N0ZXAxNS52YWx1ZTtcbiAgICAgICAgICAgIHZhciBpbnB1dE5hbWUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgICAgICAgICAgdmFyIGlucHV0VHlwZSA9IGlucHV0LmdldEF0dHJpYnV0ZShcInR5cGVcIik7XG4gICAgICAgICAgICBpZiAoaW5wdXRUeXBlKSBpbnB1dFR5cGUgPSBpbnB1dFR5cGUudG9Mb3dlckNhc2UoKTsgLy8gSWYgdGhlIGlucHV0IGRvZXNuJ3QgaGF2ZSBhIG5hbWUsIHdlIGNhbid0IHVzZSBpdC5cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dE5hbWUgPT09IFwidW5kZWZpbmVkXCIgfHwgaW5wdXROYW1lID09PSBudWxsKSBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09IFwiU0VMRUNUXCIgJiYgaW5wdXQuaGFzQXR0cmlidXRlKFwibXVsdGlwbGVcIikpIHtcbiAgICAgICAgICAgICAgLy8gUG9zc2libHkgbXVsdGlwbGUgdmFsdWVzXG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3IxNiA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoaW5wdXQub3B0aW9ucywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICBfc3RlcDE2O1xuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IxNi5zKCk7ICEoX3N0ZXAxNiA9IF9pdGVyYXRvcjE2Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBfc3RlcDE2LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChpbnB1dE5hbWUsIG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IxNi5lKGVycik7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTYuZigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpbnB1dFR5cGUgfHwgaW5wdXRUeXBlICE9PSBcImNoZWNrYm94XCIgJiYgaW5wdXRUeXBlICE9PSBcInJhZGlvXCIgfHwgaW5wdXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoaW5wdXROYW1lLCBpbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IxNS5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTUuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBJbnZva2VkIHdoZW4gdGhlcmUgaXMgbmV3IHByb2dyZXNzIGluZm9ybWF0aW9uIGFib3V0IGdpdmVuIGZpbGVzLlxuICAgIC8vIElmIGUgaXMgbm90IHByb3ZpZGVkLCBpdCBpcyBhc3N1bWVkIHRoYXQgdGhlIHVwbG9hZCBpcyBmaW5pc2hlZC5cblxuICB9LCB7XG4gICAga2V5OiBcIl91cGRhdGVGaWxlc1VwbG9hZFByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVGaWxlc1VwbG9hZFByb2dyZXNzKGZpbGVzLCB4aHIsIGUpIHtcbiAgICAgIGlmICghZmlsZXNbMF0udXBsb2FkLmNodW5rZWQpIHtcbiAgICAgICAgLy8gSGFuZGxlIGZpbGUgdXBsb2FkcyB3aXRob3V0IGNodW5raW5nXG4gICAgICAgIHZhciBfaXRlcmF0b3IxNyA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZmlsZXMsIHRydWUpLFxuICAgICAgICAgICAgX3N0ZXAxNztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTcucygpOyAhKF9zdGVwMTcgPSBfaXRlcmF0b3IxNy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwMTcudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaWxlLnVwbG9hZC50b3RhbCAmJiBmaWxlLnVwbG9hZC5ieXRlc1NlbnQgJiYgZmlsZS51cGxvYWQuYnl0ZXNTZW50ID09IGZpbGUudXBsb2FkLnRvdGFsKSB7XG4gICAgICAgICAgICAgIC8vIElmIGJvdGgsIHRoZSBgdG90YWxgIGFuZCBgYnl0ZXNTZW50YCBoYXZlIGFscmVhZHkgYmVlbiBzZXQsIGFuZFxuICAgICAgICAgICAgICAvLyB0aGV5IGFyZSBlcXVhbCAobWVhbmluZyBwcm9ncmVzcyBpcyBhdCAxMDAlKSwgd2UgY2FuIHNraXAgdGhpc1xuICAgICAgICAgICAgICAvLyBmaWxlLCBzaW5jZSBhbiB1cGxvYWQgcHJvZ3Jlc3Mgc2hvdWxkbid0IGdvIGRvd24uXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5wcm9ncmVzcyA9IDEwMCAqIGUubG9hZGVkIC8gZS50b3RhbDtcbiAgICAgICAgICAgICAgZmlsZS51cGxvYWQudG90YWwgPSBlLnRvdGFsO1xuICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5ieXRlc1NlbnQgPSBlLmxvYWRlZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIE5vIGV2ZW50LCBzbyB3ZSdyZSBhdCAxMDAlXG4gICAgICAgICAgICAgIGZpbGUudXBsb2FkLnByb2dyZXNzID0gMTAwO1xuICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5ieXRlc1NlbnQgPSBmaWxlLnVwbG9hZC50b3RhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBsb2FkcHJvZ3Jlc3NcIiwgZmlsZSwgZmlsZS51cGxvYWQucHJvZ3Jlc3MsIGZpbGUudXBsb2FkLmJ5dGVzU2VudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IxNy5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTcuZigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBIYW5kbGUgY2h1bmtlZCBmaWxlIHVwbG9hZHNcbiAgICAgICAgLy8gQ2h1bmtlZCB1cGxvYWQgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB1cGxvYWRpbmcgbXVsdGlwbGUgZmlsZXMgaW4gb25lXG4gICAgICAgIC8vIHJlcXVlc3QsIHNvIHdlIGtub3cgdGhlcmUncyBvbmx5IG9uZSBmaWxlLlxuICAgICAgICB2YXIgX2ZpbGUyID0gZmlsZXNbMF07IC8vIFNpbmNlIHRoaXMgaXMgYSBjaHVua2VkIHVwbG9hZCwgd2UgbmVlZCB0byB1cGRhdGUgdGhlIGFwcHJvcHJpYXRlIGNodW5rXG4gICAgICAgIC8vIHByb2dyZXNzLlxuXG4gICAgICAgIHZhciBjaHVuayA9IHRoaXMuX2dldENodW5rKF9maWxlMiwgeGhyKTtcblxuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgIGNodW5rLnByb2dyZXNzID0gMTAwICogZS5sb2FkZWQgLyBlLnRvdGFsO1xuICAgICAgICAgIGNodW5rLnRvdGFsID0gZS50b3RhbDtcbiAgICAgICAgICBjaHVuay5ieXRlc1NlbnQgPSBlLmxvYWRlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBObyBldmVudCwgc28gd2UncmUgYXQgMTAwJVxuICAgICAgICAgIGNodW5rLnByb2dyZXNzID0gMTAwO1xuICAgICAgICAgIGNodW5rLmJ5dGVzU2VudCA9IGNodW5rLnRvdGFsO1xuICAgICAgICB9IC8vIE5vdyB0YWxseSB0aGUgKmZpbGUqIHVwbG9hZCBwcm9ncmVzcyBmcm9tIGl0cyBpbmRpdmlkdWFsIGNodW5rc1xuXG5cbiAgICAgICAgX2ZpbGUyLnVwbG9hZC5wcm9ncmVzcyA9IDA7XG4gICAgICAgIF9maWxlMi51cGxvYWQudG90YWwgPSAwO1xuICAgICAgICBfZmlsZTIudXBsb2FkLmJ5dGVzU2VudCA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfZmlsZTIudXBsb2FkLnRvdGFsQ2h1bmtDb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKF9maWxlMi51cGxvYWQuY2h1bmtzW2ldICYmIHR5cGVvZiBfZmlsZTIudXBsb2FkLmNodW5rc1tpXS5wcm9ncmVzcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgX2ZpbGUyLnVwbG9hZC5wcm9ncmVzcyArPSBfZmlsZTIudXBsb2FkLmNodW5rc1tpXS5wcm9ncmVzcztcbiAgICAgICAgICAgIF9maWxlMi51cGxvYWQudG90YWwgKz0gX2ZpbGUyLnVwbG9hZC5jaHVua3NbaV0udG90YWw7XG4gICAgICAgICAgICBfZmlsZTIudXBsb2FkLmJ5dGVzU2VudCArPSBfZmlsZTIudXBsb2FkLmNodW5rc1tpXS5ieXRlc1NlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFNpbmNlIHRoZSBwcm9jZXNzIGlzIGEgcGVyY2VudGFnZSwgd2UgbmVlZCB0byBkaXZpZGUgYnkgdGhlIGFtb3VudCBvZlxuICAgICAgICAvLyBjaHVua3Mgd2UndmUgdXNlZC5cblxuXG4gICAgICAgIF9maWxlMi51cGxvYWQucHJvZ3Jlc3MgPSBfZmlsZTIudXBsb2FkLnByb2dyZXNzIC8gX2ZpbGUyLnVwbG9hZC50b3RhbENodW5rQ291bnQ7XG4gICAgICAgIHRoaXMuZW1pdChcInVwbG9hZHByb2dyZXNzXCIsIF9maWxlMiwgX2ZpbGUyLnVwbG9hZC5wcm9ncmVzcywgX2ZpbGUyLnVwbG9hZC5ieXRlc1NlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZmluaXNoZWRVcGxvYWRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmlzaGVkVXBsb2FkaW5nKGZpbGVzLCB4aHIsIGUpIHtcbiAgICAgIHZhciByZXNwb25zZTtcblxuICAgICAgaWYgKGZpbGVzWzBdLnN0YXR1cyA9PT0gRHJvcHpvbmUuQ0FOQ0VMRUQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSAhPT0gXCJhcnJheWJ1ZmZlclwiICYmIHhoci5yZXNwb25zZVR5cGUgIT09IFwiYmxvYlwiKSB7XG4gICAgICAgIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dDtcblxuICAgICAgICBpZiAoeGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiY29udGVudC10eXBlXCIpICYmIH54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJjb250ZW50LXR5cGVcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL2pzb25cIikpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBcIkludmFsaWQgSlNPTiByZXNwb25zZSBmcm9tIHNlcnZlci5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdXBkYXRlRmlsZXNVcGxvYWRQcm9ncmVzcyhmaWxlcywgeGhyKTtcblxuICAgICAgaWYgKCEoMjAwIDw9IHhoci5zdGF0dXMgJiYgeGhyLnN0YXR1cyA8IDMwMCkpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlVXBsb2FkRXJyb3IoZmlsZXMsIHhociwgcmVzcG9uc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZpbGVzWzBdLnVwbG9hZC5jaHVua2VkKSB7XG4gICAgICAgICAgZmlsZXNbMF0udXBsb2FkLmZpbmlzaGVkQ2h1bmtVcGxvYWQodGhpcy5fZ2V0Q2h1bmsoZmlsZXNbMF0sIHhociksIHJlc3BvbnNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9maW5pc2hlZChmaWxlcywgcmVzcG9uc2UsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVVcGxvYWRFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlVXBsb2FkRXJyb3IoZmlsZXMsIHhociwgcmVzcG9uc2UpIHtcbiAgICAgIGlmIChmaWxlc1swXS5zdGF0dXMgPT09IERyb3B6b25lLkNBTkNFTEVEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpbGVzWzBdLnVwbG9hZC5jaHVua2VkICYmIHRoaXMub3B0aW9ucy5yZXRyeUNodW5rcykge1xuICAgICAgICB2YXIgY2h1bmsgPSB0aGlzLl9nZXRDaHVuayhmaWxlc1swXSwgeGhyKTtcblxuICAgICAgICBpZiAoY2h1bmsucmV0cmllcysrIDwgdGhpcy5vcHRpb25zLnJldHJ5Q2h1bmtzTGltaXQpIHtcbiAgICAgICAgICB0aGlzLl91cGxvYWREYXRhKGZpbGVzLCBbY2h1bmsuZGF0YUJsb2NrXSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiUmV0cmllZCB0aGlzIGNodW5rIHRvbyBvZnRlbi4gR2l2aW5nIHVwLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lcnJvclByb2Nlc3NpbmcoZmlsZXMsIHJlc3BvbnNlIHx8IHRoaXMub3B0aW9ucy5kaWN0UmVzcG9uc2VFcnJvci5yZXBsYWNlKFwie3tzdGF0dXNDb2RlfX1cIiwgeGhyLnN0YXR1cyksIHhocik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN1Ym1pdFJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VibWl0UmVxdWVzdCh4aHIsIGZvcm1EYXRhLCBmaWxlcykge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9IDEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiQ2Fubm90IHNlbmQgdGhpcyByZXF1ZXN0IGJlY2F1c2UgdGhlIFhNTEh0dHBSZXF1ZXN0LnJlYWR5U3RhdGUgaXMgbm90IE9QRU5FRC5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICAgIH0gLy8gQ2FsbGVkIGludGVybmFsbHkgd2hlbiBwcm9jZXNzaW5nIGlzIGZpbmlzaGVkLlxuICAgIC8vIEluZGl2aWR1YWwgY2FsbGJhY2tzIGhhdmUgdG8gYmUgY2FsbGVkIGluIHRoZSBhcHByb3ByaWF0ZSBzZWN0aW9ucy5cblxuICB9LCB7XG4gICAga2V5OiBcIl9maW5pc2hlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluaXNoZWQoZmlsZXMsIHJlc3BvbnNlVGV4dCwgZSkge1xuICAgICAgdmFyIF9pdGVyYXRvcjE4ID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihmaWxlcywgdHJ1ZSksXG4gICAgICAgICAgX3N0ZXAxODtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IxOC5zKCk7ICEoX3N0ZXAxOCA9IF9pdGVyYXRvcjE4Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwMTgudmFsdWU7XG4gICAgICAgICAgZmlsZS5zdGF0dXMgPSBEcm9wem9uZS5TVUNDRVNTO1xuICAgICAgICAgIHRoaXMuZW1pdChcInN1Y2Nlc3NcIiwgZmlsZSwgcmVzcG9uc2VUZXh0LCBlKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZVwiLCBmaWxlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjE4LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjE4LmYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSkge1xuICAgICAgICB0aGlzLmVtaXQoXCJzdWNjZXNzbXVsdGlwbGVcIiwgZmlsZXMsIHJlc3BvbnNlVGV4dCwgZSk7XG4gICAgICAgIHRoaXMuZW1pdChcImNvbXBsZXRlbXVsdGlwbGVcIiwgZmlsZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Qcm9jZXNzUXVldWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG4gICAgICB9XG4gICAgfSAvLyBDYWxsZWQgaW50ZXJuYWxseSB3aGVuIHByb2Nlc3NpbmcgaXMgZmluaXNoZWQuXG4gICAgLy8gSW5kaXZpZHVhbCBjYWxsYmFja3MgaGF2ZSB0byBiZSBjYWxsZWQgaW4gdGhlIGFwcHJvcHJpYXRlIHNlY3Rpb25zLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2Vycm9yUHJvY2Vzc2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXJyb3JQcm9jZXNzaW5nKGZpbGVzLCBtZXNzYWdlLCB4aHIpIHtcbiAgICAgIHZhciBfaXRlcmF0b3IxOSA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZmlsZXMsIHRydWUpLFxuICAgICAgICAgIF9zdGVwMTk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMTkucygpOyAhKF9zdGVwMTkgPSBfaXRlcmF0b3IxOS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcDE5LnZhbHVlO1xuICAgICAgICAgIGZpbGUuc3RhdHVzID0gRHJvcHpvbmUuRVJST1I7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZmlsZSwgbWVzc2FnZSwgeGhyKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZVwiLCBmaWxlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjE5LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjE5LmYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSkge1xuICAgICAgICB0aGlzLmVtaXQoXCJlcnJvcm11bHRpcGxlXCIsIGZpbGVzLCBtZXNzYWdlLCB4aHIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZW11bHRpcGxlXCIsIGZpbGVzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUHJvY2Vzc1F1ZXVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NRdWV1ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImluaXRDbGFzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0Q2xhc3MoKSB7XG4gICAgICAvLyBFeHBvc2luZyB0aGUgZW1pdHRlciBjbGFzcywgbWFpbmx5IGZvciB0ZXN0c1xuICAgICAgdGhpcy5wcm90b3R5cGUuRW1pdHRlciA9IEVtaXR0ZXI7XG4gICAgICAvKlxuICAgICAgIFRoaXMgaXMgYSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgZXZlbnRzIHlvdSBjYW4gcmVnaXN0ZXIgb24gYSBkcm9wem9uZSBvYmplY3QuXG4gICAgICAgIFlvdSBjYW4gcmVnaXN0ZXIgYW4gZXZlbnQgaGFuZGxlciBsaWtlIHRoaXM6XG4gICAgICAgIGRyb3B6b25lLm9uKFwiZHJhZ0VudGVyXCIsIGZ1bmN0aW9uKCkgeyB9KTtcbiAgICAgICAgKi9cblxuICAgICAgdGhpcy5wcm90b3R5cGUuZXZlbnRzID0gW1wiZHJvcFwiLCBcImRyYWdzdGFydFwiLCBcImRyYWdlbmRcIiwgXCJkcmFnZW50ZXJcIiwgXCJkcmFnb3ZlclwiLCBcImRyYWdsZWF2ZVwiLCBcImFkZGVkZmlsZVwiLCBcImFkZGVkZmlsZXNcIiwgXCJyZW1vdmVkZmlsZVwiLCBcInRodW1ibmFpbFwiLCBcImVycm9yXCIsIFwiZXJyb3JtdWx0aXBsZVwiLCBcInByb2Nlc3NpbmdcIiwgXCJwcm9jZXNzaW5nbXVsdGlwbGVcIiwgXCJ1cGxvYWRwcm9ncmVzc1wiLCBcInRvdGFsdXBsb2FkcHJvZ3Jlc3NcIiwgXCJzZW5kaW5nXCIsIFwic2VuZGluZ211bHRpcGxlXCIsIFwic3VjY2Vzc1wiLCBcInN1Y2Nlc3NtdWx0aXBsZVwiLCBcImNhbmNlbGVkXCIsIFwiY2FuY2VsZWRtdWx0aXBsZVwiLCBcImNvbXBsZXRlXCIsIFwiY29tcGxldGVtdWx0aXBsZVwiLCBcInJlc2V0XCIsIFwibWF4ZmlsZXNleGNlZWRlZFwiLCBcIm1heGZpbGVzcmVhY2hlZFwiLCBcInF1ZXVlY29tcGxldGVcIl07XG4gICAgICB0aGlzLnByb3RvdHlwZS5fdGh1bWJuYWlsUXVldWUgPSBbXTtcbiAgICAgIHRoaXMucHJvdG90eXBlLl9wcm9jZXNzaW5nVGh1bWJuYWlsID0gZmFsc2U7XG4gICAgfSAvLyBnbG9iYWwgdXRpbGl0eVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0ZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgb2JqZWN0cyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIG9iamVjdHNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pNCA9IDAsIF9vYmplY3RzID0gb2JqZWN0czsgX2k0IDwgX29iamVjdHMubGVuZ3RoOyBfaTQrKykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gX29iamVjdHNbX2k0XTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgdmFyIHZhbCA9IG9iamVjdFtrZXldO1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInV1aWR2NFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1dWlkdjQoKSB7XG4gICAgICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCxcbiAgICAgICAgICAgIHYgPSBjID09PSBcInhcIiA/IHIgOiByICYgMHgzIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcHpvbmU7XG59KEVtaXR0ZXIpO1xuXG5cbkRyb3B6b25lLmluaXRDbGFzcygpO1xuRHJvcHpvbmUudmVyc2lvbiA9IFwiNS45LjNcIjsgLy8gVGhpcyBpcyBhIG1hcCBvZiBvcHRpb25zIGZvciB5b3VyIGRpZmZlcmVudCBkcm9wem9uZXMuIEFkZCBjb25maWd1cmF0aW9uc1xuLy8gdG8gdGhpcyBvYmplY3QgZm9yIHlvdXIgZGlmZmVyZW50IGRyb3B6b25lIGVsZW1lbnMuXG4vL1xuLy8gRXhhbXBsZTpcbi8vXG4vLyAgICAgRHJvcHpvbmUub3B0aW9ucy5teURyb3B6b25lRWxlbWVudElkID0geyBtYXhGaWxlc2l6ZTogMSB9O1xuLy9cbi8vIFRvIGRpc2FibGUgYXV0b0Rpc2NvdmVyIGZvciBhIHNwZWNpZmljIGVsZW1lbnQsIHlvdSBjYW4gc2V0IGBmYWxzZWAgYXMgYW4gb3B0aW9uOlxuLy9cbi8vICAgICBEcm9wem9uZS5vcHRpb25zLm15RGlzYWJsZWRFbGVtZW50SWQgPSBmYWxzZTtcbi8vXG4vLyBBbmQgaW4gaHRtbDpcbi8vXG4vLyAgICAgPGZvcm0gYWN0aW9uPVwiL3VwbG9hZFwiIGlkPVwibXktZHJvcHpvbmUtZWxlbWVudC1pZFwiIGNsYXNzPVwiZHJvcHpvbmVcIj48L2Zvcm0+XG5cbkRyb3B6b25lLm9wdGlvbnMgPSB7fTsgLy8gUmV0dXJucyB0aGUgb3B0aW9ucyBmb3IgYW4gZWxlbWVudCBvciB1bmRlZmluZWQgaWYgbm9uZSBhdmFpbGFibGUuXG5cbkRyb3B6b25lLm9wdGlvbnNGb3JFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgLy8gR2V0IHRoZSBgRHJvcHpvbmUub3B0aW9ucy5lbGVtZW50SWRgIGZvciB0aGlzIGVsZW1lbnQgaWYgaXQgZXhpc3RzXG4gIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpKSB7XG4gICAgcmV0dXJuIERyb3B6b25lLm9wdGlvbnNbY2FtZWxpemUoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn07IC8vIEhvbGRzIGEgbGlzdCBvZiBhbGwgZHJvcHpvbmUgaW5zdGFuY2VzXG5cblxuRHJvcHpvbmUuaW5zdGFuY2VzID0gW107IC8vIFJldHVybnMgdGhlIGRyb3B6b25lIGZvciBnaXZlbiBlbGVtZW50IGlmIGFueVxuXG5Ecm9wem9uZS5mb3JFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoKGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQuZHJvcHpvbmUgOiB1bmRlZmluZWQpID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBEcm9wem9uZSBmb3VuZCBmb3IgZ2l2ZW4gZWxlbWVudC4gVGhpcyBpcyBwcm9iYWJseSBiZWNhdXNlIHlvdSdyZSB0cnlpbmcgdG8gYWNjZXNzIGl0IGJlZm9yZSBEcm9wem9uZSBoYWQgdGhlIHRpbWUgdG8gaW5pdGlhbGl6ZS4gVXNlIHRoZSBgaW5pdGAgb3B0aW9uIHRvIHNldHVwIGFueSBhZGRpdGlvbmFsIG9ic2VydmVycyBvbiB5b3VyIERyb3B6b25lLlwiKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50LmRyb3B6b25lO1xufTsgLy8gU2V0IHRvIGZhbHNlIGlmIHlvdSBkb24ndCB3YW50IERyb3B6b25lIHRvIGF1dG9tYXRpY2FsbHkgZmluZCBhbmQgYXR0YWNoIHRvIC5kcm9wem9uZSBlbGVtZW50cy5cblxuXG5Ecm9wem9uZS5hdXRvRGlzY292ZXIgPSB0cnVlOyAvLyBMb29rcyBmb3IgYWxsIC5kcm9wem9uZSBlbGVtZW50cyBhbmQgY3JlYXRlcyBhIGRyb3B6b25lIGZvciB0aGVtXG5cbkRyb3B6b25lLmRpc2NvdmVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZHJvcHpvbmVzO1xuXG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgZHJvcHpvbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kcm9wem9uZVwiKTtcbiAgfSBlbHNlIHtcbiAgICBkcm9wem9uZXMgPSBbXTsgLy8gSUUgOihcblxuICAgIHZhciBjaGVja0VsZW1lbnRzID0gZnVuY3Rpb24gY2hlY2tFbGVtZW50cyhlbGVtZW50cykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3IyMCA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZWxlbWVudHMsIHRydWUpLFxuICAgICAgICAgICAgX3N0ZXAyMDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMjAucygpOyAhKF9zdGVwMjAgPSBfaXRlcmF0b3IyMC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBfc3RlcDIwLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoLyhefCApZHJvcHpvbmUoJHwgKS8udGVzdChlbC5jbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRyb3B6b25lcy5wdXNoKGVsKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMjAuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjIwLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KCk7XG4gICAgfTtcblxuICAgIGNoZWNrRWxlbWVudHMoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikpO1xuICAgIGNoZWNrRWxlbWVudHMoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJmb3JtXCIpKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgdmFyIF9pdGVyYXRvcjIxID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkcm9wem9uZXMsIHRydWUpLFxuICAgICAgICBfc3RlcDIxO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yMjEucygpOyAhKF9zdGVwMjEgPSBfaXRlcmF0b3IyMS5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBkcm9wem9uZSA9IF9zdGVwMjEudmFsdWU7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgZHJvcHpvbmUgdW5sZXNzIGF1dG8gZGlzY292ZXIgaGFzIGJlZW4gZGlzYWJsZWQgZm9yIHNwZWNpZmljIGVsZW1lbnRcbiAgICAgICAgaWYgKERyb3B6b25lLm9wdGlvbnNGb3JFbGVtZW50KGRyb3B6b25lKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChuZXcgRHJvcHpvbmUoZHJvcHpvbmUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IyMS5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjIxLmYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KCk7XG59OyAvLyBTb21lIGJyb3dzZXJzIHN1cHBvcnQgZHJhZyBhbmQgZHJvZyBmdW5jdGlvbmFsaXR5LCBidXQgbm90IGNvcnJlY3RseS5cbi8vXG4vLyBTbyBJIGNyZWF0ZWQgYSBibG9ja2xpc3Qgb2YgdXNlckFnZW50cy4gWWVzLCB5ZXMuIEJyb3dzZXIgc25pZmZpbmcsIEkga25vdy5cbi8vIEJ1dCB3aGF0IHRvIGRvIHdoZW4gYnJvd3NlcnMgKnRoZW9yZXRpY2FsbHkqIHN1cHBvcnQgYW4gQVBJLCBidXQgY3Jhc2hcbi8vIHdoZW4gdXNpbmcgaXQuXG4vL1xuLy8gVGhpcyBpcyBhIGxpc3Qgb2YgcmVndWxhciBleHByZXNzaW9ucyB0ZXN0ZWQgYWdhaW5zdCBuYXZpZ2F0b3IudXNlckFnZW50XG4vL1xuLy8gKiogSXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiBicm93c2VyIHRoYXQgKmRvKiBzdXBwb3J0IHRoZSBBUEksIGJ1dFxuLy8gaW5jb3JyZWN0bHkgKipcblxuXG5Ecm9wem9uZS5ibG9ja2VkQnJvd3NlcnMgPSBbLy8gVGhlIG1hYyBvcyBhbmQgd2luZG93cyBwaG9uZSB2ZXJzaW9uIG9mIG9wZXJhIDEyIHNlZW1zIHRvIGhhdmUgYSBwcm9ibGVtIHdpdGggdGhlIEZpbGUgZHJhZyduJ2Ryb3AgQVBJLlxuL29wZXJhLiooTWFjaW50b3NofFdpbmRvd3MgUGhvbmUpLip2ZXJzaW9uXFwvMTIvaV07IC8vIENoZWNrcyBpZiB0aGUgYnJvd3NlciBpcyBzdXBwb3J0ZWRcblxuRHJvcHpvbmUuaXNCcm93c2VyU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2FwYWJsZUJyb3dzZXIgPSB0cnVlO1xuXG4gIGlmICh3aW5kb3cuRmlsZSAmJiB3aW5kb3cuRmlsZVJlYWRlciAmJiB3aW5kb3cuRmlsZUxpc3QgJiYgd2luZG93LkJsb2IgJiYgd2luZG93LkZvcm1EYXRhICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICBpZiAoIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpKSkge1xuICAgICAgY2FwYWJsZUJyb3dzZXIgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKERyb3B6b25lLmJsYWNrbGlzdGVkQnJvd3NlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBTaW5jZSB0aGlzIGhhcyBiZWVuIHJlbmFtZWQsIHRoaXMgbWFrZXMgc3VyZSB3ZSBkb24ndCBicmVhayBvbGRlclxuICAgICAgICAvLyBjb25maWd1cmF0aW9uLlxuICAgICAgICBEcm9wem9uZS5ibG9ja2VkQnJvd3NlcnMgPSBEcm9wem9uZS5ibGFja2xpc3RlZEJyb3dzZXJzO1xuICAgICAgfSAvLyBUaGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgQVBJLCBidXQgbWF5IGJlIGJsb2NrZWQuXG5cblxuICAgICAgdmFyIF9pdGVyYXRvcjIyID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihEcm9wem9uZS5ibG9ja2VkQnJvd3NlcnMsIHRydWUpLFxuICAgICAgICAgIF9zdGVwMjI7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMjIucygpOyAhKF9zdGVwMjIgPSBfaXRlcmF0b3IyMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHJlZ2V4ID0gX3N0ZXAyMi52YWx1ZTtcblxuICAgICAgICAgIGlmIChyZWdleC50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBjYXBhYmxlQnJvd3NlciA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMjIuZigpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjYXBhYmxlQnJvd3NlciA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhcGFibGVCcm93c2VyO1xufTtcblxuRHJvcHpvbmUuZGF0YVVSSXRvQmxvYiA9IGZ1bmN0aW9uIChkYXRhVVJJKSB7XG4gIC8vIGNvbnZlcnQgYmFzZTY0IHRvIHJhdyBiaW5hcnkgZGF0YSBoZWxkIGluIGEgc3RyaW5nXG4gIC8vIGRvZXNuJ3QgaGFuZGxlIFVSTEVuY29kZWQgRGF0YVVSSXMgLSBzZWUgU08gYW5zd2VyICM2ODUwMjc2IGZvciBjb2RlIHRoYXQgZG9lcyB0aGlzXG4gIHZhciBieXRlU3RyaW5nID0gYXRvYihkYXRhVVJJLnNwbGl0KFwiLFwiKVsxXSk7IC8vIHNlcGFyYXRlIG91dCB0aGUgbWltZSBjb21wb25lbnRcblxuICB2YXIgbWltZVN0cmluZyA9IGRhdGFVUkkuc3BsaXQoXCIsXCIpWzBdLnNwbGl0KFwiOlwiKVsxXS5zcGxpdChcIjtcIilbMF07IC8vIHdyaXRlIHRoZSBieXRlcyBvZiB0aGUgc3RyaW5nIHRvIGFuIEFycmF5QnVmZmVyXG5cbiAgdmFyIGFiID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVTdHJpbmcubGVuZ3RoKTtcbiAgdmFyIGlhID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBlbmQgPSBieXRlU3RyaW5nLmxlbmd0aCwgYXNjID0gMCA8PSBlbmQ7IGFzYyA/IGkgPD0gZW5kIDogaSA+PSBlbmQ7IGFzYyA/IGkrKyA6IGktLSkge1xuICAgIGlhW2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICB9IC8vIHdyaXRlIHRoZSBBcnJheUJ1ZmZlciB0byBhIGJsb2JcblxuXG4gIHJldHVybiBuZXcgQmxvYihbYWJdLCB7XG4gICAgdHlwZTogbWltZVN0cmluZ1xuICB9KTtcbn07IC8vIFJldHVybnMgYW4gYXJyYXkgd2l0aG91dCB0aGUgcmVqZWN0ZWQgaXRlbVxuXG5cbnZhciB3aXRob3V0ID0gZnVuY3Rpb24gd2l0aG91dChsaXN0LCByZWplY3RlZEl0ZW0pIHtcbiAgcmV0dXJuIGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0gIT09IHJlamVjdGVkSXRlbTtcbiAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0pO1xufTsgLy8gYWJjLWRlZl9naGkgLT4gYWJjRGVmR2hpXG5cblxudmFyIGNhbWVsaXplID0gZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW1xcLV9dKFxcdykvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hdGNoLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn07IC8vIENyZWF0ZXMgYW4gZWxlbWVudCBmcm9tIHN0cmluZ1xuXG5cbkRyb3B6b25lLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkaXYuaW5uZXJIVE1MID0gc3RyaW5nO1xuICByZXR1cm4gZGl2LmNoaWxkTm9kZXNbMF07XG59OyAvLyBUZXN0cyBpZiBnaXZlbiBlbGVtZW50IGlzIGluc2lkZSAob3Igc2ltcGx5IGlzKSB0aGUgY29udGFpbmVyXG5cblxuRHJvcHpvbmUuZWxlbWVudEluc2lkZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgaWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIENvZmZlZXNjcmlwdCBkb2Vzbid0IHN1cHBvcnQgZG8vd2hpbGUgbG9vcHNcblxuXG4gIHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuRHJvcHpvbmUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uIChlbCwgbmFtZSkge1xuICB2YXIgZWxlbWVudDtcblxuICBpZiAodHlwZW9mIGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICB9IGVsc2UgaWYgKGVsLm5vZGVUeXBlICE9IG51bGwpIHtcbiAgICBlbGVtZW50ID0gZWw7XG4gIH1cblxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBgXCIuY29uY2F0KG5hbWUsIFwiYCBvcHRpb24gcHJvdmlkZWQuIFBsZWFzZSBwcm92aWRlIGEgQ1NTIHNlbGVjdG9yIG9yIGEgcGxhaW4gSFRNTCBlbGVtZW50LlwiKSk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbkRyb3B6b25lLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKGVscywgbmFtZSkge1xuICB2YXIgZWwsIGVsZW1lbnRzO1xuXG4gIGlmIChlbHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGVsZW1lbnRzID0gW107XG5cbiAgICB0cnkge1xuICAgICAgdmFyIF9pdGVyYXRvcjIzID0gZHJvcHpvbmVfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlbHMsIHRydWUpLFxuICAgICAgICAgIF9zdGVwMjM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMjMucygpOyAhKF9zdGVwMjMgPSBfaXRlcmF0b3IyMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgZWwgPSBfc3RlcDIzLnZhbHVlO1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5nZXRFbGVtZW50KGVsLCBuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyMy5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyMy5mKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZWxlbWVudHMgPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZWxzID09PSBcInN0cmluZ1wiKSB7XG4gICAgZWxlbWVudHMgPSBbXTtcblxuICAgIHZhciBfaXRlcmF0b3IyNCA9IGRyb3B6b25lX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbHMpLCB0cnVlKSxcbiAgICAgICAgX3N0ZXAyNDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjI0LnMoKTsgIShfc3RlcDI0ID0gX2l0ZXJhdG9yMjQubigpKS5kb25lOykge1xuICAgICAgICBlbCA9IF9zdGVwMjQudmFsdWU7XG4gICAgICAgIGVsZW1lbnRzLnB1c2goZWwpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMjQuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IyNC5mKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGVscy5ub2RlVHlwZSAhPSBudWxsKSB7XG4gICAgZWxlbWVudHMgPSBbZWxzXTtcbiAgfVxuXG4gIGlmIChlbGVtZW50cyA9PSBudWxsIHx8ICFlbGVtZW50cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGBcIi5jb25jYXQobmFtZSwgXCJgIG9wdGlvbiBwcm92aWRlZC4gUGxlYXNlIHByb3ZpZGUgYSBDU1Mgc2VsZWN0b3IsIGEgcGxhaW4gSFRNTCBlbGVtZW50IG9yIGEgbGlzdCBvZiB0aG9zZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufTsgLy8gQXNrcyB0aGUgdXNlciB0aGUgcXVlc3Rpb24gYW5kIGNhbGxzIGFjY2VwdGVkIG9yIHJlamVjdGVkIGFjY29yZGluZ2x5XG4vL1xuLy8gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24ganVzdCB1c2VzIGB3aW5kb3cuY29uZmlybWAgYW5kIHRoZW4gY2FsbHMgdGhlXG4vLyBhcHByb3ByaWF0ZSBjYWxsYmFjay5cblxuXG5Ecm9wem9uZS5jb25maXJtID0gZnVuY3Rpb24gKHF1ZXN0aW9uLCBhY2NlcHRlZCwgcmVqZWN0ZWQpIHtcbiAgaWYgKHdpbmRvdy5jb25maXJtKHF1ZXN0aW9uKSkge1xuICAgIHJldHVybiBhY2NlcHRlZCgpO1xuICB9IGVsc2UgaWYgKHJlamVjdGVkICE9IG51bGwpIHtcbiAgICByZXR1cm4gcmVqZWN0ZWQoKTtcbiAgfVxufTsgLy8gVmFsaWRhdGVzIHRoZSBtaW1lIHR5cGUgbGlrZSB0aGlzOlxuLy9cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9FbGVtZW50L2lucHV0I2F0dHItYWNjZXB0XG5cblxuRHJvcHpvbmUuaXNWYWxpZEZpbGUgPSBmdW5jdGlvbiAoZmlsZSwgYWNjZXB0ZWRGaWxlcykge1xuICBpZiAoIWFjY2VwdGVkRmlsZXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiB0aGVyZSBhcmUgbm8gYWNjZXB0ZWQgbWltZSB0eXBlcywgaXQncyBPS1xuXG5cbiAgYWNjZXB0ZWRGaWxlcyA9IGFjY2VwdGVkRmlsZXMuc3BsaXQoXCIsXCIpO1xuICB2YXIgbWltZVR5cGUgPSBmaWxlLnR5cGU7XG4gIHZhciBiYXNlTWltZVR5cGUgPSBtaW1lVHlwZS5yZXBsYWNlKC9cXC8uKiQvLCBcIlwiKTtcblxuICB2YXIgX2l0ZXJhdG9yMjUgPSBkcm9wem9uZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGFjY2VwdGVkRmlsZXMsIHRydWUpLFxuICAgICAgX3N0ZXAyNTtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yMjUucygpOyAhKF9zdGVwMjUgPSBfaXRlcmF0b3IyNS5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgdmFsaWRUeXBlID0gX3N0ZXAyNS52YWx1ZTtcbiAgICAgIHZhbGlkVHlwZSA9IHZhbGlkVHlwZS50cmltKCk7XG5cbiAgICAgIGlmICh2YWxpZFR5cGUuY2hhckF0KDApID09PSBcIi5cIikge1xuICAgICAgICBpZiAoZmlsZS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWxpZFR5cGUudG9Mb3dlckNhc2UoKSwgZmlsZS5uYW1lLmxlbmd0aCAtIHZhbGlkVHlwZS5sZW5ndGgpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKC9cXC9cXCokLy50ZXN0KHZhbGlkVHlwZSkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBzb21ldGhpbmcgbGlrZSBhIGltYWdlLyogbWltZSB0eXBlXG4gICAgICAgIGlmIChiYXNlTWltZVR5cGUgPT09IHZhbGlkVHlwZS5yZXBsYWNlKC9cXC8uKiQvLCBcIlwiKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobWltZVR5cGUgPT09IHZhbGlkVHlwZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IyNS5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yMjUuZigpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTsgLy8gQXVnbWVudCBqUXVlcnlcblxuXG5pZiAodHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkgIT09IG51bGwpIHtcbiAgalF1ZXJ5LmZuLmRyb3B6b25lID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgRHJvcHpvbmUodGhpcywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG59IC8vIERyb3B6b25lIGZpbGUgc3RhdHVzIGNvZGVzXG5cblxuRHJvcHpvbmUuQURERUQgPSBcImFkZGVkXCI7XG5Ecm9wem9uZS5RVUVVRUQgPSBcInF1ZXVlZFwiOyAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIE5vdywgaWYgYSBmaWxlIGlzIGFjY2VwdGVkLCBpdCdzIGVpdGhlciBxdWV1ZWRcbi8vIG9yIHVwbG9hZGluZy5cblxuRHJvcHpvbmUuQUNDRVBURUQgPSBEcm9wem9uZS5RVUVVRUQ7XG5Ecm9wem9uZS5VUExPQURJTkcgPSBcInVwbG9hZGluZ1wiO1xuRHJvcHpvbmUuUFJPQ0VTU0lORyA9IERyb3B6b25lLlVQTE9BRElORzsgLy8gYWxpYXNcblxuRHJvcHpvbmUuQ0FOQ0VMRUQgPSBcImNhbmNlbGVkXCI7XG5Ecm9wem9uZS5FUlJPUiA9IFwiZXJyb3JcIjtcbkRyb3B6b25lLlNVQ0NFU1MgPSBcInN1Y2Nlc3NcIjtcbi8qXG5cbiBCdWdmaXggZm9yIGlPUyA2IGFuZCA3XG4gU291cmNlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExOTI5MDk5L2h0bWw1LWNhbnZhcy1kcmF3aW1hZ2UtcmF0aW8tYnVnLWlvc1xuIGJhc2VkIG9uIHRoZSB3b3JrIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9zdG9taXRhL2lvcy1pbWFnZWZpbGUtbWVnYXBpeGVsXG5cbiAqL1xuLy8gRGV0ZWN0aW5nIHZlcnRpY2FsIHNxdWFzaCBpbiBsb2FkZWQgaW1hZ2UuXG4vLyBGaXhlcyBhIGJ1ZyB3aGljaCBzcXVhc2ggaW1hZ2UgdmVydGljYWxseSB3aGlsZSBkcmF3aW5nIGludG8gY2FudmFzIGZvciBzb21lIGltYWdlcy5cbi8vIFRoaXMgaXMgYSBidWcgaW4gaU9TNiBkZXZpY2VzLiBUaGlzIGZ1bmN0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3N0b21pdGEvaW9zLWltYWdlZmlsZS1tZWdhcGl4ZWxcblxudmFyIGRldGVjdFZlcnRpY2FsU3F1YXNoID0gZnVuY3Rpb24gZGV0ZWN0VmVydGljYWxTcXVhc2goaW1nKSB7XG4gIHZhciBpdyA9IGltZy5uYXR1cmFsV2lkdGg7XG4gIHZhciBpaCA9IGltZy5uYXR1cmFsSGVpZ2h0O1xuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgY2FudmFzLndpZHRoID0gMTtcbiAgY2FudmFzLmhlaWdodCA9IGloO1xuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xuXG4gIHZhciBfY3R4JGdldEltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMSwgMCwgMSwgaWgpLFxuICAgICAgZGF0YSA9IF9jdHgkZ2V0SW1hZ2VEYXRhLmRhdGE7IC8vIHNlYXJjaCBpbWFnZSBlZGdlIHBpeGVsIHBvc2l0aW9uIGluIGNhc2UgaXQgaXMgc3F1YXNoZWQgdmVydGljYWxseS5cblxuXG4gIHZhciBzeSA9IDA7XG4gIHZhciBleSA9IGloO1xuICB2YXIgcHkgPSBpaDtcblxuICB3aGlsZSAocHkgPiBzeSkge1xuICAgIHZhciBhbHBoYSA9IGRhdGFbKHB5IC0gMSkgKiA0ICsgM107XG5cbiAgICBpZiAoYWxwaGEgPT09IDApIHtcbiAgICAgIGV5ID0gcHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN5ID0gcHk7XG4gICAgfVxuXG4gICAgcHkgPSBleSArIHN5ID4+IDE7XG4gIH1cblxuICB2YXIgcmF0aW8gPSBweSAvIGloO1xuXG4gIGlmIChyYXRpbyA9PT0gMCkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByYXRpbztcbiAgfVxufTsgLy8gQSByZXBsYWNlbWVudCBmb3IgY29udGV4dC5kcmF3SW1hZ2Vcbi8vIChhcmdzIGFyZSBmb3Igc291cmNlIGFuZCBkZXN0aW5hdGlvbikuXG5cblxudmFyIGRyYXdJbWFnZUlPU0ZpeCA9IGZ1bmN0aW9uIGRyYXdJbWFnZUlPU0ZpeChjdHgsIGltZywgc3gsIHN5LCBzdywgc2gsIGR4LCBkeSwgZHcsIGRoKSB7XG4gIHZhciB2ZXJ0U3F1YXNoUmF0aW8gPSBkZXRlY3RWZXJ0aWNhbFNxdWFzaChpbWcpO1xuICByZXR1cm4gY3R4LmRyYXdJbWFnZShpbWcsIHN4LCBzeSwgc3csIHNoLCBkeCwgZHksIGR3LCBkaCAvIHZlcnRTcXVhc2hSYXRpbyk7XG59OyAvLyBCYXNlZCBvbiBNaW5pZnlKcGVnXG4vLyBTb3VyY2U6IGh0dHA6Ly93d3cucGVycnkuY3ovZmlsZXMvRXhpZlJlc3RvcmVyLmpzXG4vLyBodHRwOi8vZWxpY29uLmJsb2c1Ny5mYzIuY29tL2Jsb2ctZW50cnktMjA2Lmh0bWxcblxuXG52YXIgRXhpZlJlc3RvcmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFeGlmUmVzdG9yZSgpIHtcbiAgICBkcm9wem9uZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeGlmUmVzdG9yZSk7XG4gIH1cblxuICBkcm9wem9uZV9jcmVhdGVDbGFzcyhFeGlmUmVzdG9yZSwgbnVsbCwgW3tcbiAgICBrZXk6IFwiaW5pdENsYXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRDbGFzcygpIHtcbiAgICAgIHRoaXMuS0VZX1NUUiA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW5jb2RlNjRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jb2RlNjQoaW5wdXQpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgICAgdmFyIGNocjEgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgY2hyMiA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBjaHIzID0gXCJcIjtcbiAgICAgIHZhciBlbmMxID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGVuYzIgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgZW5jMyA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBlbmM0ID0gXCJcIjtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY2hyMSA9IGlucHV0W2krK107XG4gICAgICAgIGNocjIgPSBpbnB1dFtpKytdO1xuICAgICAgICBjaHIzID0gaW5wdXRbaSsrXTtcbiAgICAgICAgZW5jMSA9IGNocjEgPj4gMjtcbiAgICAgICAgZW5jMiA9IChjaHIxICYgMykgPDwgNCB8IGNocjIgPj4gNDtcbiAgICAgICAgZW5jMyA9IChjaHIyICYgMTUpIDw8IDIgfCBjaHIzID4+IDY7XG4gICAgICAgIGVuYzQgPSBjaHIzICYgNjM7XG5cbiAgICAgICAgaWYgKGlzTmFOKGNocjIpKSB7XG4gICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgfSBlbHNlIGlmIChpc05hTihjaHIzKSkge1xuICAgICAgICAgIGVuYzQgPSA2NDtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCA9IG91dHB1dCArIHRoaXMuS0VZX1NUUi5jaGFyQXQoZW5jMSkgKyB0aGlzLktFWV9TVFIuY2hhckF0KGVuYzIpICsgdGhpcy5LRVlfU1RSLmNoYXJBdChlbmMzKSArIHRoaXMuS0VZX1NUUi5jaGFyQXQoZW5jNCk7XG4gICAgICAgIGNocjEgPSBjaHIyID0gY2hyMyA9IFwiXCI7XG4gICAgICAgIGVuYzEgPSBlbmMyID0gZW5jMyA9IGVuYzQgPSBcIlwiO1xuXG4gICAgICAgIGlmICghKGkgPCBpbnB1dC5sZW5ndGgpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzdG9yZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlKG9yaWdGaWxlQmFzZTY0LCByZXNpemVkRmlsZUJhc2U2NCkge1xuICAgICAgaWYgKCFvcmlnRmlsZUJhc2U2NC5tYXRjaChcImRhdGE6aW1hZ2UvanBlZztiYXNlNjQsXCIpKSB7XG4gICAgICAgIHJldHVybiByZXNpemVkRmlsZUJhc2U2NDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJhd0ltYWdlID0gdGhpcy5kZWNvZGU2NChvcmlnRmlsZUJhc2U2NC5yZXBsYWNlKFwiZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCxcIiwgXCJcIikpO1xuICAgICAgdmFyIHNlZ21lbnRzID0gdGhpcy5zbGljZTJTZWdtZW50cyhyYXdJbWFnZSk7XG4gICAgICB2YXIgaW1hZ2UgPSB0aGlzLmV4aWZNYW5pcHVsYXRpb24ocmVzaXplZEZpbGVCYXNlNjQsIHNlZ21lbnRzKTtcbiAgICAgIHJldHVybiBcImRhdGE6aW1hZ2UvanBlZztiYXNlNjQsXCIuY29uY2F0KHRoaXMuZW5jb2RlNjQoaW1hZ2UpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXhpZk1hbmlwdWxhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGlmTWFuaXB1bGF0aW9uKHJlc2l6ZWRGaWxlQmFzZTY0LCBzZWdtZW50cykge1xuICAgICAgdmFyIGV4aWZBcnJheSA9IHRoaXMuZ2V0RXhpZkFycmF5KHNlZ21lbnRzKTtcbiAgICAgIHZhciBuZXdJbWFnZUFycmF5ID0gdGhpcy5pbnNlcnRFeGlmKHJlc2l6ZWRGaWxlQmFzZTY0LCBleGlmQXJyYXkpO1xuICAgICAgdmFyIGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShuZXdJbWFnZUFycmF5KTtcbiAgICAgIHJldHVybiBhQnVmZmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFeGlmQXJyYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXhpZkFycmF5KHNlZ21lbnRzKSB7XG4gICAgICB2YXIgc2VnID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIHggPSAwO1xuXG4gICAgICB3aGlsZSAoeCA8IHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICBzZWcgPSBzZWdtZW50c1t4XTtcblxuICAgICAgICBpZiAoc2VnWzBdID09PSAyNTUgJiBzZWdbMV0gPT09IDIyNSkge1xuICAgICAgICAgIHJldHVybiBzZWc7XG4gICAgICAgIH1cblxuICAgICAgICB4Kys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zZXJ0RXhpZlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRFeGlmKHJlc2l6ZWRGaWxlQmFzZTY0LCBleGlmQXJyYXkpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSByZXNpemVkRmlsZUJhc2U2NC5yZXBsYWNlKFwiZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCxcIiwgXCJcIik7XG4gICAgICB2YXIgYnVmID0gdGhpcy5kZWNvZGU2NChpbWFnZURhdGEpO1xuICAgICAgdmFyIHNlcGFyYXRlUG9pbnQgPSBidWYuaW5kZXhPZigyNTUsIDMpO1xuICAgICAgdmFyIG1hZSA9IGJ1Zi5zbGljZSgwLCBzZXBhcmF0ZVBvaW50KTtcbiAgICAgIHZhciBhdG8gPSBidWYuc2xpY2Uoc2VwYXJhdGVQb2ludCk7XG4gICAgICB2YXIgYXJyYXkgPSBtYWU7XG4gICAgICBhcnJheSA9IGFycmF5LmNvbmNhdChleGlmQXJyYXkpO1xuICAgICAgYXJyYXkgPSBhcnJheS5jb25jYXQoYXRvKTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2xpY2UyU2VnbWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2xpY2UyU2VnbWVudHMocmF3SW1hZ2VBcnJheSkge1xuICAgICAgdmFyIGhlYWQgPSAwO1xuICAgICAgdmFyIHNlZ21lbnRzID0gW107XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBsZW5ndGg7XG5cbiAgICAgICAgaWYgKHJhd0ltYWdlQXJyYXlbaGVhZF0gPT09IDI1NSAmIHJhd0ltYWdlQXJyYXlbaGVhZCArIDFdID09PSAyMTgpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYXdJbWFnZUFycmF5W2hlYWRdID09PSAyNTUgJiByYXdJbWFnZUFycmF5W2hlYWQgKyAxXSA9PT0gMjE2KSB7XG4gICAgICAgICAgaGVhZCArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbmd0aCA9IHJhd0ltYWdlQXJyYXlbaGVhZCArIDJdICogMjU2ICsgcmF3SW1hZ2VBcnJheVtoZWFkICsgM107XG4gICAgICAgICAgdmFyIGVuZFBvaW50ID0gaGVhZCArIGxlbmd0aCArIDI7XG4gICAgICAgICAgdmFyIHNlZyA9IHJhd0ltYWdlQXJyYXkuc2xpY2UoaGVhZCwgZW5kUG9pbnQpO1xuICAgICAgICAgIHNlZ21lbnRzLnB1c2goc2VnKTtcbiAgICAgICAgICBoZWFkID0gZW5kUG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGVhZCA+IHJhd0ltYWdlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWNvZGU2NFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNvZGU2NChpbnB1dCkge1xuICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICB2YXIgY2hyMSA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBjaHIyID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGNocjMgPSBcIlwiO1xuICAgICAgdmFyIGVuYzEgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgZW5jMiA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciBlbmMzID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGVuYzQgPSBcIlwiO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGJ1ZiA9IFtdOyAvLyByZW1vdmUgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IEEtWiwgYS16LCAwLTksICssIC8sIG9yID1cblxuICAgICAgdmFyIGJhc2U2NHRlc3QgPSAvW15BLVphLXowLTlcXCtcXC9cXD1dL2c7XG5cbiAgICAgIGlmIChiYXNlNjR0ZXN0LmV4ZWMoaW5wdXQpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoZXJlIHdlcmUgaW52YWxpZCBiYXNlNjQgY2hhcmFjdGVycyBpbiB0aGUgaW5wdXQgdGV4dC5cXG5WYWxpZCBiYXNlNjQgY2hhcmFjdGVycyBhcmUgQS1aLCBhLXosIDAtOSwgJysnLCAnLycsYW5kICc9J1xcbkV4cGVjdCBlcnJvcnMgaW4gZGVjb2RpbmcuXCIpO1xuICAgICAgfVxuXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLCBcIlwiKTtcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgZW5jMSA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgZW5jMiA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgZW5jMyA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgZW5jNCA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgY2hyMSA9IGVuYzEgPDwgMiB8IGVuYzIgPj4gNDtcbiAgICAgICAgY2hyMiA9IChlbmMyICYgMTUpIDw8IDQgfCBlbmMzID4+IDI7XG4gICAgICAgIGNocjMgPSAoZW5jMyAmIDMpIDw8IDYgfCBlbmM0O1xuICAgICAgICBidWYucHVzaChjaHIxKTtcblxuICAgICAgICBpZiAoZW5jMyAhPT0gNjQpIHtcbiAgICAgICAgICBidWYucHVzaChjaHIyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmM0ICE9PSA2NCkge1xuICAgICAgICAgIGJ1Zi5wdXNoKGNocjMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hyMSA9IGNocjIgPSBjaHIzID0gXCJcIjtcbiAgICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9IFwiXCI7XG5cbiAgICAgICAgaWYgKCEoaSA8IGlucHV0Lmxlbmd0aCkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFeGlmUmVzdG9yZTtcbn0oKTtcblxuRXhpZlJlc3RvcmUuaW5pdENsYXNzKCk7XG4vKlxuICogY29udGVudGxvYWRlZC5qc1xuICpcbiAqIEF1dGhvcjogRGllZ28gUGVyaW5pIChkaWVnby5wZXJpbmkgYXQgZ21haWwuY29tKVxuICogU3VtbWFyeTogY3Jvc3MtYnJvd3NlciB3cmFwcGVyIGZvciBET01Db250ZW50TG9hZGVkXG4gKiBVcGRhdGVkOiAyMDEwMTAyMFxuICogTGljZW5zZTogTUlUXG4gKiBWZXJzaW9uOiAxLjJcbiAqXG4gKiBVUkw6XG4gKiBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vQ29udGVudExvYWRlZC9cbiAqIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9Db250ZW50TG9hZGVkL01JVC1MSUNFTlNFXG4gKi9cbi8vIEB3aW4gd2luZG93IHJlZmVyZW5jZVxuLy8gQGZuIGZ1bmN0aW9uIHJlZmVyZW5jZVxuXG52YXIgY29udGVudExvYWRlZCA9IGZ1bmN0aW9uIGNvbnRlbnRMb2FkZWQod2luLCBmbikge1xuICB2YXIgZG9uZSA9IGZhbHNlO1xuICB2YXIgdG9wID0gdHJ1ZTtcbiAgdmFyIGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgdmFyIHJvb3QgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgYWRkID0gZG9jLmFkZEV2ZW50TGlzdGVuZXIgPyBcImFkZEV2ZW50TGlzdGVuZXJcIiA6IFwiYXR0YWNoRXZlbnRcIjtcbiAgdmFyIHJlbSA9IGRvYy5hZGRFdmVudExpc3RlbmVyID8gXCJyZW1vdmVFdmVudExpc3RlbmVyXCIgOiBcImRldGFjaEV2ZW50XCI7XG4gIHZhciBwcmUgPSBkb2MuYWRkRXZlbnRMaXN0ZW5lciA/IFwiXCIgOiBcIm9uXCI7XG5cbiAgdmFyIGluaXQgPSBmdW5jdGlvbiBpbml0KGUpIHtcbiAgICBpZiAoZS50eXBlID09PSBcInJlYWR5c3RhdGVjaGFuZ2VcIiAmJiBkb2MucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgKGUudHlwZSA9PT0gXCJsb2FkXCIgPyB3aW4gOiBkb2MpW3JlbV0ocHJlICsgZS50eXBlLCBpbml0LCBmYWxzZSk7XG5cbiAgICBpZiAoIWRvbmUgJiYgKGRvbmUgPSB0cnVlKSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwod2luLCBlLnR5cGUgfHwgZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwb2xsID0gZnVuY3Rpb24gcG9sbCgpIHtcbiAgICB0cnkge1xuICAgICAgcm9vdC5kb1Njcm9sbChcImxlZnRcIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0VGltZW91dChwb2xsLCA1MCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXQoXCJwb2xsXCIpO1xuICB9O1xuXG4gIGlmIChkb2MucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgaWYgKGRvYy5jcmVhdGVFdmVudE9iamVjdCAmJiByb290LmRvU2Nyb2xsKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0b3AgPSAhd2luLmZyYW1lRWxlbWVudDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuXG4gICAgICBpZiAodG9wKSB7XG4gICAgICAgIHBvbGwoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2NbYWRkXShwcmUgKyBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgaW5pdCwgZmFsc2UpO1xuICAgIGRvY1thZGRdKHByZSArIFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBpbml0LCBmYWxzZSk7XG4gICAgcmV0dXJuIHdpblthZGRdKHByZSArIFwibG9hZFwiLCBpbml0LCBmYWxzZSk7XG4gIH1cbn07IC8vIEFzIGEgc2luZ2xlIGZ1bmN0aW9uIHRvIGJlIGFibGUgdG8gd3JpdGUgdGVzdHMuXG5cblxuRHJvcHpvbmUuX2F1dG9EaXNjb3ZlckZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xuICBpZiAoRHJvcHpvbmUuYXV0b0Rpc2NvdmVyKSB7XG4gICAgcmV0dXJuIERyb3B6b25lLmRpc2NvdmVyKCk7XG4gIH1cbn07XG5cbmNvbnRlbnRMb2FkZWQod2luZG93LCBEcm9wem9uZS5fYXV0b0Rpc2NvdmVyRnVuY3Rpb24pO1xuXG5mdW5jdGlvbiBfX2d1YXJkX18odmFsdWUsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiICYmIHZhbHVlICE9PSBudWxsID8gdHJhbnNmb3JtKHZhbHVlKSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX19ndWFyZE1ldGhvZF9fKG9iaiwgbWV0aG9kTmFtZSwgdHJhbnNmb3JtKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSBcInVuZGVmaW5lZFwiICYmIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtKG9iaiwgbWV0aG9kTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3Rvb2wvZHJvcHpvbmUuZGlzdC5qc1xuIC8vLyBNYWtlIERyb3B6b25lIGEgZ2xvYmFsIHZhcmlhYmxlLlxuXG53aW5kb3cuRHJvcHpvbmUgPSBEcm9wem9uZTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGRyb3B6b25lX2Rpc3QgPSAoRHJvcHpvbmUpO1xuXG59KCk7XG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfZXhwb3J0c19fO1xuLyoqKioqKi8gfSkoKVxuO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIi8vIFRoaXMgZmlsZSBpcyBkZXByZWNhdGVkIGluIDEuMTIuMCB0byBiZSByZW1vdmVkIGluIDEuMTRcbiggZnVuY3Rpb24oKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuZGVmaW5lKCBbXG5cdFwianF1ZXJ5XCIsXG5cdFwiLi9kYXRhXCIsXG5cdFwiLi9kaXNhYmxlLXNlbGVjdGlvblwiLFxuXHRcIi4vZm9jdXNhYmxlXCIsXG5cdFwiLi9mb3JtXCIsXG5cdFwiLi9pZVwiLFxuXHRcIi4va2V5Y29kZVwiLFxuXHRcIi4vbGFiZWxzXCIsXG5cdFwiLi9qcXVlcnktcGF0Y2guanNcIixcblx0XCIuL3BsdWdpblwiLFxuXHRcIi4vc2FmZS1hY3RpdmUtZWxlbWVudFwiLFxuXHRcIi4vc2FmZS1ibHVyXCIsXG5cdFwiLi9zY3JvbGwtcGFyZW50XCIsXG5cdFwiLi90YWJiYWJsZVwiLFxuXHRcIi4vdW5pcXVlLWlkXCIsXG5cdFwiLi92ZXJzaW9uXCJcbl0gKTtcbn0gKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBrZyA9IHJlcXVpcmUoJy4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG52YXIgY3VycmVudFZlckFyciA9IHBrZy52ZXJzaW9uLnNwbGl0KCcuJyk7XG5cbi8qKlxuICogQ29tcGFyZSBwYWNrYWdlIHZlcnNpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSB0aGFuVmVyc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT2xkZXJWZXJzaW9uKHZlcnNpb24sIHRoYW5WZXJzaW9uKSB7XG4gIHZhciBwa2dWZXJzaW9uQXJyID0gdGhhblZlcnNpb24gPyB0aGFuVmVyc2lvbi5zcGxpdCgnLicpIDogY3VycmVudFZlckFycjtcbiAgdmFyIGRlc3RWZXIgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgaWYgKHBrZ1ZlcnNpb25BcnJbaV0gPiBkZXN0VmVyW2ldKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHBrZ1ZlcnNpb25BcnJbaV0gPCBkZXN0VmVyW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICB2YXIgaXNEZXByZWNhdGVkID0gdmVyc2lvbiAmJiBpc09sZGVyVmVyc2lvbih2ZXJzaW9uKTtcblxuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgcGtnLnZlcnNpb24gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQgaW4gJyArIHZlcnNpb24pKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZXByZWNhdGVkICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc09sZGVyVmVyc2lvbjogaXNPbGRlclZlcnNpb24sXG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIvKiFcbiAqIGpRdWVyeSBVSSBNb3VzZSAxLjEzLjJcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogTW91c2Vcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBBYnN0cmFjdHMgbW91c2UtYmFzZWQgaW50ZXJhY3Rpb25zIHRvIGFzc2lzdCBpbiBjcmVhdGluZyBjZXJ0YWluIHdpZGdldHMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vbW91c2UvXG5cbiggZnVuY3Rpb24oIGZhY3RvcnkgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKCBbXG5cdFx0XHRcImpxdWVyeVwiLFxuXHRcdFx0XCIuLi9pZVwiLFxuXHRcdFx0XCIuLi92ZXJzaW9uXCIsXG5cdFx0XHRcIi4uL3dpZGdldFwiXG5cdFx0XSwgZmFjdG9yeSApO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0gKSggZnVuY3Rpb24oICQgKSB7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG1vdXNlSGFuZGxlZCA9IGZhbHNlO1xuJCggZG9jdW1lbnQgKS5vbiggXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKCkge1xuXHRtb3VzZUhhbmRsZWQgPSBmYWxzZTtcbn0gKTtcblxucmV0dXJuICQud2lkZ2V0KCBcInVpLm1vdXNlXCIsIHtcblx0dmVyc2lvbjogXCIxLjEzLjJcIixcblx0b3B0aW9uczoge1xuXHRcdGNhbmNlbDogXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0LCBvcHRpb25cIixcblx0XHRkaXN0YW5jZTogMSxcblx0XHRkZWxheTogMFxuXHR9LFxuXHRfbW91c2VJbml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5vbiggXCJtb3VzZWRvd24uXCIgKyB0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIHRoYXQuX21vdXNlRG93biggZXZlbnQgKTtcblx0XHRcdH0gKVxuXHRcdFx0Lm9uKCBcImNsaWNrLlwiICsgdGhpcy53aWRnZXROYW1lLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdHJ1ZSA9PT0gJC5kYXRhKCBldmVudC50YXJnZXQsIHRoYXQud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIgKSApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIGV2ZW50LnRhcmdldCwgdGhhdC53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIiApO1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0dGhpcy5zdGFydGVkID0gZmFsc2U7XG5cdH0sXG5cblx0Ly8gVE9ETzogbWFrZSBzdXJlIGRlc3Ryb3lpbmcgb25lIGluc3RhbmNlIG9mIG1vdXNlIGRvZXNuJ3QgbWVzcyB3aXRoXG5cdC8vIG90aGVyIGluc3RhbmNlcyBvZiBtb3VzZVxuXHRfbW91c2VEZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnQub2ZmKCBcIi5cIiArIHRoaXMud2lkZ2V0TmFtZSApO1xuXHRcdGlmICggdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgKSB7XG5cdFx0XHR0aGlzLmRvY3VtZW50XG5cdFx0XHRcdC5vZmYoIFwibW91c2Vtb3ZlLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSApXG5cdFx0XHRcdC5vZmYoIFwibW91c2V1cC5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9tb3VzZURvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIGRvbid0IGxldCBtb3JlIHRoYW4gb25lIHdpZGdldCBoYW5kbGUgbW91c2VTdGFydFxuXHRcdGlmICggbW91c2VIYW5kbGVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX21vdXNlTW92ZWQgPSBmYWxzZTtcblxuXHRcdC8vIFdlIG1heSBoYXZlIG1pc3NlZCBtb3VzZXVwIChvdXQgb2Ygd2luZG93KVxuXHRcdGlmICggdGhpcy5fbW91c2VTdGFydGVkICkge1xuXHRcdFx0dGhpcy5fbW91c2VVcCggZXZlbnQgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9tb3VzZURvd25FdmVudCA9IGV2ZW50O1xuXG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0YnRuSXNMZWZ0ID0gKCBldmVudC53aGljaCA9PT0gMSApLFxuXG5cdFx0XHQvLyBldmVudC50YXJnZXQubm9kZU5hbWUgd29ya3MgYXJvdW5kIGEgYnVnIGluIElFIDggd2l0aFxuXHRcdFx0Ly8gZGlzYWJsZWQgaW5wdXRzICgjNzYyMClcblx0XHRcdGVsSXNDYW5jZWwgPSAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuY2FuY2VsID09PSBcInN0cmluZ1wiICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA/XG5cdFx0XHRcdCQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIHRoaXMub3B0aW9ucy5jYW5jZWwgKS5sZW5ndGggOiBmYWxzZSApO1xuXHRcdGlmICggIWJ0bklzTGVmdCB8fCBlbElzQ2FuY2VsIHx8ICF0aGlzLl9tb3VzZUNhcHR1cmUoIGV2ZW50ICkgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHR0aGlzLm1vdXNlRGVsYXlNZXQgPSAhdGhpcy5vcHRpb25zLmRlbGF5O1xuXHRcdGlmICggIXRoaXMubW91c2VEZWxheU1ldCApIHtcblx0XHRcdHRoaXMuX21vdXNlRGVsYXlUaW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGF0Lm1vdXNlRGVsYXlNZXQgPSB0cnVlO1xuXHRcdFx0fSwgdGhpcy5vcHRpb25zLmRlbGF5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9tb3VzZURpc3RhbmNlTWV0KCBldmVudCApICYmIHRoaXMuX21vdXNlRGVsYXlNZXQoIGV2ZW50ICkgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZVN0YXJ0ZWQgPSAoIHRoaXMuX21vdXNlU3RhcnQoIGV2ZW50ICkgIT09IGZhbHNlICk7XG5cdFx0XHRpZiAoICF0aGlzLl9tb3VzZVN0YXJ0ZWQgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENsaWNrIGV2ZW50IG1heSBuZXZlciBoYXZlIGZpcmVkIChHZWNrbyAmIE9wZXJhKVxuXHRcdGlmICggdHJ1ZSA9PT0gJC5kYXRhKCBldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIgKSApIHtcblx0XHRcdCQucmVtb3ZlRGF0YSggZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlc2UgZGVsZWdhdGVzIGFyZSByZXF1aXJlZCB0byBrZWVwIGNvbnRleHRcblx0XHR0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHJldHVybiB0aGF0Ll9tb3VzZU1vdmUoIGV2ZW50ICk7XG5cdFx0fTtcblx0XHR0aGlzLl9tb3VzZVVwRGVsZWdhdGUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhhdC5fbW91c2VVcCggZXZlbnQgKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5kb2N1bWVudFxuXHRcdFx0Lm9uKCBcIm1vdXNlbW92ZS5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgKVxuXHRcdFx0Lm9uKCBcIm1vdXNldXAuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSApO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdG1vdXNlSGFuZGxlZCA9IHRydWU7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0X21vdXNlTW92ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gT25seSBjaGVjayBmb3IgbW91c2V1cHMgb3V0c2lkZSB0aGUgZG9jdW1lbnQgaWYgeW91J3ZlIG1vdmVkIGluc2lkZSB0aGUgZG9jdW1lbnRcblx0XHQvLyBhdCBsZWFzdCBvbmNlLiBUaGlzIHByZXZlbnRzIHRoZSBmaXJpbmcgb2YgbW91c2V1cCBpbiB0aGUgY2FzZSBvZiBJRTw5LCB3aGljaCB3aWxsXG5cdFx0Ly8gZmlyZSBhIG1vdXNlbW92ZSBldmVudCBpZiBjb250ZW50IGlzIHBsYWNlZCB1bmRlciB0aGUgY3Vyc29yLiBTZWUgIzc3Nzhcblx0XHQvLyBTdXBwb3J0OiBJRSA8OVxuXHRcdGlmICggdGhpcy5fbW91c2VNb3ZlZCApIHtcblxuXHRcdFx0Ly8gSUUgbW91c2V1cCBjaGVjayAtIG1vdXNldXAgaGFwcGVuZWQgd2hlbiBtb3VzZSB3YXMgb3V0IG9mIHdpbmRvd1xuXHRcdFx0aWYgKCAkLnVpLmllICYmICggIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCA5ICkgJiZcblx0XHRcdFx0XHQhZXZlbnQuYnV0dG9uICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fbW91c2VVcCggZXZlbnQgKTtcblxuXHRcdFx0Ly8gSWZyYW1lIG1vdXNldXAgY2hlY2sgLSBtb3VzZXVwIG9jY3VycmVkIGluIGFub3RoZXIgZG9jdW1lbnRcblx0XHRcdH0gZWxzZSBpZiAoICFldmVudC53aGljaCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD04IC0gOVxuXHRcdFx0XHQvLyBTYWZhcmkgc2V0cyB3aGljaCB0byAwIGlmIHlvdSBwcmVzcyBhbnkgb2YgdGhlIGZvbGxvd2luZyBrZXlzXG5cdFx0XHRcdC8vIGR1cmluZyBhIGRyYWcgKCMxNDQ2MSlcblx0XHRcdFx0aWYgKCBldmVudC5vcmlnaW5hbEV2ZW50LmFsdEtleSB8fCBldmVudC5vcmlnaW5hbEV2ZW50LmN0cmxLZXkgfHxcblx0XHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQubWV0YUtleSB8fCBldmVudC5vcmlnaW5hbEV2ZW50LnNoaWZ0S2V5ICkge1xuXHRcdFx0XHRcdHRoaXMuaWdub3JlTWlzc2luZ1doaWNoID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmICggIXRoaXMuaWdub3JlTWlzc2luZ1doaWNoICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLl9tb3VzZVVwKCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBldmVudC53aGljaCB8fCBldmVudC5idXR0b24gKSB7XG5cdFx0XHR0aGlzLl9tb3VzZU1vdmVkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX21vdXNlU3RhcnRlZCApIHtcblx0XHRcdHRoaXMuX21vdXNlRHJhZyggZXZlbnQgKTtcblx0XHRcdHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fbW91c2VEaXN0YW5jZU1ldCggZXZlbnQgKSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KCBldmVudCApICkge1xuXHRcdFx0dGhpcy5fbW91c2VTdGFydGVkID1cblx0XHRcdFx0KCB0aGlzLl9tb3VzZVN0YXJ0KCB0aGlzLl9tb3VzZURvd25FdmVudCwgZXZlbnQgKSAhPT0gZmFsc2UgKTtcblx0XHRcdGlmICggdGhpcy5fbW91c2VTdGFydGVkICkge1xuXHRcdFx0XHR0aGlzLl9tb3VzZURyYWcoIGV2ZW50ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9tb3VzZVVwKCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiAhdGhpcy5fbW91c2VTdGFydGVkO1xuXHR9LFxuXG5cdF9tb3VzZVVwOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dGhpcy5kb2N1bWVudFxuXHRcdFx0Lm9mZiggXCJtb3VzZW1vdmUuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlIClcblx0XHRcdC5vZmYoIFwibW91c2V1cC5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlICk7XG5cblx0XHRpZiAoIHRoaXMuX21vdXNlU3RhcnRlZCApIHtcblx0XHRcdHRoaXMuX21vdXNlU3RhcnRlZCA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIGV2ZW50LnRhcmdldCA9PT0gdGhpcy5fbW91c2VEb3duRXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0XHQkLmRhdGEoIGV2ZW50LnRhcmdldCwgdGhpcy53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9tb3VzZVN0b3AoIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9tb3VzZURlbGF5VGltZXIgKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRoaXMuX21vdXNlRGVsYXlUaW1lciApO1xuXHRcdFx0ZGVsZXRlIHRoaXMuX21vdXNlRGVsYXlUaW1lcjtcblx0XHR9XG5cblx0XHR0aGlzLmlnbm9yZU1pc3NpbmdXaGljaCA9IGZhbHNlO1xuXHRcdG1vdXNlSGFuZGxlZCA9IGZhbHNlO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdH0sXG5cblx0X21vdXNlRGlzdGFuY2VNZXQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRyZXR1cm4gKCBNYXRoLm1heChcblx0XHRcdFx0TWF0aC5hYnMoIHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VYIC0gZXZlbnQucGFnZVggKSxcblx0XHRcdFx0TWF0aC5hYnMoIHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VZIC0gZXZlbnQucGFnZVkgKVxuXHRcdFx0KSA+PSB0aGlzLm9wdGlvbnMuZGlzdGFuY2Vcblx0XHQpO1xuXHR9LFxuXG5cdF9tb3VzZURlbGF5TWV0OiBmdW5jdGlvbiggLyogZXZlbnQgKi8gKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VEZWxheU1ldDtcblx0fSxcblxuXHQvLyBUaGVzZSBhcmUgcGxhY2Vob2xkZXIgbWV0aG9kcywgdG8gYmUgb3ZlcnJpZGVuIGJ5IGV4dGVuZGluZyBwbHVnaW5cblx0X21vdXNlU3RhcnQ6IGZ1bmN0aW9uKCAvKiBldmVudCAqLyApIHt9LFxuXHRfbW91c2VEcmFnOiBmdW5jdGlvbiggLyogZXZlbnQgKi8gKSB7fSxcblx0X21vdXNlU3RvcDogZnVuY3Rpb24oIC8qIGV2ZW50ICovICkge30sXG5cdF9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKCAvKiBldmVudCAqLyApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSApO1xuXG59ICk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBjb25maWcudHJhbnNpdGlvbmFsICYmIGNvbmZpZy50cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiJdLCJzb3VyY2VSb290IjoiIn0=